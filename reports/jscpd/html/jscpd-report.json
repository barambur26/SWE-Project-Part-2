{
  "statistics": {
    "detectionDate": "2025-10-27T04:02:45.375Z",
    "formats": {
      "markdown": {
        "sources": {
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip-25.3.dist-info/licenses/src/pip/_vendor/idna/LICENSE.md": {
            "lines": 30,
            "tokens": 467,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 58,
            "duplicatedTokens": 921,
            "percentage": 193.33,
            "percentageTokens": 197.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/LICENSE.md": {
            "lines": 30,
            "tokens": 467,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 467,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna-3.11.dist-info/licenses/LICENSE.md": {
            "lines": 30,
            "tokens": 467,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 454,
            "percentage": 93.33,
            "percentageTokens": 97.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/templates/modelcard_template.md": {
            "lines": 198,
            "tokens": 984,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/templates/datasetcard_template.md": {
            "lines": 141,
            "tokens": 641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx-0.28.1.dist-info/licenses/LICENSE.md": {
            "lines": 11,
            "tokens": 450,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 449,
            "percentage": 236.36,
            "percentageTokens": 99.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore-1.0.9.dist-info/licenses/LICENSE.md": {
            "lines": 26,
            "tokens": 455,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 449,
            "percentage": 100,
            "percentageTokens": 98.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black-25.9.0.dist-info/licenses/AUTHORS.md": {
            "lines": 194,
            "tokens": 803,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.pytest_cache/README.md": {
            "lines": 5,
            "tokens": 68,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/README.md": {
            "lines": 105,
            "tokens": 1349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 770,
          "tokens": 6151,
          "sources": 10,
          "clones": 3,
          "duplicatedLines": 84,
          "duplicatedTokens": 1370,
          "percentage": 10.91,
          "percentageTokens": 22.27,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "python": {
        "sources": {
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/packages/backports/weakref_finalize.py": {
            "lines": 154,
            "tokens": 1122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/packages/backports/makefile.py": {
            "lines": 50,
            "tokens": 383,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 313,
            "percentage": 64,
            "percentageTokens": 81.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/_securetransport/low_level.py": {
            "lines": 396,
            "tokens": 2228,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py": {
            "lines": 518,
            "tokens": 3351,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 57,
            "duplicatedTokens": 407,
            "percentage": 11,
            "percentageTokens": 12.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/tool_calls_step_details.py": {
            "lines": 20,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/tool_call_delta_object.py": {
            "lines": 20,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/tool_call_delta.py": {
            "lines": 15,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/tool_call.py": {
            "lines": 14,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/step_retrieve_params.py": {
            "lines": 27,
            "tokens": 95,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/step_list_params.py": {
            "lines": 55,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/run_step_include.py": {
            "lines": 6,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/run_step_delta_message_delta.py": {
            "lines": 19,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/run_step_delta_event.py": {
            "lines": 18,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/run_step_delta.py": {
            "lines": 19,
            "tokens": 136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/run_step.py": {
            "lines": 114,
            "tokens": 450,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/message_creation_step_details.py": {
            "lines": 18,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/function_tool_call_delta.py": {
            "lines": 40,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/function_tool_call.py": {
            "lines": 37,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/file_search_tool_call_delta.py": {
            "lines": 24,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/file_search_tool_call.py": {
            "lines": 77,
            "tokens": 291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/code_interpreter_tool_call_delta.py": {
            "lines": 43,
            "tokens": 231,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/code_interpreter_tool_call.py": {
            "lines": 69,
            "tokens": 271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/code_interpreter_output_image.py": {
            "lines": 25,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/code_interpreter_logs.py": {
            "lines": 18,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/runs/__init__.py": {
            "lines": 23,
            "tokens": 270,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py": {
            "lines": 398,
            "tokens": 2382,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 165,
            "duplicatedTokens": 1647,
            "percentage": 41.46,
            "percentageTokens": 69.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/wait.py": {
            "lines": 151,
            "tokens": 919,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 115,
            "percentage": 9.93,
            "percentageTokens": 12.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/url.py": {
            "lines": 434,
            "tokens": 2979,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 245,
            "percentage": 6.68,
            "percentageTokens": 8.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/timeout.py": {
            "lines": 270,
            "tokens": 957,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py": {
            "lines": 220,
            "tokens": 1590,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 77,
            "duplicatedTokens": 678,
            "percentage": 35,
            "percentageTokens": 42.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py": {
            "lines": 158,
            "tokens": 955,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 321,
            "percentage": 34.18,
            "percentageTokens": 33.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssl_.py": {
            "lines": 503,
            "tokens": 2596,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/retry.py": {
            "lines": 621,
            "tokens": 3032,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 72,
            "duplicatedTokens": 569,
            "percentage": 11.59,
            "percentageTokens": 18.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/response.py": {
            "lines": 106,
            "tokens": 474,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/request.py": {
            "lines": 136,
            "tokens": 575,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 120,
            "percentage": 12.5,
            "percentageTokens": 20.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/queue.py": {
            "lines": 21,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/proxy.py": {
            "lines": 56,
            "tokens": 242,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/connection.py": {
            "lines": 148,
            "tokens": 758,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/__init__.py": {
            "lines": 48,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/socks.py": {
            "lines": 215,
            "tokens": 1082,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 353,
            "percentage": 17.21,
            "percentageTokens": 32.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/securetransport.py": {
            "lines": 919,
            "tokens": 5413,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 126,
            "percentage": 2.07,
            "percentageTokens": 2.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py": {
            "lines": 517,
            "tokens": 3339,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 102,
            "duplicatedTokens": 627,
            "percentage": 19.73,
            "percentageTokens": 18.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/ntlmpool.py": {
            "lines": 129,
            "tokens": 934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/appengine.py": {
            "lines": 313,
            "tokens": 1929,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/_appengine_environ.py": {
            "lines": 35,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/resolvers/resolution.py": {
            "lines": 626,
            "tokens": 4343,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/resolvers/exceptions.py": {
            "lines": 56,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/resolvers/criterion.py": {
            "lines": 47,
            "tokens": 272,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/resolvers/abstract.py": {
            "lines": 46,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/resolvers/__init__.py": {
            "lines": 26,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pyproject_hooks/_in_process/_in_process.py": {
            "lines": 388,
            "tokens": 2273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pyproject_hooks/_in_process/__init__.py": {
            "lines": 20,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/styles/_mapping.py": {
            "lines": 53,
            "tokens": 795,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 795,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/styles/__init__.py": {
            "lines": 60,
            "tokens": 395,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 358,
            "percentage": 80,
            "percentageTokens": 90.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexers/_mapping.py": {
            "lines": 601,
            "tokens": 19402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexers/__init__.py": {
            "lines": 361,
            "tokens": 2350,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 342,
            "duplicatedTokens": 2270,
            "percentage": 94.74,
            "percentageTokens": 96.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatters/_mapping.py": {
            "lines": 22,
            "tokens": 521,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 521,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatters/__init__.py": {
            "lines": 156,
            "tokens": 986,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 138,
            "duplicatedTokens": 920,
            "percentage": 88.46,
            "percentageTokens": 93.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/filters/__init__.py": {
            "lines": 939,
            "tokens": 6764,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 921,
            "duplicatedTokens": 6669,
            "percentage": 98.08,
            "percentageTokens": 98.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/licenses/_spdx.py": {
            "lines": 757,
            "tokens": 13385,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 757,
            "duplicatedTokens": 13385,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/licenses/__init__.py": {
            "lines": 144,
            "tokens": 891,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 108,
            "duplicatedTokens": 798,
            "percentage": 75,
            "percentageTokens": 89.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/caches/redis_cache.py": {
            "lines": 47,
            "tokens": 414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/caches/file_cache.py": {
            "lines": 144,
            "tokens": 1081,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/caches/__init__.py": {
            "lines": 7,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/resolver.py": {
            "lines": 331,
            "tokens": 2134,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 125,
            "percentage": 4.53,
            "percentageTokens": 5.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/requirements.py": {
            "lines": 246,
            "tokens": 2109,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 248,
            "percentage": 9.76,
            "percentageTokens": 11.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/reporter.py": {
            "lines": 97,
            "tokens": 781,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/provider.py": {
            "lines": 284,
            "tokens": 1664,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/found_candidates.py": {
            "lines": 165,
            "tokens": 972,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/factory.py": {
            "lines": 844,
            "tokens": 5993,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/candidates.py": {
            "lines": 590,
            "tokens": 4296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/base.py": {
            "lines": 141,
            "tokens": 1057,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/legacy/resolver.py": {
            "lines": 597,
            "tokens": 3549,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 125,
            "percentage": 2.51,
            "percentageTokens": 3.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/install/wheel.py": {
            "lines": 745,
            "tokens": 5740,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/build/wheel_editable.py": {
            "lines": 46,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/build/wheel.py": {
            "lines": 37,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/build/metadata_editable.py": {
            "lines": 40,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/build/metadata.py": {
            "lines": 37,
            "tokens": 237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/build/build_tracker.py": {
            "lines": 139,
            "tokens": 1067,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/importlib/_envs.py": {
            "lines": 142,
            "tokens": 1053,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/importlib/_dists.py": {
            "lines": 228,
            "tokens": 1953,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/importlib/_compat.py": {
            "lines": 86,
            "tokens": 519,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/importlib/__init__.py": {
            "lines": 5,
            "tokens": 38,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/jobs/fine_tuning_job_checkpoint.py": {
            "lines": 46,
            "tokens": 231,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/jobs/checkpoint_list_params.py": {
            "lines": 14,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/jobs/__init__.py": {
            "lines": 5,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/permission_retrieve_response.py": {
            "lines": 33,
            "tokens": 161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/permission_retrieve_params.py": {
            "lines": 20,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/permission_delete_response.py": {
            "lines": 17,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/permission_create_response.py": {
            "lines": 20,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/permission_create_params.py": {
            "lines": 13,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/checkpoints/__init__.py": {
            "lines": 8,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_validate_response.py": {
            "lines": 19,
            "tokens": 161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_validate_params.py": {
            "lines": 23,
            "tokens": 166,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 106,
            "percentage": 56.52,
            "percentageTokens": 63.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_run_response.py": {
            "lines": 66,
            "tokens": 358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_run_params.py": {
            "lines": 39,
            "tokens": 189,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 106,
            "percentage": 33.33,
            "percentageTokens": 56.08,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/__init__.py": {
            "lines": 7,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/runs/output_item_retrieve_response.py": {
            "lines": 133,
            "tokens": 608,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 94,
            "duplicatedTokens": 422,
            "percentage": 70.68,
            "percentageTokens": 69.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/runs/output_item_list_response.py": {
            "lines": 133,
            "tokens": 608,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 94,
            "duplicatedTokens": 422,
            "percentage": 70.68,
            "percentageTokens": 69.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/runs/output_item_list_params.py": {
            "lines": 29,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/runs/__init__.py": {
            "lines": 6,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/completions/message_list_params.py": {
            "lines": 20,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/completions/__init__.py": {
            "lines": 4,
            "tokens": 23,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/text_delta_block.py": {
            "lines": 18,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/text_delta.py": {
            "lines": 14,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/text_content_block_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/text_content_block.py": {
            "lines": 14,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/text.py": {
            "lines": 14,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run_update_params.py": {
            "lines": 23,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run_submit_tool_outputs_params.py": {
            "lines": 51,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run_status.py": {
            "lines": 16,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run_list_params.py": {
            "lines": 38,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py": {
            "lines": 263,
            "tokens": 2612,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 261,
            "duplicatedTokens": 3078,
            "percentage": 99.24,
            "percentageTokens": 117.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/run.py": {
            "lines": 244,
            "tokens": 1583,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 592,
            "percentage": 13.93,
            "percentageTokens": 37.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/required_action_function_tool_call.py": {
            "lines": 33,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/refusal_delta_block.py": {
            "lines": 17,
            "tokens": 85,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/refusal_content_block.py": {
            "lines": 13,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_update_params.py": {
            "lines": 23,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_list_params.py": {
            "lines": 41,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_delta_event.py": {
            "lines": 18,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_delta.py": {
            "lines": 16,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_deleted.py": {
            "lines": 14,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_create_params.py": {
            "lines": 54,
            "tokens": 260,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_content_part_param.py": {
            "lines": 13,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_content_delta.py": {
            "lines": 16,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message_content.py": {
            "lines": 17,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/message.py": {
            "lines": 102,
            "tokens": 441,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url_param.py": {
            "lines": 21,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url_delta_block.py": {
            "lines": 18,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url_delta.py": {
            "lines": 21,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url_content_block_param.py": {
            "lines": 15,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url_content_block.py": {
            "lines": 14,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_url.py": {
            "lines": 22,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file_param.py": {
            "lines": 21,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file_delta_block.py": {
            "lines": 18,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file_delta.py": {
            "lines": 22,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file_content_block_param.py": {
            "lines": 15,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file_content_block.py": {
            "lines": 14,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/image_file.py": {
            "lines": 22,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/file_path_delta_annotation.py": {
            "lines": 29,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/file_path_annotation.py": {
            "lines": 25,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/file_citation_delta_annotation.py": {
            "lines": 32,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/file_citation_annotation.py": {
            "lines": 25,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/annotation_delta.py": {
            "lines": 13,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/annotation.py": {
            "lines": 11,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/threads/__init__.py": {
            "lines": 45,
            "tokens": 556,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_updated_event.py": {
            "lines": 23,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py": {
            "lines": 184,
            "tokens": 1358,
            "sources": 1,
            "clones": 11,
            "duplicatedLines": 210,
            "duplicatedTokens": 2671,
            "percentage": 114.13,
            "percentageTokens": 196.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py": {
            "lines": 184,
            "tokens": 1390,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 118,
            "duplicatedTokens": 1314,
            "percentage": 64.13,
            "percentageTokens": 94.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_create_params.py": {
            "lines": 172,
            "tokens": 763,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 445,
            "percentage": 27.33,
            "percentageTokens": 58.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session.py": {
            "lines": 99,
            "tokens": 584,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_updated_event.py": {
            "lines": 18,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py": {
            "lines": 309,
            "tokens": 2466,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 273,
            "duplicatedTokens": 2878,
            "percentage": 88.35,
            "percentageTokens": 116.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py": {
            "lines": 311,
            "tokens": 2485,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 207,
            "duplicatedTokens": 2111,
            "percentage": 66.56,
            "percentageTokens": 84.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_created_event.py": {
            "lines": 18,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_create_response.py": {
            "lines": 195,
            "tokens": 659,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_create_params.py": {
            "lines": 297,
            "tokens": 1165,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 529,
            "percentage": 20.88,
            "percentageTokens": 45.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py": {
            "lines": 278,
            "tokens": 2368,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 177,
            "duplicatedTokens": 1848,
            "percentage": 63.67,
            "percentageTokens": 78.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_text_done_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_text_delta_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_output_item_done_event.py": {
            "lines": 24,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_output_item_added_event.py": {
            "lines": 24,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_function_call_arguments_done_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_function_call_arguments_delta_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_done_event.py": {
            "lines": 18,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_created_event.py": {
            "lines": 18,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_create_event_param.py": {
            "lines": 121,
            "tokens": 388,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_create_event.py": {
            "lines": 120,
            "tokens": 480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_content_part_done_event.py": {
            "lines": 44,
            "tokens": 207,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 39,
            "duplicatedTokens": 184,
            "percentage": 88.64,
            "percentageTokens": 88.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_content_part_added_event.py": {
            "lines": 44,
            "tokens": 207,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 39,
            "duplicatedTokens": 184,
            "percentage": 88.64,
            "percentageTokens": 88.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_cancel_event_param.py": {
            "lines": 20,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_cancel_event.py": {
            "lines": 21,
            "tokens": 95,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_audio_transcript_done_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_audio_transcript_delta_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_audio_done_event.py": {
            "lines": 26,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_audio_delta_event.py": {
            "lines": 29,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_server_event.py": {
            "lines": 132,
            "tokens": 697,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 186,
            "percentage": 35.61,
            "percentageTokens": 26.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_response_usage.py": {
            "lines": 51,
            "tokens": 234,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_response_status.py": {
            "lines": 38,
            "tokens": 169,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 146,
            "percentage": 86.84,
            "percentageTokens": 86.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_response.py": {
            "lines": 86,
            "tokens": 393,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_connect_params.py": {
            "lines": 10,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_client_event_param.py": {
            "lines": 43,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_client_event.py": {
            "lines": 46,
            "tokens": 280,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/rate_limits_updated_event.py": {
            "lines": 32,
            "tokens": 173,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 147,
            "percentage": 84.38,
            "percentageTokens": 84.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_speech_stopped_event.py": {
            "lines": 24,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_speech_started_event.py": {
            "lines": 25,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_committed_event.py": {
            "lines": 24,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_commit_event_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_commit_event.py": {
            "lines": 15,
            "tokens": 78,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_cleared_event.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_clear_event_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_clear_event.py": {
            "lines": 15,
            "tokens": 78,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_append_event_param.py": {
            "lines": 21,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/input_audio_buffer_append_event.py": {
            "lines": 22,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/error_event.py": {
            "lines": 35,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_with_reference_param.py": {
            "lines": 86,
            "tokens": 267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_with_reference.py": {
            "lines": 86,
            "tokens": 366,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 132,
            "percentage": 34.88,
            "percentageTokens": 36.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_truncated_event.py": {
            "lines": 23,
            "tokens": 93,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_truncate_event_param.py": {
            "lines": 30,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_truncate_event.py": {
            "lines": 31,
            "tokens": 108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_retrieve_event_param.py": {
            "lines": 17,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_retrieve_event.py": {
            "lines": 18,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_param.py": {
            "lines": 61,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_input_audio_transcription_failed_event.py": {
            "lines": 38,
            "tokens": 181,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 158,
            "percentage": 86.84,
            "percentageTokens": 87.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_input_audio_transcription_delta_event.py": {
            "lines": 38,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_input_audio_transcription_completed_event.py": {
            "lines": 86,
            "tokens": 367,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 40,
            "duplicatedTokens": 169,
            "percentage": 46.51,
            "percentageTokens": 46.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_deleted_event.py": {
            "lines": 17,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_delete_event_param.py": {
            "lines": 17,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_delete_event.py": {
            "lines": 18,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_created_event.py": {
            "lines": 26,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_create_event_param.py": {
            "lines": 28,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_create_event.py": {
            "lines": 28,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_content_param.py": {
            "lines": 30,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_content.py": {
            "lines": 31,
            "tokens": 148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item.py": {
            "lines": 60,
            "tokens": 263,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 132,
            "percentage": 50,
            "percentageTokens": 50.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_created_event.py": {
            "lines": 26,
            "tokens": 130,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 107,
            "percentage": 80.77,
            "percentageTokens": 82.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/realtime/__init__.py": {
            "lines": 95,
            "tokens": 986,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/thread_list_params.py": {
            "lines": 32,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/thread_list_items_params.py": {
            "lines": 26,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/thread_delete_response.py": {
            "lines": 17,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/session_create_params.py": {
            "lines": 34,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_widget_item.py": {
            "lines": 26,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_thread_user_message_item.py": {
            "lines": 76,
            "tokens": 355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_thread_item_list.py": {
            "lines": 143,
            "tokens": 628,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_thread_assistant_message_item.py": {
            "lines": 28,
            "tokens": 126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_thread.py": {
            "lines": 55,
            "tokens": 282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_response_output_text.py": {
            "lines": 61,
            "tokens": 285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chatkit_attachment.py": {
            "lines": 24,
            "tokens": 111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_workflow_param.py": {
            "lines": 33,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_status.py": {
            "lines": 6,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_rate_limits_param.py": {
            "lines": 11,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_rate_limits.py": {
            "lines": 9,
            "tokens": 41,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_history.py": {
            "lines": 17,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_file_upload.py": {
            "lines": 17,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_expires_after_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_chatkit_configuration_param.py": {
            "lines": 58,
            "tokens": 182,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_chatkit_configuration.py": {
            "lines": 18,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session_automatic_thread_titling.py": {
            "lines": 9,
            "tokens": 41,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/chat_session.py": {
            "lines": 42,
            "tokens": 180,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit/__init__.py": {
            "lines": 31,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py": {
            "lines": 917,
            "tokens": 6315,
            "sources": 1,
            "clones": 24,
            "duplicatedLines": 598,
            "duplicatedTokens": 5812,
            "percentage": 65.21,
            "percentageTokens": 92.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py": {
            "lines": 198,
            "tokens": 1181,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 74,
            "duplicatedTokens": 582,
            "percentage": 37.37,
            "percentageTokens": 49.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py": {
            "lines": 417,
            "tokens": 2454,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 194,
            "duplicatedTokens": 1128,
            "percentage": 46.52,
            "percentageTokens": 45.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/checkpoints.py": {
            "lines": 101,
            "tokens": 638,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 103,
            "percentage": 26.73,
            "percentageTokens": 16.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py": {
            "lines": 281,
            "tokens": 1880,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 117,
            "duplicatedTokens": 1055,
            "percentage": 41.64,
            "percentageTokens": 56.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/alpha.py": {
            "lines": 101,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py": {
            "lines": 633,
            "tokens": 4050,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 330,
            "duplicatedTokens": 2633,
            "percentage": 52.13,
            "percentageTokens": 65.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py": {
            "lines": 314,
            "tokens": 1857,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 155,
            "duplicatedTokens": 1385,
            "percentage": 49.36,
            "percentageTokens": 74.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/evals/runs/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py": {
            "lines": 544,
            "tokens": 3359,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 386,
            "duplicatedTokens": 2749,
            "percentage": 70.96,
            "percentageTokens": 81.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/containers/files/content.py": {
            "lines": 172,
            "tokens": 1011,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 306,
            "percentage": 18.6,
            "percentageTokens": 30.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/containers/files/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py": {
            "lines": 211,
            "tokens": 1361,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 145,
            "duplicatedTokens": 927,
            "percentage": 68.72,
            "percentageTokens": 68.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/chat/completions/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py": {
            "lines": 717,
            "tokens": 4605,
            "sources": 1,
            "clones": 17,
            "duplicatedLines": 450,
            "duplicatedTokens": 3349,
            "percentage": 62.76,
            "percentageTokens": 72.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/threads/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py": {
            "lines": 281,
            "tokens": 2582,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 177,
            "duplicatedTokens": 3055,
            "percentage": 62.99,
            "percentageTokens": 118.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py": {
            "lines": 423,
            "tokens": 4423,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 281,
            "duplicatedTokens": 4619,
            "percentage": 66.43,
            "percentageTokens": 104.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/realtime/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py": {
            "lines": 520,
            "tokens": 3089,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 279,
            "duplicatedTokens": 2314,
            "percentage": 53.65,
            "percentageTokens": 74.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py": {
            "lines": 300,
            "tokens": 1979,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 151,
            "duplicatedTokens": 1110,
            "percentage": 50.33,
            "percentageTokens": 56.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/chatkit.py": {
            "lines": 133,
            "tokens": 821,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_types.py": {
            "lines": 9,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_responses.py": {
            "lines": 371,
            "tokens": 3125,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 468,
            "percentage": 15.63,
            "percentageTokens": 14.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_events.py": {
            "lines": 147,
            "tokens": 708,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/responses/__init__.py": {
            "lines": 12,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_types.py": {
            "lines": 19,
            "tokens": 79,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_events.py": {
            "lines": 122,
            "tokens": 575,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_completions.py": {
            "lines": 769,
            "tokens": 5354,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 37,
            "duplicatedTokens": 324,
            "percentage": 4.81,
            "percentageTokens": 6.05,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/chat/__init__.py": {
            "lines": 26,
            "tokens": 199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/fine_tuning/jobs.py": {
            "lines": 169,
            "tokens": 1186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/fine_tuning/__init__.py": {
            "lines": 12,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/chat/completions.py": {
            "lines": 159,
            "tokens": 1240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/chat/__init__.py": {
            "lines": 12,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/zero_shot_object_detection.py": {
            "lines": 51,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/zero_shot_image_classification.py": {
            "lines": 39,
            "tokens": 144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/zero_shot_classification.py": {
            "lines": 44,
            "tokens": 160,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/visual_question_answering.py": {
            "lines": 48,
            "tokens": 180,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/video_classification.py": {
            "lines": 44,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/translation.py": {
            "lines": 48,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/token_classification.py": {
            "lines": 50,
            "tokens": 250,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_video.py": {
            "lines": 45,
            "tokens": 200,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_speech.py": {
            "lines": 98,
            "tokens": 441,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 165,
            "duplicatedTokens": 720,
            "percentage": 168.37,
            "percentageTokens": 163.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_image.py": {
            "lines": 49,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_audio.py": {
            "lines": 98,
            "tokens": 434,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 55,
            "duplicatedTokens": 240,
            "percentage": 56.12,
            "percentageTokens": 55.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_generation.py": {
            "lines": 167,
            "tokens": 883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_classification.py": {
            "lines": 40,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text2text_generation.py": {
            "lines": 41,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/table_question_answering.py": {
            "lines": 61,
            "tokens": 271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/summarization.py": {
            "lines": 40,
            "tokens": 194,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/sentence_similarity.py": {
            "lines": 26,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/question_answering.py": {
            "lines": 73,
            "tokens": 284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/object_detection.py": {
            "lines": 57,
            "tokens": 197,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_to_video.py": {
            "lines": 59,
            "tokens": 254,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_to_text.py": {
            "lines": 99,
            "tokens": 454,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 55,
            "duplicatedTokens": 240,
            "percentage": 55.56,
            "percentageTokens": 52.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_to_image.py": {
            "lines": 59,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_segmentation.py": {
            "lines": 50,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_classification.py": {
            "lines": 42,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/fill_mask.py": {
            "lines": 46,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/feature_extraction.py": {
            "lines": 35,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/document_question_answering.py": {
            "lines": 79,
            "tokens": 321,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/depth_estimation.py": {
            "lines": 27,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/chat_completion.py": {
            "lines": 346,
            "tokens": 1550,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/base.py": {
            "lines": 160,
            "tokens": 1147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/automatic_speech_recognition.py": {
            "lines": 112,
            "tokens": 493,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 55,
            "duplicatedTokens": 240,
            "percentage": 49.11,
            "percentageTokens": 48.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/audio_to_audio.py": {
            "lines": 29,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/audio_classification.py": {
            "lines": 42,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/__init__.py": {
            "lines": 191,
            "tokens": 933,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/response.py": {
            "lines": 276,
            "tokens": 1926,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/request.py": {
            "lines": 21,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/fetch.py": {
            "lines": 727,
            "tokens": 4749,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 250,
            "percentage": 4.68,
            "percentageTokens": 5.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/connection.py": {
            "lines": 254,
            "tokens": 2285,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 399,
            "percentage": 12.2,
            "percentageTokens": 17.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/__init__.py": {
            "lines": 15,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/response.py": {
            "lines": 878,
            "tokens": 4749,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/request.py": {
            "lines": 190,
            "tokens": 752,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py": {
            "lines": 539,
            "tokens": 2974,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 198,
            "duplicatedTokens": 919,
            "percentage": 36.73,
            "percentageTokens": 30.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/filepost.py": {
            "lines": 97,
            "tokens": 520,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/fields.py": {
            "lines": 273,
            "tokens": 1283,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 140,
            "percentage": 6.59,
            "percentageTokens": 10.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/exceptions.py": {
            "lines": 322,
            "tokens": 1383,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/connection.py": {
            "lines": 571,
            "tokens": 3492,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/_collections.py": {
            "lines": 354,
            "tokens": 2321,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/urllib3/__init__.py": {
            "lines": 101,
            "tokens": 508,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 114,
            "percentage": 26.73,
            "percentageTokens": 22.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/_windows.py": {
            "lines": 566,
            "tokens": 3403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/_ssl_constants.py": {
            "lines": 30,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/_openssl.py": {
            "lines": 67,
            "tokens": 367,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/_macos.py": {
            "lines": 570,
            "tokens": 3698,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 57,
            "duplicatedTokens": 407,
            "percentage": 10,
            "percentageTokens": 11.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/_api.py": {
            "lines": 340,
            "tokens": 2697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/truststore/__init__.py": {
            "lines": 35,
            "tokens": 255,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli_w/_writer.py": {
            "lines": 228,
            "tokens": 2058,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli_w/__init__.py": {
            "lines": 3,
            "tokens": 35,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli/_types.py": {
            "lines": 9,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli/_re.py": {
            "lines": 114,
            "tokens": 869,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli/_parser.py": {
            "lines": 776,
            "tokens": 7193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/tomli/__init__.py": {
            "lines": 7,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/tree.py": {
            "lines": 256,
            "tokens": 2172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/traceback.py": {
            "lines": 898,
            "tokens": 6464,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 50,
            "duplicatedTokens": 570,
            "percentage": 5.57,
            "percentageTokens": 8.82,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/themes.py": {
            "lines": 4,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/theme.py": {
            "lines": 114,
            "tokens": 796,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/terminal_theme.py": {
            "lines": 152,
            "tokens": 1365,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 17,
            "duplicatedTokens": 195,
            "percentage": 11.18,
            "percentageTokens": 14.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/syntax.py": {
            "lines": 984,
            "tokens": 7229,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/styled.py": {
            "lines": 41,
            "tokens": 309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/style.py": {
            "lines": 791,
            "tokens": 6385,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 18,
            "duplicatedTokens": 200,
            "percentage": 2.28,
            "percentageTokens": 3.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/status.py": {
            "lines": 130,
            "tokens": 890,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/spinner.py": {
            "lines": 131,
            "tokens": 972,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/segment.py": {
            "lines": 751,
            "tokens": 4768,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/screen.py": {
            "lines": 53,
            "tokens": 398,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/scope.py": {
            "lines": 85,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/rule.py": {
            "lines": 129,
            "tokens": 1167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/repr.py": {
            "lines": 148,
            "tokens": 1249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/region.py": {
            "lines": 9,
            "tokens": 44,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/protocol.py": {
            "lines": 41,
            "tokens": 274,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/prompt.py": {
            "lines": 399,
            "tokens": 2370,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 44,
            "duplicatedTokens": 420,
            "percentage": 11.03,
            "percentageTokens": 17.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/progress_bar.py": {
            "lines": 222,
            "tokens": 1889,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/panel.py": {
            "lines": 316,
            "tokens": 2453,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/palette.py": {
            "lines": 99,
            "tokens": 981,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 97,
            "percentage": 6.06,
            "percentageTokens": 9.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/pager.py": {
            "lines": 33,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/padding.py": {
            "lines": 140,
            "tokens": 1205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/measure.py": {
            "lines": 150,
            "tokens": 880,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/markup.py": {
            "lines": 250,
            "tokens": 1830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/logging.py": {
            "lines": 296,
            "tokens": 2017,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/live_render.py": {
            "lines": 105,
            "tokens": 766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/live.py": {
            "lines": 399,
            "tokens": 3080,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/layout.py": {
            "lines": 441,
            "tokens": 3326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/jupyter.py": {
            "lines": 100,
            "tokens": 932,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/json.py": {
            "lines": 138,
            "tokens": 868,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 42,
            "duplicatedTokens": 351,
            "percentage": 30.43,
            "percentageTokens": 40.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/highlighter.py": {
            "lines": 231,
            "tokens": 1166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/filesize.py": {
            "lines": 87,
            "tokens": 419,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/file_proxy.py": {
            "lines": 56,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/errors.py": {
            "lines": 33,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/emoji.py": {
            "lines": 90,
            "tokens": 591,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/diagnose.py": {
            "lines": 38,
            "tokens": 252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/default_styles.py": {
            "lines": 192,
            "tokens": 2469,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/control.py": {
            "lines": 218,
            "tokens": 1425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/containers.py": {
            "lines": 166,
            "tokens": 1489,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/constrain.py": {
            "lines": 36,
            "tokens": 295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/columns.py": {
            "lines": 186,
            "tokens": 1654,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/color_triplet.py": {
            "lines": 37,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/color.py": {
            "lines": 620,
            "tokens": 4904,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/cells.py": {
            "lines": 173,
            "tokens": 1157,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/box.py": {
            "lines": 473,
            "tokens": 2384,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/bar.py": {
            "lines": 92,
            "tokens": 746,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/ansi.py": {
            "lines": 240,
            "tokens": 1668,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/align.py": {
            "lines": 305,
            "tokens": 2423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/abc.py": {
            "lines": 32,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_wrap.py": {
            "lines": 92,
            "tokens": 600,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_windows_renderer.py": {
            "lines": 55,
            "tokens": 572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_windows.py": {
            "lines": 70,
            "tokens": 421,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_win32_console.py": {
            "lines": 660,
            "tokens": 3845,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_timer.py": {
            "lines": 18,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_stack.py": {
            "lines": 15,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_spinners.py": {
            "lines": 481,
            "tokens": 2855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_ratio.py": {
            "lines": 152,
            "tokens": 1138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_pick.py": {
            "lines": 16,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_palettes.py": {
            "lines": 308,
            "tokens": 3519,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 17,
            "duplicatedTokens": 195,
            "percentage": 5.52,
            "percentageTokens": 5.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_null_file.py": {
            "lines": 68,
            "tokens": 551,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_loop.py": {
            "lines": 42,
            "tokens": 335,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_log_render.py": {
            "lines": 93,
            "tokens": 868,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_inspect.py": {
            "lines": 267,
            "tokens": 2075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_fileno.py": {
            "lines": 23,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_extension.py": {
            "lines": 9,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_export_format.py": {
            "lines": 75,
            "tokens": 24,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_emoji_replace.py": {
            "lines": 31,
            "tokens": 282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py": {
            "lines": 453,
            "tokens": 5411,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 184,
            "duplicatedTokens": 2178,
            "percentage": 40.62,
            "percentageTokens": 40.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/__main__.py": {
            "lines": 244,
            "tokens": 1648,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 6,
            "duplicatedTokens": 97,
            "percentage": 2.46,
            "percentageTokens": 5.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/rich/__init__.py": {
            "lines": 176,
            "tokens": 924,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 119,
            "percentage": 13.64,
            "percentageTokens": 12.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/structs.py": {
            "lines": 208,
            "tokens": 1932,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/reporters.py": {
            "lines": 54,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/providers.py": {
            "lines": 195,
            "tokens": 517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/resolvelib/__init__.py": {
            "lines": 26,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/structures.py": {
            "lines": 98,
            "tokens": 551,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 551,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/status_codes.py": {
            "lines": 127,
            "tokens": 1073,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 127,
            "duplicatedTokens": 1073,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/sessions.py": {
            "lines": 830,
            "tokens": 4563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 830,
            "duplicatedTokens": 4563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/packages.py": {
            "lines": 24,
            "tokens": 246,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 118,
            "percentage": 37.5,
            "percentageTokens": 47.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/hooks.py": {
            "lines": 32,
            "tokens": 162,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 162,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/help.py": {
            "lines": 126,
            "tokens": 804,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 110,
            "duplicatedTokens": 727,
            "percentage": 87.3,
            "percentageTokens": 90.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/exceptions.py": {
            "lines": 150,
            "tokens": 582,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 144,
            "duplicatedTokens": 574,
            "percentage": 96,
            "percentageTokens": 98.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/cookies.py": {
            "lines": 560,
            "tokens": 3211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 560,
            "duplicatedTokens": 3211,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/compat.py": {
            "lines": 89,
            "tokens": 382,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 37,
            "duplicatedTokens": 204,
            "percentage": 41.57,
            "percentageTokens": 53.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/certs.py": {
            "lines": 16,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/auth.py": {
            "lines": 313,
            "tokens": 2260,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 313,
            "duplicatedTokens": 2260,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/api.py": {
            "lines": 156,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 156,
            "duplicatedTokens": 373,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/adapters.py": {
            "lines": 695,
            "tokens": 3582,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 667,
            "duplicatedTokens": 3361,
            "percentage": 95.97,
            "percentageTokens": 93.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/_internal_utils.py": {
            "lines": 49,
            "tokens": 219,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 219,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/__version__.py": {
            "lines": 13,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/requests/__init__.py": {
            "lines": 178,
            "tokens": 961,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 104,
            "duplicatedTokens": 770,
            "percentage": 58.43,
            "percentageTokens": 80.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pyproject_hooks/_impl.py": {
            "lines": 409,
            "tokens": 2337,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pyproject_hooks/__init__.py": {
            "lines": 30,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/util.py": {
            "lines": 323,
            "tokens": 1877,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 323,
            "duplicatedTokens": 1877,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/unistring.py": {
            "lines": 152,
            "tokens": 990,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 152,
            "duplicatedTokens": 990,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/token.py": {
            "lines": 213,
            "tokens": 1345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 213,
            "duplicatedTokens": 1345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/style.py": {
            "lines": 202,
            "tokens": 1561,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1552,
            "percentage": 95.05,
            "percentageTokens": 99.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py": {
            "lines": 246,
            "tokens": 1955,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 233,
            "duplicatedTokens": 1804,
            "percentage": 94.72,
            "percentageTokens": 92.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/scanner.py": {
            "lines": 103,
            "tokens": 509,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 103,
            "duplicatedTokens": 509,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/regexopt.py": {
            "lines": 90,
            "tokens": 705,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 705,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/plugin.py": {
            "lines": 71,
            "tokens": 247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 247,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/modeline.py": {
            "lines": 42,
            "tokens": 209,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 42,
            "duplicatedTokens": 209,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexer.py": {
            "lines": 962,
            "tokens": 5823,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 940,
            "duplicatedTokens": 5698,
            "percentage": 97.71,
            "percentageTokens": 97.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatter.py": {
            "lines": 128,
            "tokens": 407,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 115,
            "duplicatedTokens": 379,
            "percentage": 89.84,
            "percentageTokens": 93.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/filter.py": {
            "lines": 69,
            "tokens": 304,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 304,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/console.py": {
            "lines": 69,
            "tokens": 529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/__main__.py": {
            "lines": 16,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/pygments/__init__.py": {
            "lines": 81,
            "tokens": 331,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 154,
            "percentage": 30.86,
            "percentageTokens": 46.53,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/windows.py": {
            "lines": 271,
            "tokens": 1945,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 271,
            "duplicatedTokens": 1945,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 153,
            "duplicatedTokens": 824,
            "percentage": 463.64,
            "percentageTokens": 438.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/unix.py": {
            "lines": 271,
            "tokens": 1721,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 271,
            "duplicatedTokens": 1721,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/macos.py": {
            "lines": 145,
            "tokens": 894,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 145,
            "duplicatedTokens": 894,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/api.py": {
            "lines": 298,
            "tokens": 1729,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 298,
            "duplicatedTokens": 1729,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/android.py": {
            "lines": 248,
            "tokens": 1548,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 248,
            "duplicatedTokens": 1548,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/__main__.py": {
            "lines": 54,
            "tokens": 319,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 50,
            "duplicatedTokens": 301,
            "percentage": 92.59,
            "percentageTokens": 94.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/__init__.py": {
            "lines": 630,
            "tokens": 3548,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 593,
            "duplicatedTokens": 3271,
            "percentage": 94.13,
            "percentageTokens": 92.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/version.py": {
            "lines": 581,
            "tokens": 2719,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 572,
            "duplicatedTokens": 2710,
            "percentage": 98.45,
            "percentageTokens": 99.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/utils.py": {
            "lines": 162,
            "tokens": 1051,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 162,
            "duplicatedTokens": 1051,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/tags.py": {
            "lines": 655,
            "tokens": 4849,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 655,
            "duplicatedTokens": 4849,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/requirements.py": {
            "lines": 90,
            "tokens": 659,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 659,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/metadata.py": {
            "lines": 861,
            "tokens": 5678,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 861,
            "duplicatedTokens": 5678,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/markers.py": {
            "lines": 361,
            "tokens": 870,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 361,
            "duplicatedTokens": 870,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_tokenizer.py": {
            "lines": 194,
            "tokens": 1267,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 194,
            "duplicatedTokens": 1267,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_structures.py": {
            "lines": 60,
            "tokens": 450,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 60,
            "duplicatedTokens": 450,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_parser.py": {
            "lines": 352,
            "tokens": 2258,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 352,
            "duplicatedTokens": 2258,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_musllinux.py": {
            "lines": 84,
            "tokens": 589,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 589,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_manylinux.py": {
            "lines": 261,
            "tokens": 1749,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 283,
            "duplicatedTokens": 1870,
            "percentage": 108.43,
            "percentageTokens": 106.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/_elffile.py": {
            "lines": 108,
            "tokens": 808,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 108,
            "duplicatedTokens": 808,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/packaging/__init__.py": {
            "lines": 14,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/msgpack/fallback.py": {
            "lines": 928,
            "tokens": 7473,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 248,
            "percentage": 2.59,
            "percentageTokens": 3.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/msgpack/ext.py": {
            "lines": 169,
            "tokens": 982,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/msgpack/exceptions.py": {
            "lines": 47,
            "tokens": 161,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/msgpack/__init__.py": {
            "lines": 54,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/intranges.py": {
            "lines": 56,
            "tokens": 328,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 56,
            "duplicatedTokens": 328,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/core.py": {
            "lines": 436,
            "tokens": 3714,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 434,
            "duplicatedTokens": 3710,
            "percentage": 99.54,
            "percentageTokens": 99.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/compat.py": {
            "lines": 14,
            "tokens": 106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 106,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/codec.py": {
            "lines": 121,
            "tokens": 978,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 113,
            "duplicatedTokens": 944,
            "percentage": 93.39,
            "percentageTokens": 96.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/idna/__init__.py": {
            "lines": 44,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 188,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/distro/__main__.py": {
            "lines": 3,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/distro/__init__.py": {
            "lines": 53,
            "tokens": 213,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 213,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/distlib/scripts.py": {
            "lines": 446,
            "tokens": 3511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/distlib/resources.py": {
            "lines": 357,
            "tokens": 2654,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/distlib/__init__.py": {
            "lines": 32,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_toml_compat.py": {
            "lines": 8,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_pip_wrapper.py": {
            "lines": 61,
            "tokens": 497,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 126,
            "percentage": 22.95,
            "percentageTokens": 25.35,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_lint_dependency_groups.py": {
            "lines": 58,
            "tokens": 419,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 126,
            "percentage": 24.14,
            "percentageTokens": 30.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_implementation.py": {
            "lines": 208,
            "tokens": 1431,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/__main__.py": {
            "lines": 64,
            "tokens": 422,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/__init__.py": {
            "lines": 12,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/certifi/core.py": {
            "lines": 82,
            "tokens": 435,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 68,
            "duplicatedTokens": 316,
            "percentage": 82.93,
            "percentageTokens": 72.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/certifi/__main__.py": {
            "lines": 11,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/certifi/__init__.py": {
            "lines": 3,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/wrapper.py": {
            "lines": 42,
            "tokens": 372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/serialize.py": {
            "lines": 145,
            "tokens": 1142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/heuristics.py": {
            "lines": 156,
            "tokens": 1085,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/filewrapper.py": {
            "lines": 118,
            "tokens": 658,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/controller.py": {
            "lines": 510,
            "tokens": 3661,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/cache.py": {
            "lines": 74,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/adapter.py": {
            "lines": 167,
            "tokens": 1347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/_cmd.py": {
            "lines": 69,
            "tokens": 452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/cachecontrol/__init__.py": {
            "lines": 28,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/versioncontrol.py": {
            "lines": 692,
            "tokens": 4203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/subversion.py": {
            "lines": 334,
            "tokens": 2368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/mercurial.py": {
            "lines": 185,
            "tokens": 1402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/git.py": {
            "lines": 570,
            "tokens": 3823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/bazaar.py": {
            "lines": 129,
            "tokens": 1025,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/vcs/__init__.py": {
            "lines": 14,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/wheel.py": {
            "lines": 131,
            "tokens": 816,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/virtualenv.py": {
            "lines": 104,
            "tokens": 509,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/urls.py": {
            "lines": 54,
            "tokens": 359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/unpacking.py": {
            "lines": 361,
            "tokens": 2527,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/temp_dir.py": {
            "lines": 293,
            "tokens": 1788,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/subprocess.py": {
            "lines": 247,
            "tokens": 1652,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/retry.py": {
            "lines": 44,
            "tokens": 271,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/packaging.py": {
            "lines": 43,
            "tokens": 224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/misc.py": {
            "lines": 764,
            "tokens": 5483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/logging.py": {
            "lines": 363,
            "tokens": 2554,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/hashes.py": {
            "lines": 149,
            "tokens": 1122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/glibc.py": {
            "lines": 101,
            "tokens": 476,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 121,
            "percentage": 21.78,
            "percentageTokens": 25.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/filetypes.py": {
            "lines": 23,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/filesystem.py": {
            "lines": 163,
            "tokens": 1238,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/entrypoints.py": {
            "lines": 87,
            "tokens": 517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/egg_link.py": {
            "lines": 80,
            "tokens": 403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/direct_url_helpers.py": {
            "lines": 86,
            "tokens": 648,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/deprecation.py": {
            "lines": 125,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/datetime.py": {
            "lines": 9,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/compatibility_tags.py": {
            "lines": 200,
            "tokens": 1439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/compat.py": {
            "lines": 84,
            "tokens": 490,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/appdirs.py": {
            "lines": 51,
            "tokens": 382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/_log.py": {
            "lines": 37,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/utils/_jaraco_text.py": {
            "lines": 108,
            "tokens": 474,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/resolution/base.py": {
            "lines": 19,
            "tokens": 144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/req_uninstall.py": {
            "lines": 638,
            "tokens": 5089,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/req_set.py": {
            "lines": 80,
            "tokens": 674,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/req_install.py": {
            "lines": 827,
            "tokens": 6203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/req_file.py": {
            "lines": 618,
            "tokens": 4211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/req_dependency_group.py": {
            "lines": 74,
            "tokens": 544,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/constructors.py": {
            "lines": 565,
            "tokens": 3947,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/req/__init__.py": {
            "lines": 102,
            "tokens": 666,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/prepare.py": {
            "lines": 747,
            "tokens": 5035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/freeze.py": {
            "lines": 258,
            "tokens": 1874,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/operations/check.py": {
            "lines": 174,
            "tokens": 1333,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/xmlrpc.py": {
            "lines": 60,
            "tokens": 446,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/utils.py": {
            "lines": 97,
            "tokens": 484,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/session.py": {
            "lines": 527,
            "tokens": 3862,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 198,
            "percentage": 4.17,
            "percentageTokens": 5.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/lazy_wheel.py": {
            "lines": 214,
            "tokens": 1656,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/download.py": {
            "lines": 341,
            "tokens": 2642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/cache.py": {
            "lines": 127,
            "tokens": 1045,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/network/auth.py": {
            "lines": 563,
            "tokens": 4144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/wheel.py": {
            "lines": 79,
            "tokens": 438,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/target_python.py": {
            "lines": 121,
            "tokens": 721,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/selection_prefs.py": {
            "lines": 52,
            "tokens": 223,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/search_scope.py": {
            "lines": 125,
            "tokens": 784,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/scheme.py": {
            "lines": 24,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/pylock.py": {
            "lines": 187,
            "tokens": 1348,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/link.py": {
            "lines": 612,
            "tokens": 4131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/installation_report.py": {
            "lines": 56,
            "tokens": 382,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/index.py": {
            "lines": 27,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/format_control.py": {
            "lines": 77,
            "tokens": 652,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/direct_url.py": {
            "lines": 226,
            "tokens": 1923,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/models/candidate.py": {
            "lines": 24,
            "tokens": 205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/pkg_resources.py": {
            "lines": 297,
            "tokens": 2449,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/base.py": {
            "lines": 684,
            "tokens": 3864,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/_json.py": {
            "lines": 86,
            "tokens": 733,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/metadata/__init__.py": {
            "lines": 168,
            "tokens": 741,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/locations/base.py": {
            "lines": 81,
            "tokens": 494,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/locations/_sysconfig.py": {
            "lines": 214,
            "tokens": 1243,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/locations/_distutils.py": {
            "lines": 172,
            "tokens": 1252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/locations/__init__.py": {
            "lines": 440,
            "tokens": 2715,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/index/sources.py": {
            "lines": 286,
            "tokens": 1911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/index/collector.py": {
            "lines": 488,
            "tokens": 3226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/distributions/wheel.py": {
            "lines": 43,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/distributions/sdist.py": {
            "lines": 163,
            "tokens": 1165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/distributions/installed.py": {
            "lines": 32,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/distributions/base.py": {
            "lines": 54,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/distributions/__init__.py": {
            "lines": 20,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/wheel.py": {
            "lines": 175,
            "tokens": 1183,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 93,
            "percentage": 6.86,
            "percentageTokens": 7.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/uninstall.py": {
            "lines": 112,
            "tokens": 704,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/show.py": {
            "lines": 230,
            "tokens": 1838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/search.py": {
            "lines": 177,
            "tokens": 1426,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/lock.py": {
            "lines": 166,
            "tokens": 1098,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 42,
            "duplicatedTokens": 365,
            "percentage": 25.3,
            "percentageTokens": 33.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/list.py": {
            "lines": 399,
            "tokens": 2904,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/install.py": {
            "lines": 802,
            "tokens": 5049,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 46,
            "duplicatedTokens": 374,
            "percentage": 5.74,
            "percentageTokens": 7.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/inspect.py": {
            "lines": 91,
            "tokens": 685,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/index.py": {
            "lines": 158,
            "tokens": 1192,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 240,
            "percentage": 22.15,
            "percentageTokens": 20.13,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/help.py": {
            "lines": 39,
            "tokens": 253,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/hash.py": {
            "lines": 57,
            "tokens": 407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/freeze.py": {
            "lines": 106,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/download.py": {
            "lines": 141,
            "tokens": 989,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 102,
            "percentage": 11.35,
            "percentageTokens": 10.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/debug.py": {
            "lines": 202,
            "tokens": 1569,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/configuration.py": {
            "lines": 287,
            "tokens": 2067,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 114,
            "percentage": 5.57,
            "percentageTokens": 5.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/completion.py": {
            "lines": 134,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/check.py": {
            "lines": 65,
            "tokens": 445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/cache.py": {
            "lines": 230,
            "tokens": 1657,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 126,
            "percentage": 8.26,
            "percentageTokens": 7.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/commands/__init__.py": {
            "lines": 138,
            "tokens": 688,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/status_codes.py": {
            "lines": 5,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/spinners.py": {
            "lines": 234,
            "tokens": 1786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/req_command.py": {
            "lines": 370,
            "tokens": 2457,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/progress_bars.py": {
            "lines": 150,
            "tokens": 1172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/parser.py": {
            "lines": 297,
            "tokens": 2409,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/main_parser.py": {
            "lines": 133,
            "tokens": 890,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/main.py": {
            "lines": 79,
            "tokens": 403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/index_command.py": {
            "lines": 174,
            "tokens": 1159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/command_context.py": {
            "lines": 27,
            "tokens": 213,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/base_command.py": {
            "lines": 243,
            "tokens": 1766,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cli/autocompletion.py": {
            "lines": 183,
            "tokens": 1603,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/unwrap_webhook_event.py": {
            "lines": 43,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/response_incomplete_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/response_failed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/response_completed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/response_cancelled_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/realtime_call_incoming_webhook_event.py": {
            "lines": 40,
            "tokens": 180,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/fine_tuning_job_succeeded_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/fine_tuning_job_failed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/fine_tuning_job_cancelled_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/eval_run_succeeded_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/eval_run_failed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/eval_run_canceled_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/batch_failed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/batch_expired_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/batch_completed_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/batch_cancelled_webhook_event.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/webhooks/__init__.py": {
            "lines": 23,
            "tokens": 230,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/vector_store_file_deleted.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/vector_store_file_batch.py": {
            "lines": 53,
            "tokens": 173,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/vector_store_file.py": {
            "lines": 66,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_update_params.py": {
            "lines": 20,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_list_params.py": {
            "lines": 44,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_create_params.py": {
            "lines": 34,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_content_response.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_batch_list_files_params.py": {
            "lines": 46,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/file_batch_create_params.py": {
            "lines": 35,
            "tokens": 134,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_stores/__init__.py": {
            "lines": 12,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/uploads/upload_part.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/uploads/part_create_params.py": {
            "lines": 13,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/uploads/__init__.py": {
            "lines": 5,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/responses_model.py": {
            "lines": 29,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/response_format_text.py": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/response_format_json_schema.py": {
            "lines": 45,
            "tokens": 156,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/response_format_json_object.py": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/reasoning_effort.py": {
            "lines": 9,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/reasoning.py": {
            "lines": 40,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/metadata.py": {
            "lines": 9,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/function_parameters.py": {
            "lines": 9,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/function_definition.py": {
            "lines": 44,
            "tokens": 108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/custom_tool_input_format.py": {
            "lines": 26,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/compound_filter.py": {
            "lines": 22,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/comparison_filter.py": {
            "lines": 35,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/chat_model.py": {
            "lines": 71,
            "tokens": 291,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 67,
            "duplicatedTokens": 279,
            "percentage": 94.37,
            "percentageTokens": 95.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared_params/__init__.py": {
            "lines": 14,
            "tokens": 170,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 128,
            "percentage": 64.29,
            "percentageTokens": 75.29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/responses_model.py": {
            "lines": 27,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/response_format_text_python.py": {
            "lines": 11,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/response_format_text_grammar.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/response_format_text.py": {
            "lines": 11,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/response_format_json_schema.py": {
            "lines": 47,
            "tokens": 175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/response_format_json_object.py": {
            "lines": 11,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/reasoning_effort.py": {
            "lines": 7,
            "tokens": 54,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/reasoning.py": {
            "lines": 39,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/metadata.py": {
            "lines": 7,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/function_parameters.py": {
            "lines": 7,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/function_definition.py": {
            "lines": 42,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/error_object.py": {
            "lines": 16,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/custom_tool_input_format.py": {
            "lines": 27,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/compound_filter.py": {
            "lines": 21,
            "tokens": 110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/comparison_filter.py": {
            "lines": 33,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/chat_model.py": {
            "lines": 69,
            "tokens": 282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 67,
            "duplicatedTokens": 279,
            "percentage": 97.1,
            "percentageTokens": 98.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/all_models.py": {
            "lines": 27,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/shared/__init__.py": {
            "lines": 18,
            "tokens": 222,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 128,
            "percentage": 50,
            "percentageTokens": 57.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/web_search_tool_param.py": {
            "lines": 64,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/web_search_tool.py": {
            "lines": 62,
            "tokens": 258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/web_search_preview_tool_param.py": {
            "lines": 48,
            "tokens": 191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/web_search_preview_tool.py": {
            "lines": 48,
            "tokens": 199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_param.py": {
            "lines": 264,
            "tokens": 1282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 114,
            "duplicatedTokens": 430,
            "percentage": 43.18,
            "percentageTokens": 33.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_types_param.py": {
            "lines": 32,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_types.py": {
            "lines": 30,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_options.py": {
            "lines": 6,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_mcp_param.py": {
            "lines": 18,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_mcp.py": {
            "lines": 18,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_function_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_function.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_custom_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_custom.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_allowed_param.py": {
            "lines": 35,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool_choice_allowed.py": {
            "lines": 35,
            "tokens": 98,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/tool.py": {
            "lines": 264,
            "tokens": 1327,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 210,
            "duplicatedTokens": 767,
            "percentage": 79.55,
            "percentageTokens": 57.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_web_search_call_searching_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_web_search_call_in_progress_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_web_search_call_completed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_usage.py": {
            "lines": 34,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_text_done_event.py": {
            "lines": 49,
            "tokens": 224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_text_delta_event.py": {
            "lines": 49,
            "tokens": 224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_text_config_param.py": {
            "lines": 35,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_text_config.py": {
            "lines": 34,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_stream_event.py": {
            "lines": 119,
            "tokens": 760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_status.py": {
            "lines": 6,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_retrieve_params.py": {
            "lines": 58,
            "tokens": 297,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 28,
            "duplicatedTokens": 420,
            "percentage": 48.28,
            "percentageTokens": 141.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_refusal_done_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_refusal_delta_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_text_done_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_text_delta_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_summary_text_done_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_summary_text_delta_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_summary_part_done_event.py": {
            "lines": 34,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_summary_part_added_event.py": {
            "lines": 34,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_item_param.py": {
            "lines": 50,
            "tokens": 240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_reasoning_item.py": {
            "lines": 50,
            "tokens": 219,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_queued_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_prompt_param.py": {
            "lines": 28,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_prompt.py": {
            "lines": 27,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_text_param.py": {
            "lines": 114,
            "tokens": 583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_text_annotation_added_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_text.py": {
            "lines": 116,
            "tokens": 498,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_refusal_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_refusal.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_message_param.py": {
            "lines": 33,
            "tokens": 182,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_message.py": {
            "lines": 33,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_item_done_event.py": {
            "lines": 21,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_item_added_event.py": {
            "lines": 21,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_output_item.py": {
            "lines": 180,
            "tokens": 837,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 253,
            "duplicatedTokens": 1112,
            "percentage": 140.56,
            "percentageTokens": 132.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_list_tools_in_progress_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_list_tools_failed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_list_tools_completed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_call_in_progress_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_call_failed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_call_completed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_call_arguments_done_event.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_mcp_call_arguments_delta_event.py": {
            "lines": 26,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_item_list.py": {
            "lines": 25,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_item.py": {
            "lines": 217,
            "tokens": 1003,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 358,
            "duplicatedTokens": 1523,
            "percentage": 164.98,
            "percentageTokens": 151.84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_text_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_text_content_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_text_content.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_text.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_param.py": {
            "lines": 323,
            "tokens": 1559,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 316,
            "duplicatedTokens": 1520,
            "percentage": 97.83,
            "percentageTokens": 97.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_message_item.py": {
            "lines": 32,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_message_content_list_param.py": {
            "lines": 18,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_message_content_list.py": {
            "lines": 9,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_item_param.py": {
            "lines": 320,
            "tokens": 1539,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 316,
            "duplicatedTokens": 1520,
            "percentage": 98.75,
            "percentageTokens": 98.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_item.py": {
            "lines": 322,
            "tokens": 1458,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 154,
            "duplicatedTokens": 682,
            "percentage": 47.83,
            "percentageTokens": 46.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_image_param.py": {
            "lines": 27,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_image_content_param.py": {
            "lines": 27,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_image_content.py": {
            "lines": 27,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_image.py": {
            "lines": 27,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_file_param.py": {
            "lines": 24,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_file_content_param.py": {
            "lines": 24,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_file_content.py": {
            "lines": 24,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_file.py": {
            "lines": 24,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_content_param.py": {
            "lines": 16,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_content.py": {
            "lines": 16,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_audio_param.py": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_input_audio.py": {
            "lines": 21,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_incomplete_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_includable.py": {
            "lines": 15,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_in_progress_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_image_gen_call_partial_image_event.py": {
            "lines": 29,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_image_gen_call_in_progress_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_image_gen_call_generating_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_image_gen_call_completed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_web_search_param.py": {
            "lines": 72,
            "tokens": 370,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_web_search.py": {
            "lines": 66,
            "tokens": 329,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_tool_call_param.py": {
            "lines": 30,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_tool_call_output_item.py": {
            "lines": 39,
            "tokens": 211,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_tool_call_item.py": {
            "lines": 9,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_tool_call.py": {
            "lines": 31,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_output_item_param.py": {
            "lines": 15,
            "tokens": 85,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_output_item_list_param.py": {
            "lines": 17,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_output_item_list.py": {
            "lines": 9,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_output_item.py": {
            "lines": 15,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_arguments_done_event.py": {
            "lines": 25,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_function_call_arguments_delta_event.py": {
            "lines": 25,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_format_text_json_schema_config_param.py": {
            "lines": 40,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_format_text_json_schema_config.py": {
            "lines": 42,
            "tokens": 145,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_format_text_config_param.py": {
            "lines": 15,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_format_text_config.py": {
            "lines": 15,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_file_search_tool_call_param.py": {
            "lines": 52,
            "tokens": 250,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_file_search_tool_call.py": {
            "lines": 50,
            "tokens": 249,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_file_search_call_searching_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_file_search_call_in_progress_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_file_search_call_completed_event.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_failed_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_error_event.py": {
            "lines": 24,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_error.py": {
            "lines": 33,
            "tokens": 135,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call_param.py": {
            "lines": 23,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call_output_param.py": {
            "lines": 30,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call_output.py": {
            "lines": 32,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call_input_done_event.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call_input_delta_event.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_custom_tool_call.py": {
            "lines": 24,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_created_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py": {
            "lines": 321,
            "tokens": 2505,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 136,
            "duplicatedTokens": 1803,
            "percentage": 42.37,
            "percentageTokens": 71.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_conversation_param.py": {
            "lines": 11,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_content_part_done_event.py": {
            "lines": 43,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_content_part_added_event.py": {
            "lines": 43,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_computer_tool_call_param.py": {
            "lines": 206,
            "tokens": 837,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_computer_tool_call_output_screenshot_param.py": {
            "lines": 20,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_computer_tool_call_output_screenshot.py": {
            "lines": 21,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_computer_tool_call_output_item.py": {
            "lines": 46,
            "tokens": 204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_computer_tool_call.py": {
            "lines": 208,
            "tokens": 705,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_completed_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_tool_call_param.py": {
            "lines": 53,
            "tokens": 281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_tool_call.py": {
            "lines": 54,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_call_interpreting_event.py": {
            "lines": 23,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_call_in_progress_event.py": {
            "lines": 23,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_call_completed_event.py": {
            "lines": 23,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_call_code_done_event.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_code_interpreter_call_code_delta_event.py": {
            "lines": 26,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_audio_transcript_done_event.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_audio_transcript_delta_event.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_audio_done_event.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response_audio_delta_event.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/response.py": {
            "lines": 289,
            "tokens": 1814,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 56,
            "duplicatedTokens": 774,
            "percentage": 19.38,
            "percentageTokens": 42.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/parsed_response.py": {
            "lines": 96,
            "tokens": 620,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/input_token_count_response.py": {
            "lines": 12,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/input_token_count_params.py": {
            "lines": 137,
            "tokens": 432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/input_item_list_params.py": {
            "lines": 33,
            "tokens": 111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/function_tool_param.py": {
            "lines": 27,
            "tokens": 138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/function_tool.py": {
            "lines": 27,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/file_search_tool_param.py": {
            "lines": 45,
            "tokens": 224,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/file_search_tool.py": {
            "lines": 43,
            "tokens": 231,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/easy_input_message_param.py": {
            "lines": 26,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/easy_input_message.py": {
            "lines": 25,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/custom_tool_param.py": {
            "lines": 22,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/custom_tool.py": {
            "lines": 22,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/computer_tool_param.py": {
            "lines": 20,
            "tokens": 117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/computer_tool.py": {
            "lines": 20,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/responses/__init__.py": {
            "lines": 249,
            "tokens": 2343,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/session_updated_event.py": {
            "lines": 22,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/session_update_event_param.py": {
            "lines": 31,
            "tokens": 135,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/session_update_event.py": {
            "lines": 30,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/session_created_event.py": {
            "lines": 22,
            "tokens": 120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_text_done_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_text_delta_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_output_item_done_event.py": {
            "lines": 24,
            "tokens": 101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_output_item_added_event.py": {
            "lines": 24,
            "tokens": 101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_mcp_call_in_progress.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_mcp_call_failed.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_mcp_call_completed.py": {
            "lines": 20,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_mcp_call_arguments_done.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_mcp_call_arguments_delta.py": {
            "lines": 30,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_function_call_arguments_done_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_function_call_arguments_delta_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_done_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_created_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_create_event_param.py": {
            "lines": 19,
            "tokens": 93,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_create_event.py": {
            "lines": 19,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_content_part_done_event.py": {
            "lines": 44,
            "tokens": 206,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 39,
            "duplicatedTokens": 184,
            "percentage": 88.64,
            "percentageTokens": 89.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_content_part_added_event.py": {
            "lines": 44,
            "tokens": 206,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 39,
            "duplicatedTokens": 184,
            "percentage": 88.64,
            "percentageTokens": 89.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_cancel_event_param.py": {
            "lines": 20,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_cancel_event.py": {
            "lines": 21,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_audio_transcript_done_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_audio_transcript_delta_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_audio_done_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/response_audio_delta_event.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_truncation_retention_ratio_param.py": {
            "lines": 17,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_truncation_retention_ratio.py": {
            "lines": 17,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_truncation_param.py": {
            "lines": 11,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_truncation.py": {
            "lines": 9,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_turn_detection.py": {
            "lines": 31,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_create_response.py": {
            "lines": 67,
            "tokens": 311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_create_request_param.py": {
            "lines": 27,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_create_request.py": {
            "lines": 26,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_param.py": {
            "lines": 12,
            "tokens": 58,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_turn_detection_param.py": {
            "lines": 94,
            "tokens": 235,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 87,
            "duplicatedTokens": 175,
            "percentage": 92.55,
            "percentageTokens": 74.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_turn_detection.py": {
            "lines": 97,
            "tokens": 307,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 144,
            "duplicatedTokens": 342,
            "percentage": 148.45,
            "percentageTokens": 111.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_param.py": {
            "lines": 66,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input.py": {
            "lines": 64,
            "tokens": 178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio.py": {
            "lines": 11,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tracing_config_param.py": {
            "lines": 30,
            "tokens": 108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tracing_config.py": {
            "lines": 30,
            "tokens": 130,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_union_param.py": {
            "lines": 139,
            "tokens": 555,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 242,
            "duplicatedTokens": 913,
            "percentage": 174.1,
            "percentageTokens": 164.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_union.py": {
            "lines": 140,
            "tokens": 625,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 116,
            "duplicatedTokens": 487,
            "percentage": 82.86,
            "percentageTokens": 77.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_param.py": {
            "lines": 142,
            "tokens": 575,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 128,
            "duplicatedTokens": 483,
            "percentage": 90.14,
            "percentageTokens": 84,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config.py": {
            "lines": 9,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tool_choice_config_param.py": {
            "lines": 13,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tool_choice_config.py": {
            "lines": 11,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py": {
            "lines": 463,
            "tokens": 2178,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 145,
            "duplicatedTokens": 775,
            "percentage": 31.32,
            "percentageTokens": 35.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_request_param.py": {
            "lines": 110,
            "tokens": 514,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 102,
            "duplicatedTokens": 517,
            "percentage": 92.73,
            "percentageTokens": 100.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_request.py": {
            "lines": 110,
            "tokens": 556,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 153,
            "percentage": 10.91,
            "percentageTokens": 27.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_client_secret.py": {
            "lines": 19,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_server_event.py": {
            "lines": 154,
            "tokens": 838,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 186,
            "percentage": 30.52,
            "percentageTokens": 22.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_usage_output_token_details.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_usage_input_token_details.py": {
            "lines": 34,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_usage.py": {
            "lines": 40,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_status.py": {
            "lines": 38,
            "tokens": 168,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 146,
            "percentage": 86.84,
            "percentageTokens": 86.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_params_param.py": {
            "lines": 98,
            "tokens": 384,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_params.py": {
            "lines": 97,
            "tokens": 432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_mcp_tool_param.py": {
            "lines": 134,
            "tokens": 525,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_mcp_tool.py": {
            "lines": 134,
            "tokens": 570,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 47,
            "duplicatedTokens": 140,
            "percentage": 35.07,
            "percentageTokens": 24.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_audio_output_param.py": {
            "lines": 27,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_audio_output.py": {
            "lines": 28,
            "tokens": 159,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response.py": {
            "lines": 97,
            "tokens": 439,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcphttp_error_param.py": {
            "lines": 14,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcphttp_error.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_tool_execution_error_param.py": {
            "lines": 12,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_tool_execution_error.py": {
            "lines": 12,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_tool_call_param.py": {
            "lines": 39,
            "tokens": 218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_tool_call.py": {
            "lines": 42,
            "tokens": 239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_protocol_error_param.py": {
            "lines": 14,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_protocol_error.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_list_tools_param.py": {
            "lines": 35,
            "tokens": 182,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_list_tools.py": {
            "lines": 35,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_approval_response_param.py": {
            "lines": 24,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_approval_response.py": {
            "lines": 24,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_approval_request_param.py": {
            "lines": 23,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_mcp_approval_request.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_function_tool_param.py": {
            "lines": 23,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_function_tool.py": {
            "lines": 24,
            "tokens": 118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_error_event.py": {
            "lines": 18,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_error.py": {
            "lines": 23,
            "tokens": 110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_user_message_param.py": {
            "lines": 68,
            "tokens": 240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_user_message.py": {
            "lines": 68,
            "tokens": 284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_system_message_param.py": {
            "lines": 41,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_system_message.py": {
            "lines": 41,
            "tokens": 201,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_function_call_param.py": {
            "lines": 39,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_function_call_output_param.py": {
            "lines": 35,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_function_call_output.py": {
            "lines": 36,
            "tokens": 143,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_function_call.py": {
            "lines": 40,
            "tokens": 160,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_assistant_message_param.py": {
            "lines": 57,
            "tokens": 208,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_conversation_item_assistant_message.py": {
            "lines": 57,
            "tokens": 238,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_connect_params.py": {
            "lines": 12,
            "tokens": 55,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_client_event_param.py": {
            "lines": 33,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_client_event.py": {
            "lines": 35,
            "tokens": 214,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_input_turn_detection_param.py": {
            "lines": 94,
            "tokens": 235,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 87,
            "duplicatedTokens": 175,
            "percentage": 92.55,
            "percentageTokens": 74.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_input_turn_detection.py": {
            "lines": 97,
            "tokens": 307,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 87,
            "duplicatedTokens": 219,
            "percentage": 89.69,
            "percentageTokens": 71.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_formats_param.py": {
            "lines": 28,
            "tokens": 164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_formats.py": {
            "lines": 29,
            "tokens": 205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config_param.py": {
            "lines": 15,
            "tokens": 74,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config_output_param.py": {
            "lines": 34,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config_output.py": {
            "lines": 35,
            "tokens": 150,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config_input_param.py": {
            "lines": 64,
            "tokens": 156,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config_input.py": {
            "lines": 62,
            "tokens": 172,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_config.py": {
            "lines": 14,
            "tokens": 85,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/rate_limits_updated_event.py": {
            "lines": 32,
            "tokens": 172,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 147,
            "percentage": 84.38,
            "percentageTokens": 85.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/output_audio_buffer_clear_event_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/output_audio_buffer_clear_event.py": {
            "lines": 15,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/noise_reduction_type.py": {
            "lines": 6,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/mcp_list_tools_in_progress.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/mcp_list_tools_failed.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/mcp_list_tools_completed.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/log_prob_properties.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_timeout_triggered.py": {
            "lines": 29,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_speech_stopped_event.py": {
            "lines": 24,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_speech_started_event.py": {
            "lines": 25,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_committed_event.py": {
            "lines": 24,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_commit_event_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_commit_event.py": {
            "lines": 15,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_cleared_event.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_clear_event_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_clear_event.py": {
            "lines": 15,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_append_event_param.py": {
            "lines": 21,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/input_audio_buffer_append_event.py": {
            "lines": 22,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_truncated_event.py": {
            "lines": 23,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_truncate_event_param.py": {
            "lines": 30,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_truncate_event.py": {
            "lines": 31,
            "tokens": 107,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_retrieve_event_param.py": {
            "lines": 17,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_retrieve_event.py": {
            "lines": 18,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_param.py": {
            "lines": 29,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_segment.py": {
            "lines": 35,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_failed_event.py": {
            "lines": 38,
            "tokens": 180,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 158,
            "percentage": 86.84,
            "percentageTokens": 87.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_delta_event.py": {
            "lines": 35,
            "tokens": 146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_completed_event.py": {
            "lines": 78,
            "tokens": 329,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 40,
            "duplicatedTokens": 169,
            "percentage": 51.28,
            "percentageTokens": 51.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_done.py": {
            "lines": 25,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_deleted_event.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_delete_event_param.py": {
            "lines": 17,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_delete_event.py": {
            "lines": 18,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_created_event.py": {
            "lines": 26,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_create_event_param.py": {
            "lines": 28,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_create_event.py": {
            "lines": 28,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_added.py": {
            "lines": 25,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item.py": {
            "lines": 31,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/conversation_created_event.py": {
            "lines": 26,
            "tokens": 129,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 21,
            "duplicatedTokens": 107,
            "percentage": 80.77,
            "percentageTokens": 82.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/client_secret_create_response.py": {
            "lines": 25,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/client_secret_create_params.py": {
            "lines": 45,
            "tokens": 154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/call_reject_params.py": {
            "lines": 14,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/call_refer_params.py": {
            "lines": 14,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/call_create_params.py": {
            "lines": 16,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/call_accept_params.py": {
            "lines": 110,
            "tokens": 514,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 93,
            "duplicatedTokens": 402,
            "percentage": 84.55,
            "percentageTokens": 78.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/audio_transcription_param.py": {
            "lines": 33,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/audio_transcription.py": {
            "lines": 36,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/realtime/__init__.py": {
            "lines": 236,
            "tokens": 2239,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/text_similarity_grader_param.py": {
            "lines": 41,
            "tokens": 167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/text_similarity_grader.py": {
            "lines": 39,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/string_check_grader_param.py": {
            "lines": 23,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/string_check_grader.py": {
            "lines": 23,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/score_model_grader_param.py": {
            "lines": 110,
            "tokens": 487,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 208,
            "percentage": 44.55,
            "percentageTokens": 42.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/score_model_grader.py": {
            "lines": 104,
            "tokens": 470,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 183,
            "percentage": 42.31,
            "percentageTokens": 38.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/python_grader_param.py": {
            "lines": 20,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/python_grader.py": {
            "lines": 21,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/multi_grader_param.py": {
            "lines": 34,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/multi_grader.py": {
            "lines": 31,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/label_model_grader_param.py": {
            "lines": 76,
            "tokens": 398,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 208,
            "percentage": 64.47,
            "percentageTokens": 52.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/label_model_grader.py": {
            "lines": 69,
            "tokens": 338,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 183,
            "percentage": 63.77,
            "percentageTokens": 54.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/graders/__init__.py": {
            "lines": 15,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/supervised_method_param.py": {
            "lines": 13,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/supervised_method.py": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/supervised_hyperparameters_param.py": {
            "lines": 28,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/supervised_hyperparameters.py": {
            "lines": 28,
            "tokens": 125,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/reinforcement_method_param.py": {
            "lines": 26,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/reinforcement_method.py": {
            "lines": 23,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/reinforcement_hyperparameters_param.py": {
            "lines": 42,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/reinforcement_hyperparameters.py": {
            "lines": 42,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_list_params.py": {
            "lines": 22,
            "tokens": 91,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_list_events_params.py": {
            "lines": 14,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_create_params.py": {
            "lines": 175,
            "tokens": 1658,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 52,
            "duplicatedTokens": 618,
            "percentage": 29.71,
            "percentageTokens": 37.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/fine_tuning_job_wandb_integration_object.py": {
            "lines": 20,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/fine_tuning_job_wandb_integration.py": {
            "lines": 32,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/fine_tuning_job_integration.py": {
            "lines": 4,
            "tokens": 17,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/fine_tuning_job_event.py": {
            "lines": 31,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/fine_tuning_job.py": {
            "lines": 160,
            "tokens": 602,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/dpo_method_param.py": {
            "lines": 13,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/dpo_method.py": {
            "lines": 12,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/dpo_hyperparameters_param.py": {
            "lines": 35,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/dpo_hyperparameters.py": {
            "lines": 35,
            "tokens": 151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/fine_tuning/__init__.py": {
            "lines": 25,
            "tokens": 276,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py": {
            "lines": 408,
            "tokens": 1545,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 1224,
            "duplicatedTokens": 4629,
            "percentage": 300,
            "percentageTokens": 299.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_list_response.py": {
            "lines": 408,
            "tokens": 1545,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 408,
            "duplicatedTokens": 1543,
            "percentage": 100,
            "percentageTokens": 99.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_list_params.py": {
            "lines": 26,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_delete_response.py": {
            "lines": 14,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_create_response.py": {
            "lines": 408,
            "tokens": 1545,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 408,
            "duplicatedTokens": 1543,
            "percentage": 100,
            "percentageTokens": 99.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_create_params.py": {
            "lines": 331,
            "tokens": 1196,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/run_cancel_response.py": {
            "lines": 408,
            "tokens": 1545,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 408,
            "duplicatedTokens": 1543,
            "percentage": 100,
            "percentageTokens": 99.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/eval_api_error.py": {
            "lines": 12,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/create_eval_jsonl_run_data_source_param.py": {
            "lines": 46,
            "tokens": 262,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 138,
            "percentage": 56.52,
            "percentageTokens": 52.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/create_eval_jsonl_run_data_source.py": {
            "lines": 41,
            "tokens": 245,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 113,
            "percentage": 60.98,
            "percentageTokens": 46.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/create_eval_completions_run_data_source_param.py": {
            "lines": 227,
            "tokens": 977,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 138,
            "percentage": 11.45,
            "percentageTokens": 14.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/create_eval_completions_run_data_source.py": {
            "lines": 231,
            "tokens": 1014,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 113,
            "percentage": 10.82,
            "percentageTokens": 11.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/evals/__init__.py": {
            "lines": 21,
            "tokens": 184,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/text_content.py": {
            "lines": 12,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/summary_text_content.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/refusal_content_param.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/refusal_content.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/output_text_content_param.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/output_text_content.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/message.py": {
            "lines": 65,
            "tokens": 348,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/item_retrieve_params.py": {
            "lines": 21,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/item_list_params.py": {
            "lines": 49,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/item_create_params.py": {
            "lines": 23,
            "tokens": 109,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_text_content_param.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_text_content.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_image_content_param.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_image_content.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_file_content_param.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/input_file_content.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation_update_params.py": {
            "lines": 21,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation_item_list.py": {
            "lines": 25,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation_item.py": {
            "lines": 221,
            "tokens": 1059,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 765,
            "percentage": 81,
            "percentageTokens": 72.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation_deleted_resource.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation_create_params.py": {
            "lines": 28,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/conversation.py": {
            "lines": 29,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/computer_screenshot_content.py": {
            "lines": 21,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/conversations/__init__.py": {
            "lines": 26,
            "tokens": 309,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/file_retrieve_response.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/file_list_response.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/file_list_params.py": {
            "lines": 29,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/file_create_response.py": {
            "lines": 29,
            "tokens": 112,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/file_create_params.py": {
            "lines": 16,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/containers/__init__.py": {
            "lines": 8,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/parsed_function_tool_call.py": {
            "lines": 28,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/parsed_chat_completion.py": {
            "lines": 39,
            "tokens": 217,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/completion_update_params.py": {
            "lines": 21,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/completion_list_params.py": {
            "lines": 36,
            "tokens": 124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py": {
            "lines": 437,
            "tokens": 3401,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 79,
            "duplicatedTokens": 958,
            "percentage": 18.08,
            "percentageTokens": 28.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_user_message_param.py": {
            "lines": 24,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_tool_union_param.py": {
            "lines": 12,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_tool_param.py": {
            "lines": 13,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_tool_message_param.py": {
            "lines": 20,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_tool_choice_option_param.py": {
            "lines": 18,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_token_logprob.py": {
            "lines": 56,
            "tokens": 147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_system_message_param.py": {
            "lines": 24,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_stream_options_param.py": {
            "lines": 30,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_store_message.py": {
            "lines": 22,
            "tokens": 118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_role.py": {
            "lines": 6,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_reasoning_effort.py": {
            "lines": 6,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_prediction_content_param.py": {
            "lines": 24,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_named_tool_choice_param.py": {
            "lines": 18,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_named_tool_choice_custom_param.py": {
            "lines": 18,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_modality.py": {
            "lines": 6,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_tool_call_union_param.py": {
            "lines": 14,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_tool_call_param.py": {
            "lines": 13,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_tool_call.py": {
            "lines": 16,
            "tokens": 111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_param.py": {
            "lines": 23,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_function_tool_call_param.py": {
            "lines": 30,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_function_tool_call.py": {
            "lines": 30,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_custom_tool_call_param.py": {
            "lines": 25,
            "tokens": 132,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message_custom_tool_call.py": {
            "lines": 25,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_message.py": {
            "lines": 78,
            "tokens": 308,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_function_tool_param.py": {
            "lines": 15,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_function_tool.py": {
            "lines": 14,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_function_message_param.py": {
            "lines": 18,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_function_call_option_param.py": {
            "lines": 11,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_developer_message_param.py": {
            "lines": 24,
            "tokens": 116,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_deleted.py": {
            "lines": 17,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_custom_tool_param.py": {
            "lines": 57,
            "tokens": 294,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_text_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_text.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_refusal_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_param.py": {
            "lines": 40,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_input_audio_param.py": {
            "lines": 21,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_image_param.py": {
            "lines": 25,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_content_part_image.py": {
            "lines": 26,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_chunk.py": {
            "lines": 165,
            "tokens": 608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_audio_param.py": {
            "lines": 24,
            "tokens": 139,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_audio.py": {
            "lines": 24,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_assistant_message_param.py": {
            "lines": 69,
            "tokens": 285,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_allowed_tools_param.py": {
            "lines": 31,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion_allowed_tool_choice_param.py": {
            "lines": 16,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/chat_completion.py": {
            "lines": 88,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat/__init__.py": {
            "lines": 101,
            "tokens": 824,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/thread_update_params.py": {
            "lines": 55,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/thread_deleted.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/thread_create_params.py": {
            "lines": 185,
            "tokens": 642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py": {
            "lines": 396,
            "tokens": 3057,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 189,
            "duplicatedTokens": 1955,
            "percentage": 47.73,
            "percentageTokens": 63.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/thread.py": {
            "lines": 62,
            "tokens": 233,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/function_tool_param.py": {
            "lines": 15,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/function_tool.py": {
            "lines": 14,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/file_search_tool_param.py": {
            "lines": 53,
            "tokens": 245,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 101,
            "percentage": 24.53,
            "percentageTokens": 41.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/file_search_tool.py": {
            "lines": 54,
            "tokens": 258,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 101,
            "percentage": 24.07,
            "percentageTokens": 39.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/code_interpreter_tool_param.py": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/code_interpreter_tool.py": {
            "lines": 11,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/chatkit_workflow.py": {
            "lines": 31,
            "tokens": 136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_update_params.py": {
            "lines": 186,
            "tokens": 922,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 74,
            "duplicatedTokens": 386,
            "percentage": 39.78,
            "percentageTokens": 41.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_param.py": {
            "lines": 13,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice_param.py": {
            "lines": 15,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice_option_param.py": {
            "lines": 11,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice_option.py": {
            "lines": 9,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice_function_param.py": {
            "lines": 11,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice_function.py": {
            "lines": 9,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool_choice.py": {
            "lines": 15,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_tool.py": {
            "lines": 14,
            "tokens": 101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_stream_event.py": {
            "lines": 293,
            "tokens": 1075,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_response_format_option_param.py": {
            "lines": 15,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_response_format_option.py": {
            "lines": 13,
            "tokens": 94,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_list_params.py": {
            "lines": 38,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_deleted.py": {
            "lines": 14,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant_create_params.py": {
            "lines": 215,
            "tokens": 1246,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 116,
            "duplicatedTokens": 744,
            "percentage": 53.95,
            "percentageTokens": 59.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/assistant.py": {
            "lines": 133,
            "tokens": 614,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/beta/__init__.py": {
            "lines": 33,
            "tokens": 380,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/translation_verbose.py": {
            "lines": 21,
            "tokens": 101,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/translation_create_response.py": {
            "lines": 10,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/translation_create_params.py": {
            "lines": 48,
            "tokens": 153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/translation.py": {
            "lines": 8,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_word.py": {
            "lines": 15,
            "tokens": 60,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_verbose.py": {
            "lines": 37,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_text_segment_event.py": {
            "lines": 26,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_text_done_event.py": {
            "lines": 62,
            "tokens": 294,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_text_delta_event.py": {
            "lines": 40,
            "tokens": 176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_stream_event.py": {
            "lines": 15,
            "tokens": 103,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_segment.py": {
            "lines": 48,
            "tokens": 142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_include.py": {
            "lines": 6,
            "tokens": 34,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_diarized_segment.py": {
            "lines": 31,
            "tokens": 102,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_diarized.py": {
            "lines": 62,
            "tokens": 326,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 36,
            "duplicatedTokens": 174,
            "percentage": 58.06,
            "percentageTokens": 53.37,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_response.py": {
            "lines": 11,
            "tokens": 73,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py": {
            "lines": 171,
            "tokens": 1159,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 44,
            "duplicatedTokens": 871,
            "percentage": 25.73,
            "percentageTokens": 75.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/transcription.py": {
            "lines": 70,
            "tokens": 367,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 36,
            "duplicatedTokens": 174,
            "percentage": 51.43,
            "percentageTokens": 47.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/speech_model.py": {
            "lines": 6,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/speech_create_params.py": {
            "lines": 56,
            "tokens": 351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio/__init__.py": {
            "lines": 22,
            "tokens": 257,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py": {
            "lines": 874,
            "tokens": 5470,
            "sources": 1,
            "clones": 21,
            "duplicatedLines": 493,
            "duplicatedTokens": 3925,
            "percentage": 56.41,
            "percentageTokens": 71.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py": {
            "lines": 938,
            "tokens": 6426,
            "sources": 1,
            "clones": 29,
            "duplicatedLines": 683,
            "duplicatedTokens": 4964,
            "percentage": 72.81,
            "percentageTokens": 77.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py": {
            "lines": 796,
            "tokens": 5266,
            "sources": 1,
            "clones": 16,
            "duplicatedLines": 451,
            "duplicatedTokens": 3216,
            "percentage": 56.66,
            "percentageTokens": 61.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/vector_stores/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py": {
            "lines": 720,
            "tokens": 3733,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 243,
            "duplicatedTokens": 2043,
            "percentage": 33.75,
            "percentageTokens": 54.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/uploads/parts.py": {
            "lines": 204,
            "tokens": 1619,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 842,
            "percentage": 30.39,
            "percentageTokens": 52.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/uploads/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py": {
            "lines": 308,
            "tokens": 2944,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 208,
            "duplicatedTokens": 2911,
            "percentage": 67.53,
            "percentageTokens": 98.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/responses/input_items.py": {
            "lines": 225,
            "tokens": 1558,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 96,
            "duplicatedTokens": 892,
            "percentage": 42.67,
            "percentageTokens": 57.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/responses/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/realtime/client_secrets.py": {
            "lines": 188,
            "tokens": 1304,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 47,
            "duplicatedTokens": 625,
            "percentage": 25,
            "percentageTokens": 47.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py": {
            "lines": 741,
            "tokens": 4181,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 464,
            "duplicatedTokens": 2466,
            "percentage": 62.62,
            "percentageTokens": 58.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/realtime/__init__.py": {
            "lines": 46,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/fine_tuning.py": {
            "lines": 165,
            "tokens": 1008,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/fine_tuning/__init__.py": {
            "lines": 60,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/evals/evals.py": {
            "lines": 661,
            "tokens": 4401,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 337,
            "duplicatedTokens": 2782,
            "percentage": 50.98,
            "percentageTokens": 63.21,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/evals/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/conversations/items.py": {
            "lines": 556,
            "tokens": 3225,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 261,
            "duplicatedTokens": 2022,
            "percentage": 46.94,
            "percentageTokens": 62.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py": {
            "lines": 485,
            "tokens": 2991,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 233,
            "duplicatedTokens": 1637,
            "percentage": 48.04,
            "percentageTokens": 54.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/conversations/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/containers/containers.py": {
            "lines": 509,
            "tokens": 2702,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 206,
            "duplicatedTokens": 1300,
            "percentage": 40.47,
            "percentageTokens": 48.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/containers/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/chat/chat.py": {
            "lines": 101,
            "tokens": 638,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/chat/__init__.py": {
            "lines": 32,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/beta.py": {
            "lines": 186,
            "tokens": 1099,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/beta/__init__.py": {
            "lines": 60,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/audio/translations.py": {
            "lines": 366,
            "tokens": 2195,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 116,
            "duplicatedTokens": 1651,
            "percentage": 31.69,
            "percentageTokens": 75.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py": {
            "lines": 979,
            "tokens": 6999,
            "sources": 1,
            "clones": 31,
            "duplicatedLines": 564,
            "duplicatedTokens": 7152,
            "percentage": 57.61,
            "percentageTokens": 102.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/audio/speech.py": {
            "lines": 254,
            "tokens": 1956,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 117,
            "duplicatedTokens": 1375,
            "percentage": 46.06,
            "percentageTokens": 70.3,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/audio/audio.py": {
            "lines": 165,
            "tokens": 1002,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/audio/__init__.py": {
            "lines": 60,
            "tokens": 246,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/_deltas.py": {
            "lines": 63,
            "tokens": 533,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/streaming/__init__.py": {
            "lines": 7,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_parsing/_responses.py": {
            "lines": 175,
            "tokens": 1346,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_parsing/_completions.py": {
            "lines": 304,
            "tokens": 2252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_parsing/__init__.py": {
            "lines": 11,
            "tokens": 85,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_tools/migrate.py": {
            "lines": 163,
            "tokens": 1158,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_tools/fine_tunes.py": {
            "lines": 62,
            "tokens": 350,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_tools/_main.py": {
            "lines": 16,
            "tokens": 114,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/models.py": {
            "lines": 44,
            "tokens": 376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/image.py": {
            "lines": 138,
            "tokens": 1256,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 210,
            "percentage": 15.94,
            "percentageTokens": 16.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/files.py": {
            "lines": 79,
            "tokens": 619,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/completions.py": {
            "lines": 172,
            "tokens": 1264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/audio.py": {
            "lines": 107,
            "tokens": 946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_api/_main.py": {
            "lines": 16,
            "tokens": 131,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/zai_org.py": {
            "lines": 16,
            "tokens": 167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py": {
            "lines": 87,
            "tokens": 821,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 70,
            "duplicatedTokens": 793,
            "percentage": 80.46,
            "percentageTokens": 96.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/scaleway.py": {
            "lines": 27,
            "tokens": 302,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 180,
            "percentage": 48.15,
            "percentageTokens": 59.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/sambanova.py": {
            "lines": 41,
            "tokens": 486,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 180,
            "percentage": 31.71,
            "percentageTokens": 37.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/replicate.py": {
            "lines": 89,
            "tokens": 924,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/publicai.py": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/openai.py": {
            "lines": 24,
            "tokens": 213,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/nscale.py": {
            "lines": 43,
            "tokens": 407,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/novita.py": {
            "lines": 68,
            "tokens": 619,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 110,
            "percentage": 16.18,
            "percentageTokens": 17.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/nebius.py": {
            "lines": 82,
            "tokens": 880,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 248,
            "percentage": 28.05,
            "percentageTokens": 28.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/hyperbolic.py": {
            "lines": 46,
            "tokens": 444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/hf_inference.py": {
            "lines": 227,
            "tokens": 1948,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/groq.py": {
            "lines": 8,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fireworks_ai.py": {
            "lines": 26,
            "tokens": 267,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 162,
            "percentage": 46.15,
            "percentageTokens": 60.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/featherless_ai.py": {
            "lines": 37,
            "tokens": 346,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 11,
            "duplicatedTokens": 110,
            "percentage": 29.73,
            "percentageTokens": 31.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py": {
            "lines": 247,
            "tokens": 2352,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 72,
            "duplicatedTokens": 786,
            "percentage": 29.15,
            "percentageTokens": 33.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/cohere.py": {
            "lines": 31,
            "tokens": 282,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 163,
            "percentage": 41.94,
            "percentageTokens": 57.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/clarifai.py": {
            "lines": 12,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/cerebras.py": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/black_forest_labs.py": {
            "lines": 68,
            "tokens": 645,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/_common.py": {
            "lines": 322,
            "tokens": 2432,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/__init__.py": {
            "lines": 230,
            "tokens": 1561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/utils.py": {
            "lines": 127,
            "tokens": 810,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/types.py": {
            "lines": 44,
            "tokens": 296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/mcp_client.py": {
            "lines": 383,
            "tokens": 2715,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/constants.py": {
            "lines": 81,
            "tokens": 391,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/cli.py": {
            "lines": 246,
            "tokens": 1748,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/agent.py": {
            "lines": 99,
            "tokens": 630,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_mcp/_cli_hacks.py": {
            "lines": 87,
            "tokens": 504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py": {
            "lines": 590,
            "tokens": 5244,
            "sources": 1,
            "clones": 29,
            "duplicatedLines": 374,
            "duplicatedTokens": 4234,
            "percentage": 63.39,
            "percentageTokens": 80.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/pipe.py": {
            "lines": 10,
            "tokens": 111,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/open.py": {
            "lines": 10,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/mv.py": {
            "lines": 56,
            "tokens": 359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py": {
            "lines": 586,
            "tokens": 4954,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 96,
            "duplicatedTokens": 1130,
            "percentage": 16.38,
            "percentageTokens": 22.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py": {
            "lines": 556,
            "tokens": 4975,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 244,
            "duplicatedTokens": 2736,
            "percentage": 43.88,
            "percentageTokens": 54.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/common.py": {
            "lines": 174,
            "tokens": 1006,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/tests/abstract/__init__.py": {
            "lines": 288,
            "tokens": 1504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/wait.py": {
            "lines": 123,
            "tokens": 803,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 115,
            "percentage": 12.2,
            "percentageTokens": 14.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/util.py": {
            "lines": 41,
            "tokens": 395,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/url.py": {
            "lines": 468,
            "tokens": 3216,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 29,
            "duplicatedTokens": 245,
            "percentage": 6.2,
            "percentageTokens": 7.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/timeout.py": {
            "lines": 274,
            "tokens": 1056,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/ssltransport.py": {
            "lines": 270,
            "tokens": 2326,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 45,
            "duplicatedTokens": 365,
            "percentage": 16.67,
            "percentageTokens": 15.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/ssl_match_hostname.py": {
            "lines": 158,
            "tokens": 1013,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 54,
            "duplicatedTokens": 321,
            "percentage": 34.18,
            "percentageTokens": 31.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/ssl_.py": {
            "lines": 523,
            "tokens": 3363,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 430,
            "percentage": 5.35,
            "percentageTokens": 12.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/retry.py": {
            "lines": 532,
            "tokens": 2900,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 72,
            "duplicatedTokens": 569,
            "percentage": 13.53,
            "percentageTokens": 19.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/response.py": {
            "lines": 100,
            "tokens": 433,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/request.py": {
            "lines": 265,
            "tokens": 1362,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 120,
            "percentage": 6.42,
            "percentageTokens": 8.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/proxy.py": {
            "lines": 42,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/connection.py": {
            "lines": 136,
            "tokens": 778,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/util/__init__.py": {
            "lines": 41,
            "tokens": 212,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/http2/probe.py": {
            "lines": 86,
            "tokens": 663,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/http2/connection.py": {
            "lines": 355,
            "tokens": 2503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/http2/__init__.py": {
            "lines": 52,
            "tokens": 352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/socks.py": {
            "lines": 227,
            "tokens": 1209,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 37,
            "duplicatedTokens": 353,
            "percentage": 16.3,
            "percentageTokens": 29.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/contrib/pyopenssl.py": {
            "lines": 563,
            "tokens": 4280,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 83,
            "duplicatedTokens": 501,
            "percentage": 14.74,
            "percentageTokens": 11.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/utils_worker.py": {
            "lines": 37,
            "tokens": 281,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/telegram.py": {
            "lines": 152,
            "tokens": 865,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 126,
            "percentage": 10.53,
            "percentageTokens": 14.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/slack.py": {
            "lines": 119,
            "tokens": 811,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 86,
            "percentage": 6.72,
            "percentageTokens": 10.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/logging.py": {
            "lines": 125,
            "tokens": 721,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/itertools.py": {
            "lines": 34,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/discord.py": {
            "lines": 155,
            "tokens": 1061,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 212,
            "percentage": 15.48,
            "percentageTokens": 19.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/concurrent.py": {
            "lines": 104,
            "tokens": 622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/bells.py": {
            "lines": 25,
            "tokens": 155,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/contrib/__init__.py": {
            "lines": 91,
            "tokens": 624,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/size_score.py": {
            "lines": 112,
            "tokens": 825,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 224,
            "duplicatedTokens": 1650,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/ramp_up_time.py": {
            "lines": 69,
            "tokens": 488,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 138,
            "duplicatedTokens": 976,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/performance_claims.py": {
            "lines": 241,
            "tokens": 2020,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 482,
            "duplicatedTokens": 4040,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/license.py": {
            "lines": 84,
            "tokens": 577,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 168,
            "duplicatedTokens": 1154,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/dataset_quality.py": {
            "lines": 99,
            "tokens": 636,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 198,
            "duplicatedTokens": 1272,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py": {
            "lines": 179,
            "tokens": 1618,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 446,
            "duplicatedTokens": 4103,
            "percentage": 249.16,
            "percentageTokens": 253.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py": {
            "lines": 189,
            "tokens": 1594,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 458,
            "duplicatedTokens": 3931,
            "percentage": 242.33,
            "percentageTokens": 246.61,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py": {
            "lines": 442,
            "tokens": 4587,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 916,
            "duplicatedTokens": 9524,
            "percentage": 207.24,
            "percentageTokens": 207.63,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/metrics/base.py": {
            "lines": 31,
            "tokens": 266,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 62,
            "duplicatedTokens": 532,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/weights.py": {
            "lines": 15,
            "tokens": 178,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 356,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/url_ctx.py": {
            "lines": 43,
            "tokens": 330,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 86,
            "duplicatedTokens": 660,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/scoring.py": {
            "lines": 24,
            "tokens": 212,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 48,
            "duplicatedTokens": 424,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/model_url.py": {
            "lines": 80,
            "tokens": 532,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 160,
            "duplicatedTokens": 1064,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/hf_client.py": {
            "lines": 49,
            "tokens": 311,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 98,
            "duplicatedTokens": 622,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/core/exec_pool.py": {
            "lines": 26,
            "tokens": 269,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 52,
            "duplicatedTokens": 538,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/sniffio/_tests/test_sniffio.py": {
            "lines": 83,
            "tokens": 482,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/zenburn.py": {
            "lines": 82,
            "tokens": 452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/xcode.py": {
            "lines": 52,
            "tokens": 251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/vs.py": {
            "lines": 40,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/vim.py": {
            "lines": 66,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/trac.py": {
            "lines": 65,
            "tokens": 365,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 108,
            "percentage": 23.08,
            "percentageTokens": 29.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/tango.py": {
            "lines": 142,
            "tokens": 882,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/stata_light.py": {
            "lines": 41,
            "tokens": 194,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/stata_dark.py": {
            "lines": 41,
            "tokens": 216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/staroffice.py": {
            "lines": 30,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/solarized.py": {
            "lines": 143,
            "tokens": 1009,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/sas.py": {
            "lines": 45,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/rrt.py": {
            "lines": 39,
            "tokens": 184,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/rainbow_dash.py": {
            "lines": 94,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/perldoc.py": {
            "lines": 72,
            "tokens": 400,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 105,
            "percentage": 19.44,
            "percentageTokens": 26.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/pastie.py": {
            "lines": 77,
            "tokens": 462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/paraiso_light.py": {
            "lines": 123,
            "tokens": 965,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 800,
            "percentage": 68.29,
            "percentageTokens": 82.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/paraiso_dark.py": {
            "lines": 123,
            "tokens": 965,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 800,
            "percentage": 68.29,
            "percentageTokens": 82.9,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/onedark.py": {
            "lines": 62,
            "tokens": 289,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/nord.py": {
            "lines": 155,
            "tokens": 939,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 96,
            "duplicatedTokens": 662,
            "percentage": 61.94,
            "percentageTokens": 70.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/native.py": {
            "lines": 69,
            "tokens": 396,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/murphy.py": {
            "lines": 81,
            "tokens": 522,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 240,
            "percentage": 39.51,
            "percentageTokens": 45.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/monokai.py": {
            "lines": 111,
            "tokens": 883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/material.py": {
            "lines": 123,
            "tokens": 834,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/manni.py": {
            "lines": 78,
            "tokens": 452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/lovelace.py": {
            "lines": 99,
            "tokens": 615,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/lilypond.py": {
            "lines": 61,
            "tokens": 416,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/lightbulb.py": {
            "lines": 109,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/inkpot.py": {
            "lines": 71,
            "tokens": 433,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 105,
            "percentage": 19.72,
            "percentageTokens": 24.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/igor.py": {
            "lines": 31,
            "tokens": 119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/gruvbox.py": {
            "lines": 117,
            "tokens": 670,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/gh_dark.py": {
            "lines": 112,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/fruity.py": {
            "lines": 46,
            "tokens": 241,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/friendly_grayscale.py": {
            "lines": 79,
            "tokens": 450,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/friendly.py": {
            "lines": 75,
            "tokens": 457,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 105,
            "percentage": 18.67,
            "percentageTokens": 22.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/emacs.py": {
            "lines": 74,
            "tokens": 451,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 105,
            "percentage": 18.92,
            "percentageTokens": 23.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/dracula.py": {
            "lines": 89,
            "tokens": 506,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/default.py": {
            "lines": 75,
            "tokens": 447,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/colorful.py": {
            "lines": 82,
            "tokens": 521,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 135,
            "percentage": 21.95,
            "percentageTokens": 25.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/coffee.py": {
            "lines": 79,
            "tokens": 539,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/bw.py": {
            "lines": 51,
            "tokens": 273,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/borland.py": {
            "lines": 52,
            "tokens": 284,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 108,
            "percentage": 28.85,
            "percentageTokens": 38.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/autumn.py": {
            "lines": 66,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 105,
            "percentage": 21.21,
            "percentageTokens": 28.15,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/arduino.py": {
            "lines": 99,
            "tokens": 799,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/algol_nu.py": {
            "lines": 64,
            "tokens": 211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 101,
            "percentage": 25,
            "percentageTokens": 47.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/algol.py": {
            "lines": 64,
            "tokens": 211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 16,
            "duplicatedTokens": 101,
            "percentage": 25,
            "percentageTokens": 47.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/abap.py": {
            "lines": 31,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/_mapping.py": {
            "lines": 53,
            "tokens": 795,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 795,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/styles/__init__.py": {
            "lines": 60,
            "tokens": 383,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 48,
            "duplicatedTokens": 358,
            "percentage": 80,
            "percentageTokens": 93.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/zig.py": {
            "lines": 124,
            "tokens": 945,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/yara.py": {
            "lines": 68,
            "tokens": 609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/yang.py": {
            "lines": 102,
            "tokens": 948,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/xorg.py": {
            "lines": 37,
            "tokens": 205,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/x10.py": {
            "lines": 65,
            "tokens": 517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/wren.py": {
            "lines": 97,
            "tokens": 743,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/wowtoc.py": {
            "lines": 119,
            "tokens": 588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/whiley.py": {
            "lines": 114,
            "tokens": 834,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/wgsl.py": {
            "lines": 405,
            "tokens": 1037,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/webidl.py": {
            "lines": 297,
            "tokens": 2628,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/webassembly.py": {
            "lines": 118,
            "tokens": 1305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/web.py": {
            "lines": 23,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/vyper.py": {
            "lines": 139,
            "tokens": 1237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/vip.py": {
            "lines": 149,
            "tokens": 1392,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/verifpal.py": {
            "lines": 64,
            "tokens": 640,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/verification.py": {
            "lines": 112,
            "tokens": 1009,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 44,
            "duplicatedTokens": 382,
            "percentage": 39.29,
            "percentageTokens": 37.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/varnish.py": {
            "lines": 188,
            "tokens": 1581,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/usd.py": {
            "lines": 84,
            "tokens": 736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/urbi.py": {
            "lines": 144,
            "tokens": 1323,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/unicon.py": {
            "lines": 412,
            "tokens": 4127,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 178,
            "duplicatedTokens": 1796,
            "percentage": 43.2,
            "percentageTokens": 43.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ul4.py": {
            "lines": 308,
            "tokens": 2213,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/typst.py": {
            "lines": 159,
            "tokens": 1787,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/typoscript.py": {
            "lines": 215,
            "tokens": 1343,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 246,
            "percentage": 11.16,
            "percentageTokens": 18.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/trafficscript.py": {
            "lines": 50,
            "tokens": 307,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tnt.py": {
            "lines": 269,
            "tokens": 2734,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tls.py": {
            "lines": 53,
            "tokens": 339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tlb.py": {
            "lines": 58,
            "tokens": 384,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 109,
            "percentage": 22.41,
            "percentageTokens": 28.39,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/thingsdb.py": {
            "lines": 139,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/theorem.py": {
            "lines": 409,
            "tokens": 4423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/textfmts.py": {
            "lines": 435,
            "tokens": 3079,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/textedit.py": {
            "lines": 204,
            "tokens": 1710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/text.py": {
            "lines": 26,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/testing.py": {
            "lines": 208,
            "tokens": 1420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/teraterm.py": {
            "lines": 324,
            "tokens": 1579,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/teal.py": {
            "lines": 87,
            "tokens": 697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tcl.py": {
            "lines": 147,
            "tokens": 1370,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tal.py": {
            "lines": 76,
            "tokens": 677,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tact.py": {
            "lines": 302,
            "tokens": 2501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/tablegen.py": {
            "lines": 176,
            "tokens": 942,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/supercollider.py": {
            "lines": 93,
            "tokens": 857,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/stata.py": {
            "lines": 169,
            "tokens": 1318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/srcinfo.py": {
            "lines": 61,
            "tokens": 379,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/spice.py": {
            "lines": 69,
            "tokens": 622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/special.py": {
            "lines": 121,
            "tokens": 830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/sophia.py": {
            "lines": 101,
            "tokens": 877,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 304,
            "percentage": 34.65,
            "percentageTokens": 34.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/soong.py": {
            "lines": 77,
            "tokens": 534,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/solidity.py": {
            "lines": 86,
            "tokens": 699,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/snobol.py": {
            "lines": 81,
            "tokens": 484,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/smv.py": {
            "lines": 77,
            "tokens": 697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/smithy.py": {
            "lines": 76,
            "tokens": 655,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/smalltalk.py": {
            "lines": 193,
            "tokens": 1608,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/slash.py": {
            "lines": 182,
            "tokens": 1854,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/sieve.py": {
            "lines": 77,
            "tokens": 365,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/shell.py": {
            "lines": 901,
            "tokens": 7519,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 110,
            "percentage": 1.55,
            "percentageTokens": 1.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/sgf.py": {
            "lines": 58,
            "tokens": 312,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/scdoc.py": {
            "lines": 84,
            "tokens": 540,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/savi.py": {
            "lines": 170,
            "tokens": 993,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/sas.py": {
            "lines": 226,
            "tokens": 2380,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rust.py": {
            "lines": 221,
            "tokens": 1907,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ruby.py": {
            "lines": 517,
            "tokens": 4993,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 132,
            "duplicatedTokens": 1246,
            "percentage": 25.53,
            "percentageTokens": 24.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/robotframework.py": {
            "lines": 550,
            "tokens": 4866,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/roboconf.py": {
            "lines": 80,
            "tokens": 489,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rnc.py": {
            "lines": 65,
            "tokens": 414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rita.py": {
            "lines": 41,
            "tokens": 235,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ride.py": {
            "lines": 137,
            "tokens": 1193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/resource.py": {
            "lines": 82,
            "tokens": 720,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rego.py": {
            "lines": 53,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rebol.py": {
            "lines": 418,
            "tokens": 3875,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 216,
            "duplicatedTokens": 2356,
            "percentage": 51.67,
            "percentageTokens": 60.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/rdf.py": {
            "lines": 467,
            "tokens": 3682,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 76,
            "duplicatedTokens": 758,
            "percentage": 16.27,
            "percentageTokens": 20.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/r.py": {
            "lines": 195,
            "tokens": 1188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/qvt.py": {
            "lines": 152,
            "tokens": 1166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/qlik.py": {
            "lines": 116,
            "tokens": 848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/q.py": {
            "lines": 186,
            "tokens": 1627,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ptx.py": {
            "lines": 118,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/prql.py": {
            "lines": 250,
            "tokens": 2070,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/promql.py": {
            "lines": 175,
            "tokens": 906,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/prolog.py": {
            "lines": 317,
            "tokens": 2341,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/procfile.py": {
            "lines": 40,
            "tokens": 222,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/praat.py": {
            "lines": 302,
            "tokens": 2894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/pony.py": {
            "lines": 92,
            "tokens": 839,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/pointless.py": {
            "lines": 69,
            "tokens": 561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/php.py": {
            "lines": 333,
            "tokens": 2546,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/phix.py": {
            "lines": 362,
            "tokens": 4843,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/perl.py": {
            "lines": 732,
            "tokens": 8868,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/pddl.py": {
            "lines": 80,
            "tokens": 567,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/pawn.py": {
            "lines": 201,
            "tokens": 1792,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 114,
            "duplicatedTokens": 1158,
            "percentage": 56.72,
            "percentageTokens": 64.62,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/pascal.py": {
            "lines": 643,
            "tokens": 6512,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/parsers.py": {
            "lines": 797,
            "tokens": 5504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/parasail.py": {
            "lines": 77,
            "tokens": 468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/other.py": {
            "lines": 40,
            "tokens": 374,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/openscad.py": {
            "lines": 95,
            "tokens": 868,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 86,
            "percentage": 9.47,
            "percentageTokens": 9.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ooc.py": {
            "lines": 83,
            "tokens": 668,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/objective.py": {
            "lines": 512,
            "tokens": 4599,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 86,
            "percentage": 1.76,
            "percentageTokens": 1.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/oberon.py": {
            "lines": 119,
            "tokens": 950,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/numbair.py": {
            "lines": 62,
            "tokens": 377,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/nix.py": {
            "lines": 143,
            "tokens": 1184,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/nit.py": {
            "lines": 62,
            "tokens": 566,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/nimrod.py": {
            "lines": 198,
            "tokens": 1714,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ncl.py": {
            "lines": 893,
            "tokens": 9463,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/mosel.py": {
            "lines": 446,
            "tokens": 2191,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/monte.py": {
            "lines": 202,
            "tokens": 1542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/mojo.py": {
            "lines": 706,
            "tokens": 4488,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/modeling.py": {
            "lines": 365,
            "tokens": 2711,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ml.py": {
            "lines": 957,
            "tokens": 8087,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 205,
            "duplicatedTokens": 1934,
            "percentage": 21.42,
            "percentageTokens": 23.91,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/mips.py": {
            "lines": 129,
            "tokens": 1153,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/minecraft.py": {
            "lines": 390,
            "tokens": 2576,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/mime.py": {
            "lines": 209,
            "tokens": 1684,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/meson.py": {
            "lines": 138,
            "tokens": 720,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/maxima.py": {
            "lines": 83,
            "tokens": 671,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/math.py": {
            "lines": 20,
            "tokens": 122,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/maple.py": {
            "lines": 290,
            "tokens": 1445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/make.py": {
            "lines": 211,
            "tokens": 1454,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/lilypond.py": {
            "lines": 224,
            "tokens": 1503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/lean.py": {
            "lines": 240,
            "tokens": 2298,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 250,
            "percentage": 10,
            "percentageTokens": 10.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ldap.py": {
            "lines": 154,
            "tokens": 1336,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/kusto.py": {
            "lines": 92,
            "tokens": 831,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/kuin.py": {
            "lines": 331,
            "tokens": 2789,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/julia.py": {
            "lines": 293,
            "tokens": 2702,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/jsx.py": {
            "lines": 99,
            "tokens": 665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/jsonnet.py": {
            "lines": 168,
            "tokens": 1394,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/json5.py": {
            "lines": 82,
            "tokens": 625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/jslt.py": {
            "lines": 93,
            "tokens": 908,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/jmespath.py": {
            "lines": 68,
            "tokens": 487,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/j.py": {
            "lines": 150,
            "tokens": 1188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/iolang.py": {
            "lines": 60,
            "tokens": 377,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/installers.py": {
            "lines": 351,
            "tokens": 2587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/inferno.py": {
            "lines": 94,
            "tokens": 569,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/igor.py": {
            "lines": 434,
            "tokens": 5504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/idl.py": {
            "lines": 283,
            "tokens": 3389,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/html.py": {
            "lines": 669,
            "tokens": 5664,
            "sources": 1,
            "clones": 15,
            "duplicatedLines": 323,
            "duplicatedTokens": 3071,
            "percentage": 48.28,
            "percentageTokens": 54.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/hexdump.py": {
            "lines": 101,
            "tokens": 730,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/hdl.py": {
            "lines": 465,
            "tokens": 4956,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 58,
            "duplicatedTokens": 548,
            "percentage": 12.47,
            "percentageTokens": 11.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/haxe.py": {
            "lines": 934,
            "tokens": 7444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/haskell.py": {
            "lines": 865,
            "tokens": 7653,
            "sources": 1,
            "clones": 19,
            "duplicatedLines": 257,
            "duplicatedTokens": 2603,
            "percentage": 29.71,
            "percentageTokens": 34.01,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/hare.py": {
            "lines": 72,
            "tokens": 602,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/gsql.py": {
            "lines": 102,
            "tokens": 965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/graphviz.py": {
            "lines": 57,
            "tokens": 430,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/graphql.py": {
            "lines": 175,
            "tokens": 1356,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/graphics.py": {
            "lines": 793,
            "tokens": 7837,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/graph.py": {
            "lines": 107,
            "tokens": 906,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/grammar_notation.py": {
            "lines": 261,
            "tokens": 1556,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/go.py": {
            "lines": 96,
            "tokens": 789,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/gleam.py": {
            "lines": 73,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/gdscript.py": {
            "lines": 188,
            "tokens": 1681,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/gcodelexer.py": {
            "lines": 34,
            "tokens": 179,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/futhark.py": {
            "lines": 104,
            "tokens": 962,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 23,
            "duplicatedTokens": 249,
            "percentage": 22.12,
            "percentageTokens": 25.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/functional.py": {
            "lines": 20,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/func.py": {
            "lines": 109,
            "tokens": 897,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/freefem.py": {
            "lines": 892,
            "tokens": 3933,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/foxpro.py": {
            "lines": 426,
            "tokens": 1854,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/fortran.py": {
            "lines": 211,
            "tokens": 2423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/forth.py": {
            "lines": 177,
            "tokens": 833,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/floscript.py": {
            "lines": 80,
            "tokens": 520,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/fift.py": {
            "lines": 67,
            "tokens": 395,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 109,
            "percentage": 19.4,
            "percentageTokens": 27.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/felix.py": {
            "lines": 274,
            "tokens": 2442,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/fantom.py": {
            "lines": 250,
            "tokens": 2147,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/factor.py": {
            "lines": 362,
            "tokens": 4334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ezhil.py": {
            "lines": 75,
            "tokens": 528,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/esoteric.py": {
            "lines": 299,
            "tokens": 2206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/erlang.py": {
            "lines": 525,
            "tokens": 4972,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 151,
            "percentage": 2.86,
            "percentageTokens": 3.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/email.py": {
            "lines": 131,
            "tokens": 821,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/elpi.py": {
            "lines": 174,
            "tokens": 1518,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/elm.py": {
            "lines": 122,
            "tokens": 854,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/eiffel.py": {
            "lines": 67,
            "tokens": 601,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ecl.py": {
            "lines": 143,
            "tokens": 1490,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dylan.py": {
            "lines": 278,
            "tokens": 2330,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 151,
            "percentage": 5.4,
            "percentageTokens": 6.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dsls.py": {
            "lines": 969,
            "tokens": 8665,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 110,
            "percentage": 1.44,
            "percentageTokens": 1.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py": {
            "lines": 872,
            "tokens": 8634,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 86,
            "duplicatedTokens": 910,
            "percentage": 9.86,
            "percentageTokens": 10.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dns.py": {
            "lines": 108,
            "tokens": 857,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/diff.py": {
            "lines": 168,
            "tokens": 1250,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/devicetree.py": {
            "lines": 107,
            "tokens": 887,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dax.py": {
            "lines": 134,
            "tokens": 1673,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/data.py": {
            "lines": 762,
            "tokens": 5099,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/dalvik.py": {
            "lines": 125,
            "tokens": 834,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/d.py": {
            "lines": 258,
            "tokens": 2171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/css.py": {
            "lines": 601,
            "tokens": 6491,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/csound.py": {
            "lines": 465,
            "tokens": 3583,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/crystal.py": {
            "lines": 363,
            "tokens": 3248,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 102,
            "duplicatedTokens": 944,
            "percentage": 28.1,
            "percentageTokens": 29.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/cplint.py": {
            "lines": 42,
            "tokens": 279,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/console.py": {
            "lines": 113,
            "tokens": 720,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/compiled.py": {
            "lines": 34,
            "tokens": 305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/comal.py": {
            "lines": 80,
            "tokens": 830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/codeql.py": {
            "lines": 79,
            "tokens": 576,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/clean.py": {
            "lines": 179,
            "tokens": 1617,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/chapel.py": {
            "lines": 138,
            "tokens": 1142,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/cddl.py": {
            "lines": 171,
            "tokens": 1047,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/carbon.py": {
            "lines": 94,
            "tokens": 731,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/capnproto.py": {
            "lines": 73,
            "tokens": 532,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/c_like.py": {
            "lines": 737,
            "tokens": 7349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/c_cpp.py": {
            "lines": 413,
            "tokens": 3723,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 8,
            "duplicatedTokens": 90,
            "percentage": 1.94,
            "percentageTokens": 2.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/business.py": {
            "lines": 624,
            "tokens": 4859,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/bqn.py": {
            "lines": 111,
            "tokens": 562,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/boa.py": {
            "lines": 96,
            "tokens": 976,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/blueprint.py": {
            "lines": 172,
            "tokens": 1316,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/bibtex.py": {
            "lines": 158,
            "tokens": 1282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/berry.py": {
            "lines": 98,
            "tokens": 783,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/bdd.py": {
            "lines": 56,
            "tokens": 313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/basic.py": {
            "lines": 655,
            "tokens": 6625,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/bare.py": {
            "lines": 100,
            "tokens": 776,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/automation.py": {
            "lines": 378,
            "tokens": 2875,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 40,
            "duplicatedTokens": 346,
            "percentage": 10.58,
            "percentageTokens": 12.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/asn1.py": {
            "lines": 177,
            "tokens": 1013,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/asc.py": {
            "lines": 54,
            "tokens": 327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/arturo.py": {
            "lines": 248,
            "tokens": 2785,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/arrow.py": {
            "lines": 115,
            "tokens": 906,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/archetype.py": {
            "lines": 314,
            "tokens": 2311,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/apl.py": {
            "lines": 102,
            "tokens": 501,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/apdlexer.py": {
            "lines": 592,
            "tokens": 7355,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 66,
            "duplicatedTokens": 262,
            "percentage": 11.15,
            "percentageTokens": 3.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ampl.py": {
            "lines": 86,
            "tokens": 946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/amdgpu.py": {
            "lines": 53,
            "tokens": 390,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ambient.py": {
            "lines": 74,
            "tokens": 609,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/algebra.py": {
            "lines": 298,
            "tokens": 1953,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/agile.py": {
            "lines": 24,
            "tokens": 168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/ada.py": {
            "lines": 143,
            "tokens": 1333,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/actionscript.py": {
            "lines": 242,
            "tokens": 2395,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 13,
            "duplicatedTokens": 115,
            "percentage": 5.37,
            "percentageTokens": 4.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_vbscript_builtins.py": {
            "lines": 278,
            "tokens": 1055,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_usd_builtins.py": {
            "lines": 111,
            "tokens": 397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_stata_builtins.py": {
            "lines": 456,
            "tokens": 7151,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_stan_builtins.py": {
            "lines": 647,
            "tokens": 2535,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_sql_builtins.py": {
            "lines": 105,
            "tokens": 1697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_qlik_builtins.py": {
            "lines": 665,
            "tokens": 2552,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_postgres_builtins.py": {
            "lines": 738,
            "tokens": 3446,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_mapping.py": {
            "lines": 601,
            "tokens": 19402,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_luau_builtins.py": {
            "lines": 61,
            "tokens": 203,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_lua_builtins.py": {
            "lines": 284,
            "tokens": 1587,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_julia_builtins.py": {
            "lines": 410,
            "tokens": 3760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_googlesql_builtins.py": {
            "lines": 917,
            "tokens": 3614,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_css_builtins.py": {
            "lines": 557,
            "tokens": 2193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_cl_builtins.py": {
            "lines": 230,
            "tokens": 2883,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/_ada_builtins.py": {
            "lines": 102,
            "tokens": 368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexers/__init__.py": {
            "lines": 361,
            "tokens": 2334,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 342,
            "duplicatedTokens": 2270,
            "percentage": 94.74,
            "percentageTokens": 97.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/terminal256.py": {
            "lines": 337,
            "tokens": 2740,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 190,
            "percentage": 4.15,
            "percentageTokens": 6.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/terminal.py": {
            "lines": 126,
            "tokens": 931,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 318,
            "percentage": 20.63,
            "percentageTokens": 34.16,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/svg.py": {
            "lines": 184,
            "tokens": 1089,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/rtf.py": {
            "lines": 348,
            "tokens": 2066,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/pangomarkup.py": {
            "lines": 82,
            "tokens": 521,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/other.py": {
            "lines": 159,
            "tokens": 986,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/latex.py": {
            "lines": 517,
            "tokens": 3062,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/irc.py": {
            "lines": 153,
            "tokens": 1180,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 318,
            "percentage": 16.99,
            "percentageTokens": 26.95,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/img.py": {
            "lines": 685,
            "tokens": 4479,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 36,
            "duplicatedTokens": 394,
            "percentage": 5.26,
            "percentageTokens": 8.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/html.py": {
            "lines": 994,
            "tokens": 5451,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/groff.py": {
            "lines": 169,
            "tokens": 1316,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/bbcode.py": {
            "lines": 107,
            "tokens": 597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/_mapping.py": {
            "lines": 22,
            "tokens": 521,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 22,
            "duplicatedTokens": 521,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatters/__init__.py": {
            "lines": 156,
            "tokens": 974,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 138,
            "duplicatedTokens": 920,
            "percentage": 88.46,
            "percentageTokens": 94.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/filters/__init__.py": {
            "lines": 939,
            "tokens": 6748,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 921,
            "duplicatedTokens": 6669,
            "percentage": 98.08,
            "percentageTokens": 98.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/version.py": {
            "lines": 37,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/validators.py": {
            "lines": 767,
            "tokens": 5899,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/utils.py": {
            "lines": 805,
            "tokens": 5927,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 82,
            "duplicatedTokens": 746,
            "percentage": 10.19,
            "percentageTokens": 12.59,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/typing.py": {
            "lines": 613,
            "tokens": 4468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/tools.py": {
            "lines": 91,
            "tokens": 858,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/parse.py": {
            "lines": 65,
            "tokens": 585,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 241,
            "percentage": 35.38,
            "percentageTokens": 41.2,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/networks.py": {
            "lines": 746,
            "tokens": 5729,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/mypy.py": {
            "lines": 948,
            "tokens": 7876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/json.py": {
            "lines": 111,
            "tokens": 816,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 232,
            "percentage": 25.23,
            "percentageTokens": 28.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/generics.py": {
            "lines": 399,
            "tokens": 2945,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/errors.py": {
            "lines": 645,
            "tokens": 3571,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/error_wrappers.py": {
            "lines": 160,
            "tokens": 1503,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/env_settings.py": {
            "lines": 349,
            "tokens": 3093,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/decorator.py": {
            "lines": 263,
            "tokens": 2746,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 110,
            "duplicatedTokens": 1091,
            "percentage": 41.83,
            "percentageTokens": 39.73,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/datetime_parse.py": {
            "lines": 247,
            "tokens": 1834,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 118,
            "percentage": 4.86,
            "percentageTokens": 6.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py": {
            "lines": 499,
            "tokens": 4169,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 110,
            "duplicatedTokens": 1216,
            "percentage": 22.04,
            "percentageTokens": 29.17,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/config.py": {
            "lines": 190,
            "tokens": 1712,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/color.py": {
            "lines": 493,
            "tokens": 4781,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 280,
            "duplicatedTokens": 3510,
            "percentage": 56.8,
            "percentageTokens": 73.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/class_validators.py": {
            "lines": 360,
            "tokens": 3507,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/annotated_types.py": {
            "lines": 71,
            "tokens": 552,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/_hypothesis_plugin.py": {
            "lines": 390,
            "tokens": 3338,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/v1/__init__.py": {
            "lines": 141,
            "tokens": 687,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/plugin/_schema_validator.py": {
            "lines": 139,
            "tokens": 1168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/plugin/_loader.py": {
            "lines": 57,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/plugin/__init__.py": {
            "lines": 192,
            "tokens": 839,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/experimental/pipeline.py": {
            "lines": 653,
            "tokens": 6764,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/experimental/missing_sentinel.py": {
            "lines": 4,
            "tokens": 19,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/experimental/arguments_schema.py": {
            "lines": 43,
            "tokens": 265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/tools.py": {
            "lines": 102,
            "tokens": 688,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/parse.py": {
            "lines": 79,
            "tokens": 704,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 23,
            "duplicatedTokens": 241,
            "percentage": 29.11,
            "percentageTokens": 34.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/json.py": {
            "lines": 140,
            "tokens": 988,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 28,
            "duplicatedTokens": 232,
            "percentage": 20,
            "percentageTokens": 23.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py": {
            "lines": 283,
            "tokens": 2768,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 110,
            "duplicatedTokens": 1091,
            "percentage": 38.87,
            "percentageTokens": 39.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/copy_internals.py": {
            "lines": 223,
            "tokens": 2031,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/config.py": {
            "lines": 71,
            "tokens": 509,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/deprecated/class_validators.py": {
            "lines": 255,
            "tokens": 1623,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_validators.py": {
            "lines": 532,
            "tokens": 3861,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_validate_call.py": {
            "lines": 139,
            "tokens": 1095,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_utils.py": {
            "lines": 442,
            "tokens": 2961,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 67,
            "duplicatedTokens": 632,
            "percentage": 15.16,
            "percentageTokens": 21.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_typing_extra.py": {
            "lines": 752,
            "tokens": 5723,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 218,
            "percentage": 3.99,
            "percentageTokens": 3.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_signature.py": {
            "lines": 187,
            "tokens": 1218,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 114,
            "percentage": 8.02,
            "percentageTokens": 9.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_serializers.py": {
            "lines": 52,
            "tokens": 392,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_schema_generation_shared.py": {
            "lines": 124,
            "tokens": 780,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_schema_gather.py": {
            "lines": 208,
            "tokens": 1591,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_repr.py": {
            "lines": 123,
            "tokens": 1105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_namespace_utils.py": {
            "lines": 292,
            "tokens": 1635,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_model_construction.py": {
            "lines": 847,
            "tokens": 6042,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_mock_val_ser.py": {
            "lines": 227,
            "tokens": 1806,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 340,
            "percentage": 19.38,
            "percentageTokens": 18.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_known_annotated_metadata.py": {
            "lines": 400,
            "tokens": 3108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_internal_dataclass.py": {
            "lines": 6,
            "tokens": 44,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_import_utils.py": {
            "lines": 19,
            "tokens": 110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_git.py": {
            "lines": 26,
            "tokens": 178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_generics.py": {
            "lines": 542,
            "tokens": 3562,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_forward_ref.py": {
            "lines": 22,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_fields.py": {
            "lines": 634,
            "tokens": 4259,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 28,
            "duplicatedTokens": 258,
            "percentage": 4.42,
            "percentageTokens": 6.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_docs_extraction.py": {
            "lines": 112,
            "tokens": 877,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_discriminated_union.py": {
            "lines": 478,
            "tokens": 3436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_decorators_v1.py": {
            "lines": 173,
            "tokens": 1183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_decorators.py": {
            "lines": 857,
            "tokens": 5251,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_dataclasses.py": {
            "lines": 314,
            "tokens": 1713,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_core_utils.py": {
            "lines": 173,
            "tokens": 1306,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_core_metadata.py": {
            "lines": 96,
            "tokens": 520,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_internal/_config.py": {
            "lines": 382,
            "tokens": 2882,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_vendor/__init__.py": {
            "lines": 116,
            "tokens": 626,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/wheel_builder.py": {
            "lines": 260,
            "tokens": 1823,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/self_outdated_check.py": {
            "lines": 261,
            "tokens": 1760,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/pyproject.py": {
            "lines": 122,
            "tokens": 677,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/main.py": {
            "lines": 11,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/exceptions.py": {
            "lines": 897,
            "tokens": 5001,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/configuration.py": {
            "lines": 395,
            "tokens": 2973,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/cache.py": {
            "lines": 290,
            "tokens": 1969,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/build_env.py": {
            "lines": 416,
            "tokens": 2878,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/_internal/__init__.py": {
            "lines": 17,
            "tokens": 86,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/patterns/gitwildmatch.py": {
            "lines": 420,
            "tokens": 2192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/patterns/__init__.py": {
            "lines": 10,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/licenses/_spdx.py": {
            "lines": 757,
            "tokens": 13385,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 757,
            "duplicatedTokens": 13385,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/licenses/__init__.py": {
            "lines": 144,
            "tokens": 887,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 108,
            "duplicatedTokens": 798,
            "percentage": 75,
            "percentageTokens": 89.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/websocket_connection_options.py": {
            "lines": 35,
            "tokens": 195,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_size.py": {
            "lines": 6,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_seconds.py": {
            "lines": 6,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_remix_params.py": {
            "lines": 11,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_model.py": {
            "lines": 6,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_list_params.py": {
            "lines": 20,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_download_content_params.py": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_delete_response.py": {
            "lines": 17,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_create_params.py": {
            "lines": 28,
            "tokens": 135,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video_create_error.py": {
            "lines": 10,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/video.py": {
            "lines": 49,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_update_params.py": {
            "lines": 38,
            "tokens": 152,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_search_response.py": {
            "lines": 38,
            "tokens": 165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_search_params.py": {
            "lines": 41,
            "tokens": 216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_list_params.py": {
            "lines": 38,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_deleted.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store_create_params.py": {
            "lines": 60,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/vector_store.py": {
            "lines": 81,
            "tokens": 301,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/upload_create_params.py": {
            "lines": 51,
            "tokens": 269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/upload_complete_params.py": {
            "lines": 19,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/upload.py": {
            "lines": 41,
            "tokens": 166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/static_file_chunking_strategy_param.py": {
            "lines": 21,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/static_file_chunking_strategy_object_param.py": {
            "lines": 15,
            "tokens": 83,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/static_file_chunking_strategy_object.py": {
            "lines": 14,
            "tokens": 67,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/static_file_chunking_strategy.py": {
            "lines": 19,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/other_file_chunking_strategy_object.py": {
            "lines": 11,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_text_input_param.py": {
            "lines": 14,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_multi_modal_input_param.py": {
            "lines": 12,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_model.py": {
            "lines": 8,
            "tokens": 46,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_image_url_input_param.py": {
            "lines": 19,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_create_response.py": {
            "lines": 18,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation_create_params.py": {
            "lines": 29,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/moderation.py": {
            "lines": 185,
            "tokens": 855,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/model_deleted.py": {
            "lines": 12,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/model.py": {
            "lines": 20,
            "tokens": 81,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/images_response.py": {
            "lines": 59,
            "tokens": 290,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_model.py": {
            "lines": 6,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_generate_params.py": {
            "lines": 142,
            "tokens": 538,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_gen_stream_event.py": {
            "lines": 13,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_gen_partial_image_event.py": {
            "lines": 32,
            "tokens": 163,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_gen_completed_event.py": {
            "lines": 54,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_edit_stream_event.py": {
            "lines": 13,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_edit_partial_image_event.py": {
            "lines": 32,
            "tokens": 163,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_edit_params.py": {
            "lines": 144,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_edit_completed_event.py": {
            "lines": 54,
            "tokens": 247,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image_create_variation_params.py": {
            "lines": 47,
            "tokens": 174,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/image.py": {
            "lines": 25,
            "tokens": 89,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_purpose.py": {
            "lines": 6,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_object.py": {
            "lines": 57,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_list_params.py": {
            "lines": 32,
            "tokens": 90,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_deleted.py": {
            "lines": 14,
            "tokens": 62,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_create_params.py": {
            "lines": 44,
            "tokens": 149,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_content.py": {
            "lines": 6,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_chunking_strategy_param.py": {
            "lines": 12,
            "tokens": 70,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/file_chunking_strategy.py": {
            "lines": 13,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_update_response.py": {
            "lines": 110,
            "tokens": 505,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 249,
            "duplicatedTokens": 1254,
            "percentage": 226.36,
            "percentageTokens": 248.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_update_params.py": {
            "lines": 24,
            "tokens": 84,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_stored_completions_data_source_config.py": {
            "lines": 31,
            "tokens": 128,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_retrieve_response.py": {
            "lines": 110,
            "tokens": 505,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 83,
            "duplicatedTokens": 418,
            "percentage": 75.45,
            "percentageTokens": 82.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_list_response.py": {
            "lines": 110,
            "tokens": 505,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 83,
            "duplicatedTokens": 418,
            "percentage": 75.45,
            "percentageTokens": 82.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_list_params.py": {
            "lines": 26,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_delete_response.py": {
            "lines": 12,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_custom_data_source_config.py": {
            "lines": 20,
            "tokens": 97,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_create_response.py": {
            "lines": 110,
            "tokens": 505,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 83,
            "duplicatedTokens": 418,
            "percentage": 75.45,
            "percentageTokens": 82.77,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/eval_create_params.py": {
            "lines": 201,
            "tokens": 917,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/embedding_model.py": {
            "lines": 6,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/embedding_create_params.py": {
            "lines": 54,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/embedding.py": {
            "lines": 22,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/create_embedding_response.py": {
            "lines": 30,
            "tokens": 133,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/container_retrieve_response.py": {
            "lines": 39,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/container_list_response.py": {
            "lines": 39,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/container_list_params.py": {
            "lines": 29,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/container_create_response.py": {
            "lines": 39,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/container_create_params.py": {
            "lines": 29,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/completion_usage.py": {
            "lines": 53,
            "tokens": 228,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/completion_create_params.py": {
            "lines": 188,
            "tokens": 676,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 256,
            "percentage": 7.45,
            "percentageTokens": 37.87,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/completion_choice.py": {
            "lines": 34,
            "tokens": 185,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/completion.py": {
            "lines": 36,
            "tokens": 157,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/chat_model.py": {
            "lines": 6,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch_usage.py": {
            "lines": 34,
            "tokens": 123,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch_request_counts.py": {
            "lines": 15,
            "tokens": 59,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch_list_params.py": {
            "lines": 23,
            "tokens": 61,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch_error.py": {
            "lines": 20,
            "tokens": 106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch_create_params.py": {
            "lines": 69,
            "tokens": 190,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/batch.py": {
            "lines": 103,
            "tokens": 483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/auto_file_chunking_strategy_param.py": {
            "lines": 11,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio_response_format.py": {
            "lines": 6,
            "tokens": 49,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/audio_model.py": {
            "lines": 6,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/types/__init__.py": {
            "lines": 114,
            "tokens": 1313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/webhooks.py": {
            "lines": 209,
            "tokens": 1458,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 170,
            "duplicatedTokens": 1226,
            "percentage": 81.34,
            "percentageTokens": 84.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/videos.py": {
            "lines": 846,
            "tokens": 5311,
            "sources": 1,
            "clones": 18,
            "duplicatedLines": 417,
            "duplicatedTokens": 3076,
            "percentage": 49.29,
            "percentageTokens": 57.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/moderations.py": {
            "lines": 196,
            "tokens": 1402,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 44,
            "duplicatedTokens": 586,
            "percentage": 22.45,
            "percentageTokens": 41.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/models.py": {
            "lines": 305,
            "tokens": 1853,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 116,
            "duplicatedTokens": 828,
            "percentage": 38.03,
            "percentageTokens": 44.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/files.py": {
            "lines": 769,
            "tokens": 5281,
            "sources": 1,
            "clones": 22,
            "duplicatedLines": 555,
            "duplicatedTokens": 4209,
            "percentage": 72.17,
            "percentageTokens": 79.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/embeddings.py": {
            "lines": 297,
            "tokens": 2528,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 138,
            "duplicatedTokens": 1712,
            "percentage": 46.46,
            "percentageTokens": 67.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/batches.py": {
            "lines": 523,
            "tokens": 3543,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 241,
            "duplicatedTokens": 2347,
            "percentage": 46.08,
            "percentageTokens": 66.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/resources/__init__.py": {
            "lines": 228,
            "tokens": 954,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/azure.py": {
            "lines": 646,
            "tokens": 6170,
            "sources": 1,
            "clones": 28,
            "duplicatedLines": 588,
            "duplicatedTokens": 5770,
            "percentage": 91.02,
            "percentageTokens": 93.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_validators.py": {
            "lines": 808,
            "tokens": 6703,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_tools.py": {
            "lines": 65,
            "tokens": 483,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_realtime.py": {
            "lines": 91,
            "tokens": 911,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 40,
            "duplicatedTokens": 490,
            "percentage": 43.96,
            "percentageTokens": 53.79,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_pydantic.py": {
            "lines": 154,
            "tokens": 1379,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/lib/_old_api.py": {
            "lines": 71,
            "tokens": 373,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/helpers/microphone.py": {
            "lines": 99,
            "tokens": 950,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/helpers/local_audio_player.py": {
            "lines": 164,
            "tokens": 1478,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/helpers/__init__.py": {
            "lines": 3,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_utils.py": {
            "lines": 44,
            "tokens": 266,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_progress.py": {
            "lines": 58,
            "tokens": 504,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_models.py": {
            "lines": 16,
            "tokens": 127,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_errors.py": {
            "lines": 20,
            "tokens": 144,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/cli/_cli.py": {
            "lines": 232,
            "tokens": 1637,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_utils.py": {
            "lines": 436,
            "tokens": 3218,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_typing.py": {
            "lines": 155,
            "tokens": 934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_transform.py": {
            "lines": 456,
            "tokens": 3415,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 146,
            "duplicatedTokens": 1338,
            "percentage": 32.02,
            "percentageTokens": 39.18,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_sync.py": {
            "lines": 85,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_streams.py": {
            "lines": 11,
            "tokens": 93,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_resources_proxy.py": {
            "lines": 23,
            "tokens": 104,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_reflection.py": {
            "lines": 44,
            "tokens": 327,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_proxy.py": {
            "lines": 64,
            "tokens": 480,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_logs.py": {
            "lines": 41,
            "tokens": 342,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_datetime_parse.py": {
            "lines": 135,
            "tokens": 1049,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 118,
            "percentage": 8.89,
            "percentageTokens": 11.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/_compat.py": {
            "lines": 44,
            "tokens": 392,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_utils/__init__.py": {
            "lines": 66,
            "tokens": 548,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_extras/sounddevice_proxy.py": {
            "lines": 27,
            "tokens": 171,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_extras/pandas_proxy.py": {
            "lines": 27,
            "tokens": 167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_extras/numpy_proxy.py": {
            "lines": 36,
            "tokens": 209,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_extras/_common.py": {
            "lines": 20,
            "tokens": 72,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/tqdm.py": {
            "lines": 306,
            "tokens": 1277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/sha.py": {
            "lines": 63,
            "tokens": 229,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/logging.py": {
            "lines": 184,
            "tokens": 665,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/insecure_hashlib.py": {
            "lines": 37,
            "tokens": 165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/endpoint_helpers.py": {
            "lines": 65,
            "tokens": 334,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_xet_progress_reporting.py": {
            "lines": 161,
            "tokens": 1252,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_xet.py": {
            "lines": 191,
            "tokens": 837,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_validators.py": {
            "lines": 225,
            "tokens": 1811,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_typing.py": {
            "lines": 94,
            "tokens": 597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_telemetry.py": {
            "lines": 125,
            "tokens": 574,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_subprocess.py": {
            "lines": 143,
            "tokens": 597,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_safetensors.py": {
            "lines": 110,
            "tokens": 1018,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_runtime.py": {
            "lines": 394,
            "tokens": 2340,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_paths.py": {
            "lines": 140,
            "tokens": 595,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_pagination.py": {
            "lines": 51,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_lfs.py": {
            "lines": 109,
            "tokens": 628,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_http.py": {
            "lines": 629,
            "tokens": 4228,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_hf_folder.py": {
            "lines": 67,
            "tokens": 232,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_headers.py": {
            "lines": 227,
            "tokens": 926,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_git_credential.py": {
            "lines": 120,
            "tokens": 826,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_fixes.py": {
            "lines": 132,
            "tokens": 779,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_experimental.py": {
            "lines": 67,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_dotenv.py": {
            "lines": 54,
            "tokens": 414,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_deprecation.py": {
            "lines": 135,
            "tokens": 826,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_datetime.py": {
            "lines": 66,
            "tokens": 207,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_chunk_utils.py": {
            "lines": 63,
            "tokens": 189,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_cache_manager.py": {
            "lines": 865,
            "tokens": 5065,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 91,
            "duplicatedTokens": 604,
            "percentage": 10.52,
            "percentageTokens": 11.92,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_cache_assets.py": {
            "lines": 134,
            "tokens": 295,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/_auth.py": {
            "lines": 213,
            "tokens": 1053,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/utils/__init__.py": {
            "lines": 116,
            "tokens": 601,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/serialization/_tensorflow.py": {
            "lines": 91,
            "tokens": 347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/serialization/_dduf.py": {
            "lines": 386,
            "tokens": 1911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/serialization/_base.py": {
            "lines": 206,
            "tokens": 1163,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/serialization/__init__.py": {
            "lines": 26,
            "tokens": 92,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference/_common.py": {
            "lines": 458,
            "tokens": 2812,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 262,
            "percentage": 6.99,
            "percentageTokens": 9.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/version.py": {
            "lines": 39,
            "tokens": 169,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/user.py": {
            "lines": 207,
            "tokens": 1355,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 73,
            "duplicatedTokens": 610,
            "percentage": 35.27,
            "percentageTokens": 45.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/upload_large_folder.py": {
            "lines": 130,
            "tokens": 872,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 71,
            "duplicatedTokens": 623,
            "percentage": 54.62,
            "percentageTokens": 71.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/upload.py": {
            "lines": 317,
            "tokens": 2334,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 258,
            "duplicatedTokens": 2228,
            "percentage": 81.39,
            "percentageTokens": 95.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/tag.py": {
            "lines": 160,
            "tokens": 1057,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 35,
            "duplicatedTokens": 285,
            "percentage": 21.88,
            "percentageTokens": 26.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/scan_cache.py": {
            "lines": 182,
            "tokens": 888,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 53,
            "duplicatedTokens": 369,
            "percentage": 29.12,
            "percentageTokens": 41.55,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/repo_files.py": {
            "lines": 131,
            "tokens": 744,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 65,
            "duplicatedTokens": 521,
            "percentage": 49.62,
            "percentageTokens": 70.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/repo.py": {
            "lines": 150,
            "tokens": 908,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 47,
            "duplicatedTokens": 282,
            "percentage": 31.33,
            "percentageTokens": 31.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/lfs.py": {
            "lines": 199,
            "tokens": 1161,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 193,
            "duplicatedTokens": 1122,
            "percentage": 96.98,
            "percentageTokens": 96.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/huggingface_cli.py": {
            "lines": 64,
            "tokens": 422,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/env.py": {
            "lines": 38,
            "tokens": 168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/download.py": {
            "lines": 203,
            "tokens": 1307,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 120,
            "duplicatedTokens": 950,
            "percentage": 59.11,
            "percentageTokens": 72.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/delete_cache.py": {
            "lines": 475,
            "tokens": 2414,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 17,
            "duplicatedTokens": 175,
            "percentage": 3.58,
            "percentageTokens": 7.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/_cli_utils.py": {
            "lines": 73,
            "tokens": 535,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 68,
            "duplicatedTokens": 501,
            "percentage": 93.15,
            "percentageTokens": 93.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/commands/__init__.py": {
            "lines": 26,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/upload_large_folder.py": {
            "lines": 131,
            "tokens": 865,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 71,
            "duplicatedTokens": 623,
            "percentage": 54.2,
            "percentageTokens": 72.02,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/upload.py": {
            "lines": 315,
            "tokens": 2318,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 258,
            "duplicatedTokens": 2228,
            "percentage": 81.9,
            "percentageTokens": 96.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/system.py": {
            "lines": 51,
            "tokens": 255,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/repo_files.py": {
            "lines": 127,
            "tokens": 724,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 65,
            "duplicatedTokens": 521,
            "percentage": 51.18,
            "percentageTokens": 71.96,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/repo.py": {
            "lines": 248,
            "tokens": 1821,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 82,
            "duplicatedTokens": 567,
            "percentage": 33.06,
            "percentageTokens": 31.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/lfs.py": {
            "lines": 197,
            "tokens": 1157,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 193,
            "duplicatedTokens": 1122,
            "percentage": 97.97,
            "percentageTokens": 96.97,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/hf.py": {
            "lines": 62,
            "tokens": 388,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/download.py": {
            "lines": 180,
            "tokens": 1158,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 120,
            "duplicatedTokens": 950,
            "percentage": 66.67,
            "percentageTokens": 82.04,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/cache.py": {
            "lines": 402,
            "tokens": 3054,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 83,
            "duplicatedTokens": 634,
            "percentage": 20.65,
            "percentageTokens": 20.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/auth.py": {
            "lines": 212,
            "tokens": 1359,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 73,
            "duplicatedTokens": 610,
            "percentage": 34.43,
            "percentageTokens": 44.89,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/_cli_utils.py": {
            "lines": 68,
            "tokens": 501,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 68,
            "duplicatedTokens": 501,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/cli/__init__.py": {
            "lines": 26,
            "tokens": 100,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/wsgi.py": {
            "lines": 148,
            "tokens": 1060,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/mock.py": {
            "lines": 42,
            "tokens": 302,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/default.py": {
            "lines": 405,
            "tokens": 3100,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 170,
            "duplicatedTokens": 1428,
            "percentage": 41.98,
            "percentageTokens": 46.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/base.py": {
            "lines": 85,
            "tokens": 411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/asgi.py": {
            "lines": 186,
            "tokens": 1279,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_transports/__init__.py": {
            "lines": 14,
            "tokens": 80,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py": {
            "lines": 340,
            "tokens": 2636,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 221,
            "duplicatedTokens": 1641,
            "percentage": 65,
            "percentageTokens": 62.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py": {
            "lines": 136,
            "tokens": 808,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 121,
            "duplicatedTokens": 739,
            "percentage": 88.97,
            "percentageTokens": 91.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py": {
            "lines": 366,
            "tokens": 2925,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 333,
            "duplicatedTokens": 2536,
            "percentage": 90.98,
            "percentageTokens": 86.7,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/http2.py": {
            "lines": 591,
            "tokens": 4587,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 274,
            "duplicatedTokens": 2132,
            "percentage": 46.36,
            "percentageTokens": 46.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/http11.py": {
            "lines": 378,
            "tokens": 3012,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 119,
            "duplicatedTokens": 899,
            "percentage": 31.48,
            "percentageTokens": 29.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py": {
            "lines": 419,
            "tokens": 2833,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 299,
            "duplicatedTokens": 1651,
            "percentage": 71.36,
            "percentageTokens": 58.28,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/connection.py": {
            "lines": 221,
            "tokens": 1876,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 111,
            "duplicatedTokens": 999,
            "percentage": 50.23,
            "percentageTokens": 53.25,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_sync/__init__.py": {
            "lines": 38,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/trio.py": {
            "lines": 158,
            "tokens": 1460,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/sync.py": {
            "lines": 240,
            "tokens": 2030,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/mock.py": {
            "lines": 142,
            "tokens": 1358,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/base.py": {
            "lines": 100,
            "tokens": 934,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/auto.py": {
            "lines": 51,
            "tokens": 436,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_backends/anyio.py": {
            "lines": 145,
            "tokens": 1287,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 24,
            "duplicatedTokens": 254,
            "percentage": 16.55,
            "percentageTokens": 19.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py": {
            "lines": 340,
            "tokens": 2672,
            "sources": 1,
            "clones": 10,
            "duplicatedLines": 221,
            "duplicatedTokens": 1645,
            "percentage": 65,
            "percentageTokens": 61.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/interfaces.py": {
            "lines": 136,
            "tokens": 826,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 85,
            "duplicatedTokens": 473,
            "percentage": 62.5,
            "percentageTokens": 57.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py": {
            "lines": 366,
            "tokens": 2951,
            "sources": 1,
            "clones": 13,
            "duplicatedLines": 293,
            "duplicatedTokens": 2386,
            "percentage": 80.05,
            "percentageTokens": 80.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/http2.py": {
            "lines": 591,
            "tokens": 4725,
            "sources": 1,
            "clones": 14,
            "duplicatedLines": 274,
            "duplicatedTokens": 2132,
            "percentage": 46.36,
            "percentageTokens": 45.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/http11.py": {
            "lines": 378,
            "tokens": 3106,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 119,
            "duplicatedTokens": 899,
            "percentage": 31.48,
            "percentageTokens": 28.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py": {
            "lines": 419,
            "tokens": 2873,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 259,
            "duplicatedTokens": 1489,
            "percentage": 61.81,
            "percentageTokens": 51.83,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/connection.py": {
            "lines": 221,
            "tokens": 1914,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 111,
            "duplicatedTokens": 999,
            "percentage": 50.23,
            "percentageTokens": 52.19,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_async/__init__.py": {
            "lines": 38,
            "tokens": 220,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/zip.py": {
            "lines": 176,
            "tokens": 1403,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/webhdfs.py": {
            "lines": 484,
            "tokens": 3330,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/tar.py": {
            "lines": 123,
            "tokens": 911,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/smb.py": {
            "lines": 415,
            "tokens": 2624,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/sftp.py": {
            "lines": 179,
            "tokens": 1444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/memory.py": {
            "lines": 310,
            "tokens": 2761,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/local.py": {
            "lines": 513,
            "tokens": 4568,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/libarchive.py": {
            "lines": 212,
            "tokens": 1359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/jupyter.py": {
            "lines": 123,
            "tokens": 1052,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py": {
            "lines": 930,
            "tokens": 7234,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 123,
            "duplicatedTokens": 972,
            "percentage": 13.23,
            "percentageTokens": 13.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/http.py": {
            "lines": 889,
            "tokens": 6954,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 123,
            "duplicatedTokens": 972,
            "percentage": 13.84,
            "percentageTokens": 13.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/github.py": {
            "lines": 332,
            "tokens": 2364,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/git.py": {
            "lines": 113,
            "tokens": 913,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/gist.py": {
            "lines": 231,
            "tokens": 1568,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/ftp.py": {
            "lines": 386,
            "tokens": 2912,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/dirfs.py": {
            "lines": 387,
            "tokens": 4110,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/dbfs.py": {
            "lines": 495,
            "tokens": 2697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/data.py": {
            "lines": 57,
            "tokens": 399,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/dask.py": {
            "lines": 151,
            "tokens": 1176,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/cached.py": {
            "lines": 997,
            "tokens": 7819,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 410,
            "percentage": 3.61,
            "percentageTokens": 5.24,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/cache_metadata.py": {
            "lines": 232,
            "tokens": 1845,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/cache_mapper.py": {
            "lines": 74,
            "tokens": 485,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/asyn_wrapper.py": {
            "lines": 121,
            "tokens": 607,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/implementations/arrow.py": {
            "lines": 303,
            "tokens": 2260,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/cli/__main__.py": {
            "lines": 380,
            "tokens": 2519,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/cli/__init__.py": {
            "lines": 7,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/tokenize.py": {
            "lines": 218,
            "tokens": 1487,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/token.py": {
            "lines": 91,
            "tokens": 758,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/pgen.py": {
            "lines": 410,
            "tokens": 4157,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/parse.py": {
            "lines": 393,
            "tokens": 3545,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/literals.py": {
            "lines": 64,
            "tokens": 572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/grammar.py": {
            "lines": 227,
            "tokens": 992,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/driver.py": {
            "lines": 308,
            "tokens": 2642,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/conv.py": {
            "lines": 255,
            "tokens": 2277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pgen2/__init__.py": {
            "lines": 3,
            "tokens": 5,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/tls.py": {
            "lines": 416,
            "tokens": 2737,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/text.py": {
            "lines": 168,
            "tokens": 1080,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/stapled.py": {
            "lines": 140,
            "tokens": 934,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 38,
            "duplicatedTokens": 312,
            "percentage": 27.14,
            "percentageTokens": 33.4,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/memory.py": {
            "lines": 318,
            "tokens": 1982,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 36,
            "duplicatedTokens": 248,
            "percentage": 11.32,
            "percentageTokens": 12.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/file.py": {
            "lines": 147,
            "tokens": 876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/streams/buffered.py": {
            "lines": 181,
            "tokens": 1154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_testing.py": {
            "lines": 64,
            "tokens": 352,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_tasks.py": {
            "lines": 116,
            "tokens": 542,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_subprocesses.py": {
            "lines": 78,
            "tokens": 291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_streams.py": {
            "lines": 238,
            "tokens": 961,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_sockets.py": {
            "lines": 404,
            "tokens": 2199,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_resources.py": {
            "lines": 32,
            "tokens": 183,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/_eventloop.py": {
            "lines": 419,
            "tokens": 2535,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/abc/__init__.py": {
            "lines": 57,
            "tokens": 632,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_typedattr.py": {
            "lines": 80,
            "tokens": 423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_testing.py": {
            "lines": 77,
            "tokens": 443,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py": {
            "lines": 615,
            "tokens": 4692,
            "sources": 1,
            "clones": 12,
            "duplicatedLines": 138,
            "duplicatedTokens": 1678,
            "percentage": 22.44,
            "percentageTokens": 35.76,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_tasks.py": {
            "lines": 162,
            "tokens": 774,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_synchronization.py": {
            "lines": 752,
            "tokens": 4497,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_subprocesses.py": {
            "lines": 201,
            "tokens": 1322,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 326,
            "percentage": 10.95,
            "percentageTokens": 24.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_streams.py": {
            "lines": 51,
            "tokens": 262,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_sockets.py": {
            "lines": 990,
            "tokens": 5529,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 184,
            "percentage": 2.22,
            "percentageTokens": 3.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_signals.py": {
            "lines": 26,
            "tokens": 88,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_resources.py": {
            "lines": 17,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_fileio.py": {
            "lines": 739,
            "tokens": 6553,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 228,
            "percentage": 1.89,
            "percentageTokens": 3.48,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_exceptions.py": {
            "lines": 152,
            "tokens": 594,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_eventloop.py": {
            "lines": 165,
            "tokens": 860,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_contextmanagers.py": {
            "lines": 199,
            "tokens": 1062,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/_core/_asyncio_selector_thread.py": {
            "lines": 166,
            "tokens": 1343,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/mark/structures.py": {
            "lines": 661,
            "tokens": 4570,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/mark/expression.py": {
            "lines": 330,
            "tokens": 2688,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/mark/__init__.py": {
            "lines": 300,
            "tokens": 1956,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/config/findpaths.py": {
            "lines": 238,
            "tokens": 1848,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/config/exceptions.py": {
            "lines": 12,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/config/compat.py": {
            "lines": 84,
            "tokens": 651,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/config/argparsing.py": {
            "lines": 534,
            "tokens": 4016,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/assertion/util.py": {
            "lines": 620,
            "tokens": 5198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/assertion/truncate.py": {
            "lines": 136,
            "tokens": 889,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/assertion/__init__.py": {
            "lines": 207,
            "tokens": 1420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_py/error.py": {
            "lines": 118,
            "tokens": 856,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_io/wcwidth.py": {
            "lines": 56,
            "tokens": 318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_io/terminalwriter.py": {
            "lines": 253,
            "tokens": 2035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_io/saferepr.py": {
            "lines": 129,
            "tokens": 832,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_io/pprint.py": {
            "lines": 672,
            "tokens": 5595,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 78,
            "duplicatedTokens": 678,
            "percentage": 11.61,
            "percentageTokens": 12.12,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_io/__init__.py": {
            "lines": 9,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_code/source.py": {
            "lines": 224,
            "tokens": 2148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_code/__init__.py": {
            "lines": 25,
            "tokens": 137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/tokens.py": {
            "lines": 101,
            "tokens": 782,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/serializer.py": {
            "lines": 108,
            "tokens": 1097,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/resolver.py": {
            "lines": 224,
            "tokens": 1787,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/representer.py": {
            "lines": 386,
            "tokens": 3303,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/reader.py": {
            "lines": 184,
            "tokens": 1612,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/parser.py": {
            "lines": 586,
            "tokens": 4746,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/nodes.py": {
            "lines": 46,
            "tokens": 359,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/loader.py": {
            "lines": 61,
            "tokens": 521,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/events.py": {
            "lines": 83,
            "tokens": 711,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/error.py": {
            "lines": 72,
            "tokens": 784,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/dumper.py": {
            "lines": 59,
            "tokens": 667,
            "sources": 1,
            "clones": 7,
            "duplicatedLines": 96,
            "duplicatedTokens": 1145,
            "percentage": 162.71,
            "percentageTokens": 171.66,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/cyaml.py": {
            "lines": 98,
            "tokens": 947,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 36,
            "duplicatedTokens": 441,
            "percentage": 36.73,
            "percentageTokens": 46.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/constructor.py": {
            "lines": 746,
            "tokens": 6349,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 284,
            "percentage": 4.29,
            "percentageTokens": 4.47,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/composer.py": {
            "lines": 136,
            "tokens": 1168,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/yaml/__init__.py": {
            "lines": 387,
            "tokens": 2288,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/poolmanager.py": {
            "lines": 652,
            "tokens": 3985,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 198,
            "duplicatedTokens": 919,
            "percentage": 30.37,
            "percentageTokens": 23.06,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/filepost.py": {
            "lines": 88,
            "tokens": 511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/fields.py": {
            "lines": 340,
            "tokens": 1568,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 18,
            "duplicatedTokens": 140,
            "percentage": 5.29,
            "percentageTokens": 8.93,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/exceptions.py": {
            "lines": 334,
            "tokens": 1835,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/_version.py": {
            "lines": 20,
            "tokens": 132,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 114,
            "percentage": 95,
            "percentageTokens": 86.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/_request_methods.py": {
            "lines": 277,
            "tokens": 1204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/_collections.py": {
            "lines": 478,
            "tokens": 3425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/_base_connection.py": {
            "lines": 164,
            "tokens": 1412,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 31,
            "duplicatedTokens": 399,
            "percentage": 18.9,
            "percentageTokens": 28.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/urllib3/__init__.py": {
            "lines": 210,
            "tokens": 897,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 27,
            "duplicatedTokens": 114,
            "percentage": 12.86,
            "percentageTokens": 12.71,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/typing_inspection/typing_objects.py": {
            "lines": 606,
            "tokens": 2269,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/typing_inspection/introspection.py": {
            "lines": 586,
            "tokens": 2986,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/version.py": {
            "lines": 8,
            "tokens": 66,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/utils.py": {
            "lines": 398,
            "tokens": 2753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/tk.py": {
            "lines": 195,
            "tokens": 1425,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 94,
            "percentage": 4.62,
            "percentageTokens": 6.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/rich.py": {
            "lines": 150,
            "tokens": 1154,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/notebook.py": {
            "lines": 316,
            "tokens": 2369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/keras.py": {
            "lines": 121,
            "tokens": 1080,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/gui.py": {
            "lines": 178,
            "tokens": 1530,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 94,
            "percentage": 5.06,
            "percentageTokens": 6.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/dask.py": {
            "lines": 43,
            "tokens": 320,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/cli.py": {
            "lines": 323,
            "tokens": 2532,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/autonotebook.py": {
            "lines": 28,
            "tokens": 188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/auto.py": {
            "lines": 39,
            "tokens": 162,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/asyncio.py": {
            "lines": 92,
            "tokens": 707,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_utils.py": {
            "lines": 10,
            "tokens": 99,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_tqdm_pandas.py": {
            "lines": 23,
            "tokens": 170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_tqdm_notebook.py": {
            "lines": 8,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_tqdm_gui.py": {
            "lines": 8,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_tqdm.py": {
            "lines": 8,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_monitor.py": {
            "lines": 94,
            "tokens": 595,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/_main.py": {
            "lines": 8,
            "tokens": 56,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/tqdm/__init__.py": {
            "lines": 37,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/logger.py": {
            "lines": 32,
            "tokens": 234,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 64,
            "duplicatedTokens": 468,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/llm_client.py": {
            "lines": 56,
            "tokens": 347,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 112,
            "duplicatedTokens": 694,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/swe_project/cli.py": {
            "lines": 319,
            "tokens": 2548,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 638,
            "duplicatedTokens": 5096,
            "percentage": 200,
            "percentageTokens": 200,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/sniffio/_impl.py": {
            "lines": 94,
            "tokens": 307,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/sniffio/__init__.py": {
            "lines": 16,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/structures.py": {
            "lines": 98,
            "tokens": 551,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 98,
            "duplicatedTokens": 551,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/status_codes.py": {
            "lines": 127,
            "tokens": 1073,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 127,
            "duplicatedTokens": 1073,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/sessions.py": {
            "lines": 830,
            "tokens": 4563,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 830,
            "duplicatedTokens": 4563,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/packages.py": {
            "lines": 22,
            "tokens": 215,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 118,
            "percentage": 40.91,
            "percentageTokens": 54.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/hooks.py": {
            "lines": 32,
            "tokens": 162,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 162,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/help.py": {
            "lines": 133,
            "tokens": 817,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 110,
            "duplicatedTokens": 727,
            "percentage": 82.71,
            "percentageTokens": 88.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/exceptions.py": {
            "lines": 150,
            "tokens": 578,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 144,
            "duplicatedTokens": 574,
            "percentage": 96,
            "percentageTokens": 99.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/cookies.py": {
            "lines": 560,
            "tokens": 3211,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 560,
            "duplicatedTokens": 3211,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/compat.py": {
            "lines": 105,
            "tokens": 481,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 37,
            "duplicatedTokens": 204,
            "percentage": 35.24,
            "percentageTokens": 42.41,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/certs.py": {
            "lines": 16,
            "tokens": 29,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/auth.py": {
            "lines": 313,
            "tokens": 2260,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 313,
            "duplicatedTokens": 2260,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/api.py": {
            "lines": 156,
            "tokens": 373,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 156,
            "duplicatedTokens": 373,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/adapters.py": {
            "lines": 695,
            "tokens": 3534,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 667,
            "duplicatedTokens": 3361,
            "percentage": 95.97,
            "percentageTokens": 95.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/_internal_utils.py": {
            "lines": 49,
            "tokens": 219,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 219,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/__version__.py": {
            "lines": 13,
            "tokens": 65,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/requests/__init__.py": {
            "lines": 183,
            "tokens": 969,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 104,
            "duplicatedTokens": 770,
            "percentage": 56.83,
            "percentageTokens": 79.46,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pytokens/cli.py": {
            "lines": 191,
            "tokens": 1412,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pytokens/__main__.py": {
            "lines": 6,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pytest/__main__.py": {
            "lines": 8,
            "tokens": 37,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pytest/__init__.py": {
            "lines": 179,
            "tokens": 1216,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/util.py": {
            "lines": 323,
            "tokens": 1877,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 323,
            "duplicatedTokens": 1877,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/unistring.py": {
            "lines": 152,
            "tokens": 990,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 152,
            "duplicatedTokens": 990,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/token.py": {
            "lines": 213,
            "tokens": 1345,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 213,
            "duplicatedTokens": 1345,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/style.py": {
            "lines": 202,
            "tokens": 1557,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 192,
            "duplicatedTokens": 1552,
            "percentage": 95.05,
            "percentageTokens": 99.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/sphinxext.py": {
            "lines": 246,
            "tokens": 1929,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 233,
            "duplicatedTokens": 1804,
            "percentage": 94.72,
            "percentageTokens": 93.52,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/scanner.py": {
            "lines": 103,
            "tokens": 509,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 103,
            "duplicatedTokens": 509,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/regexopt.py": {
            "lines": 90,
            "tokens": 705,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 705,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/plugin.py": {
            "lines": 71,
            "tokens": 247,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 71,
            "duplicatedTokens": 247,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/modeline.py": {
            "lines": 42,
            "tokens": 209,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 42,
            "duplicatedTokens": 209,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/lexer.py": {
            "lines": 960,
            "tokens": 5794,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 940,
            "duplicatedTokens": 5698,
            "percentage": 97.92,
            "percentageTokens": 98.34,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/formatter.py": {
            "lines": 128,
            "tokens": 399,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 115,
            "duplicatedTokens": 379,
            "percentage": 89.84,
            "percentageTokens": 94.99,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/filter.py": {
            "lines": 69,
            "tokens": 304,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 304,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/console.py": {
            "lines": 69,
            "tokens": 529,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 529,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/cmdline.py": {
            "lines": 667,
            "tokens": 5170,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/__main__.py": {
            "lines": 16,
            "tokens": 45,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pygments/__init__.py": {
            "lines": 81,
            "tokens": 323,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 25,
            "duplicatedTokens": 154,
            "percentage": 30.86,
            "percentageTokens": 47.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic_core/__init__.py": {
            "lines": 170,
            "tokens": 684,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/warnings.py": {
            "lines": 121,
            "tokens": 847,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/version.py": {
            "lines": 112,
            "tokens": 675,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/validators.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/validate_call_decorator.py": {
            "lines": 115,
            "tokens": 738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/utils.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/typing.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/type_adapter.py": {
            "lines": 794,
            "tokens": 4091,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 82,
            "duplicatedTokens": 600,
            "percentage": 10.33,
            "percentageTokens": 14.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/tools.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/schema.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/root_model.py": {
            "lines": 154,
            "tokens": 1108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/parse.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/json.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/generics.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/functional_validators.py": {
            "lines": 892,
            "tokens": 4118,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 198,
            "percentage": 2.24,
            "percentageTokens": 4.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/functional_serializers.py": {
            "lines": 450,
            "tokens": 1928,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 278,
            "percentage": 7.11,
            "percentageTokens": 14.42,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/errors.py": {
            "lines": 188,
            "tokens": 917,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/error_wrappers.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/env_settings.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/decorator.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/datetime_parse.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/dataclasses.py": {
            "lines": 412,
            "tokens": 2936,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 70,
            "duplicatedTokens": 854,
            "percentage": 16.99,
            "percentageTokens": 29.09,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/color.py": {
            "lines": 603,
            "tokens": 5627,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 280,
            "duplicatedTokens": 3510,
            "percentage": 46.43,
            "percentageTokens": 62.38,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/class_validators.py": {
            "lines": 4,
            "tokens": 20,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/annotated_handlers.py": {
            "lines": 121,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/aliases.py": {
            "lines": 134,
            "tokens": 738,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/alias_generators.py": {
            "lines": 61,
            "tokens": 347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/_migration.py": {
            "lines": 315,
            "tokens": 1411,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pydantic/__init__.py": {
            "lines": 455,
            "tokens": 3586,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_warnings.py": {
            "lines": 26,
            "tokens": 50,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_version.py": {
            "lines": 20,
            "tokens": 132,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 19,
            "duplicatedTokens": 114,
            "percentage": 95,
            "percentageTokens": 86.36,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_tracing.py": {
            "lines": 71,
            "tokens": 756,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_result.py": {
            "lines": 106,
            "tokens": 646,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_manager.py": {
            "lines": 522,
            "tokens": 3830,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_hooks.py": {
            "lines": 713,
            "tokens": 4737,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/_callers.py": {
            "lines": 168,
            "tokens": 1136,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pluggy/__init__.py": {
            "lines": 29,
            "tokens": 192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/windows.py": {
            "lines": 271,
            "tokens": 1945,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 271,
            "duplicatedTokens": 1945,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 33,
            "duplicatedTokens": 188,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/unix.py": {
            "lines": 271,
            "tokens": 1721,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 271,
            "duplicatedTokens": 1721,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/macos.py": {
            "lines": 145,
            "tokens": 894,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 145,
            "duplicatedTokens": 894,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/api.py": {
            "lines": 298,
            "tokens": 1729,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 298,
            "duplicatedTokens": 1729,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/android.py": {
            "lines": 248,
            "tokens": 1548,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 248,
            "duplicatedTokens": 1548,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/__main__.py": {
            "lines": 54,
            "tokens": 315,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 50,
            "duplicatedTokens": 301,
            "percentage": 92.59,
            "percentageTokens": 95.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/platformdirs/__init__.py": {
            "lines": 630,
            "tokens": 3528,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 593,
            "duplicatedTokens": 3271,
            "percentage": 94.13,
            "percentageTokens": 92.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/__pip-runner__.py": {
            "lines": 49,
            "tokens": 291,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/__main__.py": {
            "lines": 23,
            "tokens": 148,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pip/__init__.py": {
            "lines": 12,
            "tokens": 69,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/util.py": {
            "lines": 791,
            "tokens": 3398,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/pattern.py": {
            "lines": 212,
            "tokens": 852,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/pathspec.py": {
            "lines": 393,
            "tokens": 1725,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/gitignore.py": {
            "lines": 156,
            "tokens": 815,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/_meta.py": {
            "lines": 57,
            "tokens": 225,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/pathspec/__init__.py": {
            "lines": 75,
            "tokens": 193,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/version.py": {
            "lines": 581,
            "tokens": 2719,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 572,
            "duplicatedTokens": 2710,
            "percentage": 98.45,
            "percentageTokens": 99.67,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/utils.py": {
            "lines": 162,
            "tokens": 1051,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 162,
            "duplicatedTokens": 1051,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/tags.py": {
            "lines": 655,
            "tokens": 4849,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 655,
            "duplicatedTokens": 4849,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/requirements.py": {
            "lines": 90,
            "tokens": 659,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 90,
            "duplicatedTokens": 659,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/metadata.py": {
            "lines": 861,
            "tokens": 5678,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 861,
            "duplicatedTokens": 5678,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/markers.py": {
            "lines": 361,
            "tokens": 870,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 361,
            "duplicatedTokens": 870,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_tokenizer.py": {
            "lines": 194,
            "tokens": 1267,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 194,
            "duplicatedTokens": 1267,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_structures.py": {
            "lines": 60,
            "tokens": 450,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 60,
            "duplicatedTokens": 450,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_parser.py": {
            "lines": 352,
            "tokens": 2258,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 352,
            "duplicatedTokens": 2258,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_musllinux.py": {
            "lines": 84,
            "tokens": 589,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 589,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_manylinux.py": {
            "lines": 261,
            "tokens": 1749,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 261,
            "duplicatedTokens": 1749,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/_elffile.py": {
            "lines": 108,
            "tokens": 808,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 108,
            "duplicatedTokens": 808,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/packaging/__init__.py": {
            "lines": 14,
            "tokens": 57,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/pagination.py": {
            "lines": 189,
            "tokens": 1365,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 200,
            "duplicatedTokens": 1496,
            "percentage": 105.82,
            "percentageTokens": 109.6,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_version.py": {
            "lines": 3,
            "tokens": 15,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_types.py": {
            "lines": 263,
            "tokens": 1554,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 113,
            "percentage": 4.56,
            "percentageTokens": 7.27,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_streaming.py": {
            "lines": 409,
            "tokens": 3255,
            "sources": 1,
            "clones": 5,
            "duplicatedLines": 129,
            "duplicatedTokens": 1132,
            "percentage": 31.54,
            "percentageTokens": 34.78,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_response.py": {
            "lines": 847,
            "tokens": 5711,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 224,
            "duplicatedTokens": 1493,
            "percentage": 26.45,
            "percentageTokens": 26.14,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_resource.py": {
            "lines": 42,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_qs.py": {
            "lines": 149,
            "tokens": 1213,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_module_client.py": {
            "lines": 172,
            "tokens": 1394,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_models.py": {
            "lines": 874,
            "tokens": 5859,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 274,
            "percentage": 2.29,
            "percentageTokens": 4.68,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_legacy_response.py": {
            "lines": 487,
            "tokens": 3526,
            "sources": 1,
            "clones": 8,
            "duplicatedLines": 212,
            "duplicatedTokens": 1499,
            "percentage": 43.53,
            "percentageTokens": 42.51,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_files.py": {
            "lines": 122,
            "tokens": 1035,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_exceptions.py": {
            "lines": 160,
            "tokens": 1126,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_constants.py": {
            "lines": 13,
            "tokens": 76,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/_compat.py": {
            "lines": 230,
            "tokens": 1839,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/openai/__init__.py": {
            "lines": 394,
            "tokens": 2736,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/jiter/__init__.py": {
            "lines": 4,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/iniconfig/exceptions.py": {
            "lines": 15,
            "tokens": 140,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/iniconfig/_version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 159,
            "percentage": 90.91,
            "percentageTokens": 84.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/iniconfig/_parse.py": {
            "lines": 162,
            "tokens": 1328,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/iniconfig/__init__.py": {
            "lines": 248,
            "tokens": 2012,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna/intranges.py": {
            "lines": 56,
            "tokens": 328,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 56,
            "duplicatedTokens": 328,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna/core.py": {
            "lines": 436,
            "tokens": 3717,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 434,
            "duplicatedTokens": 3710,
            "percentage": 99.54,
            "percentageTokens": 99.81,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna/compat.py": {
            "lines": 14,
            "tokens": 106,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 14,
            "duplicatedTokens": 106,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna/codec.py": {
            "lines": 121,
            "tokens": 980,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 113,
            "duplicatedTokens": 944,
            "percentage": 93.39,
            "percentageTokens": 96.33,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/idna/__init__.py": {
            "lines": 44,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 44,
            "duplicatedTokens": 188,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/repocard_data.py": {
            "lines": 769,
            "tokens": 4059,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/repocard.py": {
            "lines": 826,
            "tokens": 3415,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/lfs.py": {
            "lines": 465,
            "tokens": 3119,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/keras_mixin.py": {
            "lines": 496,
            "tokens": 2368,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 119,
            "percentage": 1.41,
            "percentageTokens": 5.03,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/inference_api.py": {
            "lines": 216,
            "tokens": 876,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/hub_mixin.py": {
            "lines": 852,
            "tokens": 6122,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 7,
            "duplicatedTokens": 119,
            "percentage": 0.82,
            "percentageTokens": 1.94,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/fastai_utils.py": {
            "lines": 414,
            "tokens": 2564,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/errors.py": {
            "lines": 376,
            "tokens": 2167,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/dataclasses.py": {
            "lines": 483,
            "tokens": 3234,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 222,
            "percentage": 3.31,
            "percentageTokens": 6.86,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/constants.py": {
            "lines": 293,
            "tokens": 1797,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/community.py": {
            "lines": 362,
            "tokens": 1486,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 360,
            "percentage": 8.29,
            "percentageTokens": 24.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_webhooks_server.py": {
            "lines": 375,
            "tokens": 1662,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_webhooks_payload.py": {
            "lines": 136,
            "tokens": 704,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_upload_large_folder.py": {
            "lines": 754,
            "tokens": 6094,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_tensorboard_logger.py": {
            "lines": 189,
            "tokens": 866,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_space_api.py": {
            "lines": 167,
            "tokens": 671,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_snapshot_download.py": {
            "lines": 342,
            "tokens": 1996,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_oauth.py": {
            "lines": 459,
            "tokens": 2668,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_login.py": {
            "lines": 513,
            "tokens": 2372,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_local_folder.py": {
            "lines": 446,
            "tokens": 2750,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 26,
            "duplicatedTokens": 342,
            "percentage": 5.83,
            "percentageTokens": 12.44,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_jobs_api.py": {
            "lines": 300,
            "tokens": 1873,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_inference_endpoints.py": {
            "lines": 412,
            "tokens": 2124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_commit_scheduler.py": {
            "lines": 349,
            "tokens": 2040,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/huggingface_hub/_commit_api.py": {
            "lines": 967,
            "tokens": 5862,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_utils.py": {
            "lines": 241,
            "tokens": 1630,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_urls.py": {
            "lines": 640,
            "tokens": 3478,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_urlparse.py": {
            "lines": 526,
            "tokens": 3807,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 20,
            "duplicatedTokens": 224,
            "percentage": 3.8,
            "percentageTokens": 5.88,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_types.py": {
            "lines": 113,
            "tokens": 855,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 113,
            "percentage": 10.62,
            "percentageTokens": 13.22,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_status_codes.py": {
            "lines": 161,
            "tokens": 1106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_multipart.py": {
            "lines": 299,
            "tokens": 2462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_main.py": {
            "lines": 505,
            "tokens": 3799,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_exceptions.py": {
            "lines": 378,
            "tokens": 1175,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_decoders.py": {
            "lines": 392,
            "tokens": 2846,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 46,
            "duplicatedTokens": 472,
            "percentage": 11.73,
            "percentageTokens": 16.58,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_content.py": {
            "lines": 239,
            "tokens": 2079,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_config.py": {
            "lines": 247,
            "tokens": 1970,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_auth.py": {
            "lines": 347,
            "tokens": 2687,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/_api.py": {
            "lines": 437,
            "tokens": 1517,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 34,
            "duplicatedTokens": 440,
            "percentage": 7.78,
            "percentageTokens": 29,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpx/__init__.py": {
            "lines": 104,
            "tokens": 514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_utils.py": {
            "lines": 36,
            "tokens": 240,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_trace.py": {
            "lines": 106,
            "tokens": 1053,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_synchronization.py": {
            "lines": 317,
            "tokens": 2265,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_ssl.py": {
            "lines": 8,
            "tokens": 51,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_models.py": {
            "lines": 515,
            "tokens": 3538,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 16,
            "duplicatedTokens": 192,
            "percentage": 3.11,
            "percentageTokens": 5.43,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_exceptions.py": {
            "lines": 80,
            "tokens": 326,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/_api.py": {
            "lines": 93,
            "tokens": 366,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/httpcore/__init__.py": {
            "lines": 140,
            "tokens": 693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/hf_xet/__init__.py": {
            "lines": 4,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_writers.py": {
            "lines": 144,
            "tokens": 1186,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_version.py": {
            "lines": 15,
            "tokens": 32,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_util.py": {
            "lines": 134,
            "tokens": 669,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_state.py": {
            "lines": 364,
            "tokens": 2080,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_receivebuffer.py": {
            "lines": 152,
            "tokens": 891,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_readers.py": {
            "lines": 249,
            "tokens": 2038,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_headers.py": {
            "lines": 281,
            "tokens": 1676,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_events.py": {
            "lines": 368,
            "tokens": 1684,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 22,
            "duplicatedTokens": 206,
            "percentage": 5.98,
            "percentageTokens": 12.23,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_connection.py": {
            "lines": 658,
            "tokens": 3689,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/_abnf.py": {
            "lines": 131,
            "tokens": 460,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/h11/__init__.py": {
            "lines": 61,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/utils.py": {
            "lines": 736,
            "tokens": 5204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/transaction.py": {
            "lines": 89,
            "tokens": 561,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/registry.py": {
            "lines": 329,
            "tokens": 1868,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/parquet.py": {
            "lines": 540,
            "tokens": 3192,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/mapping.py": {
            "lines": 250,
            "tokens": 1550,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/json.py": {
            "lines": 116,
            "tokens": 1036,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/gui.py": {
            "lines": 416,
            "tokens": 2965,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/generic.py": {
            "lines": 393,
            "tokens": 3099,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/fuse.py": {
            "lines": 323,
            "tokens": 2458,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/exceptions.py": {
            "lines": 17,
            "tokens": 33,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/dircache.py": {
            "lines": 97,
            "tokens": 531,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/core.py": {
            "lines": 742,
            "tokens": 4086,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/conftest.py": {
            "lines": 54,
            "tokens": 355,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/config.py": {
            "lines": 130,
            "tokens": 775,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/compression.py": {
            "lines": 181,
            "tokens": 1188,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/callbacks.py": {
            "lines": 323,
            "tokens": 1117,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/archive.py": {
            "lines": 74,
            "tokens": 622,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/_version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 159,
            "percentage": 90.91,
            "percentageTokens": 84.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/fsspec/__init__.py": {
            "lines": 70,
            "tokens": 425,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 159,
            "percentage": 90.91,
            "percentageTokens": 84.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/asyncio.py": {
            "lines": 343,
            "tokens": 2091,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 32,
            "duplicatedTokens": 388,
            "percentage": 9.33,
            "percentageTokens": 18.56,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_windows.py": {
            "lines": 64,
            "tokens": 462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_util.py": {
            "lines": 51,
            "tokens": 268,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_unix.py": {
            "lines": 69,
            "tokens": 516,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_soft.py": {
            "lines": 46,
            "tokens": 354,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_error.py": {
            "lines": 29,
            "tokens": 198,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/_api.py": {
            "lines": 402,
            "tokens": 2318,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 12,
            "duplicatedTokens": 132,
            "percentage": 2.99,
            "percentageTokens": 5.69,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/filelock/__init__.py": {
            "lines": 69,
            "tokens": 357,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/variables.py": {
            "lines": 85,
            "tokens": 786,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/parser.py": {
            "lines": 181,
            "tokens": 1616,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/main.py": {
            "lines": 434,
            "tokens": 3106,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/ipython.py": {
            "lines": 49,
            "tokens": 287,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/cli.py": {
            "lines": 217,
            "tokens": 1573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/__main__.py": {
            "lines": 5,
            "tokens": 25,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/dotenv/__init__.py": {
            "lines": 50,
            "tokens": 313,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/distro/__main__.py": {
            "lines": 3,
            "tokens": 22,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/distro/__init__.py": {
            "lines": 53,
            "tokens": 213,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 53,
            "duplicatedTokens": 213,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/xmlreport.py": {
            "lines": 263,
            "tokens": 2318,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/version.py": {
            "lines": 34,
            "tokens": 237,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/types.py": {
            "lines": 205,
            "tokens": 1146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/tomlconfig.py": {
            "lines": 209,
            "tokens": 1898,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/templite.py": {
            "lines": 305,
            "tokens": 1894,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/sysmon.py": {
            "lines": 460,
            "tokens": 3613,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/sqlitedb.py": {
            "lines": 238,
            "tokens": 1925,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/results.py": {
            "lines": 470,
            "tokens": 3466,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/report_core.py": {
            "lines": 116,
            "tokens": 811,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/report.py": {
            "lines": 297,
            "tokens": 2619,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/regions.py": {
            "lines": 126,
            "tokens": 822,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/pytracer.py": {
            "lines": 368,
            "tokens": 2710,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/python.py": {
            "lines": 268,
            "tokens": 1973,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/plugin_support.py": {
            "lines": 298,
            "tokens": 2462,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/plugin.py": {
            "lines": 616,
            "tokens": 1341,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/phystokens.py": {
            "lines": 196,
            "tokens": 1351,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/patch.py": {
            "lines": 165,
            "tokens": 1120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/numbits.py": {
            "lines": 145,
            "tokens": 656,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/multiproc.py": {
            "lines": 119,
            "tokens": 717,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/misc.py": {
            "lines": 372,
            "tokens": 2164,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/lcovreport.py": {
            "lines": 218,
            "tokens": 1564,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/jsonreport.py": {
            "lines": 187,
            "tokens": 1517,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/inorout.py": {
            "lines": 613,
            "tokens": 4339,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/html.py": {
            "lines": 855,
            "tokens": 6463,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/files.py": {
            "lines": 552,
            "tokens": 3697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/execfile.py": {
            "lines": 328,
            "tokens": 2369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/exceptions.py": {
            "lines": 73,
            "tokens": 245,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/env.py": {
            "lines": 134,
            "tokens": 785,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/disposition.py": {
            "lines": 58,
            "tokens": 340,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/debug.py": {
            "lines": 664,
            "tokens": 5038,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/data.py": {
            "lines": 226,
            "tokens": 1452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/core.py": {
            "lines": 117,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/context.py": {
            "lines": 73,
            "tokens": 451,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/config.py": {
            "lines": 716,
            "tokens": 5347,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/collector.py": {
            "lines": 500,
            "tokens": 3349,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/bytecode.py": {
            "lines": 184,
            "tokens": 1182,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/annotate.py": {
            "lines": 113,
            "tokens": 809,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/__main__.py": {
            "lines": 11,
            "tokens": 40,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/coverage/__init__.py": {
            "lines": 39,
            "tokens": 165,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/utils.py": {
            "lines": 626,
            "tokens": 3611,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/testing.py": {
            "lines": 576,
            "tokens": 3693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/termui.py": {
            "lines": 876,
            "tokens": 4384,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 288,
            "duplicatedTokens": 706,
            "percentage": 32.88,
            "percentageTokens": 16.1,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/shell_completion.py": {
            "lines": 666,
            "tokens": 2927,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/parser.py": {
            "lines": 531,
            "tokens": 3946,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/globals.py": {
            "lines": 66,
            "tokens": 369,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/formatting.py": {
            "lines": 300,
            "tokens": 2124,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/exceptions.py": {
            "lines": 307,
            "tokens": 2282,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/decorators.py": {
            "lines": 550,
            "tokens": 3547,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/_winconsole.py": {
            "lines": 295,
            "tokens": 2260,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/_utils.py": {
            "lines": 35,
            "tokens": 129,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/_textwrap.py": {
            "lines": 50,
            "tokens": 387,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/_termui_impl.py": {
            "lines": 846,
            "tokens": 6511,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/_compat.py": {
            "lines": 621,
            "tokens": 5029,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/click/__init__.py": {
            "lines": 122,
            "tokens": 1072,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/version.py": {
            "lines": 7,
            "tokens": 27,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/utils.py": {
            "lines": 413,
            "tokens": 2949,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/models.py": {
            "lines": 359,
            "tokens": 2885,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/md.py": {
            "lines": 634,
            "tokens": 4942,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/legacy.py": {
            "lines": 79,
            "tokens": 510,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/cd.py": {
            "lines": 394,
            "tokens": 2775,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/api.py": {
            "lines": 668,
            "tokens": 4155,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 44,
            "duplicatedTokens": 470,
            "percentage": 6.59,
            "percentageTokens": 11.31,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/__main__.py": {
            "lines": 5,
            "tokens": 31,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/charset_normalizer/__init__.py": {
            "lines": 47,
            "tokens": 146,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/certifi/core.py": {
            "lines": 82,
            "tokens": 435,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 68,
            "duplicatedTokens": 316,
            "percentage": 82.93,
            "percentageTokens": 72.64,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/certifi/__main__.py": {
            "lines": 11,
            "tokens": 77,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/certifi/__init__.py": {
            "lines": 3,
            "tokens": 28,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pytree.py": {
            "lines": 970,
            "tokens": 6789,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blib2to3/pygram.py": {
            "lines": 203,
            "tokens": 1204,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blackd/middlewares.py": {
            "lines": 34,
            "tokens": 297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/blackd/__init__.py": {
            "lines": 263,
            "tokens": 2166,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/strings.py": {
            "lines": 388,
            "tokens": 3297,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/schema.py": {
            "lines": 14,
            "tokens": 115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/rusty.py": {
            "lines": 27,
            "tokens": 187,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/report.py": {
            "lines": 106,
            "tokens": 762,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/ranges.py": {
            "lines": 534,
            "tokens": 3020,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/parsing.py": {
            "lines": 259,
            "tokens": 1951,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/output.py": {
            "lines": 121,
            "tokens": 1156,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/numerics.py": {
            "lines": 60,
            "tokens": 420,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/mode.py": {
            "lines": 318,
            "tokens": 2074,
            "sources": 1,
            "clones": 6,
            "duplicatedLines": 112,
            "duplicatedTokens": 666,
            "percentage": 35.22,
            "percentageTokens": 32.11,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/handle_ipynb_magics.py": {
            "lines": 507,
            "tokens": 2753,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/files.py": {
            "lines": 425,
            "tokens": 2986,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/debug.py": {
            "lines": 54,
            "tokens": 564,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/const.py": {
            "lines": 3,
            "tokens": 26,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/concurrency.py": {
            "lines": 197,
            "tokens": 1376,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/comments.py": {
            "lines": 453,
            "tokens": 2292,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/cache.py": {
            "lines": 149,
            "tokens": 1137,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/brackets.py": {
            "lines": 382,
            "tokens": 2782,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/_width_table.py": {
            "lines": 477,
            "tokens": 5693,
            "sources": 1,
            "clones": 9,
            "duplicatedLines": 184,
            "duplicatedTokens": 2178,
            "percentage": 38.57,
            "percentageTokens": 38.26,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/to_thread.py": {
            "lines": 68,
            "tokens": 314,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/to_process.py": {
            "lines": 257,
            "tokens": 1913,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/to_interpreter.py": {
            "lines": 238,
            "tokens": 1468,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/pytest_plugin.py": {
            "lines": 297,
            "tokens": 2284,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/lowlevel.py": {
            "lines": 169,
            "tokens": 990,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/from_thread.py": {
            "lines": 564,
            "tokens": 3535,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/anyio/__init__.py": {
            "lines": 109,
            "tokens": 1368,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/annotated_types/test_cases.py": {
            "lines": 150,
            "tokens": 3052,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/annotated_types/__init__.py": {
            "lines": 431,
            "tokens": 2018,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_yaml/__init__.py": {
            "lines": 32,
            "tokens": 149,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/warnings.py": {
            "lines": 151,
            "tokens": 1077,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/warning_types.py": {
            "lines": 165,
            "tokens": 643,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/unraisableexception.py": {
            "lines": 162,
            "tokens": 1120,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/unittest.py": {
            "lines": 515,
            "tokens": 3878,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/tracemalloc.py": {
            "lines": 23,
            "tokens": 138,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/tmpdir.py": {
            "lines": 311,
            "tokens": 2007,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/timing.py": {
            "lines": 93,
            "tokens": 499,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/threadexception.py": {
            "lines": 151,
            "tokens": 1046,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/stepwise.py": {
            "lines": 208,
            "tokens": 1572,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/stash.py": {
            "lines": 115,
            "tokens": 472,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/skipping.py": {
            "lines": 315,
            "tokens": 2423,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/setupplan.py": {
            "lines": 38,
            "tokens": 296,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/setuponly.py": {
            "lines": 97,
            "tokens": 777,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/scope.py": {
            "lines": 90,
            "tokens": 487,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/runner.py": {
            "lines": 570,
            "tokens": 4258,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/reports.py": {
            "lines": 636,
            "tokens": 4651,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/recwarn.py": {
            "lines": 364,
            "tokens": 2305,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/python_api.py": {
            "lines": 808,
            "tokens": 4573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/pytester_assertions.py": {
            "lines": 73,
            "tokens": 610,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/pastebin.py": {
            "lines": 116,
            "tokens": 925,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/outcomes.py": {
            "lines": 316,
            "tokens": 1452,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/nodes.py": {
            "lines": 771,
            "tokens": 5027,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/monkeypatch.py": {
            "lines": 414,
            "tokens": 2340,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/logging.py": {
            "lines": 959,
            "tokens": 6659,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/legacypath.py": {
            "lines": 467,
            "tokens": 3343,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/junitxml.py": {
            "lines": 691,
            "tokens": 5689,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 30,
            "duplicatedTokens": 258,
            "percentage": 4.34,
            "percentageTokens": 4.54,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/helpconfig.py": {
            "lines": 282,
            "tokens": 1949,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/freeze_support.py": {
            "lines": 44,
            "tokens": 267,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/faulthandler.py": {
            "lines": 104,
            "tokens": 701,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/doctest.py": {
            "lines": 753,
            "tokens": 5526,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/deprecated.py": {
            "lines": 90,
            "tokens": 274,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/debugging.py": {
            "lines": 406,
            "tokens": 3115,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/compat.py": {
            "lines": 332,
            "tokens": 2319,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/cacheprovider.py": {
            "lines": 624,
            "tokens": 4620,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_version.py": {
            "lines": 33,
            "tokens": 188,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 30,
            "duplicatedTokens": 159,
            "percentage": 90.91,
            "percentageTokens": 84.57,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/_argcomplete.py": {
            "lines": 116,
            "tokens": 441,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/_pytest/__init__.py": {
            "lines": 12,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/size_score.py": {
            "lines": 112,
            "tokens": 825,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 112,
            "duplicatedTokens": 825,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/ramp_up_time.py": {
            "lines": 69,
            "tokens": 488,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 488,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/performance_claims.py": {
            "lines": 241,
            "tokens": 2020,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 241,
            "duplicatedTokens": 2020,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/license.py": {
            "lines": 84,
            "tokens": 577,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 577,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/dataset_quality.py": {
            "lines": 99,
            "tokens": 636,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 636,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/dataset_and_code.py": {
            "lines": 179,
            "tokens": 1618,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1618,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/code_quality.py": {
            "lines": 189,
            "tokens": 1594,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 189,
            "duplicatedTokens": 1594,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/bus_factor.py": {
            "lines": 442,
            "tokens": 4587,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 442,
            "duplicatedTokens": 4587,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/metrics/base.py": {
            "lines": 31,
            "tokens": 266,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 31,
            "duplicatedTokens": 266,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/weights.py": {
            "lines": 15,
            "tokens": 178,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 178,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/url_ctx.py": {
            "lines": 43,
            "tokens": 330,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 330,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/scoring.py": {
            "lines": 24,
            "tokens": 212,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 212,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/model_url.py": {
            "lines": 80,
            "tokens": 532,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 532,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/hf_client.py": {
            "lines": 49,
            "tokens": 311,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 311,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/core/exec_pool.py": {
            "lines": 26,
            "tokens": 269,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 269,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/py.py": {
            "lines": 14,
            "tokens": 78,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/mypy_extensions.py": {
            "lines": 250,
            "tokens": 1641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_size_score.py": {
            "lines": 110,
            "tokens": 962,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_registry_shape.py": {
            "lines": 42,
            "tokens": 277,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_ramp_up_time.py": {
            "lines": 78,
            "tokens": 697,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_performance_claims.py": {
            "lines": 131,
            "tokens": 929,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 32,
            "duplicatedTokens": 304,
            "percentage": 24.43,
            "percentageTokens": 32.72,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_license.py": {
            "lines": 118,
            "tokens": 932,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_dataset_quality.py": {
            "lines": 91,
            "tokens": 679,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_dataset_and_code.py": {
            "lines": 68,
            "tokens": 596,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_code_quality.py": {
            "lines": 107,
            "tokens": 902,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/metrics/test_bus_factor.py": {
            "lines": 167,
            "tokens": 1500,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/core/test_model_url.py": {
            "lines": 80,
            "tokens": 495,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/unit/core/test_hf_client.py": {
            "lines": 52,
            "tokens": 438,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/size_score.py": {
            "lines": 112,
            "tokens": 825,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 112,
            "duplicatedTokens": 825,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/ramp_up_time.py": {
            "lines": 69,
            "tokens": 488,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 69,
            "duplicatedTokens": 488,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/performance_claims.py": {
            "lines": 241,
            "tokens": 2020,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 241,
            "duplicatedTokens": 2020,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/license.py": {
            "lines": 84,
            "tokens": 577,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 84,
            "duplicatedTokens": 577,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/dataset_quality.py": {
            "lines": 99,
            "tokens": 636,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 99,
            "duplicatedTokens": 636,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/dataset_and_code.py": {
            "lines": 179,
            "tokens": 1618,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 179,
            "duplicatedTokens": 1618,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/code_quality.py": {
            "lines": 189,
            "tokens": 1594,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 189,
            "duplicatedTokens": 1594,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/bus_factor.py": {
            "lines": 442,
            "tokens": 4587,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 442,
            "duplicatedTokens": 4587,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/metrics/base.py": {
            "lines": 31,
            "tokens": 266,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 31,
            "duplicatedTokens": 266,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/weights.py": {
            "lines": 15,
            "tokens": 178,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 15,
            "duplicatedTokens": 178,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/url_ctx.py": {
            "lines": 43,
            "tokens": 330,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 43,
            "duplicatedTokens": 330,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/scoring.py": {
            "lines": 24,
            "tokens": 212,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 24,
            "duplicatedTokens": 212,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/model_url.py": {
            "lines": 80,
            "tokens": 532,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 80,
            "duplicatedTokens": 532,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/hf_client.py": {
            "lines": 49,
            "tokens": 311,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 49,
            "duplicatedTokens": 311,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/core/exec_pool.py": {
            "lines": 26,
            "tokens": 269,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 26,
            "duplicatedTokens": 269,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/logger.py": {
            "lines": 32,
            "tokens": 234,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 234,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/llm_client.py": {
            "lines": 56,
            "tokens": 347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 56,
            "duplicatedTokens": 347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/build/lib/swe_project/cli.py": {
            "lines": 319,
            "tokens": 2548,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 319,
            "duplicatedTokens": 2548,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/integration/test_cli_smoke.py": {
            "lines": 50,
            "tokens": 304,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/logger.py": {
            "lines": 32,
            "tokens": 234,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 32,
            "duplicatedTokens": 234,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/llm_client.py": {
            "lines": 56,
            "tokens": 347,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 56,
            "duplicatedTokens": 347,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/src/swe_project/cli.py": {
            "lines": 319,
            "tokens": 2548,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 319,
            "duplicatedTokens": 2548,
            "percentage": 100,
            "percentageTokens": 100,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/tests/conftest.py": {
            "lines": 6,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 390529,
          "tokens": 2696440,
          "sources": 2409,
          "clones": 843,
          "duplicatedLines": 37098,
          "duplicatedTokens": 278980,
          "percentage": 9.5,
          "percentageTokens": 10.35,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "json": {
        "sources": {
          "/Users/luis/codebases/SWE-Project-Part-2/.venv/lib/python3.14/site-packages/black/resources/black.schema.json": {
            "lines": 151,
            "tokens": 838,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.vscode/settings.json": {
            "lines": 8,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 159,
          "tokens": 890,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      },
      "yaml": {
        "sources": {
          "/Users/luis/codebases/SWE-Project-Part-2/.github/workflows/superlinter.yaml": {
            "lines": 16,
            "tokens": 108,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "/Users/luis/codebases/SWE-Project-Part-2/.pre-commit-config.yaml": {
            "lines": 31,
            "tokens": 206,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 47,
          "tokens": 314,
          "sources": 2,
          "clones": 0,
          "duplicatedLines": 0,
          "duplicatedTokens": 0,
          "percentage": 0,
          "percentageTokens": 0,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 391505,
      "tokens": 2703795,
      "sources": 2423,
      "clones": 846,
      "duplicatedLines": 37182,
      "duplicatedTokens": 280350,
      "percentage": 9.5,
      "percentageTokens": 10.37,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "python",
      "lines": 27,
      "fragment": "Retrieves a run step.\n\n        Args:\n          include: A list of additional fields to include in the response. Currently the only\n              supported value is `step_details.tool_calls[*].file_search.results[*].content`\n              to fetch the file search result content.\n\n              See the\n              [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n              for more information.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        if not run_id:\n            raise ValueError(f\"Expected a non-empty value for `run_id` but received {run_id!r}\")\n        if not step_id:\n            raise ValueError(f\"Expected a non-empty value for `step_id` but received {step_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 218,
        "end": 244,
        "startLoc": {
          "line": 218,
          "column": 9,
          "position": 1235
        },
        "endLoc": {
          "line": 244,
          "column": 6,
          "position": 1522
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 62,
        "end": 88,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 367
        },
        "endLoc": {
          "line": 88,
          "column": 5,
          "position": 654
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "({\"include\": include}, step_retrieve_params.StepRetrieveParams),\n            ),\n            cast_to=RunStep,\n        )\n\n    @typing_extensions.deprecated(\"The Assistants API is deprecated in favor of the Responses API\")\n    def list(\n        self,\n        run_id: str,\n        *,\n        thread_id: str,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        include: List[RunStepInclude] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 251,
        "end": 273,
        "startLoc": {
          "line": 251,
          "column": 22,
          "position": 1570
        },
        "endLoc": {
          "line": 273,
          "column": 15,
          "position": 1801
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 95,
        "end": 117,
        "startLoc": {
          "line": 95,
          "column": 16,
          "position": 698
        },
        "endLoc": {
          "line": 117,
          "column": 15,
          "position": 929
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "[RunStep],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"include\": include,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    step_list_params.StepListParams,\n                ),\n            ),\n            model=RunStep,\n        )\n\n\nclass StepsWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 317,
        "end": 338,
        "startLoc": {
          "line": 317,
          "column": 16,
          "position": 1890
        },
        "endLoc": {
          "line": 338,
          "column": 21,
          "position": 2000
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 161,
        "end": 182,
        "startLoc": {
          "line": 161,
          "column": 15,
          "position": 1012
        },
        "endLoc": {
          "line": 182,
          "column": 11,
          "position": 1122
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "if not set(mode) <= {\"r\", \"w\", \"b\"}:\n            raise ValueError(\"invalid mode %r (only r, w, b allowed)\" % (mode,))\n\n        writing = \"w\" in mode\n        reading = \"r\" in mode or not writing\n        assert reading or writing\n        binary = \"b\" in mode\n        rawmode = \"\"\n        if reading:\n            rawmode += \"r\"\n        if writing:\n            rawmode += \"w\"\n        raw = socket",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
        "start": 115,
        "end": 127,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 698
        },
        "endLoc": {
          "line": 127,
          "column": 7,
          "position": 822
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/packages/backports/makefile.py",
        "start": 19,
        "end": 30,
        "startLoc": {
          "line": 19,
          "column": 5,
          "position": 58
        },
        "endLoc": {
          "line": 30,
          "column": 9,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "+= 1\n        if buffering is None:\n            buffering = -1\n        if buffering < 0:\n            buffering = io.DEFAULT_BUFFER_SIZE\n        if buffering == 0:\n            if not binary:\n                raise ValueError(\"unbuffered streams must be binary\")\n            return raw\n        if reading and writing:\n            buffer = io.BufferedRWPair(raw, raw, buffering)\n        elif reading:\n            buffer = io.BufferedReader(raw, buffering)\n        else:\n            assert writing\n            buffer = io.BufferedWriter(raw, buffering)\n        if binary:\n            return buffer\n        text = io.TextIOWrapper(buffer, encoding, errors, newline)\n        text.mode = mode\n        return text",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
        "start": 128,
        "end": 148,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 839
        },
        "endLoc": {
          "line": 148,
          "column": 5,
          "position": 1028
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/packages/backports/makefile.py",
        "start": 31,
        "end": 51,
        "startLoc": {
          "line": 31,
          "column": 2,
          "position": 194
        },
        "endLoc": {
          "line": 51,
          "column": 5,
          "position": 383
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n\n    def _reuse(self):\n        self._makefile_refs += 1\n\n    def _drop(self):\n        if self._makefile_refs < 1:\n            self.close()\n        else:\n            self._makefile_refs -= 1\n\n\nif _fileobject:  # Platform-specific: Python 2\n\n    def makefile(self, mode, bufsize=-1):\n        self._makefile_refs += 1\n        return _fileobject(self, mode, bufsize, close=True)\n\nelse:  # Platform-specific: Python 3\n    makefile",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
        "start": 399,
        "end": 418,
        "startLoc": {
          "line": 399,
          "column": 2,
          "position": 2392
        },
        "endLoc": {
          "line": 418,
          "column": 9,
          "position": 2518
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/securetransport.py",
        "start": 754,
        "end": 774,
        "startLoc": {
          "line": 754,
          "column": 9,
          "position": 4463
        },
        "endLoc": {
          "line": 774,
          "column": 4,
          "position": 4590
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "self._equal_cache: str | None = None\n        self._hash: int | None = None\n        self._extras = frozenset(canonicalize_name(e) for e in self._ireq.extras)\n\n    @property\n    def _equal(self) -> str:\n        if self._equal_cache is not None:\n            return self._equal_cache\n\n        self._equal_cache = str(self._ireq)\n        return self._equal_cache\n\n    def __eq__",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/requirements.py",
        "start": 133,
        "end": 145,
        "startLoc": {
          "line": 133,
          "column": 9,
          "position": 1125
        },
        "endLoc": {
          "line": 145,
          "column": 7,
          "position": 1249
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/requirements.py",
        "start": 56,
        "end": 68,
        "startLoc": {
          "line": 56,
          "column": 9,
          "position": 459
        },
        "endLoc": {
          "line": 68,
          "column": 8,
          "position": 583
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "_allowed_strategies = {\"eager\", \"only-if-needed\", \"to-satisfy-only\"}\n\n    def __init__(\n        self,\n        preparer: RequirementPreparer,\n        finder: PackageFinder,\n        wheel_cache: WheelCache | None,\n        make_install_req: InstallRequirementProvider,\n        use_user_site: bool,\n        ignore_dependencies: bool,\n        ignore_installed: bool,\n        ignore_requires_python: bool,\n        force_reinstall: bool,\n        upgrade_strategy: str,\n        py_version_info: tuple[int, ...] | None = None,\n    ) -",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/resolution/legacy/resolver.py",
        "start": 117,
        "end": 132,
        "startLoc": {
          "line": 117,
          "column": 5,
          "position": 631
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 756
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/resolution/resolvelib/resolver.py",
        "start": 42,
        "end": 57,
        "startLoc": {
          "line": 42,
          "column": 5,
          "position": 355
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom __future__ import annotations\n\nfrom typing import Union\nfrom typing_extensions import Required, TypeAlias, TypedDict\n\nfrom ...graders.multi_grader_param import MultiGraderParam\nfrom ...graders.python_grader_param import PythonGraderParam\nfrom ...graders.score_model_grader_param import ScoreModelGraderParam\nfrom ...graders.string_check_grader_param import StringCheckGraderParam\nfrom ...graders.text_similarity_grader_param import TextSimilarityGraderParam\n\n__all__ = [\"GraderRunParams\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_run_params.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 18,
          "position": 106
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/fine_tuning/alpha/grader_validate_params.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 23,
          "position": 106
        }
      }
    },
    {
      "format": "python",
      "lines": 95,
      "fragment": ", \"Result\", \"Sample\", \"SampleInput\", \"SampleOutput\", \"SampleUsage\"]\n\n\nclass Result(BaseModel):\n    name: str\n    \"\"\"The name of the grader.\"\"\"\n\n    passed: bool\n    \"\"\"Whether the grader considered the output a pass.\"\"\"\n\n    score: float\n    \"\"\"The numeric score produced by the grader.\"\"\"\n\n    sample: Optional[Dict[str, object]] = None\n    \"\"\"Optional sample or intermediate data produced by the grader.\"\"\"\n\n    type: Optional[str] = None\n    \"\"\"The grader type (for example, \"string-check-grader\").\"\"\"\n\n    if TYPE_CHECKING:\n        # Some versions of Pydantic <2.8.0 have a bug and don’t allow assigning a\n        # value to this field, so for compatibility we avoid doing it at runtime.\n        __pydantic_extra__: Dict[str, object] = FieldInfo(init=False)  # pyright: ignore[reportIncompatibleVariableOverride]\n\n        # Stub to indicate that arbitrary properties are accepted.\n        # To access properties that are not valid identifiers you can use `getattr`, e.g.\n        # `getattr(obj, '$type')`\n        def __getattr__(self, attr: str) -> object: ...\n    else:\n        __pydantic_extra__: Dict[str, object]\n\n\nclass SampleInput(BaseModel):\n    content: str\n    \"\"\"The content of the message.\"\"\"\n\n    role: str\n    \"\"\"The role of the message sender (e.g., system, user, developer).\"\"\"\n\n\nclass SampleOutput(BaseModel):\n    content: Optional[str] = None\n    \"\"\"The content of the message.\"\"\"\n\n    role: Optional[str] = None\n    \"\"\"The role of the message (e.g. \"system\", \"assistant\", \"user\").\"\"\"\n\n\nclass SampleUsage(BaseModel):\n    cached_tokens: int\n    \"\"\"The number of tokens retrieved from cache.\"\"\"\n\n    completion_tokens: int\n    \"\"\"The number of completion tokens generated.\"\"\"\n\n    prompt_tokens: int\n    \"\"\"The number of prompt tokens used.\"\"\"\n\n    total_tokens: int\n    \"\"\"The total number of tokens used.\"\"\"\n\n\nclass Sample(BaseModel):\n    error: EvalAPIError\n    \"\"\"An object representing an error response from the Eval API.\"\"\"\n\n    finish_reason: str\n    \"\"\"The reason why the sample generation was finished.\"\"\"\n\n    input: List[SampleInput]\n    \"\"\"An array of input messages.\"\"\"\n\n    max_completion_tokens: int\n    \"\"\"The maximum number of tokens allowed for completion.\"\"\"\n\n    model: str\n    \"\"\"The model used for generating the sample.\"\"\"\n\n    output: List[SampleOutput]\n    \"\"\"An array of output messages.\"\"\"\n\n    seed: int\n    \"\"\"The seed used for generating the sample.\"\"\"\n\n    temperature: float\n    \"\"\"The sampling temperature used.\"\"\"\n\n    top_p: float\n    \"\"\"The top_p value used for sampling.\"\"\"\n\n    usage: SampleUsage\n    \"\"\"Token usage details for the sample.\"\"\"\n\n\nclass OutputItemListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/runs/output_item_list_response.py",
        "start": 11,
        "end": 105,
        "startLoc": {
          "line": 11,
          "column": 25,
          "position": 71
        },
        "endLoc": {
          "line": 105,
          "column": 23,
          "position": 493
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/runs/output_item_retrieve_response.py",
        "start": 11,
        "end": 105,
        "startLoc": {
          "line": 11,
          "column": 29,
          "position": 71
        },
        "endLoc": {
          "line": 105,
          "column": 27,
          "position": 493
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ".\"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nclass TruncationStrategy(TypedDict, total=False):\n    type: Required[Literal[\"auto\", \"last_messages\"]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 216,
        "end": 231,
        "startLoc": {
          "line": 216,
          "column": 3,
          "position": 2169
        },
        "endLoc": {
          "line": 231,
          "column": 8,
          "position": 2297
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 82,
        "end": 96,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 651
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "Specifies the format that the model must output.\n\n    Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n    Outputs which ensures the model will match your supplied JSON schema. Learn more\n    in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n    message the model generates is valid JSON.\n\n    **Important:** when using JSON mode, you **must** also instruct the model to\n    produce JSON yourself via a system or user message. Without this, the model may\n    generate an unending stream of whitespace until the generation reaches the token\n    limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n    the message content may be partially cut off if `finish_reason=\"length\"`, which\n    indicates the generation exceeded `max_tokens` or the conversation exceeded the\n    max context length.\n    \"\"\"\n\n    started_at: Optional[int] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run.py",
        "start": 171,
        "end": 195,
        "startLoc": {
          "line": 171,
          "column": 8,
          "position": 628
        },
        "endLoc": {
          "line": 195,
          "column": 8,
          "position": 1031
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 123,
        "end": 147,
        "startLoc": {
          "line": 123,
          "column": 8,
          "position": 1068
        },
        "endLoc": {
          "line": 147,
          "column": 8,
          "position": 1471
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "Controls which (if any) tool is called by the model. `none` means the model will\n    not call any tools and instead generates a message. `auto` is the default value\n    and means the model can pick between generating a message or calling one or more\n    tools. `required` means the model must call one or more tools before responding\n    to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n    `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n    call that tool.\n    \"\"\"\n\n    tools: List[AssistantTool]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run.py",
        "start": 212,
        "end": 222,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 1169
        },
        "endLoc": {
          "line": 222,
          "column": 8,
          "position": 1358
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 155,
        "end": 165,
        "startLoc": {
          "line": 155,
          "column": 5,
          "position": 1545
        },
        "endLoc": {
          "line": 165,
          "column": 8,
          "position": 1734
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "Configuration for input audio noise reduction.\n\n    This can be set to `null` to turn off. Noise reduction filters audio added to\n    the input audio buffer before it is sent to VAD and the model. Filtering the\n    audio can improve VAD and turn detection accuracy (reducing false positives) and\n    model performance by improving perception of the input audio.\n    \"\"\"\n\n    input_audio_transcription: Optional[SessionInputAudioTranscription] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 141,
        "end": 150,
        "startLoc": {
          "line": 141,
          "column": 8,
          "position": 834
        },
        "endLoc": {
          "line": 150,
          "column": 8,
          "position": 960
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 141,
        "end": 150,
        "startLoc": {
          "line": 141,
          "column": 8,
          "position": 802
        },
        "endLoc": {
          "line": 150,
          "column": 8,
          "position": 928
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "Configuration for turn detection, ether Server VAD or Semantic VAD.\n\n    This can be set to `null` to turn off, in which case the client must manually\n    trigger model response. Server VAD means that the model will detect the start\n    and end of speech based on audio volume and respond at the end of user speech.\n    Semantic VAD is more advanced and uses a turn detection model (in conjunction\n    with VAD) to semantically estimate whether the user has finished speaking, then\n    dynamically sets a timeout based on this probability. For example, if user audio\n    trails off with \"uhhm\", the model will score a low probability of turn end and\n    wait longer for the user to continue speaking. This can be useful for more\n    natural conversations, but may have a higher latency.\n    \"\"\"\n\n\nclass TranscriptionSessionUpdate(BaseModel):\n    session: Session\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 163,
        "end": 179,
        "startLoc": {
          "line": 163,
          "column": 8,
          "position": 1058
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1343
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 163,
        "end": 179,
        "startLoc": {
          "line": 163,
          "column": 8,
          "position": 1026
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1311
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": "(TypedDict, total=False):\n    create_response: bool\n    \"\"\"Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n\n    Not available for transcription sessions.\n    \"\"\"\n\n    eagerness: Literal[\"low\", \"medium\", \"high\", \"auto\"]\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`.\n    \"\"\"\n\n    interrupt_response: bool\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs. Not available for transcription sessions.\n    \"\"\"\n\n    prefix_padding_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: float\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n    type: Literal[\"server_vad\", \"semantic_vad\"]\n    \"\"\"Type of turn detection.\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_create_params.py",
        "start": 126,
        "end": 173,
        "startLoc": {
          "line": 126,
          "column": 14,
          "position": 317
        },
        "endLoc": {
          "line": 173,
          "column": 3,
          "position": 762
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 72,
        "end": 124,
        "startLoc": {
          "line": 72,
          "column": 21,
          "position": 219
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 664
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ".\n    \"\"\"\n\n    eagerness: Literal[\"low\", \"medium\", \"high\", \"auto\"]\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`.\n    \"\"\"\n\n    interrupt_response: bool\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: int\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 119,
        "end": 138,
        "startLoc": {
          "line": 119,
          "column": 7,
          "position": 514
        },
        "endLoc": {
          "line": 138,
          "column": 8,
          "position": 662
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 77,
        "end": 92,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 278
        },
        "endLoc": {
          "line": 92,
          "column": 4,
          "position": 425
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": ".\n    \"\"\"\n\n    prefix_padding_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: float\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n    type: Literal[\"server_vad\", \"semantic_vad\"]\n    \"\"\"Type of turn detection.\"\"\"\n\n\nclass Session(TypedDict, total=False):\n    client_secret: SessionClientSecret\n    \"\"\"Configuration options for the generated client secret.\"\"\"\n\n    input_audio_format: Literal[\"pcm16\", \"g711_ulaw\", \"g711_alaw\"]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 134,
        "end": 169,
        "startLoc": {
          "line": 134,
          "column": 7,
          "position": 659
        },
        "endLoc": {
          "line": 169,
          "column": 8,
          "position": 904
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 92,
        "end": 127,
        "startLoc": {
          "line": 92,
          "column": 9,
          "position": 434
        },
        "endLoc": {
          "line": 127,
          "column": 8,
          "position": 679
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "\"\"\"\n\n    input_audio_format: Literal[\"pcm16\", \"g711_ulaw\", \"g711_alaw\"]\n    \"\"\"The format of input audio.\n\n    Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must\n    be 16-bit PCM at a 24kHz sample rate, single channel (mono), and little-endian\n    byte order.\n    \"\"\"\n\n    input_audio_noise_reduction: SessionInputAudioNoiseReduction\n    \"\"\"Configuration for input audio noise reduction.\n\n    This can be set to `null` to turn off. Noise reduction filters audio added to\n    the input audio buffer before it is sent to VAD and the model. Filtering the\n    audio can improve VAD and turn detection accuracy (reducing false positives) and\n    model performance by improving perception of the input audio.\n    \"\"\"\n\n    input_audio_transcription: SessionInputAudioTranscription\n    \"\"\"\n    Configuration for input audio transcription,",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 166,
        "end": 187,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 904
        },
        "endLoc": {
          "line": 187,
          "column": 2,
          "position": 1125
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 130,
        "end": 150,
        "startLoc": {
          "line": 130,
          "column": 5,
          "position": 719
        },
        "endLoc": {
          "line": 150,
          "column": 2,
          "position": 938
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ".\n    \"\"\"\n\n    turn_detection: SessionTurnDetection\n    \"\"\"Configuration for turn detection, ether Server VAD or Semantic VAD.\n\n    This can be set to `null` to turn off, in which case the client must manually\n    trigger model response. Server VAD means that the model will detect the start\n    and end of speech based on audio volume and respond at the end of user speech.\n    Semantic VAD is more advanced and uses a turn detection model (in conjunction\n    with VAD) to semantically estimate whether the user has finished speaking, then\n    dynamically sets a timeout based on this probability. For example, if user audio\n    trails off with \"uhhm\", the model will score a low probability of turn end and\n    wait longer for the user to continue speaking. This can be useful for more\n    natural conversations, but may have a higher latency.\n    \"\"\"\n\n    voice: Union[str, Literal[\"alloy\", \"ash\", \"ballad\", \"coral\", \"echo\", \"sage\", \"shimmer\", \"verse\"]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 276,
        "end": 294,
        "startLoc": {
          "line": 276,
          "column": 9,
          "position": 2042
        },
        "endLoc": {
          "line": 294,
          "column": 8,
          "position": 2331
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 159,
        "end": 179,
        "startLoc": {
          "line": 159,
          "column": 2,
          "position": 1022
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1311
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ".\n    \"\"\"\n\n    eagerness: Optional[Literal[\"low\", \"medium\", \"high\", \"auto\"]] = None\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`.\n    \"\"\"\n\n    interrupt_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: Optional[int] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 119,
        "end": 138,
        "startLoc": {
          "line": 119,
          "column": 7,
          "position": 533
        },
        "endLoc": {
          "line": 138,
          "column": 8,
          "position": 681
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 77,
        "end": 92,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 310
        },
        "endLoc": {
          "line": 92,
          "column": 4,
          "position": 457
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": ".\n    \"\"\"\n\n    prefix_padding_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: Optional[float] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n    type: Optional[Literal[\"server_vad\", \"semantic_vad\"]] = None\n    \"\"\"Type of turn detection.\"\"\"\n\n\nclass Session(BaseModel):\n    client_secret: Optional[SessionClientSecret] = None\n    \"\"\"Configuration options for the generated client secret.\"\"\"\n\n    input_audio_format: Optional[Literal[\"pcm16\", \"g711_ulaw\", \"g711_alaw\"]] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 134,
        "end": 169,
        "startLoc": {
          "line": 134,
          "column": 7,
          "position": 678
        },
        "endLoc": {
          "line": 169,
          "column": 8,
          "position": 923
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 92,
        "end": 127,
        "startLoc": {
          "line": 92,
          "column": 9,
          "position": 466
        },
        "endLoc": {
          "line": 127,
          "column": 8,
          "position": 711
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "\"\"\"\n\n    input_audio_format: Optional[Literal[\"pcm16\", \"g711_ulaw\", \"g711_alaw\"]] = None\n    \"\"\"The format of input audio.\n\n    Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, input audio must\n    be 16-bit PCM at a 24kHz sample rate, single channel (mono), and little-endian\n    byte order.\n    \"\"\"\n\n    input_audio_noise_reduction: Optional[SessionInputAudioNoiseReduction] = None\n    \"\"\"Configuration for input audio noise reduction.\n\n    This can be set to `null` to turn off. Noise reduction filters audio added to\n    the input audio buffer before it is sent to VAD and the model. Filtering the\n    audio can improve VAD and turn detection accuracy (reducing false positives) and\n    model performance by improving perception of the input audio.\n    \"\"\"\n\n    input_audio_transcription: Optional[SessionInputAudioTranscription] = None\n    \"\"\"\n    Configuration for input audio transcription,",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 166,
        "end": 187,
        "startLoc": {
          "line": 166,
          "column": 2,
          "position": 923
        },
        "endLoc": {
          "line": 187,
          "column": 2,
          "position": 1144
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 130,
        "end": 150,
        "startLoc": {
          "line": 130,
          "column": 5,
          "position": 751
        },
        "endLoc": {
          "line": 150,
          "column": 2,
          "position": 970
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "Configuration for input audio transcription, defaults to off and can be set to\n    `null` to turn off once on. Input audio transcription is not native to the\n    model, since the model consumes audio directly. Transcription runs\n    asynchronously through\n    [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n    and should be treated as guidance of input audio content rather than precisely\n    what the model heard. The client can optionally set the language and prompt for\n    transcription, these offer additional guidance to the transcription service.\n    \"\"\"\n\n    instructions: Optional[str] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 187,
        "end": 198,
        "startLoc": {
          "line": 187,
          "column": 5,
          "position": 1135
        },
        "endLoc": {
          "line": 198,
          "column": 8,
          "position": 1329
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 187,
        "end": 198,
        "startLoc": {
          "line": 187,
          "column": 5,
          "position": 1116
        },
        "endLoc": {
          "line": 198,
          "column": 8,
          "position": 1310
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "The default system instructions (i.e.\n\n    system message) prepended to model calls. This field allows the client to guide\n    the model on desired responses. The model can be instructed on response content\n    and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of\n    good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\n    into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be\n    followed by the model, but they provide guidance to the model on the desired\n    behavior.\n\n    Note that the server sets default instructions which will be used if this field\n    is not set and are visible in the `session.created` event at the start of the\n    session.\n    \"\"\"\n\n    max_response_output_tokens: Union[int, Literal[\"inf\"], None] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 198,
        "end": 214,
        "startLoc": {
          "line": 198,
          "column": 8,
          "position": 1330
        },
        "endLoc": {
          "line": 214,
          "column": 8,
          "position": 1570
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 198,
        "end": 214,
        "startLoc": {
          "line": 198,
          "column": 8,
          "position": 1311
        },
        "endLoc": {
          "line": 214,
          "column": 8,
          "position": 1551
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ".\n    \"\"\"\n\n    turn_detection: Optional[SessionTurnDetection] = None\n    \"\"\"Configuration for turn detection, ether Server VAD or Semantic VAD.\n\n    This can be set to `null` to turn off, in which case the client must manually\n    trigger model response. Server VAD means that the model will detect the start\n    and end of speech based on audio volume and respond at the end of user speech.\n    Semantic VAD is more advanced and uses a turn detection model (in conjunction\n    with VAD) to semantically estimate whether the user has finished speaking, then\n    dynamically sets a timeout based on this probability. For example, if user audio\n    trails off with \"uhhm\", the model will score a low probability of turn end and\n    wait longer for the user to continue speaking. This can be useful for more\n    natural conversations, but may have a higher latency.\n    \"\"\"\n\n    voice: Union[str, Literal[\"alloy\", \"ash\", \"ballad\", \"coral\", \"echo\", \"sage\", \"shimmer\", \"verse\"], None] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 278,
        "end": 296,
        "startLoc": {
          "line": 278,
          "column": 9,
          "position": 2061
        },
        "endLoc": {
          "line": 296,
          "column": 8,
          "position": 2350
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update.py",
        "start": 159,
        "end": 179,
        "startLoc": {
          "line": 159,
          "column": 2,
          "position": 1054
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1311
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "(TypedDict, total=False):\n    description: str\n    \"\"\"\n    The description of the function, including guidance on when and how to call it,\n    and guidance about what to tell the user when calling (if anything).\n    \"\"\"\n\n    name: str\n    \"\"\"The name of the function.\"\"\"\n\n    parameters: object\n    \"\"\"Parameters of the function in JSON Schema.\"\"\"\n\n    type: Literal[\"function\"]\n    \"\"\"The type of the tool, i.e. `function`.\"\"\"\n\n\nclass TracingTracingConfiguration(TypedDict, total=False):\n    group_id: str\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_create_params.py",
        "start": 212,
        "end": 231,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 509
        },
        "endLoc": {
          "line": 231,
          "column": 8,
          "position": 634
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 75,
        "end": 94,
        "startLoc": {
          "line": 75,
          "column": 12,
          "position": 234
        },
        "endLoc": {
          "line": 94,
          "column": 8,
          "position": 359
        }
      }
    },
    {
      "format": "python",
      "lines": 44,
      "fragment": "Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    eagerness: Literal[\"low\", \"medium\", \"high\", \"auto\"]\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`.\n    \"\"\"\n\n    interrupt_response: bool\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: float\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n    type: Literal[\"server_vad\", \"semantic_vad\"]\n    \"\"\"Type of turn detection.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_create_params.py",
        "start": 255,
        "end": 298,
        "startLoc": {
          "line": 255,
          "column": 5,
          "position": 761
        },
        "endLoc": {
          "line": 298,
          "column": 2,
          "position": 1165
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 118,
        "end": 173,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 486
        },
        "endLoc": {
          "line": 173,
          "column": 2,
          "position": 763
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "(BaseModel):\n    description: Optional[str] = None\n    \"\"\"\n    The description of the function, including guidance on when and how to call it,\n    and guidance about what to tell the user when calling (if anything).\n    \"\"\"\n\n    name: Optional[str] = None\n    \"\"\"The name of the function.\"\"\"\n\n    parameters: Optional[object] = None\n    \"\"\"Parameters of the function in JSON Schema.\"\"\"\n\n    type: Optional[Literal[\"function\"]] = None\n    \"\"\"The type of the tool, i.e. `function`.\"\"\"\n\n\nclass TracingTracingConfiguration(BaseModel):\n    group_id: Optional[str] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py",
        "start": 53,
        "end": 72,
        "startLoc": {
          "line": 53,
          "column": 5,
          "position": 174
        },
        "endLoc": {
          "line": 72,
          "column": 8,
          "position": 301
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 75,
        "end": 94,
        "startLoc": {
          "line": 75,
          "column": 12,
          "position": 251
        },
        "endLoc": {
          "line": 94,
          "column": 8,
          "position": 378
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    eagerness: Optional[Literal[\"low\", \"medium\", \"high\", \"auto\"]] = None\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`.\n    \"\"\"\n\n    interrupt_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: Optional[float] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n    type: Optional[Literal[\"server_vad\", \"semantic_vad\"]] = None\n    \"\"\"Type of turn detection.\"\"\"\n\n\nclass Session(BaseModel):\n    id: Optional[str] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py",
        "start": 96,
        "end": 144,
        "startLoc": {
          "line": 96,
          "column": 5,
          "position": 428
        },
        "endLoc": {
          "line": 144,
          "column": 8,
          "position": 831
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 118,
        "end": 124,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 505
        },
        "endLoc": {
          "line": 124,
          "column": 8,
          "position": 696
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "Configuration for input audio noise reduction.\n\n    This can be set to `null` to turn off. Noise reduction filters audio added to\n    the input audio buffer before it is sent to VAD and the model. Filtering the\n    audio can improve VAD and turn detection accuracy (reducing false positives) and\n    model performance by improving perception of the input audio.\n    \"\"\"\n\n    input_audio_transcription: Optional[InputAudioTranscription] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py",
        "start": 155,
        "end": 164,
        "startLoc": {
          "line": 155,
          "column": 8,
          "position": 933
        },
        "endLoc": {
          "line": 164,
          "column": 8,
          "position": 1059
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 141,
        "end": 150,
        "startLoc": {
          "line": 141,
          "column": 8,
          "position": 802
        },
        "endLoc": {
          "line": 150,
          "column": 8,
          "position": 928
        }
      }
    },
    {
      "format": "python",
      "lines": 83,
      "fragment": "Configuration for input audio transcription, defaults to off and can be set to\n    `null` to turn off once on. Input audio transcription is not native to the\n    model, since the model consumes audio directly. Transcription runs\n    asynchronously through\n    [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n    and should be treated as guidance of input audio content rather than precisely\n    what the model heard. The client can optionally set the language and prompt for\n    transcription, these offer additional guidance to the transcription service.\n    \"\"\"\n\n    instructions: Optional[str] = None\n    \"\"\"The default system instructions (i.e.\n\n    system message) prepended to model calls. This field allows the client to guide\n    the model on desired responses. The model can be instructed on response content\n    and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of\n    good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\n    into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be\n    followed by the model, but they provide guidance to the model on the desired\n    behavior.\n\n    Note that the server sets default instructions which will be used if this field\n    is not set and are visible in the `session.created` event at the start of the\n    session.\n    \"\"\"\n\n    max_response_output_tokens: Union[int, Literal[\"inf\"], None] = None\n    \"\"\"\n    Maximum number of output tokens for a single assistant response, inclusive of\n    tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n    `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n    \"\"\"\n\n    modalities: Optional[List[Literal[\"text\", \"audio\"]]] = None\n    \"\"\"The set of modalities the model can respond with.\n\n    To disable audio, set this to [\"text\"].\n    \"\"\"\n\n    model: Optional[\n        Literal[\n            \"gpt-realtime\",\n            \"gpt-realtime-2025-08-28\",\n            \"gpt-4o-realtime-preview\",\n            \"gpt-4o-realtime-preview-2024-10-01\",\n            \"gpt-4o-realtime-preview-2024-12-17\",\n            \"gpt-4o-realtime-preview-2025-06-03\",\n            \"gpt-4o-mini-realtime-preview\",\n            \"gpt-4o-mini-realtime-preview-2024-12-17\",\n        ]\n    ] = None\n    \"\"\"The Realtime model used for this session.\"\"\"\n\n    output_audio_format: Optional[Literal[\"pcm16\", \"g711_ulaw\", \"g711_alaw\"]] = None\n    \"\"\"The format of output audio.\n\n    Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For `pcm16`, output audio is\n    sampled at a rate of 24kHz.\n    \"\"\"\n\n    speed: Optional[float] = None\n    \"\"\"The speed of the model's spoken response.\n\n    1.0 is the default speed. 0.25 is the minimum speed. 1.5 is the maximum speed.\n    This value can only be changed in between model turns, not while a response is\n    in progress.\n    \"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"Sampling temperature for the model, limited to [0.6, 1.2].\n\n    For audio models a temperature of 0.8 is highly recommended for best\n    performance.\n    \"\"\"\n\n    tool_choice: Optional[str] = None\n    \"\"\"How the model chooses tools.\n\n    Options are `auto`, `none`, `required`, or specify a function.\n    \"\"\"\n\n    tools: Optional[List[Tool]] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py",
        "start": 165,
        "end": 247,
        "startLoc": {
          "line": 165,
          "column": 5,
          "position": 1062
        },
        "endLoc": {
          "line": 247,
          "column": 8,
          "position": 1879
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 187,
        "end": 269,
        "startLoc": {
          "line": 187,
          "column": 5,
          "position": 1116
        },
        "endLoc": {
          "line": 269,
          "column": 8,
          "position": 1952
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "Configuration for turn detection, ether Server VAD or Semantic VAD.\n\n    This can be set to `null` to turn off, in which case the client must manually\n    trigger model response. Server VAD means that the model will detect the start\n    and end of speech based on audio volume and respond at the end of user speech.\n    Semantic VAD is more advanced and uses a turn detection model (in conjunction\n    with VAD) to semantically estimate whether the user has finished speaking, then\n    dynamically sets a timeout based on this probability. For example, if user audio\n    trails off with \"uhhm\", the model will score a low probability of turn end and\n    wait longer for the user to continue speaking. This can be useful for more\n    natural conversations, but may have a higher latency.\n    \"\"\"\n\n    voice: Union[str, Literal[\"alloy\", \"ash\", \"ballad\", \"coral\", \"echo\", \"sage\", \"shimmer\", \"verse\"], None] = None\n    \"\"\"The voice the model uses to respond.\n\n    Voice cannot be changed during the session once the model has responded with\n    audio at least once. Current voice options are `alloy`, `ash`, `ballad`,\n    `coral`, `echo`, `sage`, `shimmer`, and `verse`.\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session.py",
        "start": 260,
        "end": 279,
        "startLoc": {
          "line": 260,
          "column": 8,
          "position": 1992
        },
        "endLoc": {
          "line": 279,
          "column": 3,
          "position": 2367
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 163,
        "end": 306,
        "startLoc": {
          "line": 163,
          "column": 8,
          "position": 1026
        },
        "endLoc": {
          "line": 306,
          "column": 8,
          "position": 2440
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "]] = None\n    \"\"\"The content of the message, applicable for `message` items.\n\n    - Message items of role `system` support only `input_text` content\n    - Message items of role `user` support `input_text` and `input_audio` content\n    - Message items of role `assistant` support `text` content.\n    \"\"\"\n\n    name: Optional[str] = None\n    \"\"\"The name of the function being called (for `function_call` items).\"\"\"\n\n    object: Optional[Literal[\"realtime.item\"]] = None\n    \"\"\"Identifier for the API object being returned - always `realtime.item`.\"\"\"\n\n    output: Optional[str] = None\n    \"\"\"The output of the function call (for `function_call_output` items).\"\"\"\n\n    role: Optional[Literal[\"user\", \"assistant\", \"system\"]] = None\n    \"\"\"\n    The role of the message sender (`user`, `assistant`, `system`), only applicable\n    for `message` items.\n    \"\"\"\n\n    status: Optional[Literal[\"completed\", \"incomplete\", \"in_progress\"]] = None\n    \"\"\"The status of the item (`completed`, `incomplete`, `in_progress`).\n\n    These have no effect on the conversation, but are accepted for consistency with\n    the `conversation.item.created` event.\n    \"\"\"\n\n    type: Optional[Literal[\"message\", \"function_call\", \"function_call_output\"]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item.py",
        "start": 30,
        "end": 60,
        "startLoc": {
          "line": 30,
          "column": 24,
          "position": 123
        },
        "endLoc": {
          "line": 60,
          "column": 2,
          "position": 255
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_with_reference.py",
        "start": 53,
        "end": 83,
        "startLoc": {
          "line": 53,
          "column": 8,
          "position": 223
        },
        "endLoc": {
          "line": 83,
          "column": 2,
          "position": 355
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          method",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 117,
        "end": 124,
        "startLoc": {
          "line": 117,
          "column": 2,
          "position": 1008
        },
        "endLoc": {
          "line": 124,
          "column": 7,
          "position": 1134
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 86,
        "end": 96,
        "startLoc": {
          "line": 86,
          "column": 8,
          "position": 655
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 111,
      "fragment": "Creates a fine-tuning job which begins the process of creating a new model from\n        a given dataset.\n\n        Response includes details of the enqueued job including job status and the name\n        of the fine-tuned models once complete.\n\n        [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n\n        Args:\n          model: The name of the model to fine-tune. You can select one of the\n              [supported models](https://platform.openai.com/docs/guides/fine-tuning#which-models-can-be-fine-tuned).\n\n          training_file: The ID of an uploaded file that contains training data.\n\n              See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your dataset must be formatted as a JSONL file. Additionally, you must upload\n              your file with the purpose `fine-tune`.\n\n              The contents of the file should differ depending on if the model uses the\n              [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input),\n              [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n              format, or if the fine-tuning method uses the\n              [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input)\n              format.\n\n              See the\n              [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization)\n              for more details.\n\n          hyperparameters: The hyperparameters used for the fine-tuning job. This value is now deprecated\n              in favor of `method`, and should be passed in under the `method` parameter.\n\n          integrations: A list of integrations to enable for your fine-tuning job.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          method: The method used for fine-tuning.\n\n          seed: The seed controls the reproducibility of the job. Passing in the same seed and\n              job parameters should produce the same results, but may differ in rare cases. If\n              a seed is not specified, one will be generated for you.\n\n          suffix: A string of up to 64 characters that will be added to your fine-tuned model\n              name.\n\n              For example, a `suffix` of \"custom-model-name\" would produce a model name like\n              `ft:gpt-4o-mini:openai:custom-model-name:7p4lURel`.\n\n          validation_file: The ID of an uploaded file that contains validation data.\n\n              If you provide this file, the data is used to generate validation metrics\n              periodically during fine-tuning. These metrics can be viewed in the fine-tuning\n              results file. The same data should not be present in both train and validation\n              files.\n\n              Your dataset must be formatted as a JSONL file. You must upload your file with\n              the purpose `fine-tune`.\n\n              See the\n              [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization)\n              for more details.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await self._post(\n            \"/fine_tuning/jobs\",\n            body=await async_maybe_transform(\n                {\n                    \"model\": model,\n                    \"training_file\": training_file,\n                    \"hyperparameters\": hyperparameters,\n                    \"integrations\": integrations,\n                    \"metadata\": metadata,\n                    \"method\": method,\n                    \"seed\": seed,\n                    \"suffix\": suffix,\n                    \"validation_file\": validation_file,\n                },\n                job_create_params.JobCreateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=FineTuningJob,\n        )\n\n    async def retrieve(\n        self,\n        fine_tuning_job_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FineTuningJob:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 461,
        "end": 571,
        "startLoc": {
          "line": 461,
          "column": 9,
          "position": 3023
        },
        "endLoc": {
          "line": 571,
          "column": 12,
          "position": 4192
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 81,
        "end": 191,
        "startLoc": {
          "line": 81,
          "column": 9,
          "position": 438
        },
        "endLoc": {
          "line": 191,
          "column": 12,
          "position": 1607
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "Get info about a fine-tuning job.\n\n        [Learn more about fine-tuning](https://platform.openai.com/docs/guides/model-optimization)\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuning_job_id:\n            raise ValueError(f\"Expected a non-empty value for `fine_tuning_job_id` but received {fine_tuning_job_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 572,
        "end": 587,
        "startLoc": {
          "line": 572,
          "column": 9,
          "position": 4195
        },
        "endLoc": {
          "line": 587,
          "column": 6,
          "position": 4347
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 192,
        "end": 207,
        "startLoc": {
          "line": 192,
          "column": 9,
          "position": 1610
        },
        "endLoc": {
          "line": 207,
          "column": 5,
          "position": 1762
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._get(\n            f\"/fine_tuning/jobs/{fine_tuning_job_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=FineTuningJob,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        metadata: Optional[Dict[str, str]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 587,
        "end": 607,
        "startLoc": {
          "line": 587,
          "column": 2,
          "position": 4349
        },
        "endLoc": {
          "line": 607,
          "column": 15,
          "position": 4549
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 207,
        "end": 227,
        "startLoc": {
          "line": 207,
          "column": 2,
          "position": 1762
        },
        "endLoc": {
          "line": 227,
          "column": 15,
          "position": 1962
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def cancel(\n        self,\n        fine_tuning_job_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FineTuningJob:\n        \"\"\"\n        Immediately cancel a fine-tune job.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuning_job_id:\n            raise ValueError(f\"Expected a non-empty value for `fine_tuning_job_id` but received {fine_tuning_job_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 647,
        "end": 672,
        "startLoc": {
          "line": 647,
          "column": 2,
          "position": 4676
        },
        "endLoc": {
          "line": 672,
          "column": 6,
          "position": 4804
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 267,
        "end": 292,
        "startLoc": {
          "line": 267,
          "column": 5,
          "position": 2081
        },
        "endLoc": {
          "line": 292,
          "column": 5,
          "position": 2209
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._post(\n            f\"/fine_tuning/jobs/{fine_tuning_job_id}/cancel\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=FineTuningJob,\n        )\n\n    def list_events(\n        self,\n        fine_tuning_job_id: str,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 672,
        "end": 692,
        "startLoc": {
          "line": 672,
          "column": 2,
          "position": 4806
        },
        "endLoc": {
          "line": 692,
          "column": 15,
          "position": 4989
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 292,
        "end": 312,
        "startLoc": {
          "line": 292,
          "column": 2,
          "position": 2209
        },
        "endLoc": {
          "line": 312,
          "column": 15,
          "position": 2392
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def pause(\n        self,\n        fine_tuning_job_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FineTuningJob:\n        \"\"\"\n        Pause a fine-tune job.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuning_job_id:\n            raise ValueError(f\"Expected a non-empty value for `fine_tuning_job_id` but received {fine_tuning_job_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 730,
        "end": 755,
        "startLoc": {
          "line": 730,
          "column": 2,
          "position": 5127
        },
        "endLoc": {
          "line": 755,
          "column": 6,
          "position": 5255
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 350,
        "end": 375,
        "startLoc": {
          "line": 350,
          "column": 5,
          "position": 2522
        },
        "endLoc": {
          "line": 375,
          "column": 5,
          "position": 2650
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def resume(\n        self,\n        fine_tuning_job_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FineTuningJob:\n        \"\"\"\n        Resume a fine-tune job.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuning_job_id:\n            raise ValueError(f\"Expected a non-empty value for `fine_tuning_job_id` but received {fine_tuning_job_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 763,
        "end": 788,
        "startLoc": {
          "line": 763,
          "column": 2,
          "position": 5310
        },
        "endLoc": {
          "line": 788,
          "column": 6,
          "position": 5438
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 383,
        "end": 408,
        "startLoc": {
          "line": 383,
          "column": 5,
          "position": 2701
        },
        "endLoc": {
          "line": 408,
          "column": 5,
          "position": 2829
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "List checkpoints for a fine-tuning job.\n\n        Args:\n          after: Identifier for the last checkpoint ID from the previous pagination request.\n\n          limit: Number of checkpoints to retrieve.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuning_job_id:\n            raise ValueError(f\"Expected a non-empty value for `fine_tuning_job_id` but received {fine_tuning_job_id!r}\")\n        return self._get_api_list(\n            f\"/fine_tuning/jobs/{fine_tuning_job_id}/checkpoints\",\n            page=AsyncCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py",
        "start": 129,
        "end": 148,
        "startLoc": {
          "line": 129,
          "column": 9,
          "position": 692
        },
        "endLoc": {
          "line": 148,
          "column": 16,
          "position": 869
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py",
        "start": 58,
        "end": 77,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 312
        },
        "endLoc": {
          "line": 77,
          "column": 15,
          "position": 489
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "**NOTE:** Calling this endpoint requires an [admin API key](../admin-api-keys).\n\n        This enables organization owners to share fine-tuned models with other projects\n        in their organization.\n\n        Args:\n          project_ids: The project identifiers to grant access to.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuned_model_checkpoint:\n            raise ValueError(\n                f\"Expected a non-empty value for `fine_tuned_model_checkpoint` but received {fine_tuned_model_checkpoint!r}\"\n            )\n        return self._get_api_list(\n            f\"/fine_tuning/checkpoints/{fine_tuned_model_checkpoint}/permissions\",\n            page=AsyncPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 226,
        "end": 248,
        "startLoc": {
          "line": 226,
          "column": 9,
          "position": 1267
        },
        "endLoc": {
          "line": 248,
          "column": 10,
          "position": 1477
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 58,
        "end": 80,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 359
        },
        "endLoc": {
          "line": 80,
          "column": 9,
          "position": 569
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": "def retrieve(\n        self,\n        fine_tuned_model_checkpoint: str,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"ascending\", \"descending\"] | Omit = omit,\n        project_id: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> PermissionRetrieveResponse:\n        \"\"\"\n        **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\n        Organization owners can use this endpoint to view all permissions for a\n        fine-tuned model checkpoint.\n\n        Args:\n          after: Identifier for the last permission ID from the previous pagination request.\n\n          limit: Number of permissions to retrieve.\n\n          order: The order in which to retrieve permissions.\n\n          project_id: The ID of the project to get permissions for.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuned_model_checkpoint:\n            raise ValueError(\n                f\"Expected a non-empty value for `fine_tuned_model_checkpoint` but received {fine_tuned_model_checkpoint!r}\"\n            )\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 257,
        "end": 299,
        "startLoc": {
          "line": 257,
          "column": 2,
          "position": 1551
        },
        "endLoc": {
          "line": 299,
          "column": 6,
          "position": 1749
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 89,
        "end": 131,
        "startLoc": {
          "line": 89,
          "column": 5,
          "position": 641
        },
        "endLoc": {
          "line": 131,
          "column": 5,
          "position": 839
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "def delete(\n        self,\n        permission_id: str,\n        *,\n        fine_tuned_model_checkpoint: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> PermissionDeleteResponse:\n        \"\"\"\n        **NOTE:** This endpoint requires an [admin API key](../admin-api-keys).\n\n        Organization owners can use this endpoint to delete a permission for a\n        fine-tuned model checkpoint.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not fine_tuned_model_checkpoint:\n            raise ValueError(\n                f\"Expected a non-empty value for `fine_tuned_model_checkpoint` but received {fine_tuned_model_checkpoint!r}\"\n            )\n        if not permission_id:\n            raise ValueError(f\"Expected a non-empty value for `permission_id` but received {permission_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 319,
        "end": 352,
        "startLoc": {
          "line": 319,
          "column": 2,
          "position": 1861
        },
        "endLoc": {
          "line": 352,
          "column": 6,
          "position": 2017
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/permissions.py",
        "start": 151,
        "end": 184,
        "startLoc": {
          "line": 151,
          "column": 5,
          "position": 945
        },
        "endLoc": {
          "line": 184,
          "column": 5,
          "position": 1101
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "@cached_property\n    def with_raw_response(self) -> CheckpointsWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return CheckpointsWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> CheckpointsWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return CheckpointsWithStreamingResponse(self)\n\n\nclass AsyncCheckpoints(AsyncAPIResource):\n    @cached_property\n    def permissions(self) -> AsyncPermissions:\n        return AsyncPermissions(self._client)\n\n    @cached_property\n    def with_raw_response(self) -> AsyncCheckpointsWithRawResponse:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/checkpoints/checkpoints.py",
        "start": 24,
        "end": 51,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 125
        },
        "endLoc": {
          "line": 51,
          "column": 12,
          "position": 228
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py",
        "start": 25,
        "end": 57,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 206
        },
        "endLoc": {
          "line": 57,
          "column": 12,
          "position": 309
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "Run a grader.\n\n        Args:\n          grader: The grader used for the fine-tuning job.\n\n          model_sample: The model sample to be evaluated. This value will be used to populate the\n              `sample` namespace. See\n              [the guide](https://platform.openai.com/docs/guides/graders) for more details.\n              The `output_json` variable will be populated if the model sample is a valid JSON\n              string.\n\n          item: The dataset item provided to the grader. This will be used to populate the\n              `item` namespace. See\n              [the guide](https://platform.openai.com/docs/guides/graders) for more details.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 163,
        "end": 186,
        "startLoc": {
          "line": 163,
          "column": 9,
          "position": 996
        },
        "endLoc": {
          "line": 186,
          "column": 6,
          "position": 1290
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 55,
        "end": 78,
        "startLoc": {
          "line": 55,
          "column": 9,
          "position": 311
        },
        "endLoc": {
          "line": 78,
          "column": 5,
          "position": 605
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def validate(\n        self,\n        *,\n        grader: grader_validate_params.Grader,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> GraderValidateResponse:\n        \"\"\"\n        Validate a grader.\n\n        Args:\n          grader: The grader used for the fine-tuning job.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 202,
        "end": 227,
        "startLoc": {
          "line": 202,
          "column": 2,
          "position": 1390
        },
        "endLoc": {
          "line": 227,
          "column": 6,
          "position": 1503
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 94,
        "end": 119,
        "startLoc": {
          "line": 94,
          "column": 5,
          "position": 699
        },
        "endLoc": {
          "line": 119,
          "column": 5,
          "position": 812
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "import httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform, async_maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom .output_items",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 8,
        "end": 16,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 29
        },
        "endLoc": {
          "line": 16,
          "column": 13,
          "position": 135
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 5,
        "end": 13,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 13,
          "column": 2,
          "position": 118
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 81,
        "end": 90,
        "startLoc": {
          "line": 81,
          "column": 7,
          "position": 565
        },
        "endLoc": {
          "line": 90,
          "column": 5,
          "position": 698
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 96,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "Kicks off a new run for a given evaluation, specifying the data source, and what\n        model configuration to use to test. The datasource will be validated against the\n        schema specified in the config of the evaluation.\n\n        Args:\n          data_source: Details about the run's data source.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the run.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 326,
        "end": 352,
        "startLoc": {
          "line": 326,
          "column": 9,
          "position": 1987
        },
        "endLoc": {
          "line": 352,
          "column": 6,
          "position": 2333
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 76,
        "end": 102,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 467
        },
        "endLoc": {
          "line": 102,
          "column": 5,
          "position": 813
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def retrieve(\n        self,\n        run_id: str,\n        *,\n        eval_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> RunRetrieveResponse:\n        \"\"\"\n        Get an evaluation run by ID.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        if not run_id:\n            raise ValueError(f\"Expected a non-empty value for `run_id` but received {run_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 368,
        "end": 396,
        "startLoc": {
          "line": 368,
          "column": 2,
          "position": 2434
        },
        "endLoc": {
          "line": 396,
          "column": 6,
          "position": 2586
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 118,
        "end": 146,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 908
        },
        "endLoc": {
          "line": 146,
          "column": 5,
          "position": 1060
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "self._get(\n            f\"/evals/{eval_id}/runs/{run_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=RunRetrieveResponse,\n        )\n\n    def list(\n        self,\n        eval_id: str,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        status: Literal[\"queued\", \"in_progress\", \"completed\", \"canceled\", \"failed\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 396,
        "end": 418,
        "startLoc": {
          "line": 396,
          "column": 2,
          "position": 2588
        },
        "endLoc": {
          "line": 418,
          "column": 15,
          "position": 2822
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 146,
        "end": 168,
        "startLoc": {
          "line": 146,
          "column": 2,
          "position": 1060
        },
        "endLoc": {
          "line": 168,
          "column": 15,
          "position": 1294
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[RunListResponse],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"status\": status,\n                    },\n                    run_list_params.RunListParams,\n                ),\n            ),\n            model=RunListResponse,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 445,
        "end": 464,
        "startLoc": {
          "line": 445,
          "column": 16,
          "position": 2871
        },
        "endLoc": {
          "line": 464,
          "column": 6,
          "position": 2972
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 195,
        "end": 214,
        "startLoc": {
          "line": 195,
          "column": 15,
          "position": 1337
        },
        "endLoc": {
          "line": 214,
          "column": 4,
          "position": 1438
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def delete(\n        self,\n        run_id: str,\n        *,\n        eval_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> RunDeleteResponse:\n        \"\"\"\n        Delete an eval run.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        if not run_id:\n            raise ValueError(f\"Expected a non-empty value for `run_id` but received {run_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 464,
        "end": 492,
        "startLoc": {
          "line": 464,
          "column": 2,
          "position": 2974
        },
        "endLoc": {
          "line": 492,
          "column": 6,
          "position": 3126
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 214,
        "end": 242,
        "startLoc": {
          "line": 214,
          "column": 5,
          "position": 1438
        },
        "endLoc": {
          "line": 242,
          "column": 5,
          "position": 1590
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def cancel(\n        self,\n        run_id: str,\n        *,\n        eval_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> RunCancelResponse:\n        \"\"\"\n        Cancel an ongoing evaluation run.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        if not run_id:\n            raise ValueError(f\"Expected a non-empty value for `run_id` but received {run_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 500,
        "end": 528,
        "startLoc": {
          "line": 500,
          "column": 2,
          "position": 3181
        },
        "endLoc": {
          "line": 528,
          "column": 6,
          "position": 3333
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 250,
        "end": 278,
        "startLoc": {
          "line": 250,
          "column": 5,
          "position": 1641
        },
        "endLoc": {
          "line": 278,
          "column": 5,
          "position": 1793
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "import httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ....pagination import SyncCursorPage, AsyncCursorPage\nfrom ...._base_client import AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 7,
        "end": 16,
        "startLoc": {
          "line": 7,
          "column": 1,
          "position": 21
        },
        "endLoc": {
          "line": 16,
          "column": 15,
          "position": 146
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/checkpoints.py",
        "start": 5,
        "end": 14,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 14,
          "column": 2,
          "position": 137
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "Get an evaluation run output item by ID.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        if not run_id:\n            raise ValueError(f\"Expected a non-empty value for `run_id` but received {run_id!r}\")\n        if not output_item_id:\n            raise ValueError(f\"Expected a non-empty value for `output_item_id` but received {output_item_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 181,
        "end": 198,
        "startLoc": {
          "line": 181,
          "column": 9,
          "position": 996
        },
        "endLoc": {
          "line": 198,
          "column": 6,
          "position": 1152
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 58,
        "end": 75,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 332
        },
        "endLoc": {
          "line": 75,
          "column": 5,
          "position": 488
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "self._get(\n            f\"/evals/{eval_id}/runs/{run_id}/output_items/{output_item_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=OutputItemRetrieveResponse,\n        )\n\n    def list(\n        self,\n        run_id: str,\n        *,\n        eval_id: str,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        status: Literal[\"fail\", \"pass\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 198,
        "end": 221,
        "startLoc": {
          "line": 198,
          "column": 2,
          "position": 1154
        },
        "endLoc": {
          "line": 221,
          "column": 15,
          "position": 1386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 75,
        "end": 98,
        "startLoc": {
          "line": 75,
          "column": 2,
          "position": 488
        },
        "endLoc": {
          "line": 98,
          "column": 15,
          "position": 720
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[OutputItemListResponse],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"status\": status,\n                    },\n                    output_item_list_params.OutputItemListParams,\n                ),\n            ),\n            model=OutputItemListResponse,\n        )\n\n\nclass OutputItemsWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 250,
        "end": 270,
        "startLoc": {
          "line": 250,
          "column": 16,
          "position": 1452
        },
        "endLoc": {
          "line": 270,
          "column": 27,
          "position": 1555
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 127,
        "end": 147,
        "startLoc": {
          "line": 127,
          "column": 15,
          "position": 780
        },
        "endLoc": {
          "line": 147,
          "column": 17,
          "position": 883
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "| Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[FileListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 153,
        "end": 162,
        "startLoc": {
          "line": 153,
          "column": 2,
          "position": 1034
        },
        "endLoc": {
          "line": 162,
          "column": 17,
          "position": 1163
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 2,
          "position": 802
        },
        "endLoc": {
          "line": 117,
          "column": 8,
          "position": 931
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "Create a Container File\n\n        You can send either a multipart/form-data request with the raw file content, or\n        a JSON request with a file ID.\n\n        Args:\n          file: The File object (not file name) to be uploaded.\n\n          file_id: Name of the file to create.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not container_id:\n            raise ValueError(f\"Expected a non-empty value for `container_id` but received {container_id!r}\")\n        body = deepcopy_minimal(\n            {\n                \"file\": file,\n                \"file_id\": file_id,\n            }\n        )\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"file\"]])\n        # It should be noted that the actual Content-Type header that will be\n        # sent to the server will contain a `boundary` parameter, e.g.\n        # multipart/form-data; boundary=---abc--\n        extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 285,
        "end": 316,
        "startLoc": {
          "line": 285,
          "column": 9,
          "position": 1667
        },
        "endLoc": {
          "line": 316,
          "column": 6,
          "position": 1967
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 72,
        "end": 103,
        "startLoc": {
          "line": 72,
          "column": 9,
          "position": 434
        },
        "endLoc": {
          "line": 103,
          "column": 5,
          "position": 734
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def retrieve(\n        self,\n        file_id: str,\n        *,\n        container_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FileRetrieveResponse:\n        \"\"\"\n        Retrieve Container File\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not container_id:\n            raise ValueError(f\"Expected a non-empty value for `container_id` but received {container_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 326,
        "end": 354,
        "startLoc": {
          "line": 326,
          "column": 2,
          "position": 2044
        },
        "endLoc": {
          "line": 354,
          "column": 6,
          "position": 2196
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 113,
        "end": 141,
        "startLoc": {
          "line": 113,
          "column": 5,
          "position": 805
        },
        "endLoc": {
          "line": 141,
          "column": 5,
          "position": 957
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "self._get(\n            f\"/containers/{container_id}/files/{file_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=FileRetrieveResponse,\n        )\n\n    def list(\n        self,\n        container_id: str,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[FileListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 354,
        "end": 375,
        "startLoc": {
          "line": 354,
          "column": 2,
          "position": 2198
        },
        "endLoc": {
          "line": 375,
          "column": 17,
          "position": 2404
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 141,
        "end": 273,
        "startLoc": {
          "line": 141,
          "column": 2,
          "position": 957
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def delete(\n        self,\n        file_id: str,\n        *,\n        container_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        Delete Container File\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not container_id:\n            raise ValueError(f\"Expected a non-empty value for `container_id` but received {container_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 422,
        "end": 451,
        "startLoc": {
          "line": 422,
          "column": 2,
          "position": 2547
        },
        "endLoc": {
          "line": 451,
          "column": 6,
          "position": 2722
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 209,
        "end": 238,
        "startLoc": {
          "line": 209,
          "column": 5,
          "position": 1298
        },
        "endLoc": {
          "line": 238,
          "column": 5,
          "position": 1473
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "Retrieve Container File Content\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not container_id:\n            raise ValueError(f\"Expected a non-empty value for `container_id` but received {container_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"Accept\": \"application/binary\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/content.py",
        "start": 113,
        "end": 129,
        "startLoc": {
          "line": 113,
          "column": 9,
          "position": 571
        },
        "endLoc": {
          "line": 129,
          "column": 6,
          "position": 724
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/content.py",
        "start": 55,
        "end": 71,
        "startLoc": {
          "line": 55,
          "column": 9,
          "position": 250
        },
        "endLoc": {
          "line": 71,
          "column": 5,
          "position": 403
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom __future__ import annotations\n\nfrom typing_extensions import Literal\n\nimport httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ....pagination import SyncCursorPage, AsyncCursorPage\nfrom ...._base_client import AsyncPaginator, make_request_options\nfrom ....types.chat",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 5,
          "position": 159
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 1,
        "end": 17,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 17,
          "column": 6,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "Get the messages in a stored chat completion.\n\n        Only Chat Completions that have\n        been created with the `store` parameter set to `true` will be returned.\n\n        Args:\n          after: Identifier for the last message from the previous pagination request.\n\n          limit: Number of messages to retrieve.\n\n          order: Sort order for messages by timestamp. Use `asc` for ascending order or `desc`\n              for descending order. Defaults to `asc`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not completion_id:\n            raise ValueError(f\"Expected a non-empty value for `completion_id` but received {completion_id!r}\")\n        return self._get_api_list(\n            f\"/chat/completions/{completion_id}/messages\",\n            page=AsyncCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py",
        "start": 135,
        "end": 160,
        "startLoc": {
          "line": 135,
          "column": 12,
          "position": 780
        },
        "endLoc": {
          "line": 160,
          "column": 16,
          "position": 1042
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py",
        "start": 57,
        "end": 82,
        "startLoc": {
          "line": 57,
          "column": 12,
          "position": 310
        },
        "endLoc": {
          "line": 82,
          "column": 15,
          "position": 572
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "Optional\nfrom typing_extensions import Literal\n\nimport httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform, async_maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ....pagination",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 6,
        "end": 17,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 28
        },
        "endLoc": {
          "line": 17,
          "column": 11,
          "position": 148
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/runs.py",
        "start": 5,
        "end": 13,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 18
        },
        "endLoc": {
          "line": 13,
          "column": 13,
          "position": 121
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": "__all__ = [\"Messages\", \"AsyncMessages\"]\n\n\nclass Messages(SyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> MessagesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return MessagesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> MessagesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return MessagesWithStreamingResponse(self)\n\n    @typing_extensions.deprecated(\"The Assistants API is deprecated in favor of the Responses API\")\n    def create(\n        self,\n        thread_id: str,\n        *,\n        content: Union[str, Iterable[MessageContentPartParam]],\n        role: Literal[\"user\", \"assistant\"],\n        attachments: Optional[Iterable[message_create_params.Attachment]] | Omit = omit,\n        metadata: Optional[Metadata] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Message:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 28,
        "end": 67,
        "startLoc": {
          "line": 28,
          "column": 1,
          "position": 272
        },
        "endLoc": {
          "line": 67,
          "column": 12,
          "position": 397
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py",
        "start": 20,
        "end": 57,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 184
        },
        "endLoc": {
          "line": 57,
          "column": 12,
          "position": 309
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "The role of the entity that is creating the message. Allowed values include:\n\n              - `user`: Indicates the message is sent by an actual user and should be used in\n                most cases to represent user-generated messages.\n              - `assistant`: Indicates the message is generated by the assistant. Use this\n                value to insert messages from the assistant into the conversation.\n\n          attachments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 74,
        "end": 81,
        "startLoc": {
          "line": 74,
          "column": 15,
          "position": 435
        },
        "endLoc": {
          "line": 81,
          "column": 12,
          "position": 565
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 207,
        "end": 216,
        "startLoc": {
          "line": 207,
          "column": 8,
          "position": 2007
        },
        "endLoc": {
          "line": 216,
          "column": 8,
          "position": 2136
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 81,
        "end": 90,
        "startLoc": {
          "line": 81,
          "column": 3,
          "position": 600
        },
        "endLoc": {
          "line": 90,
          "column": 14,
          "position": 733
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 96,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": ",\n        )\n\n\nclass AsyncMessages(AsyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> AsyncMessagesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return AsyncMessagesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> AsyncMessagesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return AsyncMessagesWithStreamingResponse(self)\n\n    @typing_extensions.deprecated(\"The Assistants API is deprecated in favor of the Responses API\")\n    async def create(\n        self,\n        thread_id: str,\n        *,\n        content: Union[str, Iterable[MessageContentPartParam]],\n        role: Literal[\"user\", \"assistant\"],\n        attachments: Optional[Iterable[message_create_params.Attachment]] | Omit = omit,\n        metadata: Optional[Metadata] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Message:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 310,
        "end": 350,
        "startLoc": {
          "line": 310,
          "column": 15,
          "position": 2054
        },
        "endLoc": {
          "line": 350,
          "column": 12,
          "position": 2173
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/chat/completions/messages.py",
        "start": 97,
        "end": 135,
        "startLoc": {
          "line": 97,
          "column": 27,
          "position": 660
        },
        "endLoc": {
          "line": 135,
          "column": 12,
          "position": 779
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "Create a message.\n\n        Args:\n          content: The text contents of the message.\n\n          role:\n              The role of the entity that is creating the message. Allowed values include:\n\n              - `user`: Indicates the message is sent by an actual user and should be used in\n                most cases to represent user-generated messages.\n              - `assistant`: Indicates the message is generated by the assistant. Use this\n                value to insert messages from the assistant into the conversation.\n\n          attachments: A list of files attached to the message, and the tools they should be added to.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 351,
        "end": 384,
        "startLoc": {
          "line": 351,
          "column": 9,
          "position": 2176
        },
        "endLoc": {
          "line": 384,
          "column": 6,
          "position": 2631
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 68,
        "end": 101,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 400
        },
        "endLoc": {
          "line": 101,
          "column": 5,
          "position": 855
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def retrieve(\n        self,\n        message_id: str,\n        *,\n        thread_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Message:\n        \"\"\"\n        Retrieve a message.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        if not message_id:\n            raise ValueError(f\"Expected a non-empty value for `message_id` but received {message_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 402,
        "end": 431,
        "startLoc": {
          "line": 402,
          "column": 2,
          "position": 2747
        },
        "endLoc": {
          "line": 431,
          "column": 6,
          "position": 2922
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 119,
        "end": 148,
        "startLoc": {
          "line": 119,
          "column": 5,
          "position": 965
        },
        "endLoc": {
          "line": 148,
          "column": 5,
          "position": 1140
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "def update(\n        self,\n        message_id: str,\n        *,\n        thread_id: str,\n        metadata: Optional[Metadata] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Message:\n        \"\"\"\n        Modifies a message.\n\n        Args:\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        if not message_id:\n            raise ValueError(f\"Expected a non-empty value for `message_id` but received {message_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 440,
        "end": 477,
        "startLoc": {
          "line": 440,
          "column": 2,
          "position": 2985
        },
        "endLoc": {
          "line": 477,
          "column": 6,
          "position": 3178
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 157,
        "end": 194,
        "startLoc": {
          "line": 157,
          "column": 5,
          "position": 1199
        },
        "endLoc": {
          "line": 194,
          "column": 5,
          "position": 1392
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "({\"metadata\": metadata}, message_update_params.MessageUpdateParams),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=Message,\n        )\n\n    @typing_extensions.deprecated(\"The Assistants API is deprecated in favor of the Responses API\")\n    def list(\n        self,\n        thread_id: str,\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        run_id: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 479,
        "end": 502,
        "startLoc": {
          "line": 479,
          "column": 22,
          "position": 3196
        },
        "endLoc": {
          "line": 502,
          "column": 15,
          "position": 3443
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 196,
        "end": 219,
        "startLoc": {
          "line": 196,
          "column": 16,
          "position": 1406
        },
        "endLoc": {
          "line": 219,
          "column": 15,
          "position": 1653
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "[Message],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"run_id\": run_id,\n                    },\n                    message_list_params.MessageListParams,\n                ),\n            ),\n            model=Message,\n        )\n\n    @typing_extensions.deprecated(\"The Assistants API is deprecated in favor of the Responses API\")\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 538,
        "end": 559,
        "startLoc": {
          "line": 538,
          "column": 16,
          "position": 3515
        },
        "endLoc": {
          "line": 559,
          "column": 6,
          "position": 3631
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 255,
        "end": 276,
        "startLoc": {
          "line": 255,
          "column": 15,
          "position": 1719
        },
        "endLoc": {
          "line": 276,
          "column": 4,
          "position": 1835
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def delete(\n        self,\n        message_id: str,\n        *,\n        thread_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> MessageDeleted:\n        \"\"\"\n        Deletes a message.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        if not message_id:\n            raise ValueError(f\"Expected a non-empty value for `message_id` but received {message_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 559,
        "end": 588,
        "startLoc": {
          "line": 559,
          "column": 2,
          "position": 3633
        },
        "endLoc": {
          "line": 588,
          "column": 6,
          "position": 3808
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/messages.py",
        "start": 276,
        "end": 305,
        "startLoc": {
          "line": 276,
          "column": 5,
          "position": 1835
        },
        "endLoc": {
          "line": 305,
          "column": 5,
          "position": 2010
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "Configuration for input audio noise reduction. This can be set to `null` to turn\n              off. Noise reduction filters audio added to the input audio buffer before it is\n              sent to VAD and the model. Filtering the audio can improve VAD and turn\n              detection accuracy (reducing false positives) and model performance by improving\n              perception of the input audio.\n\n          input_audio_transcription",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 82,
        "end": 88,
        "startLoc": {
          "line": 82,
          "column": 2,
          "position": 591
        },
        "endLoc": {
          "line": 88,
          "column": 26,
          "position": 717
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 141,
        "end": 150,
        "startLoc": {
          "line": 141,
          "column": 8,
          "position": 802
        },
        "endLoc": {
          "line": 150,
          "column": 8,
          "position": 928
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n              set to `null` to turn off, in which case the client must manually trigger model\n              response. Server VAD means that the model will detect the start and end of\n              speech based on audio volume and respond at the end of user speech. Semantic VAD\n              is more advanced and uses a turn detection model (in conjunction with VAD) to\n              semantically estimate whether the user has finished speaking, then dynamically\n              sets a timeout based on this probability. For example, if user audio trails off\n              with \"uhhm\", the model will score a low probability of turn end and wait longer\n              for the user to continue speaking. This can be useful for more natural\n              conversations, but may have a higher latency.\n\n          extra_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 95,
        "end": 106,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 821
        },
        "endLoc": {
          "line": 106,
          "column": 14,
          "position": 1106
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/transcription_session_update_param.py",
        "start": 163,
        "end": 179,
        "startLoc": {
          "line": 163,
          "column": 8,
          "position": 1026
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1311
        }
      }
    },
    {
      "format": "python",
      "lines": 52,
      "fragment": "Create an ephemeral API token for use in client-side applications with the\n        Realtime API specifically for realtime transcriptions. Can be configured with\n        the same session parameters as the `transcription_session.update` client event.\n\n        It responds with a session object, plus a `client_secret` key which contains a\n        usable ephemeral API token that can be used to authenticate browser clients for\n        the Realtime API.\n\n        Args:\n          client_secret: Configuration options for the generated client secret.\n\n          include:\n              The set of items to include in the transcription. Current available items are:\n\n              - `item.input_audio_transcription.logprobs`\n\n          input_audio_format: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n              `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n              (mono), and little-endian byte order.\n\n          input_audio_noise_reduction: Configuration for input audio noise reduction. This can be set to `null` to turn\n              off. Noise reduction filters audio added to the input audio buffer before it is\n              sent to VAD and the model. Filtering the audio can improve VAD and turn\n              detection accuracy (reducing false positives) and model performance by improving\n              perception of the input audio.\n\n          input_audio_transcription: Configuration for input audio transcription. The client can optionally set the\n              language and prompt for transcription, these offer additional guidance to the\n              transcription service.\n\n          modalities: The set of modalities the model can respond with. To disable audio, set this to\n              [\"text\"].\n\n          turn_detection: Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n              set to `null` to turn off, in which case the client must manually trigger model\n              response. Server VAD means that the model will detect the start and end of\n              speech based on audio volume and respond at the end of user speech. Semantic VAD\n              is more advanced and uses a turn detection model (in conjunction with VAD) to\n              semantically estimate whether the user has finished speaking, then dynamically\n              sets a timeout based on this probability. For example, if user audio trails off\n              with \"uhhm\", the model will score a low probability of turn end and wait longer\n              for the user to continue speaking. This can be useful for more natural\n              conversations, but may have a higher latency.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 175,
        "end": 226,
        "startLoc": {
          "line": 175,
          "column": 9,
          "position": 1322
        },
        "endLoc": {
          "line": 226,
          "column": 3,
          "position": 2203
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 62,
        "end": 139,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 301
        },
        "endLoc": {
          "line": 139,
          "column": 12,
          "position": 1182
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "from typing_extensions import Literal\n\nimport httpx\n\nfrom .... import _legacy_response\nfrom ...._types import NOT_GIVEN, Body, Query, Headers, NotGiven\nfrom ...._utils import maybe_transform, async_maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ...._base_client import make_request_options\nfrom ....types.beta.realtime import session_create_params",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 6,
        "end": 17,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 17,
          "column": 22,
          "position": 158
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 6,
        "end": 17,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 20
        },
        "endLoc": {
          "line": 17,
          "column": 36,
          "position": 152
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "input_audio_format: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n              `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n              (mono), and little-endian byte order.\n\n          input_audio_noise_reduction: Configuration for input audio noise reduction. This can be set to `null` to turn\n              off. Noise reduction filters audio added to the input audio buffer before it is\n              sent to VAD and the model. Filtering the audio can improve VAD and turn\n              detection accuracy (reducing false positives) and model performance by improving\n              perception of the input audio.\n\n          input_audio_transcription: Configuration for input audio transcription,",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 92,
        "end": 102,
        "startLoc": {
          "line": 92,
          "column": 11,
          "position": 459
        },
        "endLoc": {
          "line": 102,
          "column": 2,
          "position": 683
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 78,
        "end": 88,
        "startLoc": {
          "line": 78,
          "column": 11,
          "position": 505
        },
        "endLoc": {
          "line": 88,
          "column": 2,
          "position": 729
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "Configuration for input audio transcription, defaults to off and can be set to\n              `null` to turn off once on. Input audio transcription is not native to the\n              model, since the model consumes audio directly. Transcription runs\n              asynchronously through\n              [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n              and should be treated as guidance of input audio content rather than precisely\n              what the model heard. The client can optionally set the language and prompt for\n              transcription, these offer additional guidance to the transcription service.\n\n          instructions",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 102,
        "end": 111,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 674
        },
        "endLoc": {
          "line": 111,
          "column": 13,
          "position": 869
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event_param.py",
        "start": 187,
        "end": 198,
        "startLoc": {
          "line": 187,
          "column": 5,
          "position": 1116
        },
        "endLoc": {
          "line": 198,
          "column": 8,
          "position": 1310
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ".\n\n          turn_detection: Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n              set to `null` to turn off, in which case the client must manually trigger model\n              response. Server VAD means that the model will detect the start and end of\n              speech based on audio volume and respond at the end of user speech. Semantic VAD\n              is more advanced and uses a turn detection model (in conjunction with VAD) to\n              semantically estimate whether the user has finished speaking, then dynamically\n              sets a timeout based on this probability. For example, if user audio trails off\n              with \"uhhm\", the model will score a low probability of turn end and wait longer\n              for the user to continue speaking. This can be useful for more natural\n              conversations, but may have a higher latency.\n\n          voice",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 151,
        "end": 164,
        "startLoc": {
          "line": 151,
          "column": 9,
          "position": 1615
        },
        "endLoc": {
          "line": 164,
          "column": 6,
          "position": 1907
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 93,
        "end": 179,
        "startLoc": {
          "line": 93,
          "column": 2,
          "position": 814
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1311
        }
      }
    },
    {
      "format": "python",
      "lines": 95,
      "fragment": "Create an ephemeral API token for use in client-side applications with the\n        Realtime API. Can be configured with the same session parameters as the\n        `session.update` client event.\n\n        It responds with a session object, plus a `client_secret` key which contains a\n        usable ephemeral API token that can be used to authenticate browser clients for\n        the Realtime API.\n\n        Args:\n          client_secret: Configuration options for the generated client secret.\n\n          input_audio_format: The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\n              `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\n              (mono), and little-endian byte order.\n\n          input_audio_noise_reduction: Configuration for input audio noise reduction. This can be set to `null` to turn\n              off. Noise reduction filters audio added to the input audio buffer before it is\n              sent to VAD and the model. Filtering the audio can improve VAD and turn\n              detection accuracy (reducing false positives) and model performance by improving\n              perception of the input audio.\n\n          input_audio_transcription: Configuration for input audio transcription, defaults to off and can be set to\n              `null` to turn off once on. Input audio transcription is not native to the\n              model, since the model consumes audio directly. Transcription runs\n              asynchronously through\n              [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\n              and should be treated as guidance of input audio content rather than precisely\n              what the model heard. The client can optionally set the language and prompt for\n              transcription, these offer additional guidance to the transcription service.\n\n          instructions: The default system instructions (i.e. system message) prepended to model calls.\n              This field allows the client to guide the model on desired responses. The model\n              can be instructed on response content and format, (e.g. \"be extremely succinct\",\n              \"act friendly\", \"here are examples of good responses\") and on audio behavior\n              (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n              instructions are not guaranteed to be followed by the model, but they provide\n              guidance to the model on the desired behavior.\n\n              Note that the server sets default instructions which will be used if this field\n              is not set and are visible in the `session.created` event at the start of the\n              session.\n\n          max_response_output_tokens: Maximum number of output tokens for a single assistant response, inclusive of\n              tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n              `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n\n          modalities: The set of modalities the model can respond with. To disable audio, set this to\n              [\"text\"].\n\n          model: The Realtime model used for this session.\n\n          output_audio_format: The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\n              For `pcm16`, output audio is sampled at a rate of 24kHz.\n\n          speed: The speed of the model's spoken response. 1.0 is the default speed. 0.25 is the\n              minimum speed. 1.5 is the maximum speed. This value can only be changed in\n              between model turns, not while a response is in progress.\n\n          temperature: Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a\n              temperature of 0.8 is highly recommended for best performance.\n\n          tool_choice: How the model chooses tools. Options are `auto`, `none`, `required`, or specify\n              a function.\n\n          tools: Tools (functions) available to the model.\n\n          tracing: Configuration options for tracing. Set to null to disable tracing. Once tracing\n              is enabled for a session, the configuration cannot be modified.\n\n              `auto` will create a trace for the session with default values for the workflow\n              name, group id, and metadata.\n\n          turn_detection: Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\n              set to `null` to turn off, in which case the client must manually trigger model\n              response. Server VAD means that the model will detect the start and end of\n              speech based on audio volume and respond at the end of user speech. Semantic VAD\n              is more advanced and uses a turn detection model (in conjunction with VAD) to\n              semantically estimate whether the user has finished speaking, then dynamically\n              sets a timeout based on this probability. For example, if user audio trails off\n              with \"uhhm\", the model will score a low probability of turn end and wait longer\n              for the user to continue speaking. This can be useful for more natural\n              conversations, but may have a higher latency.\n\n          voice: The voice the model uses to respond. Voice cannot be changed during the session\n              once the model has responded with audio at least once. Current voice options are\n              `alloy`, `ash`, `ballad`, `coral`, `echo`, `sage`, `shimmer`, and `verse`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 265,
        "end": 359,
        "startLoc": {
          "line": 265,
          "column": 9,
          "position": 2214
        },
        "endLoc": {
          "line": 359,
          "column": 3,
          "position": 3981
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 81,
        "end": 210,
        "startLoc": {
          "line": 81,
          "column": 9,
          "position": 307
        },
        "endLoc": {
          "line": 210,
          "column": 12,
          "position": 2074
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ".\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await self._post(\n            \"/realtime/sessions\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 350,
        "end": 362,
        "startLoc": {
          "line": 350,
          "column": 8,
          "position": 3901
        },
        "endLoc": {
          "line": 362,
          "column": 21,
          "position": 4018
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 217,
        "end": 229,
        "startLoc": {
          "line": 217,
          "column": 8,
          "position": 2123
        },
        "endLoc": {
          "line": 229,
          "column": 35,
          "position": 2240
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "from typing_extensions import Literal\n\nimport httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ....pagination import SyncConversationCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 6,
        "end": 16,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 23
        },
        "endLoc": {
          "line": 16,
          "column": 27,
          "position": 142
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/runs/output_items.py",
        "start": 5,
        "end": 13,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 13,
          "column": 15,
          "position": 122
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ": str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncConversationCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 182,
        "end": 191,
        "startLoc": {
          "line": 182,
          "column": 7,
          "position": 1122
        },
        "endLoc": {
          "line": 191,
          "column": 27,
          "position": 1253
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 153,
        "end": 117,
        "startLoc": {
          "line": 153,
          "column": 6,
          "position": 1030
        },
        "endLoc": {
          "line": 117,
          "column": 15,
          "position": 929
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "Retrieve a ChatKit thread\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"chatkit_beta=v1\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 271,
        "end": 285,
        "startLoc": {
          "line": 271,
          "column": 9,
          "position": 1543
        },
        "endLoc": {
          "line": 285,
          "column": 6,
          "position": 1679
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 58,
        "end": 72,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 364
        },
        "endLoc": {
          "line": 72,
          "column": 5,
          "position": 500
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "self._get(\n            f\"/chatkit/threads/{thread_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=ChatKitThread,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        user: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 285,
        "end": 307,
        "startLoc": {
          "line": 285,
          "column": 2,
          "position": 1681
        },
        "endLoc": {
          "line": 307,
          "column": 15,
          "position": 1908
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 72,
        "end": 94,
        "startLoc": {
          "line": 72,
          "column": 2,
          "position": 500
        },
        "endLoc": {
          "line": 94,
          "column": 27,
          "position": 727
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[ChatKitThread],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"user\": user,\n                    },\n                    thread_list_params.ThreadListParams,\n                ),\n            ),\n            model=ChatKitThread,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 336,
        "end": 356,
        "startLoc": {
          "line": 336,
          "column": 28,
          "position": 1962
        },
        "endLoc": {
          "line": 356,
          "column": 6,
          "position": 2070
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 123,
        "end": 143,
        "startLoc": {
          "line": 123,
          "column": 27,
          "position": 775
        },
        "endLoc": {
          "line": 143,
          "column": 4,
          "position": 883
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def delete(\n        self,\n        thread_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ThreadDeleteResponse:\n        \"\"\"\n        Delete a ChatKit thread\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not thread_id:\n            raise ValueError(f\"Expected a non-empty value for `thread_id` but received {thread_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"chatkit_beta=v1\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 356,
        "end": 382,
        "startLoc": {
          "line": 356,
          "column": 2,
          "position": 2072
        },
        "endLoc": {
          "line": 382,
          "column": 6,
          "position": 2223
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 143,
        "end": 169,
        "startLoc": {
          "line": 143,
          "column": 5,
          "position": 883
        },
        "endLoc": {
          "line": 169,
          "column": 5,
          "position": 1034
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "self._delete(\n            f\"/chatkit/threads/{thread_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=ThreadDeleteResponse,\n        )\n\n    def list_items(\n        self,\n        thread_id: str,\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[Data",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 382,
        "end": 404,
        "startLoc": {
          "line": 382,
          "column": 2,
          "position": 2225
        },
        "endLoc": {
          "line": 404,
          "column": 5,
          "position": 2446
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 169,
        "end": 273,
        "startLoc": {
          "line": 169,
          "column": 2,
          "position": 1034
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[Data],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    thread_list_items_params.ThreadListItemsParams,\n                ),\n            ),\n            model=cast(Any, Data),  # Union types cannot be passed in as arguments in the type system\n        )\n\n\nclass ThreadsWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 432,
        "end": 452,
        "startLoc": {
          "line": 432,
          "column": 28,
          "position": 2516
        },
        "endLoc": {
          "line": 452,
          "column": 23,
          "position": 2627
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 219,
        "end": 239,
        "startLoc": {
          "line": 219,
          "column": 27,
          "position": 1319
        },
        "endLoc": {
          "line": 239,
          "column": 13,
          "position": 1430
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom __future__ import annotations\n\nimport httpx\n\nfrom .... import _legacy_response\nfrom ...._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ...._utils import maybe_transform, async_maybe_transform\nfrom ...._compat import cached_property\nfrom ...._resource import SyncAPIResource, AsyncAPIResource\nfrom ...._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ...._base_client import make_request_options\nfrom ....types.beta",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 5,
          "position": 135
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/alpha/graders.py",
        "start": 1,
        "end": 14,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 14,
          "column": 12,
          "position": 135
        }
      }
    },
    {
      "format": "python",
      "lines": 39,
      "fragment": "__all__ = [\"Sessions\", \"AsyncSessions\"]\n\n\nclass Sessions(SyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> SessionsWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return SessionsWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> SessionsWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return SessionsWithStreamingResponse(self)\n\n    def create(\n        self,\n        *,\n        user: str,\n        workflow: ChatSessionWorkflowParam,\n        chatkit_configuration: ChatSessionChatKitConfigurationParam | Omit = omit,\n        expires_after: ChatSessionExpiresAfterParam | Omit = omit,\n        rate_limits: ChatSessionRateLimitsParam | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ChatSession:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 27,
        "end": 65,
        "startLoc": {
          "line": 27,
          "column": 1,
          "position": 256
        },
        "endLoc": {
          "line": 65,
          "column": 12,
          "position": 381
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/sessions.py",
        "start": 20,
        "end": 80,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 179
        },
        "endLoc": {
          "line": 80,
          "column": 12,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "Create a ChatKit session\n\n        Args:\n          user: A free-form string that identifies your end user; ensures this Session can\n              access other objects that have the same `user` scope.\n\n          workflow: Workflow that powers the session.\n\n          chatkit_configuration: Optional overrides for ChatKit runtime configuration features\n\n          expires_after: Optional override for session expiration timing in seconds from creation.\n              Defaults to 10 minutes.\n\n          rate_limits: Optional override for per-minute request limits. When omitted, defaults to 10.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"OpenAI-Beta\": \"chatkit_beta=v1\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 179,
        "end": 203,
        "startLoc": {
          "line": 179,
          "column": 9,
          "position": 1083
        },
        "endLoc": {
          "line": 203,
          "column": 6,
          "position": 1357
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 66,
        "end": 90,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 384
        },
        "endLoc": {
          "line": 90,
          "column": 5,
          "position": 658
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def cancel(\n        self,\n        session_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ChatSession:\n        \"\"\"\n        Cancel a ChatKit session\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not session_id:\n            raise ValueError(f\"Expected a non-empty value for `session_id` but received {session_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"chatkit_beta=v1\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 221,
        "end": 247,
        "startLoc": {
          "line": 221,
          "column": 2,
          "position": 1471
        },
        "endLoc": {
          "line": 247,
          "column": 6,
          "position": 1622
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/sessions.py",
        "start": 108,
        "end": 134,
        "startLoc": {
          "line": 108,
          "column": 5,
          "position": 766
        },
        "endLoc": {
          "line": 134,
          "column": 5,
          "position": 917
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "[RawResponseStreamEvent],\n        text_format: type[TextFormatT] | Omit,\n        input_tools: Iterable[ToolParam] | Omit,\n        starting_after: int | None,\n    ) -> None:\n        self._raw_stream = raw_stream\n        self._response = raw_stream.response\n        self._iterator = self.__stream__()\n        self._state = ResponseStreamState(text_format=text_format, input_tools=input_tools)\n        self._starting_after = starting_after\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_responses.py",
        "start": 136,
        "end": 147,
        "startLoc": {
          "line": 136,
          "column": 12,
          "position": 1089
        },
        "endLoc": {
          "line": 147,
          "column": 6,
          "position": 1205
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_responses.py",
        "start": 34,
        "end": 45,
        "startLoc": {
          "line": 34,
          "column": 7,
          "position": 283
        },
        "endLoc": {
          "line": 45,
          "column": 4,
          "position": 399
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "[ChatCompletionChunk],\n        response_format: type[ResponseFormatT] | ResponseFormatParam | Omit,\n        input_tools: Iterable[ChatCompletionToolUnionParam] | Omit,\n    ) -> None:\n        self._raw_stream = raw_stream\n        self._response = raw_stream.response\n        self._iterator = self.__stream__()\n        self._state = ChatCompletionStreamState(response_format=response_format, input_tools=input_tools)\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_completions.py",
        "start": 182,
        "end": 191,
        "startLoc": {
          "line": 182,
          "column": 12,
          "position": 1174
        },
        "endLoc": {
          "line": 191,
          "column": 6,
          "position": 1274
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_completions.py",
        "start": 59,
        "end": 68,
        "startLoc": {
          "line": 59,
          "column": 7,
          "position": 404
        },
        "endLoc": {
          "line": 68,
          "column": 4,
          "position": 504
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "async def __aenter__(self) -> Self:\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        await self.close()\n\n    async def close(self) -> None:\n        \"\"\"\n        Close the response and release the connection.\n\n        Automatically called if the response body is read to completion.\n        \"\"\"\n        await self._response.aclose()\n\n    async def get_final_completion",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/chat/_completions.py",
        "start": 198,
        "end": 217,
        "startLoc": {
          "line": 198,
          "column": 5,
          "position": 1349
        },
        "endLoc": {
          "line": 217,
          "column": 21,
          "position": 1473
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_responses.py",
        "start": 161,
        "end": 180,
        "startLoc": {
          "line": 161,
          "column": 5,
          "position": 1370
        },
        "endLoc": {
          "line": 180,
          "column": 19,
          "position": 1494
        }
      }
    },
    {
      "format": "python",
      "lines": 56,
      "fragment": "]] = None\n    \"\"\"Controls the stopping condition for beam-based methods.\"\"\"\n    epsilon_cutoff: Optional[float] = None\n    \"\"\"If set to float strictly between 0 and 1, only tokens with a conditional probability\n    greater than epsilon_cutoff will be sampled. In the paper, suggested values range from\n    3e-4 to 9e-4, depending on the size of the model. See [Truncation Sampling as Language\n    Model Desmoothing](https://hf.co/papers/2210.15191) for more details.\n    \"\"\"\n    eta_cutoff: Optional[float] = None\n    \"\"\"Eta sampling is a hybrid of locally typical sampling and epsilon sampling. If set to\n    float strictly between 0 and 1, a token is only considered if it is greater than either\n    eta_cutoff or sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits))). The latter\n    term is intuitively the expected next token probability, scaled by sqrt(eta_cutoff). In\n    the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.\n    See [Truncation Sampling as Language Model Desmoothing](https://hf.co/papers/2210.15191)\n    for more details.\n    \"\"\"\n    max_length: Optional[int] = None\n    \"\"\"The maximum length (in tokens) of the generated text, including the input.\"\"\"\n    max_new_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens to generate. Takes precedence over max_length.\"\"\"\n    min_length: Optional[int] = None\n    \"\"\"The minimum length (in tokens) of the generated text, including the input.\"\"\"\n    min_new_tokens: Optional[int] = None\n    \"\"\"The minimum number of tokens to generate. Takes precedence over min_length.\"\"\"\n    num_beam_groups: Optional[int] = None\n    \"\"\"Number of groups to divide num_beams into in order to ensure diversity among different\n    groups of beams. See [this paper](https://hf.co/papers/1610.02424) for more details.\n    \"\"\"\n    num_beams: Optional[int] = None\n    \"\"\"Number of beams to use for beam search.\"\"\"\n    penalty_alpha: Optional[float] = None\n    \"\"\"The value balances the model confidence and the degeneration penalty in contrastive\n    search decoding.\n    \"\"\"\n    temperature: Optional[float] = None\n    \"\"\"The value used to modulate the next token probabilities.\"\"\"\n    top_k: Optional[int] = None\n    \"\"\"The number of highest probability vocabulary tokens to keep for top-k-filtering.\"\"\"\n    top_p: Optional[float] = None\n    \"\"\"If set to float < 1, only the smallest set of most probable tokens with probabilities\n    that add up to top_p or higher are kept for generation.\n    \"\"\"\n    typical_p: Optional[float] = None\n    \"\"\"Local typicality measures how similar the conditional probability of predicting a target\n    token next is to the expected conditional probability of predicting a random token next,\n    given the partial text already generated. If set to float < 1, the smallest set of the\n    most locally typical tokens with probabilities that add up to typical_p or higher are\n    kept for generation. See [this paper](https://hf.co/papers/2202.00666) for more details.\n    \"\"\"\n    use_cache: Optional[bool] = None\n    \"\"\"Whether the model should use the past last key/values attentions to speed up decoding\"\"\"\n\n\n@dataclass_with_extra\nclass TextToAudioParameters",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_audio.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 31,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 22,
          "position": 335
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_speech.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 32,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 23,
          "position": 335
        }
      }
    },
    {
      "format": "python",
      "lines": 56,
      "fragment": "]] = None\n    \"\"\"Controls the stopping condition for beam-based methods.\"\"\"\n    epsilon_cutoff: Optional[float] = None\n    \"\"\"If set to float strictly between 0 and 1, only tokens with a conditional probability\n    greater than epsilon_cutoff will be sampled. In the paper, suggested values range from\n    3e-4 to 9e-4, depending on the size of the model. See [Truncation Sampling as Language\n    Model Desmoothing](https://hf.co/papers/2210.15191) for more details.\n    \"\"\"\n    eta_cutoff: Optional[float] = None\n    \"\"\"Eta sampling is a hybrid of locally typical sampling and epsilon sampling. If set to\n    float strictly between 0 and 1, a token is only considered if it is greater than either\n    eta_cutoff or sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits))). The latter\n    term is intuitively the expected next token probability, scaled by sqrt(eta_cutoff). In\n    the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.\n    See [Truncation Sampling as Language Model Desmoothing](https://hf.co/papers/2210.15191)\n    for more details.\n    \"\"\"\n    max_length: Optional[int] = None\n    \"\"\"The maximum length (in tokens) of the generated text, including the input.\"\"\"\n    max_new_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens to generate. Takes precedence over max_length.\"\"\"\n    min_length: Optional[int] = None\n    \"\"\"The minimum length (in tokens) of the generated text, including the input.\"\"\"\n    min_new_tokens: Optional[int] = None\n    \"\"\"The minimum number of tokens to generate. Takes precedence over min_length.\"\"\"\n    num_beam_groups: Optional[int] = None\n    \"\"\"Number of groups to divide num_beams into in order to ensure diversity among different\n    groups of beams. See [this paper](https://hf.co/papers/1610.02424) for more details.\n    \"\"\"\n    num_beams: Optional[int] = None\n    \"\"\"Number of beams to use for beam search.\"\"\"\n    penalty_alpha: Optional[float] = None\n    \"\"\"The value balances the model confidence and the degeneration penalty in contrastive\n    search decoding.\n    \"\"\"\n    temperature: Optional[float] = None\n    \"\"\"The value used to modulate the next token probabilities.\"\"\"\n    top_k: Optional[int] = None\n    \"\"\"The number of highest probability vocabulary tokens to keep for top-k-filtering.\"\"\"\n    top_p: Optional[float] = None\n    \"\"\"If set to float < 1, only the smallest set of most probable tokens with probabilities\n    that add up to top_p or higher are kept for generation.\n    \"\"\"\n    typical_p: Optional[float] = None\n    \"\"\"Local typicality measures how similar the conditional probability of predicting a target\n    token next is to the expected conditional probability of predicting a random token next,\n    given the partial text already generated. If set to float < 1, the smallest set of the\n    most locally typical tokens with probabilities that add up to typical_p or higher are\n    kept for generation. See [this paper](https://hf.co/papers/2202.00666) for more details.\n    \"\"\"\n    use_cache: Optional[bool] = None\n    \"\"\"Whether the model should use the past last key/values attentions to speed up decoding\"\"\"\n\n\n@dataclass_with_extra\nclass ImageToTextParameters",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/image_to_text.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 31,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 22,
          "position": 335
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_speech.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 32,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 23,
          "position": 335
        }
      }
    },
    {
      "format": "python",
      "lines": 56,
      "fragment": "]] = None\n    \"\"\"Controls the stopping condition for beam-based methods.\"\"\"\n    epsilon_cutoff: Optional[float] = None\n    \"\"\"If set to float strictly between 0 and 1, only tokens with a conditional probability\n    greater than epsilon_cutoff will be sampled. In the paper, suggested values range from\n    3e-4 to 9e-4, depending on the size of the model. See [Truncation Sampling as Language\n    Model Desmoothing](https://hf.co/papers/2210.15191) for more details.\n    \"\"\"\n    eta_cutoff: Optional[float] = None\n    \"\"\"Eta sampling is a hybrid of locally typical sampling and epsilon sampling. If set to\n    float strictly between 0 and 1, a token is only considered if it is greater than either\n    eta_cutoff or sqrt(eta_cutoff) * exp(-entropy(softmax(next_token_logits))). The latter\n    term is intuitively the expected next token probability, scaled by sqrt(eta_cutoff). In\n    the paper, suggested values range from 3e-4 to 2e-3, depending on the size of the model.\n    See [Truncation Sampling as Language Model Desmoothing](https://hf.co/papers/2210.15191)\n    for more details.\n    \"\"\"\n    max_length: Optional[int] = None\n    \"\"\"The maximum length (in tokens) of the generated text, including the input.\"\"\"\n    max_new_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens to generate. Takes precedence over max_length.\"\"\"\n    min_length: Optional[int] = None\n    \"\"\"The minimum length (in tokens) of the generated text, including the input.\"\"\"\n    min_new_tokens: Optional[int] = None\n    \"\"\"The minimum number of tokens to generate. Takes precedence over min_length.\"\"\"\n    num_beam_groups: Optional[int] = None\n    \"\"\"Number of groups to divide num_beams into in order to ensure diversity among different\n    groups of beams. See [this paper](https://hf.co/papers/1610.02424) for more details.\n    \"\"\"\n    num_beams: Optional[int] = None\n    \"\"\"Number of beams to use for beam search.\"\"\"\n    penalty_alpha: Optional[float] = None\n    \"\"\"The value balances the model confidence and the degeneration penalty in contrastive\n    search decoding.\n    \"\"\"\n    temperature: Optional[float] = None\n    \"\"\"The value used to modulate the next token probabilities.\"\"\"\n    top_k: Optional[int] = None\n    \"\"\"The number of highest probability vocabulary tokens to keep for top-k-filtering.\"\"\"\n    top_p: Optional[float] = None\n    \"\"\"If set to float < 1, only the smallest set of most probable tokens with probabilities\n    that add up to top_p or higher are kept for generation.\n    \"\"\"\n    typical_p: Optional[float] = None\n    \"\"\"Local typicality measures how similar the conditional probability of predicting a target\n    token next is to the expected conditional probability of predicting a random token next,\n    given the partial text already generated. If set to float < 1, the smallest set of the\n    most locally typical tokens with probabilities that add up to typical_p or higher are\n    kept for generation. See [this paper](https://hf.co/papers/2202.00666) for more details.\n    \"\"\"\n    use_cache: Optional[bool] = None\n    \"\"\"Whether the model should use the past last key/values attentions to speed up decoding\"\"\"\n\n\n@dataclass_with_extra\nclass AutomaticSpeechRecognitionParameters",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/automatic_speech_recognition.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 46,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 37,
          "position": 335
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_generated/types/text_to_speech.py",
        "start": 20,
        "end": 75,
        "startLoc": {
          "line": 20,
          "column": 32,
          "position": 95
        },
        "endLoc": {
          "line": 75,
          "column": 23,
          "position": 335
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "def __del__(self) -> None:\n        self.close()\n\n    # this is compatible with _base_connection\n    def is_closed(self) -> bool:\n        return self._is_closed\n\n    # for compatibility with RawIOBase\n    @property\n    def closed(self) -> bool:\n        return self.is_closed()\n\n    def close(self) -> None:\n        if self.is_closed():\n            return\n        self.read_len = 0\n        self.read_pos = 0\n        self.js_read_stream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/fetch.py",
        "start": 344,
        "end": 361,
        "startLoc": {
          "line": 344,
          "column": 5,
          "position": 2236
        },
        "endLoc": {
          "line": 361,
          "column": 15,
          "position": 2361
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/fetch.py",
        "start": 124,
        "end": 141,
        "startLoc": {
          "line": 124,
          "column": 5,
          "position": 559
        },
        "endLoc": {
          "line": 141,
          "column": 11,
          "position": 684
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "CoreFoundation.CFRelease.argtypes = [CFTypeRef]\n    CoreFoundation.CFRelease.restype = None\n\n    CoreFoundation.CFGetTypeID.argtypes = [CFTypeRef]\n    CoreFoundation.CFGetTypeID.restype = CFTypeID\n\n    CoreFoundation.CFStringCreateWithCString.argtypes = [\n        CFAllocatorRef,\n        c_char_p,\n        CFStringEncoding,\n    ]\n    CoreFoundation.CFStringCreateWithCString.restype = CFStringRef\n\n    CoreFoundation.CFStringGetCStringPtr.argtypes = [CFStringRef, CFStringEncoding]\n    CoreFoundation.CFStringGetCStringPtr.restype = c_char_p\n\n    CoreFoundation.CFStringGetCString.argtypes = [\n        CFStringRef,\n        c_char_p,\n        CFIndex,\n        CFStringEncoding,\n    ]\n    CoreFoundation.CFStringGetCString.restype = c_bool\n\n    CoreFoundation.CFDataCreate.argtypes = [CFAllocatorRef, c_char_p, CFIndex]\n    CoreFoundation.CFDataCreate.restype = CFDataRef\n\n    CoreFoundation.CFDataGetLength.argtypes = [CFDataRef]\n    CoreFoundation.CFDataGetLength.restype = CFIndex\n\n    CoreFoundation.CFDataGetBytePtr.argtypes = [CFDataRef]\n    CoreFoundation.CFDataGetBytePtr.restype = c_void_p\n\n    CoreFoundation.CFArrayCreate",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/truststore/_macos.py",
        "start": 133,
        "end": 166,
        "startLoc": {
          "line": 133,
          "column": 5,
          "position": 867
        },
        "endLoc": {
          "line": 166,
          "column": 14,
          "position": 1108
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py",
        "start": 331,
        "end": 364,
        "startLoc": {
          "line": 331,
          "column": 5,
          "position": 2157
        },
        "endLoc": {
          "line": 364,
          "column": 19,
          "position": 2398
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "CoreFoundation.CFArrayCreate.argtypes = [\n        CFAllocatorRef,\n        POINTER(CFTypeRef),\n        CFIndex,\n        CFArrayCallBacks,\n    ]\n    CoreFoundation.CFArrayCreate.restype = CFArrayRef\n\n    CoreFoundation.CFArrayCreateMutable.argtypes = [\n        CFAllocatorRef,\n        CFIndex,\n        CFArrayCallBacks,\n    ]\n    CoreFoundation.CFArrayCreateMutable.restype = CFMutableArrayRef\n\n    CoreFoundation.CFArrayAppendValue.argtypes = [CFMutableArrayRef, c_void_p]\n    CoreFoundation.CFArrayAppendValue.restype = None\n\n    CoreFoundation.CFArrayGetCount.argtypes = [CFArrayRef]\n    CoreFoundation.CFArrayGetCount.restype = CFIndex\n\n    CoreFoundation.CFArrayGetValueAtIndex.argtypes = [CFArrayRef, CFIndex]\n    CoreFoundation.CFArrayGetValueAtIndex.restype = c_void_p\n\n    CoreFoundation.CFErrorGetCode",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/truststore/_macos.py",
        "start": 166,
        "end": 190,
        "startLoc": {
          "line": 166,
          "column": 5,
          "position": 1106
        },
        "endLoc": {
          "line": 190,
          "column": 15,
          "position": 1272
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/_securetransport/bindings.py",
        "start": 377,
        "end": 401,
        "startLoc": {
          "line": 377,
          "column": 5,
          "position": 2480
        },
        "endLoc": {
          "line": 401,
          "column": 20,
          "position": 2646
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n        width: Optional[int] = 100,\n        code_width: Optional[int] = 88,\n        extra_lines: int = 3,\n        theme: Optional[str] = None,\n        word_wrap: bool = False,\n        show_locals: bool = False,\n        locals_max_length: int = LOCALS_MAX_LENGTH,\n        locals_max_string: int = LOCALS_MAX_STRING,\n        locals_hide_dunder: bool = True,\n        locals_hide_sunder: bool",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/traceback.py",
        "start": 289,
        "end": 299,
        "startLoc": {
          "line": 289,
          "column": 2,
          "position": 1782
        },
        "endLoc": {
          "line": 299,
          "column": 5,
          "position": 1896
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/traceback.py",
        "start": 85,
        "end": 95,
        "startLoc": {
          "line": 85,
          "column": 5,
          "position": 559
        },
        "endLoc": {
          "line": 95,
          "column": 9,
          "position": 673
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ",\n        *,\n        width: Optional[int] = 100,\n        code_width: Optional[int] = 88,\n        extra_lines: int = 3,\n        theme: Optional[str] = None,\n        word_wrap: bool = False,\n        show_locals: bool = False,\n        locals_max_length: int = LOCALS_MAX_LENGTH,\n        locals_max_string: int = LOCALS_MAX_STRING,\n        locals_hide_dunder: bool = True,\n        locals_hide_sunder: bool = False,\n        indent_guides: bool = True,\n        suppress: Iterable[Union[str, ModuleType]] = (),\n        max_frames: int = 100,\n    ) -",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/traceback.py",
        "start": 344,
        "end": 359,
        "startLoc": {
          "line": 344,
          "column": 2,
          "position": 2348
        },
        "endLoc": {
          "line": 359,
          "column": 2,
          "position": 2519
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/traceback.py",
        "start": 288,
        "end": 303,
        "startLoc": {
          "line": 288,
          "column": 5,
          "position": 1778
        },
        "endLoc": {
          "line": 303,
          "column": 2,
          "position": 1948
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "if self._null:\n            return NULL_STYLE\n        style: Style = self.__new__(Style)\n        style._ansi = self._ansi\n        style._style_definition = self._style_definition\n        style._color = self._color\n        style._bgcolor = self._bgcolor\n        style._attributes = self._attributes\n        style._set_attributes = self._set_attributes\n        style._link = None",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/style.py",
        "start": 651,
        "end": 660,
        "startLoc": {
          "line": 651,
          "column": 9,
          "position": 5298
        },
        "endLoc": {
          "line": 660,
          "column": 5,
          "position": 5398
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/style.py",
        "start": 628,
        "end": 637,
        "startLoc": {
          "line": 628,
          "column": 9,
          "position": 5111
        },
        "endLoc": {
          "line": 637,
          "column": 5,
          "position": 5211
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "@classmethod\n    @overload\n    def ask(\n        cls,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        case_sensitive: bool = True,\n        show_default: bool = True,\n        show_choices: bool = True,\n        stream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/prompt.py",
        "start": 95,
        "end": 107,
        "startLoc": {
          "line": 95,
          "column": 5,
          "position": 602
        },
        "endLoc": {
          "line": 107,
          "column": 7,
          "position": 709
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/prompt.py",
        "start": 78,
        "end": 90,
        "startLoc": {
          "line": 78,
          "column": 5,
          "position": 453
        },
        "endLoc": {
          "line": 90,
          "column": 8,
          "position": 560
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def ask(\n        cls,\n        prompt: TextType = \"\",\n        *,\n        console: Optional[Console] = None,\n        password: bool = False,\n        choices: Optional[List[str]] = None,\n        case_sensitive: bool = True,\n        show_default: bool = True,\n        show_choices: bool = True,\n        default: Any",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/prompt.py",
        "start": 112,
        "end": 122,
        "startLoc": {
          "line": 112,
          "column": 5,
          "position": 742
        },
        "endLoc": {
          "line": 122,
          "column": 4,
          "position": 845
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/prompt.py",
        "start": 80,
        "end": 90,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 460
        },
        "endLoc": {
          "line": 90,
          "column": 12,
          "position": 563
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ",\n        indent: Union[None, int, str] = 2,\n        highlight: bool = True,\n        skip_keys: bool = False,\n        ensure_ascii: bool = False,\n        check_circular: bool = True,\n        allow_nan: bool = True,\n        default: Optional[Callable[[Any], Any]] = None,\n        sort_keys: bool = False,\n    ) -> \"JSON\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/json.py",
        "start": 56,
        "end": 65,
        "startLoc": {
          "line": 56,
          "column": 4,
          "position": 343
        },
        "endLoc": {
          "line": 65,
          "column": 7,
          "position": 459
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/json.py",
        "start": 27,
        "end": 36,
        "startLoc": {
          "line": 27,
          "column": 4,
          "position": 84
        },
        "endLoc": {
          "line": 36,
          "column": 5,
          "position": 200
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "[\n        (0, 0, 0),\n        (128, 0, 0),\n        (0, 128, 0),\n        (128, 128, 0),\n        (0, 0, 128),\n        (128, 0, 128),\n        (0, 128, 128),\n        (192, 192, 192),\n        (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_palettes.py",
        "start": 51,
        "end": 60,
        "startLoc": {
          "line": 51,
          "column": 5,
          "position": 442
        },
        "endLoc": {
          "line": 60,
          "column": 2,
          "position": 541
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/terminal_theme.py",
        "start": 35,
        "end": 44,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 202
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 301
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "(128, 128, 128),\n        (255, 0, 0),\n        (0, 255, 0),\n        (255, 255, 0),\n        (0, 0, 255),\n        (255, 0, 255),\n        (0, 255, 255),\n        (255, 255, 255),\n        (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_palettes.py",
        "start": 60,
        "end": 68,
        "startLoc": {
          "line": 60,
          "column": 9,
          "position": 541
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 637
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/terminal_theme.py",
        "start": 46,
        "end": 54,
        "startLoc": {
          "line": 46,
          "column": 9,
          "position": 308
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 404
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", 1.0)\n                bgcolor = Color.from_rgb(r1 * 255, g1 * 255, b1 * 255)\n                color = Color.from_rgb(r2 * 255, g2 * 255, b2 * 255)\n                yield Segment(\"▄\", Style(color=color, bgcolor=bgcolor))\n            yield Segment.line()\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/__main__.py",
        "start": 27,
        "end": 33,
        "startLoc": {
          "line": 27,
          "column": 3,
          "position": 336
        },
        "endLoc": {
          "line": 33,
          "column": 4,
          "position": 433
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/palette.py",
        "start": 93,
        "end": 99,
        "startLoc": {
          "line": 93,
          "column": 2,
          "position": 868
        },
        "endLoc": {
          "line": 99,
          "column": 8,
          "position": 965
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ",\n    indent: Union[None, int, str] = 2,\n    highlight: bool = True,\n    skip_keys: bool = False,\n    ensure_ascii: bool = False,\n    check_circular: bool = True,\n    allow_nan: bool = True,\n    default: Optional[Callable[[Any], Any]] = None,\n    sort_keys: bool = False,\n) -> None:\n    \"\"\"Pretty prints JSON. Output will be valid JSON.\n\n    Args:\n        json (str): A string containing JSON.\n        data (Any): If json is not supplied, then encode this data.\n        indent (int, optional): Number of spaces to indent. Defaults to 2.\n        highlight (bool, optional): Enable highlighting of output: Defaults to True.\n        skip_keys (bool, optional): Skip keys not of a basic type. Defaults to False.\n        ensure_ascii (bool, optional): Escape all non-ascii characters. Defaults to False.\n        check_circular (bool, optional): Check for circular references. Defaults to True.\n        allow_nan (bool, optional): Allow NaN and Infinity values. Defaults to True.\n        default (Callable, optional): A callable that converts values that can not be encoded\n            in to something that can be JSON encoded. Defaults to None.\n        sort_keys (bool, optional): Sort dictionary keys. Defaults to False.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/__init__.py",
        "start": 80,
        "end": 104,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 438
        },
        "endLoc": {
          "line": 104,
          "column": 8,
          "position": 557
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/json.py",
        "start": 27,
        "end": 37,
        "startLoc": {
          "line": 27,
          "column": 4,
          "position": 84
        },
        "endLoc": {
          "line": 37,
          "column": 5,
          "position": 204
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n        if L == 1:\n            self._buffer.write(b\"\\xd4\")\n        elif L == 2:\n            self._buffer.write(b\"\\xd5\")\n        elif L == 4:\n            self._buffer.write(b\"\\xd6\")\n        elif L == 8:\n            self._buffer.write(b\"\\xd7\")\n        elif L == 16:\n            self._buffer.write(b\"\\xd8\")\n        elif L <= 0xFF:\n            self._buffer.write(b",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/msgpack/fallback.py",
        "start": 845,
        "end": 857,
        "startLoc": {
          "line": 845,
          "column": 17,
          "position": 6539
        },
        "endLoc": {
          "line": 857,
          "column": 2,
          "position": 6663
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/msgpack/fallback.py",
        "start": 756,
        "end": 768,
        "startLoc": {
          "line": 756,
          "column": 5,
          "position": 5671
        },
        "endLoc": {
          "line": 768,
          "column": 7,
          "position": 5795
        }
      }
    },
    {
      "format": "markdown",
      "lines": 31,
      "fragment": "BSD 3-Clause License\n\nCopyright (c) 2013-2024, Kim Davies and contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/LICENSE.md",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 467
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip-25.3.dist-info/licenses/src/pip/_vendor/idna/LICENSE.md",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 467
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n    parser.add_argument(\n        \"-f\",\n        \"--pyproject-file\",\n        default=\"pyproject.toml\",\n        help=\"The pyproject.toml file. Defaults to trying in the current directory.\",\n    )\n    args = parser.parse_args(argv if argv is not None else sys.argv[1:])\n\n    with open(args.pyproject_file, \"rb\") as fp:\n        pyproject = tomllib.load(fp)\n    dependency_groups_raw = pyproject.get(\"dependency-groups\", {})\n\n    errors: list[str] = []\n    try",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_lint_dependency_groups.py",
        "start": 23,
        "end": 37,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 131
        },
        "endLoc": {
          "line": 37,
          "column": 4,
          "position": 257
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/dependency_groups/_pip_wrapper.py",
        "start": 26,
        "end": 40,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 190
        },
        "endLoc": {
          "line": 40,
          "column": 9,
          "position": 316
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "try:\n        process_namespace = ctypes.CDLL(None)\n    except OSError:\n        return None\n\n    try:\n        gnu_get_libc_version = process_namespace.gnu_get_libc_version\n    except AttributeError:\n        # Symbol doesn't exist -> therefore, we are not linked to\n        # glibc.\n        return None\n\n    # Call gnu_get_libc_version, which returns a string like \"2.5\"\n    gnu_get_libc_version.restype = ctypes.c_char_p\n    version_str: str = gnu_get_libc_version()\n    # py2 / py3 compatibility:\n    if not isinstance(version_str, str):\n        version_str = version_str.decode(\"ascii\")\n\n    return version_str\n\n\n# platform.libc_ver regularly returns completely nonsensical glibc",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/utils/glibc.py",
        "start": 53,
        "end": 75,
        "startLoc": {
          "line": 53,
          "column": 5,
          "position": 259
        },
        "endLoc": {
          "line": 75,
          "column": 67,
          "position": 380
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_manylinux.py",
        "start": 126,
        "end": 148,
        "startLoc": {
          "line": 126,
          "column": 5,
          "position": 765
        },
        "endLoc": {
          "line": 148,
          "column": 4,
          "position": 886
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n    def cert_verify(\n        self,\n        conn: ConnectionPool,\n        url: str,\n        verify: bool | str,\n        cert: str | tuple[str, str] | None,\n    ) -> None:\n        super().cert_verify(conn=conn, url=url, verify=False, cert=cert)\n\n\nclass PipSession",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/network/session.py",
        "start": 314,
        "end": 325,
        "startLoc": {
          "line": 314,
          "column": 20,
          "position": 2385
        },
        "endLoc": {
          "line": 325,
          "column": 11,
          "position": 2484
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/network/session.py",
        "start": 303,
        "end": 314,
        "startLoc": {
          "line": 303,
          "column": 12,
          "position": 2283
        },
        "endLoc": {
          "line": 314,
          "column": 28,
          "position": 2382
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "())\n\n        index_opts = cmdoptions.make_option_group(\n            cmdoptions.index_group,\n            self.parser,\n        )\n\n        self.parser.insert_option_group(0, index_opts)\n        self.parser.insert_option_group(0, self.cmd_opts)\n\n    @with_cleanup\n    def run(self, options: Values, args: list[str]) -> int:\n        logger",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/lock.py",
        "start": 78,
        "end": 90,
        "startLoc": {
          "line": 78,
          "column": 13,
          "position": 507
        },
        "endLoc": {
          "line": 90,
          "column": 7,
          "position": 600
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/wheel.py",
        "start": 89,
        "end": 101,
        "startLoc": {
          "line": 89,
          "column": 15,
          "position": 574
        },
        "endLoc": {
          "line": 101,
          "column": 11,
          "position": 667
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.cmd_opts.add_option(cmdoptions.requirements())\n        self.cmd_opts.add_option(cmdoptions.constraints())\n        self.cmd_opts.add_option(cmdoptions.build_constraints())\n        self.cmd_opts.add_option(cmdoptions.no_deps())\n        self.cmd_opts.add_option(cmdoptions.pre())\n\n        self.cmd_opts.add_option(cmdoptions.editable())\n        self.cmd_opts.add_option(\n            \"--dry-run\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/install.py",
        "start": 87,
        "end": 95,
        "startLoc": {
          "line": 87,
          "column": 9,
          "position": 503
        },
        "endLoc": {
          "line": 95,
          "column": 12,
          "position": 596
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/lock.py",
        "start": 57,
        "end": 65,
        "startLoc": {
          "line": 57,
          "column": 9,
          "position": 269
        },
        "endLoc": {
          "line": 65,
          "column": 11,
          "position": 361
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n        self.cmd_opts.add_option(cmdoptions.no_binary())\n        self.cmd_opts.add_option(cmdoptions.only_binary())\n        self.cmd_opts.add_option(cmdoptions.prefer_binary())\n        self.cmd_opts.add_option(cmdoptions.require_hashes())\n        self.cmd_opts.add_option(cmdoptions.progress_bar())\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/install.py",
        "start": 246,
        "end": 252,
        "startLoc": {
          "line": 246,
          "column": 9,
          "position": 1348
        },
        "endLoc": {
          "line": 252,
          "column": 5,
          "position": 1421
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/lock.py",
        "start": 72,
        "end": 80,
        "startLoc": {
          "line": 72,
          "column": 2,
          "position": 438
        },
        "endLoc": {
          "line": 80,
          "column": 11,
          "position": 513
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "reqs = self.get_requirements(args, options, finder, session)\n\n            wheel_cache = WheelCache(options.cache_dir)\n\n            # Only when installing is it permitted to use PEP 660.\n            # In other circumstances (pip wheel, pip download) we generate\n            # regular (i.e. non editable) metadata and wheels.\n            for req in reqs:\n                req.permit_editable_wheels = True\n\n            preparer = self.make_requirement_preparer(\n                temp_build_dir=directory,\n                options=options,\n                build_tracker=build_tracker,\n                session=session,\n                finder=finder,\n                use_user_site=options",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/install.py",
        "start": 354,
        "end": 370,
        "startLoc": {
          "line": 354,
          "column": 13,
          "position": 2095
        },
        "endLoc": {
          "line": 370,
          "column": 8,
          "position": 2201
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/lock.py",
        "start": 115,
        "end": 131,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 737
        },
        "endLoc": {
          "line": 131,
          "column": 6,
          "position": 843
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n\n        session = self.get_default_session(options)\n\n        target_python = make_target_python(options)\n        finder = self._build_package_finder(\n            options=options,\n            session=session,\n            target_python=target_python,\n            ignore_requires_python=options.ignore_requires_python,\n        )\n\n        build_tracker = self.enter_context(get_build_tracker())\n\n        directory = TempDirectory(\n            delete=not options.no_clean,\n            kind=\"download\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/download.py",
        "start": 85,
        "end": 101,
        "startLoc": {
          "line": 85,
          "column": 13,
          "position": 598
        },
        "endLoc": {
          "line": 101,
          "column": 11,
          "position": 700
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/install.py",
        "start": 334,
        "end": 349,
        "startLoc": {
          "line": 334,
          "column": 16,
          "position": 1976
        },
        "endLoc": {
          "line": 349,
          "column": 10,
          "position": 2077
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ",\n        }\n\n    def run(self, options: Values, args: list[str]) -> int:\n        handler_map = self.handler_map()\n\n        # Determine action\n        if not args or args[0] not in handler_map:\n            logger.error(\n                \"Need an action (%s) to perform.\",\n                \", \".join(sorted(handler_map)),\n            )\n            return ERROR\n\n        action = args[0]\n\n        # Determine which configuration files are to be loaded",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/configuration.py",
        "start": 105,
        "end": 121,
        "startLoc": {
          "line": 105,
          "column": 19,
          "position": 476
        },
        "endLoc": {
          "line": 121,
          "column": 55,
          "position": 590
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/index.py",
        "start": 58,
        "end": 74,
        "startLoc": {
          "line": 58,
          "column": 31,
          "position": 469
        },
        "endLoc": {
          "line": 74,
          "column": 59,
          "position": 583
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "# Determine action\n        if not args or args[0] not in handler_map:\n            logger.error(\n                \"Need an action (%s) to perform.\",\n                \", \".join(sorted(handler_map)),\n            )\n            return ERROR\n\n        action = args[0]\n\n        # Error handling happens here, not in the action-handlers.\n        try:\n            handler_map[action](options, args[1:])\n        except PipError as e:\n            logger.error(e.args[0])\n            return ERROR\n\n        return SUCCESS\n\n    def get_cache_dir",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/cache.py",
        "start": 68,
        "end": 87,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 385
        },
        "endLoc": {
          "line": 87,
          "column": 14,
          "position": 511
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_internal/commands/index.py",
        "start": 64,
        "end": 83,
        "startLoc": {
          "line": 64,
          "column": 9,
          "position": 517
        },
        "endLoc": {
          "line": 83,
          "column": 22,
          "position": 643
        }
      }
    },
    {
      "format": "python",
      "lines": 68,
      "fragment": "from typing_extensions import Literal, TypeAlias\n\n__all__ = [\"ChatModel\"]\n\nChatModel: TypeAlias = Literal[\n    \"gpt-5\",\n    \"gpt-5-mini\",\n    \"gpt-5-nano\",\n    \"gpt-5-2025-08-07\",\n    \"gpt-5-mini-2025-08-07\",\n    \"gpt-5-nano-2025-08-07\",\n    \"gpt-5-chat-latest\",\n    \"gpt-4.1\",\n    \"gpt-4.1-mini\",\n    \"gpt-4.1-nano\",\n    \"gpt-4.1-2025-04-14\",\n    \"gpt-4.1-mini-2025-04-14\",\n    \"gpt-4.1-nano-2025-04-14\",\n    \"o4-mini\",\n    \"o4-mini-2025-04-16\",\n    \"o3\",\n    \"o3-2025-04-16\",\n    \"o3-mini\",\n    \"o3-mini-2025-01-31\",\n    \"o1\",\n    \"o1-2024-12-17\",\n    \"o1-preview\",\n    \"o1-preview-2024-09-12\",\n    \"o1-mini\",\n    \"o1-mini-2024-09-12\",\n    \"gpt-4o\",\n    \"gpt-4o-2024-11-20\",\n    \"gpt-4o-2024-08-06\",\n    \"gpt-4o-2024-05-13\",\n    \"gpt-4o-audio-preview\",\n    \"gpt-4o-audio-preview-2024-10-01\",\n    \"gpt-4o-audio-preview-2024-12-17\",\n    \"gpt-4o-audio-preview-2025-06-03\",\n    \"gpt-4o-mini-audio-preview\",\n    \"gpt-4o-mini-audio-preview-2024-12-17\",\n    \"gpt-4o-search-preview\",\n    \"gpt-4o-mini-search-preview\",\n    \"gpt-4o-search-preview-2025-03-11\",\n    \"gpt-4o-mini-search-preview-2025-03-11\",\n    \"chatgpt-4o-latest\",\n    \"codex-mini-latest\",\n    \"gpt-4o-mini\",\n    \"gpt-4o-mini-2024-07-18\",\n    \"gpt-4-turbo\",\n    \"gpt-4-turbo-2024-04-09\",\n    \"gpt-4-0125-preview\",\n    \"gpt-4-turbo-preview\",\n    \"gpt-4-1106-preview\",\n    \"gpt-4-vision-preview\",\n    \"gpt-4\",\n    \"gpt-4-0314\",\n    \"gpt-4-0613\",\n    \"gpt-4-32k\",\n    \"gpt-4-32k-0314\",\n    \"gpt-4-32k-0613\",\n    \"gpt-3.5-turbo\",\n    \"gpt-3.5-turbo-16k\",\n    \"gpt-3.5-turbo-0301\",\n    \"gpt-3.5-turbo-0613\",\n    \"gpt-3.5-turbo-1106\",\n    \"gpt-3.5-turbo-0125\",\n    \"gpt-3.5-turbo-16k-0613\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/shared/chat_model.py",
        "start": 3,
        "end": 70,
        "startLoc": {
          "line": 3,
          "column": 1,
          "position": 3
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 282
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/shared_params/chat_model.py",
        "start": 5,
        "end": 72,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 291
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "from .compound_filter import CompoundFilter as CompoundFilter\nfrom .responses_model import ResponsesModel as ResponsesModel\nfrom .reasoning_effort import ReasoningEffort as ReasoningEffort\nfrom .comparison_filter import ComparisonFilter as ComparisonFilter\nfrom .function_definition import FunctionDefinition as FunctionDefinition\nfrom .function_parameters import FunctionParameters as FunctionParameters\nfrom .response_format_text import ResponseFormatText as ResponseFormatText\nfrom .custom_tool_input_format import CustomToolInputFormat as CustomToolInputFormat\nfrom .response_format_json_object import ResponseFormatJSONObject as ResponseFormatJSONObject\nfrom .response_format_json_schema import ResponseFormatJSONSchema as ResponseFormatJSONSchema",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/shared/__init__.py",
        "start": 8,
        "end": 17,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 68
        },
        "endLoc": {
          "line": 17,
          "column": 25,
          "position": 196
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/shared_params/__init__.py",
        "start": 6,
        "end": 15,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 42
        },
        "endLoc": {
          "line": 15,
          "column": 25,
          "position": 170
        }
      }
    },
    {
      "format": "python",
      "lines": 56,
      "fragment": ",\n]\n\n\nclass ImageGenerationCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the image generation call.\"\"\"\n\n    result: Optional[str] = None\n    \"\"\"The generated image encoded in base64.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"generating\", \"failed\"]\n    \"\"\"The status of the image generation call.\"\"\"\n\n    type: Literal[\"image_generation_call\"]\n    \"\"\"The type of the image generation call. Always `image_generation_call`.\"\"\"\n\n\nclass LocalShellCallAction(BaseModel):\n    command: List[str]\n    \"\"\"The command to run.\"\"\"\n\n    env: Dict[str, str]\n    \"\"\"Environment variables to set for the command.\"\"\"\n\n    type: Literal[\"exec\"]\n    \"\"\"The type of the local shell action. Always `exec`.\"\"\"\n\n    timeout_ms: Optional[int] = None\n    \"\"\"Optional timeout in milliseconds for the command.\"\"\"\n\n    user: Optional[str] = None\n    \"\"\"Optional user to run the command as.\"\"\"\n\n    working_directory: Optional[str] = None\n    \"\"\"Optional working directory to run the command in.\"\"\"\n\n\nclass LocalShellCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the local shell call.\"\"\"\n\n    action: LocalShellCallAction\n    \"\"\"Execute a shell command on the server.\"\"\"\n\n    call_id: str\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"incomplete\"]\n    \"\"\"The status of the local shell call.\"\"\"\n\n    type: Literal[\"local_shell_call\"]\n    \"\"\"The type of the local shell call. Always `local_shell_call`.\"\"\"\n\n\nclass LocalShellCallOutput",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_item.py",
        "start": 28,
        "end": 83,
        "startLoc": {
          "line": 28,
          "column": 10,
          "position": 183
        },
        "endLoc": {
          "line": 83,
          "column": 21,
          "position": 435
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_output_item.py",
        "start": 25,
        "end": 80,
        "startLoc": {
          "line": 25,
          "column": 21,
          "position": 166
        },
        "endLoc": {
          "line": 80,
          "column": 8,
          "position": 418
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "class McpListToolsTool(BaseModel):\n    input_schema: object\n    \"\"\"The JSON schema describing the tool's input.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool.\"\"\"\n\n    annotations: Optional[object] = None\n    \"\"\"Additional annotations about the tool.\"\"\"\n\n    description: Optional[str] = None\n    \"\"\"The description of the tool.\"\"\"\n\n\nclass McpListTools(BaseModel):\n    id: str\n    \"\"\"The unique ID of the list.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server.\"\"\"\n\n    tools: List[McpListToolsTool]\n    \"\"\"The tools available on the server.\"\"\"\n\n    type: Literal[\"mcp_list_tools\"]\n    \"\"\"The type of the item. Always `mcp_list_tools`.\"\"\"\n\n    error: Optional[str] = None\n    \"\"\"Error message if the server could not list tools.\"\"\"\n\n\nclass McpApprovalRequest(BaseModel):\n    id: str\n    \"\"\"The unique ID of the approval request.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of arguments for the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool to run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server making the request.\"\"\"\n\n    type: Literal[\"mcp_approval_request\"]\n    \"\"\"The type of the item. Always `mcp_approval_request`.\"\"\"\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_item.py",
        "start": 97,
        "end": 145,
        "startLoc": {
          "line": 97,
          "column": 1,
          "position": 501
        },
        "endLoc": {
          "line": 145,
          "column": 6,
          "position": 698
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_output_item.py",
        "start": 116,
        "end": 164,
        "startLoc": {
          "line": 116,
          "column": 1,
          "position": 561
        },
        "endLoc": {
          "line": 164,
          "column": 19,
          "position": 758
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "class McpCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the tool call.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of the arguments passed to the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool that was run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server running the tool.\"\"\"\n\n    type: Literal[\"mcp_call\"]\n    \"\"\"The type of the item. Always `mcp_call`.\"\"\"\n\n    approval_request_id: Optional[str] = None\n    \"\"\"\n    Unique identifier for the MCP tool call approval request. Include this value in\n    a subsequent `mcp_approval_response` input to approve or reject the\n    corresponding tool call.\n    \"\"\"\n\n    error: Optional[str] = None\n    \"\"\"The error from the tool call, if any.\"\"\"\n\n    output: Optional[str] = None\n    \"\"\"The output from the tool call.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\", \"calling\", \"failed\"]] = None\n    \"\"\"The status of the tool call.\n\n    One of `in_progress`, `completed`, `incomplete`, `calling`, or `failed`.\n    \"\"\"\n\n\nResponseItem",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_item.py",
        "start": 162,
        "end": 198,
        "startLoc": {
          "line": 162,
          "column": 1,
          "position": 767
        },
        "endLoc": {
          "line": 198,
          "column": 13,
          "position": 912
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_output_item.py",
        "start": 80,
        "end": 116,
        "startLoc": {
          "line": 80,
          "column": 1,
          "position": 416
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 561
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ", Union, Iterable, Optional\nfrom typing_extensions import Literal, Required, TypeAlias, TypedDict\n\nfrom ..._types import SequenceNotStr\nfrom .easy_input_message_param import EasyInputMessageParam\nfrom .response_output_message_param import ResponseOutputMessageParam\nfrom .response_reasoning_item_param import ResponseReasoningItemParam\nfrom .response_custom_tool_call_param import ResponseCustomToolCallParam\nfrom .response_computer_tool_call_param import ResponseComputerToolCallParam\nfrom .response_function_tool_call_param import ResponseFunctionToolCallParam\nfrom .response_function_web_search_param import ResponseFunctionWebSearchParam\nfrom .response_file_search_tool_call_param import ResponseFileSearchToolCallParam\nfrom .response_custom_tool_call_output_param import ResponseCustomToolCallOutputParam\nfrom .response_code_interpreter_tool_call_param import ResponseCodeInterpreterToolCallParam\nfrom .response_input_message_content_list_param import ResponseInputMessageContentListParam\nfrom .response_function_call_output_item_list_param import ResponseFunctionCallOutputItemListParam\nfrom .response_computer_tool_call_output_screenshot_param import ResponseComputerToolCallOutputScreenshotParam\n\n__all__ = [\n    \"ResponseInputItemParam\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_item_param.py",
        "start": 5,
        "end": 24,
        "startLoc": {
          "line": 5,
          "column": 5,
          "position": 19
        },
        "endLoc": {
          "line": 24,
          "column": 25,
          "position": 183
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_param.py",
        "start": 5,
        "end": 24,
        "startLoc": {
          "line": 5,
          "column": 5,
          "position": 22
        },
        "endLoc": {
          "line": 24,
          "column": 21,
          "position": 186
        }
      }
    },
    {
      "format": "python",
      "lines": 298,
      "fragment": "\"ResponseInputItemParam\",\n    \"Message\",\n    \"ComputerCallOutput\",\n    \"ComputerCallOutputAcknowledgedSafetyCheck\",\n    \"FunctionCallOutput\",\n    \"ImageGenerationCall\",\n    \"LocalShellCall\",\n    \"LocalShellCallAction\",\n    \"LocalShellCallOutput\",\n    \"McpListTools\",\n    \"McpListToolsTool\",\n    \"McpApprovalRequest\",\n    \"McpApprovalResponse\",\n    \"McpCall\",\n    \"ItemReference\",\n]\n\n\nclass Message(TypedDict, total=False):\n    content: Required[ResponseInputMessageContentListParam]\n    \"\"\"\n    A list of one or many input items to the model, containing different content\n    types.\n    \"\"\"\n\n    role: Required[Literal[\"user\", \"system\", \"developer\"]]\n    \"\"\"The role of the message input. One of `user`, `system`, or `developer`.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"incomplete\"]\n    \"\"\"The status of item.\n\n    One of `in_progress`, `completed`, or `incomplete`. Populated when items are\n    returned via API.\n    \"\"\"\n\n    type: Literal[\"message\"]\n    \"\"\"The type of the message input. Always set to `message`.\"\"\"\n\n\nclass ComputerCallOutputAcknowledgedSafetyCheck(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The ID of the pending safety check.\"\"\"\n\n    code: Optional[str]\n    \"\"\"The type of the pending safety check.\"\"\"\n\n    message: Optional[str]\n    \"\"\"Details about the pending safety check.\"\"\"\n\n\nclass ComputerCallOutput(TypedDict, total=False):\n    call_id: Required[str]\n    \"\"\"The ID of the computer tool call that produced the output.\"\"\"\n\n    output: Required[ResponseComputerToolCallOutputScreenshotParam]\n    \"\"\"A computer screenshot image used with the computer use tool.\"\"\"\n\n    type: Required[Literal[\"computer_call_output\"]]\n    \"\"\"The type of the computer tool call output. Always `computer_call_output`.\"\"\"\n\n    id: Optional[str]\n    \"\"\"The ID of the computer tool call output.\"\"\"\n\n    acknowledged_safety_checks: Optional[Iterable[ComputerCallOutputAcknowledgedSafetyCheck]]\n    \"\"\"\n    The safety checks reported by the API that have been acknowledged by the\n    developer.\n    \"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\"]]\n    \"\"\"The status of the message input.\n\n    One of `in_progress`, `completed`, or `incomplete`. Populated when input items\n    are returned via API.\n    \"\"\"\n\n\nclass FunctionCallOutput(TypedDict, total=False):\n    call_id: Required[str]\n    \"\"\"The unique ID of the function tool call generated by the model.\"\"\"\n\n    output: Required[Union[str, ResponseFunctionCallOutputItemListParam]]\n    \"\"\"Text, image, or file output of the function tool call.\"\"\"\n\n    type: Required[Literal[\"function_call_output\"]]\n    \"\"\"The type of the function tool call output. Always `function_call_output`.\"\"\"\n\n    id: Optional[str]\n    \"\"\"The unique ID of the function tool call output.\n\n    Populated when this item is returned via API.\n    \"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\"]]\n    \"\"\"The status of the item.\n\n    One of `in_progress`, `completed`, or `incomplete`. Populated when items are\n    returned via API.\n    \"\"\"\n\n\nclass ImageGenerationCall(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the image generation call.\"\"\"\n\n    result: Required[Optional[str]]\n    \"\"\"The generated image encoded in base64.\"\"\"\n\n    status: Required[Literal[\"in_progress\", \"completed\", \"generating\", \"failed\"]]\n    \"\"\"The status of the image generation call.\"\"\"\n\n    type: Required[Literal[\"image_generation_call\"]]\n    \"\"\"The type of the image generation call. Always `image_generation_call`.\"\"\"\n\n\nclass LocalShellCallAction(TypedDict, total=False):\n    command: Required[SequenceNotStr[str]]\n    \"\"\"The command to run.\"\"\"\n\n    env: Required[Dict[str, str]]\n    \"\"\"Environment variables to set for the command.\"\"\"\n\n    type: Required[Literal[\"exec\"]]\n    \"\"\"The type of the local shell action. Always `exec`.\"\"\"\n\n    timeout_ms: Optional[int]\n    \"\"\"Optional timeout in milliseconds for the command.\"\"\"\n\n    user: Optional[str]\n    \"\"\"Optional user to run the command as.\"\"\"\n\n    working_directory: Optional[str]\n    \"\"\"Optional working directory to run the command in.\"\"\"\n\n\nclass LocalShellCall(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the local shell call.\"\"\"\n\n    action: Required[LocalShellCallAction]\n    \"\"\"Execute a shell command on the server.\"\"\"\n\n    call_id: Required[str]\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    status: Required[Literal[\"in_progress\", \"completed\", \"incomplete\"]]\n    \"\"\"The status of the local shell call.\"\"\"\n\n    type: Required[Literal[\"local_shell_call\"]]\n    \"\"\"The type of the local shell call. Always `local_shell_call`.\"\"\"\n\n\nclass LocalShellCallOutput(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    output: Required[str]\n    \"\"\"A JSON string of the output of the local shell tool call.\"\"\"\n\n    type: Required[Literal[\"local_shell_call_output\"]]\n    \"\"\"The type of the local shell tool call output. Always `local_shell_call_output`.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\"]]\n    \"\"\"The status of the item. One of `in_progress`, `completed`, or `incomplete`.\"\"\"\n\n\nclass McpListToolsTool(TypedDict, total=False):\n    input_schema: Required[object]\n    \"\"\"The JSON schema describing the tool's input.\"\"\"\n\n    name: Required[str]\n    \"\"\"The name of the tool.\"\"\"\n\n    annotations: Optional[object]\n    \"\"\"Additional annotations about the tool.\"\"\"\n\n    description: Optional[str]\n    \"\"\"The description of the tool.\"\"\"\n\n\nclass McpListTools(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the list.\"\"\"\n\n    server_label: Required[str]\n    \"\"\"The label of the MCP server.\"\"\"\n\n    tools: Required[Iterable[McpListToolsTool]]\n    \"\"\"The tools available on the server.\"\"\"\n\n    type: Required[Literal[\"mcp_list_tools\"]]\n    \"\"\"The type of the item. Always `mcp_list_tools`.\"\"\"\n\n    error: Optional[str]\n    \"\"\"Error message if the server could not list tools.\"\"\"\n\n\nclass McpApprovalRequest(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the approval request.\"\"\"\n\n    arguments: Required[str]\n    \"\"\"A JSON string of arguments for the tool.\"\"\"\n\n    name: Required[str]\n    \"\"\"The name of the tool to run.\"\"\"\n\n    server_label: Required[str]\n    \"\"\"The label of the MCP server making the request.\"\"\"\n\n    type: Required[Literal[\"mcp_approval_request\"]]\n    \"\"\"The type of the item. Always `mcp_approval_request`.\"\"\"\n\n\nclass McpApprovalResponse(TypedDict, total=False):\n    approval_request_id: Required[str]\n    \"\"\"The ID of the approval request being answered.\"\"\"\n\n    approve: Required[bool]\n    \"\"\"Whether the request was approved.\"\"\"\n\n    type: Required[Literal[\"mcp_approval_response\"]]\n    \"\"\"The type of the item. Always `mcp_approval_response`.\"\"\"\n\n    id: Optional[str]\n    \"\"\"The unique ID of the approval response\"\"\"\n\n    reason: Optional[str]\n    \"\"\"Optional reason for the decision.\"\"\"\n\n\nclass McpCall(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The unique ID of the tool call.\"\"\"\n\n    arguments: Required[str]\n    \"\"\"A JSON string of the arguments passed to the tool.\"\"\"\n\n    name: Required[str]\n    \"\"\"The name of the tool that was run.\"\"\"\n\n    server_label: Required[str]\n    \"\"\"The label of the MCP server running the tool.\"\"\"\n\n    type: Required[Literal[\"mcp_call\"]]\n    \"\"\"The type of the item. Always `mcp_call`.\"\"\"\n\n    approval_request_id: Optional[str]\n    \"\"\"\n    Unique identifier for the MCP tool call approval request. Include this value in\n    a subsequent `mcp_approval_response` input to approve or reject the\n    corresponding tool call.\n    \"\"\"\n\n    error: Optional[str]\n    \"\"\"The error from the tool call, if any.\"\"\"\n\n    output: Optional[str]\n    \"\"\"The output from the tool call.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"incomplete\", \"calling\", \"failed\"]\n    \"\"\"The status of the tool call.\n\n    One of `in_progress`, `completed`, `incomplete`, `calling`, or `failed`.\n    \"\"\"\n\n\nclass ItemReference(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The ID of the item to reference.\"\"\"\n\n    type: Optional[Literal[\"item_reference\"]]\n    \"\"\"The type of item to reference. Always `item_reference`.\"\"\"\n\n\nResponseInputItemParam: TypeAlias = Union[\n    EasyInputMessageParam,\n    Message,\n    ResponseOutputMessageParam,\n    ResponseFileSearchToolCallParam,\n    ResponseComputerToolCallParam,\n    ComputerCallOutput,\n    ResponseFunctionWebSearchParam,\n    ResponseFunctionToolCallParam,\n    FunctionCallOutput,\n    ResponseReasoningItemParam,\n    ImageGenerationCall,\n    ResponseCodeInterpreterToolCallParam,\n    LocalShellCall,\n    LocalShellCallOutput,\n    McpListTools,\n    McpApprovalRequest,\n    McpApprovalResponse,\n    McpCall,\n    ResponseCustomToolCallOutputParam,\n    ResponseCustomToolCallParam,\n    ItemReference,\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_item_param.py",
        "start": 24,
        "end": 321,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 183
        },
        "endLoc": {
          "line": 321,
          "column": 2,
          "position": 1539
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_param.py",
        "start": 25,
        "end": 322,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 190
        },
        "endLoc": {
          "line": 322,
          "column": 2,
          "position": 1546
        }
      }
    },
    {
      "format": "python",
      "lines": 115,
      "fragment": "class ImageGenerationCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the image generation call.\"\"\"\n\n    result: Optional[str] = None\n    \"\"\"The generated image encoded in base64.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"generating\", \"failed\"]\n    \"\"\"The status of the image generation call.\"\"\"\n\n    type: Literal[\"image_generation_call\"]\n    \"\"\"The type of the image generation call. Always `image_generation_call`.\"\"\"\n\n\nclass LocalShellCallAction(BaseModel):\n    command: List[str]\n    \"\"\"The command to run.\"\"\"\n\n    env: Dict[str, str]\n    \"\"\"Environment variables to set for the command.\"\"\"\n\n    type: Literal[\"exec\"]\n    \"\"\"The type of the local shell action. Always `exec`.\"\"\"\n\n    timeout_ms: Optional[int] = None\n    \"\"\"Optional timeout in milliseconds for the command.\"\"\"\n\n    user: Optional[str] = None\n    \"\"\"Optional user to run the command as.\"\"\"\n\n    working_directory: Optional[str] = None\n    \"\"\"Optional working directory to run the command in.\"\"\"\n\n\nclass LocalShellCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the local shell call.\"\"\"\n\n    action: LocalShellCallAction\n    \"\"\"Execute a shell command on the server.\"\"\"\n\n    call_id: str\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"incomplete\"]\n    \"\"\"The status of the local shell call.\"\"\"\n\n    type: Literal[\"local_shell_call\"]\n    \"\"\"The type of the local shell call. Always `local_shell_call`.\"\"\"\n\n\nclass LocalShellCallOutput(BaseModel):\n    id: str\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    output: str\n    \"\"\"A JSON string of the output of the local shell tool call.\"\"\"\n\n    type: Literal[\"local_shell_call_output\"]\n    \"\"\"The type of the local shell tool call output. Always `local_shell_call_output`.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\"]] = None\n    \"\"\"The status of the item. One of `in_progress`, `completed`, or `incomplete`.\"\"\"\n\n\nclass McpListToolsTool(BaseModel):\n    input_schema: object\n    \"\"\"The JSON schema describing the tool's input.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool.\"\"\"\n\n    annotations: Optional[object] = None\n    \"\"\"Additional annotations about the tool.\"\"\"\n\n    description: Optional[str] = None\n    \"\"\"The description of the tool.\"\"\"\n\n\nclass McpListTools(BaseModel):\n    id: str\n    \"\"\"The unique ID of the list.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server.\"\"\"\n\n    tools: List[McpListToolsTool]\n    \"\"\"The tools available on the server.\"\"\"\n\n    type: Literal[\"mcp_list_tools\"]\n    \"\"\"The type of the item. Always `mcp_list_tools`.\"\"\"\n\n    error: Optional[str] = None\n    \"\"\"Error message if the server could not list tools.\"\"\"\n\n\nclass McpApprovalRequest(BaseModel):\n    id: str\n    \"\"\"The unique ID of the approval request.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of arguments for the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool to run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server making the request.\"\"\"\n\n    type: Literal[\"mcp_approval_request\"]\n    \"\"\"The type of the item. Always `mcp_approval_request`.\"\"\"\n\n\nclass McpApprovalResponse(BaseModel):\n    approval_request_id",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_item.py",
        "start": 124,
        "end": 238,
        "startLoc": {
          "line": 124,
          "column": 1,
          "position": 578
        },
        "endLoc": {
          "line": 238,
          "column": 20,
          "position": 1096
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_output_item.py",
        "start": 29,
        "end": 146,
        "startLoc": {
          "line": 29,
          "column": 1,
          "position": 172
        },
        "endLoc": {
          "line": 146,
          "column": 3,
          "position": 707
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": "reason: Optional[str] = None\n    \"\"\"Optional reason for the decision.\"\"\"\n\n\nclass McpCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the tool call.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of the arguments passed to the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool that was run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server running the tool.\"\"\"\n\n    type: Literal[\"mcp_call\"]\n    \"\"\"The type of the item. Always `mcp_call`.\"\"\"\n\n    approval_request_id: Optional[str] = None\n    \"\"\"\n    Unique identifier for the MCP tool call approval request. Include this value in\n    a subsequent `mcp_approval_response` input to approve or reject the\n    corresponding tool call.\n    \"\"\"\n\n    error: Optional[str] = None\n    \"\"\"The error from the tool call, if any.\"\"\"\n\n    output: Optional[str] = None\n    \"\"\"The output from the tool call.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\", \"calling\", \"failed\"]] = None\n    \"\"\"The status of the tool call.\n\n    One of `in_progress`, `completed`, `incomplete`, `calling`, or `failed`.\n    \"\"\"\n\n\nclass ItemReference",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_input_item.py",
        "start": 250,
        "end": 290,
        "startLoc": {
          "line": 250,
          "column": 5,
          "position": 1146
        },
        "endLoc": {
          "line": 290,
          "column": 14,
          "position": 1310
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_item.py",
        "start": 158,
        "end": 116,
        "startLoc": {
          "line": 158,
          "column": 5,
          "position": 750
        },
        "endLoc": {
          "line": 116,
          "column": 17,
          "position": 563
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "If set to true, the model response data will be streamed to the client as it is\n    generated using\n    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n    See the\n    [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n    for more information.\n    \"\"\"\n\n\nclass ResponseCreateParamsStreaming(ResponseCreateParamsBase):\n    stream: Required[Literal[True]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 301,
        "end": 312,
        "startLoc": {
          "line": 301,
          "column": 5,
          "position": 2247
        },
        "endLoc": {
          "line": 312,
          "column": 8,
          "position": 2367
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_retrieve_params.py",
        "start": 50,
        "end": 56,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 162
        },
        "endLoc": {
          "line": 56,
          "column": 3,
          "position": 282
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "If set to true, the model response data will be streamed to the client as it is\n    generated using\n    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n    See the\n    [Streaming section below](https://platform.openai.com/docs/api-reference/responses-streaming)\n    for more information.\n    \"\"\"\n\n\nResponseCreateParams",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 313,
        "end": 322,
        "startLoc": {
          "line": 313,
          "column": 5,
          "position": 2370
        },
        "endLoc": {
          "line": 322,
          "column": 21,
          "position": 2495
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_retrieve_params.py",
        "start": 50,
        "end": 59,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 162
        },
        "endLoc": {
          "line": 59,
          "column": 23,
          "position": 287
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "A stable identifier used to help detect users of your application that may be\n    violating OpenAI's usage policies. The IDs should be a string that uniquely\n    identifies each user. We recommend hashing their username or email address, in\n    order to avoid sending us any identifying information.\n    [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n    \"\"\"\n\n    service_tier: Optional[Literal[\"auto\", \"default\", \"flex\", \"scale\", \"priority\"]] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response.py",
        "start": 204,
        "end": 212,
        "startLoc": {
          "line": 204,
          "column": 5,
          "position": 753
        },
        "endLoc": {
          "line": 212,
          "column": 8,
          "position": 880
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 158,
        "end": 166,
        "startLoc": {
          "line": 158,
          "column": 5,
          "position": 529
        },
        "endLoc": {
          "line": 166,
          "column": 8,
          "position": 656
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "Specifies the processing type used for serving the request.\n\n    - If set to 'auto', then the request will be processed with the service tier\n      configured in the Project settings. Unless otherwise configured, the Project\n      will use 'default'.\n    - If set to 'default', then the request will be processed with the standard\n      pricing and performance for the selected model.\n    - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or\n      '[priority](https://openai.com/api-priority-processing/)', then the request\n      will be processed with the corresponding service tier.\n    - When not set, the default behavior is 'auto'.\n\n    When the `service_tier` parameter is set, the response body will include the\n    `service_tier` value based on the processing mode actually used to serve the\n    request. This response value may be different from the value set in the\n    parameter.\n    \"\"\"\n\n    status: Optional[ResponseStatus] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response.py",
        "start": 212,
        "end": 231,
        "startLoc": {
          "line": 212,
          "column": 8,
          "position": 881
        },
        "endLoc": {
          "line": 231,
          "column": 8,
          "position": 1157
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 166,
        "end": 185,
        "startLoc": {
          "line": 166,
          "column": 8,
          "position": 657
        },
        "endLoc": {
          "line": 185,
          "column": 8,
          "position": 933
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "Configuration options for a text response from the model.\n\n    Can be plain text or structured JSON data. Learn more:\n\n    - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n    - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n    \"\"\"\n\n    top_logprobs: Optional[int] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response.py",
        "start": 238,
        "end": 247,
        "startLoc": {
          "line": 238,
          "column": 8,
          "position": 1200
        },
        "endLoc": {
          "line": 247,
          "column": 8,
          "position": 1301
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 199,
        "end": 208,
        "startLoc": {
          "line": 199,
          "column": 8,
          "position": 1079
        },
        "endLoc": {
          "line": 208,
          "column": 8,
          "position": 1180
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "The truncation strategy to use for the model response.\n\n    - `auto`: If the input to this Response exceeds the model's context window size,\n      the model will truncate the response to fit the context window by dropping\n      items from the beginning of the conversation.\n    - `disabled` (default): If the input size will exceed the context window size\n      for a model, the request will fail with a 400 error.\n    \"\"\"\n\n    usage: Optional[ResponseUsage] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response.py",
        "start": 253,
        "end": 263,
        "startLoc": {
          "line": 253,
          "column": 8,
          "position": 1359
        },
        "endLoc": {
          "line": 263,
          "column": 8,
          "position": 1509
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 253,
        "end": 263,
        "startLoc": {
          "line": 253,
          "column": 8,
          "position": 1812
        },
        "endLoc": {
          "line": 263,
          "column": 8,
          "position": 1962
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "This field is being replaced by `safety_identifier` and `prompt_cache_key`.\n\n    Use `prompt_cache_key` instead to maintain caching optimizations. A stable\n    identifier for your end-users. Used to boost cache hit rates by better bucketing\n    similar requests and to help OpenAI detect and prevent abuse.\n    [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n    \"\"\"\n\n    @property\n    def output_text(self) -> str:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response.py",
        "start": 269,
        "end": 279,
        "startLoc": {
          "line": 269,
          "column": 8,
          "position": 1557
        },
        "endLoc": {
          "line": 279,
          "column": 12,
          "position": 1677
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 263,
        "end": 277,
        "startLoc": {
          "line": 263,
          "column": 8,
          "position": 1963
        },
        "endLoc": {
          "line": 277,
          "column": 8,
          "position": 2083
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"ResponseContentPartDoneEvent\", \"Part\"]\n\n\nclass Part(BaseModel):\n    audio: Optional[str] = None\n    \"\"\"Base64-encoded audio data (if type is \"audio\").\"\"\"\n\n    text: Optional[str] = None\n    \"\"\"The text content (if type is \"text\").\"\"\"\n\n    transcript: Optional[str] = None\n    \"\"\"The transcript of the audio (if type is \"audio\").\"\"\"\n\n    type: Optional[Literal[\"text\", \"audio\"]] = None\n    \"\"\"The content type (\"text\", \"audio\").\"\"\"\n\n\nclass ResponseContentPartDoneEvent(BaseModel):\n    content_index: int\n    \"\"\"The index of the content part in the item's content array.\"\"\"\n\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    item_id: str\n    \"\"\"The ID of the item.\"\"\"\n\n    output_index: int\n    \"\"\"The index of the output item in the response.\"\"\"\n\n    part: Part\n    \"\"\"The content part that is done.\"\"\"\n\n    response_id: str\n    \"\"\"The ID of the response.\"\"\"\n\n    type: Literal[\"response.content_part.done\"]\n    \"\"\"The event type, must be `response.content_part.done`.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/response_content_part_done_event.py",
        "start": 6,
        "end": 45,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 45,
          "column": 60,
          "position": 206
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_content_part_done_event.py",
        "start": 6,
        "end": 45,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 23
        },
        "endLoc": {
          "line": 45,
          "column": 60,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"ResponseContentPartAddedEvent\", \"Part\"]\n\n\nclass Part(BaseModel):\n    audio: Optional[str] = None\n    \"\"\"Base64-encoded audio data (if type is \"audio\").\"\"\"\n\n    text: Optional[str] = None\n    \"\"\"The text content (if type is \"text\").\"\"\"\n\n    transcript: Optional[str] = None\n    \"\"\"The transcript of the audio (if type is \"audio\").\"\"\"\n\n    type: Optional[Literal[\"text\", \"audio\"]] = None\n    \"\"\"The content type (\"text\", \"audio\").\"\"\"\n\n\nclass ResponseContentPartAddedEvent(BaseModel):\n    content_index: int\n    \"\"\"The index of the content part in the item's content array.\"\"\"\n\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    item_id: str\n    \"\"\"The ID of the item to which the content part was added.\"\"\"\n\n    output_index: int\n    \"\"\"The index of the output item in the response.\"\"\"\n\n    part: Part\n    \"\"\"The content part that was added.\"\"\"\n\n    response_id: str\n    \"\"\"The ID of the response.\"\"\"\n\n    type: Literal[\"response.content_part.added\"]\n    \"\"\"The event type, must be `response.content_part.added`.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/response_content_part_added_event.py",
        "start": 6,
        "end": 45,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 45,
          "column": 61,
          "position": 206
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/response_content_part_added_event.py",
        "start": 6,
        "end": 45,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 23
        },
        "endLoc": {
          "line": 45,
          "column": 61,
          "position": 207
        }
      }
    },
    {
      "format": "python",
      "lines": 115,
      "fragment": "class McpAllowedToolsMcpToolFilter(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nMcpAllowedTools: TypeAlias = Union[SequenceNotStr[str], McpAllowedToolsMcpToolFilter]\n\n\nclass McpRequireApprovalMcpToolApprovalFilterAlways(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilterNever(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilter(TypedDict, total=False):\n    always: McpRequireApprovalMcpToolApprovalFilterAlways\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n    never: McpRequireApprovalMcpToolApprovalFilterNever\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n\nMcpRequireApproval: TypeAlias = Union[McpRequireApprovalMcpToolApprovalFilter, Literal[\"always\", \"never\"]]\n\n\nclass Mcp(TypedDict, total=False):\n    server_label: Required[str]\n    \"\"\"A label for this MCP server, used to identify it in tool calls.\"\"\"\n\n    type: Required[Literal[\"mcp\"]]\n    \"\"\"The type of the MCP tool. Always `mcp`.\"\"\"\n\n    allowed_tools: Optional[McpAllowedTools]\n    \"\"\"List of allowed tool names or a filter object.\"\"\"\n\n    authorization: str\n    \"\"\"\n    An OAuth access token that can be used with a remote MCP server, either with a\n    custom MCP server URL or a service connector. Your application must handle the\n    OAuth authorization flow and provide the token here.\n    \"\"\"\n\n    connector_id: Literal[\n        \"connector_dropbox\",\n        \"connector_gmail\",\n        \"connector_googlecalendar\",\n        \"connector_googledrive\",\n        \"connector_microsoftteams\",\n        \"connector_outlookcalendar\",\n        \"connector_outlookemail\",\n        \"connector_sharepoint\",\n    ]\n    \"\"\"Identifier for service connectors, like those available in ChatGPT.\n\n    One of `server_url` or `connector_id` must be provided. Learn more about service\n    connectors\n    [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\n    Currently supported `connector_id` values are:\n\n    - Dropbox: `connector_dropbox`\n    - Gmail: `connector_gmail`\n    - Google Calendar: `connector_googlecalendar`\n    - Google Drive: `connector_googledrive`\n    - Microsoft Teams: `connector_microsoftteams`\n    - Outlook Calendar: `connector_outlookcalendar`\n    - Outlook Email: `connector_outlookemail`\n    - SharePoint: `connector_sharepoint`\n    \"\"\"\n\n    headers: Optional[Dict[str, str]]\n    \"\"\"Optional HTTP headers to send to the MCP server.\n\n    Use for authentication or other purposes.\n    \"\"\"\n\n    require_approval: Optional[McpRequireApproval]\n    \"\"\"Specify which of the MCP server's tools require approval.\"\"\"\n\n    server_description: str\n    \"\"\"Optional description of the MCP server, used to provide more context.\"\"\"\n\n    server_url: str\n    \"\"\"The URL for the MCP server.\n\n    One of `server_url` or `connector_id` must be provided.\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_union_param.py",
        "start": 23,
        "end": 137,
        "startLoc": {
          "line": 23,
          "column": 1,
          "position": 107
        },
        "endLoc": {
          "line": 137,
          "column": 3,
          "position": 537
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/tool_param.py",
        "start": 40,
        "end": 159,
        "startLoc": {
          "line": 40,
          "column": 1,
          "position": 219
        },
        "endLoc": {
          "line": 159,
          "column": 8,
          "position": 649
        }
      }
    },
    {
      "format": "python",
      "lines": 117,
      "fragment": "class McpAllowedToolsMcpToolFilter(BaseModel):\n    read_only: Optional[bool] = None\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: Optional[List[str]] = None\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nMcpAllowedTools: TypeAlias = Union[List[str], McpAllowedToolsMcpToolFilter, None]\n\n\nclass McpRequireApprovalMcpToolApprovalFilterAlways(BaseModel):\n    read_only: Optional[bool] = None\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: Optional[List[str]] = None\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilterNever(BaseModel):\n    read_only: Optional[bool] = None\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: Optional[List[str]] = None\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilter(BaseModel):\n    always: Optional[McpRequireApprovalMcpToolApprovalFilterAlways] = None\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n    never: Optional[McpRequireApprovalMcpToolApprovalFilterNever] = None\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n\nMcpRequireApproval: TypeAlias = Union[McpRequireApprovalMcpToolApprovalFilter, Literal[\"always\", \"never\"], None]\n\n\nclass Mcp(BaseModel):\n    server_label: str\n    \"\"\"A label for this MCP server, used to identify it in tool calls.\"\"\"\n\n    type: Literal[\"mcp\"]\n    \"\"\"The type of the MCP tool. Always `mcp`.\"\"\"\n\n    allowed_tools: Optional[McpAllowedTools] = None\n    \"\"\"List of allowed tool names or a filter object.\"\"\"\n\n    authorization: Optional[str] = None\n    \"\"\"\n    An OAuth access token that can be used with a remote MCP server, either with a\n    custom MCP server URL or a service connector. Your application must handle the\n    OAuth authorization flow and provide the token here.\n    \"\"\"\n\n    connector_id: Optional[\n        Literal[\n            \"connector_dropbox\",\n            \"connector_gmail\",\n            \"connector_googlecalendar\",\n            \"connector_googledrive\",\n            \"connector_microsoftteams\",\n            \"connector_outlookcalendar\",\n            \"connector_outlookemail\",\n            \"connector_sharepoint\",\n        ]\n    ] = None\n    \"\"\"Identifier for service connectors, like those available in ChatGPT.\n\n    One of `server_url` or `connector_id` must be provided. Learn more about service\n    connectors\n    [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\n    Currently supported `connector_id` values are:\n\n    - Dropbox: `connector_dropbox`\n    - Gmail: `connector_gmail`\n    - Google Calendar: `connector_googlecalendar`\n    - Google Drive: `connector_googledrive`\n    - Microsoft Teams: `connector_microsoftteams`\n    - Outlook Calendar: `connector_outlookcalendar`\n    - Outlook Email: `connector_outlookemail`\n    - SharePoint: `connector_sharepoint`\n    \"\"\"\n\n    headers: Optional[Dict[str, str]] = None\n    \"\"\"Optional HTTP headers to send to the MCP server.\n\n    Use for authentication or other purposes.\n    \"\"\"\n\n    require_approval: Optional[McpRequireApproval] = None\n    \"\"\"Specify which of the MCP server's tools require approval.\"\"\"\n\n    server_description: Optional[str] = None\n    \"\"\"Optional description of the MCP server, used to provide more context.\"\"\"\n\n    server_url: Optional[str] = None\n    \"\"\"The URL for the MCP server.\n\n    One of `server_url` or `connector_id` must be provided.\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_union.py",
        "start": 22,
        "end": 138,
        "startLoc": {
          "line": 22,
          "column": 1,
          "position": 109
        },
        "endLoc": {
          "line": 138,
          "column": 3,
          "position": 596
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/tool.py",
        "start": 38,
        "end": 159,
        "startLoc": {
          "line": 38,
          "column": 1,
          "position": 207
        },
        "endLoc": {
          "line": 159,
          "column": 8,
          "position": 694
        }
      }
    },
    {
      "format": "python",
      "lines": 129,
      "fragment": "\"RealtimeToolsConfigUnionParam\",\n    \"Mcp\",\n    \"McpAllowedTools\",\n    \"McpAllowedToolsMcpToolFilter\",\n    \"McpRequireApproval\",\n    \"McpRequireApprovalMcpToolApprovalFilter\",\n    \"McpRequireApprovalMcpToolApprovalFilterAlways\",\n    \"McpRequireApprovalMcpToolApprovalFilterNever\",\n]\n\n\nclass McpAllowedToolsMcpToolFilter(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nMcpAllowedTools: TypeAlias = Union[SequenceNotStr[str], McpAllowedToolsMcpToolFilter]\n\n\nclass McpRequireApprovalMcpToolApprovalFilterAlways(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilterNever(TypedDict, total=False):\n    read_only: bool\n    \"\"\"Indicates whether or not a tool modifies data or is read-only.\n\n    If an MCP server is\n    [annotated with `readOnlyHint`](https://modelcontextprotocol.io/specification/2025-06-18/schema#toolannotations-readonlyhint),\n    it will match this filter.\n    \"\"\"\n\n    tool_names: SequenceNotStr[str]\n    \"\"\"List of allowed tool names.\"\"\"\n\n\nclass McpRequireApprovalMcpToolApprovalFilter(TypedDict, total=False):\n    always: McpRequireApprovalMcpToolApprovalFilterAlways\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n    never: McpRequireApprovalMcpToolApprovalFilterNever\n    \"\"\"A filter object to specify which tools are allowed.\"\"\"\n\n\nMcpRequireApproval: TypeAlias = Union[McpRequireApprovalMcpToolApprovalFilter, Literal[\"always\", \"never\"]]\n\n\nclass Mcp(TypedDict, total=False):\n    server_label: Required[str]\n    \"\"\"A label for this MCP server, used to identify it in tool calls.\"\"\"\n\n    type: Required[Literal[\"mcp\"]]\n    \"\"\"The type of the MCP tool. Always `mcp`.\"\"\"\n\n    allowed_tools: Optional[McpAllowedTools]\n    \"\"\"List of allowed tool names or a filter object.\"\"\"\n\n    authorization: str\n    \"\"\"\n    An OAuth access token that can be used with a remote MCP server, either with a\n    custom MCP server URL or a service connector. Your application must handle the\n    OAuth authorization flow and provide the token here.\n    \"\"\"\n\n    connector_id: Literal[\n        \"connector_dropbox\",\n        \"connector_gmail\",\n        \"connector_googlecalendar\",\n        \"connector_googledrive\",\n        \"connector_microsoftteams\",\n        \"connector_outlookcalendar\",\n        \"connector_outlookemail\",\n        \"connector_sharepoint\",\n    ]\n    \"\"\"Identifier for service connectors, like those available in ChatGPT.\n\n    One of `server_url` or `connector_id` must be provided. Learn more about service\n    connectors\n    [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\n    Currently supported `connector_id` values are:\n\n    - Dropbox: `connector_dropbox`\n    - Gmail: `connector_gmail`\n    - Google Calendar: `connector_googlecalendar`\n    - Google Drive: `connector_googledrive`\n    - Microsoft Teams: `connector_microsoftteams`\n    - Outlook Calendar: `connector_outlookcalendar`\n    - Outlook Email: `connector_outlookemail`\n    - SharePoint: `connector_sharepoint`\n    \"\"\"\n\n    headers: Optional[Dict[str, str]]\n    \"\"\"Optional HTTP headers to send to the MCP server.\n\n    Use for authentication or other purposes.\n    \"\"\"\n\n    require_approval: Optional[McpRequireApproval]\n    \"\"\"Specify which of the MCP server's tools require approval.\"\"\"\n\n    server_description: str\n    \"\"\"Optional description of the MCP server, used to provide more context.\"\"\"\n\n    server_url: str\n    \"\"\"The URL for the MCP server.\n\n    One of `server_url` or `connector_id` must be provided.\n    \"\"\"\n\n\nRealtimeToolsConfigUnionParam: TypeAlias = Union[RealtimeFunctionToolParam, Mcp]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_param.py",
        "start": 13,
        "end": 141,
        "startLoc": {
          "line": 13,
          "column": 5,
          "position": 79
        },
        "endLoc": {
          "line": 141,
          "column": 2,
          "position": 562
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_tools_config_union_param.py",
        "start": 12,
        "end": 140,
        "startLoc": {
          "line": 12,
          "column": 5,
          "position": 72
        },
        "endLoc": {
          "line": 140,
          "column": 2,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 58,
      "fragment": "(BaseModel):\n    type: Literal[\"server_vad\"]\n    \"\"\"Type of turn detection, `server_vad` to turn on simple Server VAD.\"\"\"\n\n    create_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    idle_timeout_ms: Optional[int] = None\n    \"\"\"Optional timeout after which a model response will be triggered automatically.\n\n    This is useful for situations in which a long pause from the user is unexpected,\n    such as a phone call. The model will effectively prompt the user to continue the\n    conversation based on the current context.\n\n    The timeout value will be applied after the last model response's audio has\n    finished playing, i.e. it's set to the `response.done` time plus audio playback\n    duration.\n\n    An `input_audio_buffer.timeout_triggered` event (plus events associated with the\n    Response) will be emitted when the timeout is reached. Idle timeout is currently\n    only supported for `server_vad` mode.\n    \"\"\"\n\n    interrupt_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: Optional[float] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n\nclass AudioInputTurnDetectionSemanticVad",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py",
        "start": 51,
        "end": 108,
        "startLoc": {
          "line": 51,
          "column": 33,
          "position": 275
        },
        "endLoc": {
          "line": 108,
          "column": 35,
          "position": 398
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_turn_detection.py",
        "start": 12,
        "end": 69,
        "startLoc": {
          "line": 12,
          "column": 10,
          "position": 71
        },
        "endLoc": {
          "line": 69,
          "column": 12,
          "position": 194
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": "] = None\n    \"\"\"List of allowed tool names or a filter object.\"\"\"\n\n    authorization: Optional[str] = None\n    \"\"\"\n    An OAuth access token that can be used with a remote MCP server, either with a\n    custom MCP server URL or a service connector. Your application must handle the\n    OAuth authorization flow and provide the token here.\n    \"\"\"\n\n    connector_id: Optional[\n        Literal[\n            \"connector_dropbox\",\n            \"connector_gmail\",\n            \"connector_googlecalendar\",\n            \"connector_googledrive\",\n            \"connector_microsoftteams\",\n            \"connector_outlookcalendar\",\n            \"connector_outlookemail\",\n            \"connector_sharepoint\",\n        ]\n    ] = None\n    \"\"\"Identifier for service connectors, like those available in ChatGPT.\n\n    One of `server_url` or `connector_id` must be provided. Learn more about service\n    connectors\n    [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\n    Currently supported `connector_id` values are:\n\n    - Dropbox: `connector_dropbox`\n    - Gmail: `connector_gmail`\n    - Google Calendar: `connector_googlecalendar`\n    - Google Drive: `connector_googledrive`\n    - Microsoft Teams: `connector_microsoftteams`\n    - Outlook Calendar: `connector_outlookcalendar`\n    - Outlook Email: `connector_outlookemail`\n    - SharePoint: `connector_sharepoint`\n    \"\"\"\n\n    headers: Optional[Dict[str, str]] = None\n    \"\"\"Optional HTTP headers to send to the MCP server.\n\n    Use for authentication or other purposes.\n    \"\"\"\n\n    require_approval: Optional[ToolMcpToolRequireApproval] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py",
        "start": 282,
        "end": 329,
        "startLoc": {
          "line": 282,
          "column": 24,
          "position": 1024
        },
        "endLoc": {
          "line": 329,
          "column": 8,
          "position": 1164
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/tool.py",
        "start": 98,
        "end": 145,
        "startLoc": {
          "line": 98,
          "column": 16,
          "position": 477
        },
        "endLoc": {
          "line": 145,
          "column": 8,
          "position": 617
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ".\n    \"\"\"\n\n    instructions: Optional[str] = None\n    \"\"\"The default system instructions (i.e.\n\n    system message) prepended to model calls. This field allows the client to guide\n    the model on desired responses. The model can be instructed on response content\n    and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of\n    good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\n    into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be\n    followed by the model, but they provide guidance to the model on the desired\n    behavior.\n\n    Note that the server sets default instructions which will be used if this field\n    is not set and are visible in the `session.created` event at the start of the\n    session.\n    \"\"\"\n\n    max_output_tokens: Union[int, Literal[\"inf\"], None] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py",
        "start": 381,
        "end": 401,
        "startLoc": {
          "line": 381,
          "column": 14,
          "position": 1454
        },
        "endLoc": {
          "line": 401,
          "column": 8,
          "position": 1698
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/session_update_event.py",
        "start": 194,
        "end": 214,
        "startLoc": {
          "line": 194,
          "column": 8,
          "position": 1326
        },
        "endLoc": {
          "line": 214,
          "column": 8,
          "position": 1551
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "Realtime API can write session traces to the\n    [Traces Dashboard](/logs?api=traces). Set to null to disable tracing. Once\n    tracing is enabled for a session, the configuration cannot be modified.\n\n    `auto` will create a trace for the session with default values for the workflow\n    name, group id, and metadata.\n    \"\"\"\n\n    truncation: RealtimeTruncationParam\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_request_param.py",
        "start": 99,
        "end": 108,
        "startLoc": {
          "line": 99,
          "column": 5,
          "position": 361
        },
        "endLoc": {
          "line": 108,
          "column": 8,
          "position": 476
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py",
        "start": 452,
        "end": 461,
        "startLoc": {
          "line": 452,
          "column": 5,
          "position": 2025
        },
        "endLoc": {
          "line": 461,
          "column": 8,
          "position": 2140
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "Realtime API can write session traces to the\n    [Traces Dashboard](/logs?api=traces). Set to null to disable tracing. Once\n    tracing is enabled for a session, the configuration cannot be modified.\n\n    `auto` will create a trace for the session with default values for the workflow\n    name, group id, and metadata.\n    \"\"\"\n\n    truncation: Optional[RealtimeTruncation] = None\n    \"\"\"\n    Controls how the realtime conversation is truncated prior to model inference.\n    The default is `auto`.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_request.py",
        "start": 99,
        "end": 111,
        "startLoc": {
          "line": 99,
          "column": 5,
          "position": 403
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 556
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_response.py",
        "start": 452,
        "end": 464,
        "startLoc": {
          "line": 452,
          "column": 5,
          "position": 2025
        },
        "endLoc": {
          "line": 464,
          "column": 2,
          "position": 2178
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": "type: Literal[\"conversation.item.retrieved\"]\n    \"\"\"The event type, must be `conversation.item.retrieved`.\"\"\"\n\n\nclass OutputAudioBufferStarted(BaseModel):\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    response_id: str\n    \"\"\"The unique ID of the response that produced the audio.\"\"\"\n\n    type: Literal[\"output_audio_buffer.started\"]\n    \"\"\"The event type, must be `output_audio_buffer.started`.\"\"\"\n\n\nclass OutputAudioBufferStopped(BaseModel):\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    response_id: str\n    \"\"\"The unique ID of the response that produced the audio.\"\"\"\n\n    type: Literal[\"output_audio_buffer.stopped\"]\n    \"\"\"The event type, must be `output_audio_buffer.stopped`.\"\"\"\n\n\nclass OutputAudioBufferCleared(BaseModel):\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    response_id: str\n    \"\"\"The unique ID of the response that produced the audio.\"\"\"\n\n    type: Literal[\"output_audio_buffer.cleared\"]\n    \"\"\"The event type, must be `output_audio_buffer.cleared`.\"\"\"\n\n\nRealtimeServerEvent: TypeAlias = Annotated[\n    Union[\n        ConversationCreatedEvent,\n        ConversationItemCreatedEvent,\n        ConversationItemDeletedEvent,\n        ConversationItemInputAudioTranscriptionCompletedEvent,\n        ConversationItemInputAudioTranscriptionDeltaEvent,\n        ConversationItemInputAudioTranscriptionFailedEvent,\n        ConversationItemRetrieved,\n        ConversationItemTruncatedEvent,\n        RealtimeErrorEvent",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_server_event.py",
        "start": 69,
        "end": 116,
        "startLoc": {
          "line": 69,
          "column": 5,
          "position": 492
        },
        "endLoc": {
          "line": 116,
          "column": 19,
          "position": 678
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_server_event.py",
        "start": 58,
        "end": 105,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 395
        },
        "endLoc": {
          "line": 105,
          "column": 11,
          "position": 581
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"RealtimeResponseStatus\", \"Error\"]\n\n\nclass Error(BaseModel):\n    code: Optional[str] = None\n    \"\"\"Error code, if any.\"\"\"\n\n    type: Optional[str] = None\n    \"\"\"The type of error.\"\"\"\n\n\nclass RealtimeResponseStatus(BaseModel):\n    error: Optional[Error] = None\n    \"\"\"\n    A description of the error that caused the response to fail, populated when the\n    `status` is `failed`.\n    \"\"\"\n\n    reason: Optional[Literal[\"turn_detected\", \"client_cancelled\", \"max_output_tokens\", \"content_filter\"]] = None\n    \"\"\"The reason the Response did not complete.\n\n    For a `cancelled` Response, one of `turn_detected` (the server VAD detected a\n    new start of speech) or `client_cancelled` (the client sent a cancel event). For\n    an `incomplete` Response, one of `max_output_tokens` or `content_filter` (the\n    server-side safety filter activated and cut off the response).\n    \"\"\"\n\n    type: Optional[Literal[\"completed\", \"cancelled\", \"incomplete\", \"failed\"]] = None\n    \"\"\"\n    The type of error that caused the response to fail, corresponding with the\n    `status` field (`completed`, `cancelled`, `incomplete`, `failed`).\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_status.py",
        "start": 6,
        "end": 39,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 168
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/realtime_response_status.py",
        "start": 6,
        "end": 39,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 23
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 169
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": "] = None\n    \"\"\"List of allowed tool names or a filter object.\"\"\"\n\n    authorization: Optional[str] = None\n    \"\"\"\n    An OAuth access token that can be used with a remote MCP server, either with a\n    custom MCP server URL or a service connector. Your application must handle the\n    OAuth authorization flow and provide the token here.\n    \"\"\"\n\n    connector_id: Optional[\n        Literal[\n            \"connector_dropbox\",\n            \"connector_gmail\",\n            \"connector_googlecalendar\",\n            \"connector_googledrive\",\n            \"connector_microsoftteams\",\n            \"connector_outlookcalendar\",\n            \"connector_outlookemail\",\n            \"connector_sharepoint\",\n        ]\n    ] = None\n    \"\"\"Identifier for service connectors, like those available in ChatGPT.\n\n    One of `server_url` or `connector_id` must be provided. Learn more about service\n    connectors\n    [here](https://platform.openai.com/docs/guides/tools-remote-mcp#connectors).\n\n    Currently supported `connector_id` values are:\n\n    - Dropbox: `connector_dropbox`\n    - Gmail: `connector_gmail`\n    - Google Calendar: `connector_googlecalendar`\n    - Google Drive: `connector_googledrive`\n    - Microsoft Teams: `connector_microsoftteams`\n    - Outlook Calendar: `connector_outlookcalendar`\n    - Outlook Email: `connector_outlookemail`\n    - SharePoint: `connector_sharepoint`\n    \"\"\"\n\n    headers: Optional[Dict[str, str]] = None\n    \"\"\"Optional HTTP headers to send to the MCP server.\n\n    Use for authentication or other purposes.\n    \"\"\"\n\n    require_approval: Optional[RequireApproval] = None\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_response_create_mcp_tool.py",
        "start": 79,
        "end": 126,
        "startLoc": {
          "line": 79,
          "column": 13,
          "position": 352
        },
        "endLoc": {
          "line": 126,
          "column": 8,
          "position": 492
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/tool.py",
        "start": 98,
        "end": 145,
        "startLoc": {
          "line": 98,
          "column": 16,
          "position": 477
        },
        "endLoc": {
          "line": 145,
          "column": 8,
          "position": 617
        }
      }
    },
    {
      "format": "python",
      "lines": 88,
      "fragment": ", \"ServerVad\", \"SemanticVad\"]\n\n\nclass ServerVad(TypedDict, total=False):\n    type: Required[Literal[\"server_vad\"]]\n    \"\"\"Type of turn detection, `server_vad` to turn on simple Server VAD.\"\"\"\n\n    create_response: bool\n    \"\"\"\n    Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    idle_timeout_ms: Optional[int]\n    \"\"\"Optional timeout after which a model response will be triggered automatically.\n\n    This is useful for situations in which a long pause from the user is unexpected,\n    such as a phone call. The model will effectively prompt the user to continue the\n    conversation based on the current context.\n\n    The timeout value will be applied after the last model response's audio has\n    finished playing, i.e. it's set to the `response.done` time plus audio playback\n    duration.\n\n    An `input_audio_buffer.timeout_triggered` event (plus events associated with the\n    Response) will be emitted when the timeout is reached. Idle timeout is currently\n    only supported for `server_vad` mode.\n    \"\"\"\n\n    interrupt_response: bool\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: int\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: float\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n\nclass SemanticVad(TypedDict, total=False):\n    type: Required[Literal[\"semantic_vad\"]]\n    \"\"\"Type of turn detection, `semantic_vad` to turn on Semantic VAD.\"\"\"\n\n    create_response: bool\n    \"\"\"\n    Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    eagerness: Literal[\"low\", \"medium\", \"high\", \"auto\"]\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`. `low`, `medium`, and `high` have max timeouts of 8s,\n    4s, and 2s respectively.\n    \"\"\"\n\n    interrupt_response: bool\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n\nRealtimeAudioInputTurnDetectionParam",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_input_turn_detection_param.py",
        "start": 8,
        "end": 95,
        "startLoc": {
          "line": 8,
          "column": 39,
          "position": 47
        },
        "endLoc": {
          "line": 95,
          "column": 37,
          "position": 222
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_turn_detection_param.py",
        "start": 8,
        "end": 95,
        "startLoc": {
          "line": 8,
          "column": 59,
          "position": 47
        },
        "endLoc": {
          "line": 95,
          "column": 57,
          "position": 222
        }
      }
    },
    {
      "format": "python",
      "lines": 88,
      "fragment": ", \"ServerVad\", \"SemanticVad\"]\n\n\nclass ServerVad(BaseModel):\n    type: Literal[\"server_vad\"]\n    \"\"\"Type of turn detection, `server_vad` to turn on simple Server VAD.\"\"\"\n\n    create_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    idle_timeout_ms: Optional[int] = None\n    \"\"\"Optional timeout after which a model response will be triggered automatically.\n\n    This is useful for situations in which a long pause from the user is unexpected,\n    such as a phone call. The model will effectively prompt the user to continue the\n    conversation based on the current context.\n\n    The timeout value will be applied after the last model response's audio has\n    finished playing, i.e. it's set to the `response.done` time plus audio playback\n    duration.\n\n    An `input_audio_buffer.timeout_triggered` event (plus events associated with the\n    Response) will be emitted when the timeout is reached. Idle timeout is currently\n    only supported for `server_vad` mode.\n    \"\"\"\n\n    interrupt_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n    prefix_padding_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Amount of audio to include before the VAD detected speech (in milliseconds).\n    Defaults to 300ms.\n    \"\"\"\n\n    silence_duration_ms: Optional[int] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\n    With shorter values the model will respond more quickly, but may jump in on\n    short pauses from the user.\n    \"\"\"\n\n    threshold: Optional[float] = None\n    \"\"\"Used only for `server_vad` mode.\n\n    Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\n    threshold will require louder audio to activate the model, and thus might\n    perform better in noisy environments.\n    \"\"\"\n\n\nclass SemanticVad(BaseModel):\n    type: Literal[\"semantic_vad\"]\n    \"\"\"Type of turn detection, `semantic_vad` to turn on Semantic VAD.\"\"\"\n\n    create_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically generate a response when a VAD stop event\n    occurs.\n    \"\"\"\n\n    eagerness: Optional[Literal[\"low\", \"medium\", \"high\", \"auto\"]] = None\n    \"\"\"Used only for `semantic_vad` mode.\n\n    The eagerness of the model to respond. `low` will wait longer for the user to\n    continue speaking, `high` will respond more quickly. `auto` is the default and\n    is equivalent to `medium`. `low`, `medium`, and `high` have max timeouts of 8s,\n    4s, and 2s respectively.\n    \"\"\"\n\n    interrupt_response: Optional[bool] = None\n    \"\"\"\n    Whether or not to automatically interrupt any ongoing response with output to\n    the default conversation (i.e. `conversation` of `auto`) when a VAD start event\n    occurs.\n    \"\"\"\n\n\nRealtimeAudioInputTurnDetection",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_audio_input_turn_detection.py",
        "start": 9,
        "end": 96,
        "startLoc": {
          "line": 9,
          "column": 34,
          "position": 58
        },
        "endLoc": {
          "line": 96,
          "column": 32,
          "position": 277
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_transcription_session_audio_input_turn_detection.py",
        "start": 9,
        "end": 96,
        "startLoc": {
          "line": 9,
          "column": 54,
          "position": 58
        },
        "endLoc": {
          "line": 96,
          "column": 52,
          "position": 277
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"RateLimitsUpdatedEvent\", \"RateLimit\"]\n\n\nclass RateLimit(BaseModel):\n    limit: Optional[int] = None\n    \"\"\"The maximum allowed value for the rate limit.\"\"\"\n\n    name: Optional[Literal[\"requests\", \"tokens\"]] = None\n    \"\"\"The name of the rate limit (`requests`, `tokens`).\"\"\"\n\n    remaining: Optional[int] = None\n    \"\"\"The remaining value before the limit is reached.\"\"\"\n\n    reset_seconds: Optional[float] = None\n    \"\"\"Seconds until the rate limit resets.\"\"\"\n\n\nclass RateLimitsUpdatedEvent(BaseModel):\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    rate_limits: List[RateLimit]\n    \"\"\"List of rate limit information.\"\"\"\n\n    type: Literal[\"rate_limits.updated\"]\n    \"\"\"The event type, must be `rate_limits.updated`.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/rate_limits_updated_event.py",
        "start": 6,
        "end": 33,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 25
        },
        "endLoc": {
          "line": 33,
          "column": 53,
          "position": 172
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/rate_limits_updated_event.py",
        "start": 6,
        "end": 33,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 26
        },
        "endLoc": {
          "line": 33,
          "column": 53,
          "position": 173
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"ConversationItemInputAudioTranscriptionFailedEvent\", \"Error\"]\n\n\nclass Error(BaseModel):\n    code: Optional[str] = None\n    \"\"\"Error code, if any.\"\"\"\n\n    message: Optional[str] = None\n    \"\"\"A human-readable error message.\"\"\"\n\n    param: Optional[str] = None\n    \"\"\"Parameter related to the error, if any.\"\"\"\n\n    type: Optional[str] = None\n    \"\"\"The type of error.\"\"\"\n\n\nclass ConversationItemInputAudioTranscriptionFailedEvent(BaseModel):\n    content_index: int\n    \"\"\"The index of the content part containing the audio.\"\"\"\n\n    error: Error\n    \"\"\"Details of the transcription error.\"\"\"\n\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    item_id: str\n    \"\"\"The ID of the user message item.\"\"\"\n\n    type: Literal[\"conversation.item.input_audio_transcription.failed\"]\n    \"\"\"The event type, must be `conversation.item.input_audio_transcription.failed`.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_failed_event.py",
        "start": 6,
        "end": 39,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 39,
          "column": 84,
          "position": 180
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_input_audio_transcription_failed_event.py",
        "start": 6,
        "end": 39,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 23
        },
        "endLoc": {
          "line": 39,
          "column": 84,
          "position": 181
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": ",\n]\n\n\nclass UsageTranscriptTextUsageTokensInputTokenDetails(BaseModel):\n    audio_tokens: Optional[int] = None\n    \"\"\"Number of audio tokens billed for this request.\"\"\"\n\n    text_tokens: Optional[int] = None\n    \"\"\"Number of text tokens billed for this request.\"\"\"\n\n\nclass UsageTranscriptTextUsageTokens(BaseModel):\n    input_tokens: int\n    \"\"\"Number of input tokens billed for this request.\"\"\"\n\n    output_tokens: int\n    \"\"\"Number of output tokens generated.\"\"\"\n\n    total_tokens: int\n    \"\"\"Total number of tokens used (input + output).\"\"\"\n\n    type: Literal[\"tokens\"]\n    \"\"\"The type of the usage object. Always `tokens` for this variant.\"\"\"\n\n    input_token_details: Optional[UsageTranscriptTextUsageTokensInputTokenDetails] = None\n    \"\"\"Details about the input tokens billed for this request.\"\"\"\n\n\nclass UsageTranscriptTextUsageDuration(BaseModel):\n    seconds: float\n    \"\"\"Duration of the input audio in seconds.\"\"\"\n\n    type: Literal[\"duration\"]\n    \"\"\"The type of the usage object. Always `duration` for this variant.\"\"\"\n\n\nUsage: TypeAlias = Union[UsageTranscriptTextUsageTokens, UsageTranscriptTextUsageDuration]\n\n\nclass ConversationItemInputAudioTranscriptionCompletedEvent",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/conversation_item_input_audio_transcription_completed_event.py",
        "start": 14,
        "end": 54,
        "startLoc": {
          "line": 14,
          "column": 35,
          "position": 74
        },
        "endLoc": {
          "line": 54,
          "column": 54,
          "position": 243
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_item_input_audio_transcription_completed_event.py",
        "start": 14,
        "end": 54,
        "startLoc": {
          "line": 14,
          "column": 10,
          "position": 70
        },
        "endLoc": {
          "line": 54,
          "column": 8,
          "position": 239
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "..._models import BaseModel\n\n__all__ = [\"ConversationCreatedEvent\", \"Conversation\"]\n\n\nclass Conversation(BaseModel):\n    id: Optional[str] = None\n    \"\"\"The unique ID of the conversation.\"\"\"\n\n    object: Optional[Literal[\"realtime.conversation\"]] = None\n    \"\"\"The object type, must be `realtime.conversation`.\"\"\"\n\n\nclass ConversationCreatedEvent(BaseModel):\n    conversation: Conversation\n    \"\"\"The conversation resource.\"\"\"\n\n    event_id: str\n    \"\"\"The unique ID of the server event.\"\"\"\n\n    type: Literal[\"conversation.created\"]\n    \"\"\"The event type, must be `conversation.created`.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/conversation_created_event.py",
        "start": 6,
        "end": 27,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 22
        },
        "endLoc": {
          "line": 27,
          "column": 54,
          "position": 129
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/realtime/conversation_created_event.py",
        "start": 6,
        "end": 27,
        "startLoc": {
          "line": 6,
          "column": 2,
          "position": 23
        },
        "endLoc": {
          "line": 27,
          "column": 54,
          "position": 130
        }
      }
    },
    {
      "format": "python",
      "lines": 94,
      "fragment": "(TypedDict, total=False):\n    type: Required[Literal[\"realtime\"]]\n    \"\"\"The type of session to create. Always `realtime` for the Realtime API.\"\"\"\n\n    audio: RealtimeAudioConfigParam\n    \"\"\"Configuration for input and output audio.\"\"\"\n\n    include: List[Literal[\"item.input_audio_transcription.logprobs\"]]\n    \"\"\"Additional fields to include in server outputs.\n\n    `item.input_audio_transcription.logprobs`: Include logprobs for input audio\n    transcription.\n    \"\"\"\n\n    instructions: str\n    \"\"\"The default system instructions (i.e.\n\n    system message) prepended to model calls. This field allows the client to guide\n    the model on desired responses. The model can be instructed on response content\n    and format, (e.g. \"be extremely succinct\", \"act friendly\", \"here are examples of\n    good responses\") and on audio behavior (e.g. \"talk quickly\", \"inject emotion\n    into your voice\", \"laugh frequently\"). The instructions are not guaranteed to be\n    followed by the model, but they provide guidance to the model on the desired\n    behavior.\n\n    Note that the server sets default instructions which will be used if this field\n    is not set and are visible in the `session.created` event at the start of the\n    session.\n    \"\"\"\n\n    max_output_tokens: Union[int, Literal[\"inf\"]]\n    \"\"\"\n    Maximum number of output tokens for a single assistant response, inclusive of\n    tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n    `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n    \"\"\"\n\n    model: Union[\n        str,\n        Literal[\n            \"gpt-realtime\",\n            \"gpt-realtime-2025-08-28\",\n            \"gpt-4o-realtime-preview\",\n            \"gpt-4o-realtime-preview-2024-10-01\",\n            \"gpt-4o-realtime-preview-2024-12-17\",\n            \"gpt-4o-realtime-preview-2025-06-03\",\n            \"gpt-4o-mini-realtime-preview\",\n            \"gpt-4o-mini-realtime-preview-2024-12-17\",\n            \"gpt-realtime-mini\",\n            \"gpt-realtime-mini-2025-10-06\",\n            \"gpt-audio-mini\",\n            \"gpt-audio-mini-2025-10-06\",\n        ],\n    ]\n    \"\"\"The Realtime model used for this session.\"\"\"\n\n    output_modalities: List[Literal[\"text\", \"audio\"]]\n    \"\"\"The set of modalities the model can respond with.\n\n    It defaults to `[\"audio\"]`, indicating that the model will respond with audio\n    plus a transcript. `[\"text\"]` can be used to make the model respond with text\n    only. It is not possible to request both `text` and `audio` at the same time.\n    \"\"\"\n\n    prompt: Optional[ResponsePromptParam]\n    \"\"\"\n    Reference to a prompt template and its variables.\n    [Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).\n    \"\"\"\n\n    tool_choice: RealtimeToolChoiceConfigParam\n    \"\"\"How the model chooses tools.\n\n    Provide one of the string modes or force a specific function/MCP tool.\n    \"\"\"\n\n    tools: RealtimeToolsConfigParam\n    \"\"\"Tools available to the model.\"\"\"\n\n    tracing: Optional[RealtimeTracingConfigParam]\n    \"\"\"\n    Realtime API can write session traces to the\n    [Traces Dashboard](/logs?api=traces). Set to null to disable tracing. Once\n    tracing is enabled for a session, the configuration cannot be modified.\n\n    `auto` will create a trace for the session with default values for the workflow\n    name, group id, and metadata.\n    \"\"\"\n\n    truncation: RealtimeTruncationParam\n    \"\"\"\n    Controls how the realtime conversation is truncated prior to model inference.\n    The default is `auto`.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/call_accept_params.py",
        "start": 18,
        "end": 111,
        "startLoc": {
          "line": 18,
          "column": 17,
          "position": 112
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 514
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/realtime/realtime_session_create_request_param.py",
        "start": 18,
        "end": 111,
        "startLoc": {
          "line": 18,
          "column": 34,
          "position": 112
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 514
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "]\n\n\nclass InputContentOutputText(TypedDict, total=False):\n    text: Required[str]\n    \"\"\"The text output from the model.\"\"\"\n\n    type: Required[Literal[\"output_text\"]]\n    \"\"\"The type of the output text. Always `output_text`.\"\"\"\n\n\nclass InputContentInputImage(TypedDict, total=False):\n    image_url: Required[str]\n    \"\"\"The URL of the image input.\"\"\"\n\n    type: Required[Literal[\"input_image\"]]\n    \"\"\"The type of the image input. Always `input_image`.\"\"\"\n\n    detail: str\n    \"\"\"The detail level of the image to be sent to the model.\n\n    One of `high`, `low`, or `auto`. Defaults to `auto`.\n    \"\"\"\n\n\nInputContent: TypeAlias = Union[\n    str,\n    ResponseInputTextParam,\n    InputContentOutputText,\n    InputContentInputImage,\n    ResponseInputAudioParam,\n    Iterable[object],\n]\n\n\nclass Input(TypedDict, total=False):\n    content: Required[InputContent]\n    \"\"\"Inputs to the model - can contain template strings.\"\"\"\n\n    role: Required[Literal[\"user\", \"assistant\", \"system\", \"developer\"]]\n    \"\"\"The role of the message input.\n\n    One of `user`, `assistant`, `system`, or `developer`.\n    \"\"\"\n\n    type: Literal[\"message\"]\n    \"\"\"The type of the message input. Always `message`.\"\"\"\n\n\nclass LabelModelGraderParam",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/graders/label_model_grader_param.py",
        "start": 12,
        "end": 61,
        "startLoc": {
          "line": 12,
          "column": 25,
          "position": 95
        },
        "endLoc": {
          "line": 61,
          "column": 22,
          "position": 303
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/graders/score_model_grader_param.py",
        "start": 19,
        "end": 68,
        "startLoc": {
          "line": 19,
          "column": 1,
          "position": 111
        },
        "endLoc": {
          "line": 68,
          "column": 15,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "]\n\n\nclass InputContentOutputText(BaseModel):\n    text: str\n    \"\"\"The text output from the model.\"\"\"\n\n    type: Literal[\"output_text\"]\n    \"\"\"The type of the output text. Always `output_text`.\"\"\"\n\n\nclass InputContentInputImage(BaseModel):\n    image_url: str\n    \"\"\"The URL of the image input.\"\"\"\n\n    type: Literal[\"input_image\"]\n    \"\"\"The type of the image input. Always `input_image`.\"\"\"\n\n    detail: Optional[str] = None\n    \"\"\"The detail level of the image to be sent to the model.\n\n    One of `high`, `low`, or `auto`. Defaults to `auto`.\n    \"\"\"\n\n\nInputContent: TypeAlias = Union[\n    str, ResponseInputText, InputContentOutputText, InputContentInputImage, ResponseInputAudio, List[object]\n]\n\n\nclass Input(BaseModel):\n    content: InputContent\n    \"\"\"Inputs to the model - can contain template strings.\"\"\"\n\n    role: Literal[\"user\", \"assistant\", \"system\", \"developer\"]\n    \"\"\"The role of the message input.\n\n    One of `user`, `assistant`, `system`, or `developer`.\n    \"\"\"\n\n    type: Optional[Literal[\"message\"]] = None\n    \"\"\"The type of the message input. Always `message`.\"\"\"\n\n\nclass LabelModelGrader",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/graders/label_model_grader.py",
        "start": 10,
        "end": 54,
        "startLoc": {
          "line": 10,
          "column": 25,
          "position": 83
        },
        "endLoc": {
          "line": 54,
          "column": 17,
          "position": 266
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/graders/score_model_grader.py",
        "start": 18,
        "end": 62,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 107
        },
        "endLoc": {
          "line": 62,
          "column": 15,
          "position": 290
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "ID of an uploaded file that contains training data.\n\n    See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n    for how to upload a file.\n\n    Your dataset must be formatted as a JSONL file. Additionally, you must upload\n    your file with the purpose `fine-tune`.\n\n    The contents of the file should differ depending on if the model uses the\n    [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input),\n    [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n    format, or if the fine-tuning method uses the\n    [preference](https://platform.openai.com/docs/api-reference/fine-tuning/preference-input)\n    format.\n\n    See the\n    [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization)\n    for more details.\n    \"\"\"\n\n    hyperparameters: Hyperparameters\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_create_params.py",
        "start": 26,
        "end": 47,
        "startLoc": {
          "line": 26,
          "column": 2,
          "position": 170
        },
        "endLoc": {
          "line": 47,
          "column": 8,
          "position": 463
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 93,
        "end": 112,
        "startLoc": {
          "line": 93,
          "column": 2,
          "position": 622
        },
        "endLoc": {
          "line": 112,
          "column": 16,
          "position": 916
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ".\"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n    method: Method\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_create_params.py",
        "start": 53,
        "end": 66,
        "startLoc": {
          "line": 53,
          "column": 4,
          "position": 545
        },
        "endLoc": {
          "line": 66,
          "column": 8,
          "position": 673
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 82,
        "end": 96,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 651
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "The ID of an uploaded file that contains validation data.\n\n    If you provide this file, the data is used to generate validation metrics\n    periodically during fine-tuning. These metrics can be viewed in the fine-tuning\n    results file. The same data should not be present in both train and validation\n    files.\n\n    Your dataset must be formatted as a JSONL file. You must upload your file with\n    the purpose `fine-tune`.\n\n    See the\n    [fine-tuning guide](https://platform.openai.com/docs/guides/model-optimization)\n    for more details.\n    \"\"\"\n\n\nclass Hyperparameters(TypedDict, total=False):\n    batch_size: Union[Literal[\"auto\"], int]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/fine_tuning/job_create_params.py",
        "start": 86,
        "end": 104,
        "startLoc": {
          "line": 86,
          "column": 8,
          "position": 863
        },
        "endLoc": {
          "line": 104,
          "column": 8,
          "position": 1060
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 136,
        "end": 150,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 1333
        },
        "endLoc": {
          "line": 150,
          "column": 14,
          "position": 1531
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom ..._utils import PropertyInfo\nfrom ..._models import BaseModel\nfrom .eval_api_error import EvalAPIError\nfrom ..responses.tool import Tool\nfrom ..shared.metadata import Metadata\nfrom ..shared.reasoning_effort import ReasoningEffort\nfrom ..responses.response_input_text import ResponseInputText\nfrom ..responses.response_input_audio import ResponseInputAudio\nfrom .create_eval_jsonl_run_data_source import CreateEvalJSONLRunDataSource\nfrom ..responses.response_format_text_config import ResponseFormatTextConfig\nfrom .create_eval_completions_run_data_source import CreateEvalCompletionsRunDataSource\n\n__all__ = [\n    \"RunListResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_list_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 18,
          "position": 177
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 22,
          "position": 177
        }
      }
    },
    {
      "format": "python",
      "lines": 341,
      "fragment": ",\n    \"DataSource\",\n    \"DataSourceResponses\",\n    \"DataSourceResponsesSource\",\n    \"DataSourceResponsesSourceFileContent\",\n    \"DataSourceResponsesSourceFileContentContent\",\n    \"DataSourceResponsesSourceFileID\",\n    \"DataSourceResponsesSourceResponses\",\n    \"DataSourceResponsesInputMessages\",\n    \"DataSourceResponsesInputMessagesTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateChatMessage\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItem\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage\",\n    \"DataSourceResponsesInputMessagesItemReference\",\n    \"DataSourceResponsesSamplingParams\",\n    \"DataSourceResponsesSamplingParamsText\",\n    \"PerModelUsage\",\n    \"PerTestingCriteriaResult\",\n    \"ResultCounts\",\n]\n\n\nclass DataSourceResponsesSourceFileContentContent(BaseModel):\n    item: Dict[str, object]\n\n    sample: Optional[Dict[str, object]] = None\n\n\nclass DataSourceResponsesSourceFileContent(BaseModel):\n    content: List[DataSourceResponsesSourceFileContentContent]\n    \"\"\"The content of the jsonl file.\"\"\"\n\n    type: Literal[\"file_content\"]\n    \"\"\"The type of jsonl source. Always `file_content`.\"\"\"\n\n\nclass DataSourceResponsesSourceFileID(BaseModel):\n    id: str\n    \"\"\"The identifier of the file.\"\"\"\n\n    type: Literal[\"file_id\"]\n    \"\"\"The type of jsonl source. Always `file_id`.\"\"\"\n\n\nclass DataSourceResponsesSourceResponses(BaseModel):\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    created_after: Optional[int] = None\n    \"\"\"Only include items created after this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    created_before: Optional[int] = None\n    \"\"\"Only include items created before this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    instructions_search: Optional[str] = None\n    \"\"\"Optional string to search the 'instructions' field.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    metadata: Optional[object] = None\n    \"\"\"Metadata filter for the responses.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to find responses for.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"Sampling temperature. This is a query parameter used to select responses.\"\"\"\n\n    tools: Optional[List[str]] = None\n    \"\"\"List of tool names. This is a query parameter used to select responses.\"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"Nucleus sampling parameter. This is a query parameter used to select responses.\"\"\"\n\n    users: Optional[List[str]] = None\n    \"\"\"List of user identifiers. This is a query parameter used to select responses.\"\"\"\n\n\nDataSourceResponsesSource: TypeAlias = Annotated[\n    Union[DataSourceResponsesSourceFileContent, DataSourceResponsesSourceFileID, DataSourceResponsesSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateChatMessage(BaseModel):\n    content: str\n    \"\"\"The content of the message.\"\"\"\n\n    role: str\n    \"\"\"The role of the message (e.g. \"system\", \"assistant\", \"user\").\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText(BaseModel):\n    text: str\n    \"\"\"The text output from the model.\"\"\"\n\n    type: Literal[\"output_text\"]\n    \"\"\"The type of the output text. Always `output_text`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage(BaseModel):\n    image_url: str\n    \"\"\"The URL of the image input.\"\"\"\n\n    type: Literal[\"input_image\"]\n    \"\"\"The type of the image input. Always `input_image`.\"\"\"\n\n    detail: Optional[str] = None\n    \"\"\"The detail level of the image to be sent to the model.\n\n    One of `high`, `low`, or `auto`. Defaults to `auto`.\n    \"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplateEvalItemContent: TypeAlias = Union[\n    str,\n    ResponseInputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage,\n    ResponseInputAudio,\n    List[object],\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItem(BaseModel):\n    content: DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\n    \"\"\"Inputs to the model - can contain template strings.\"\"\"\n\n    role: Literal[\"user\", \"assistant\", \"system\", \"developer\"]\n    \"\"\"The role of the message input.\n\n    One of `user`, `assistant`, `system`, or `developer`.\n    \"\"\"\n\n    type: Optional[Literal[\"message\"]] = None\n    \"\"\"The type of the message input. Always `message`.\"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplate: TypeAlias = Union[\n    DataSourceResponsesInputMessagesTemplateTemplateChatMessage,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItem,\n]\n\n\nclass DataSourceResponsesInputMessagesTemplate(BaseModel):\n    template: List[DataSourceResponsesInputMessagesTemplateTemplate]\n    \"\"\"A list of chat messages forming the prompt or context.\n\n    May include variable references to the `item` namespace, ie {{item.name}}.\n    \"\"\"\n\n    type: Literal[\"template\"]\n    \"\"\"The type of input messages. Always `template`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesItemReference(BaseModel):\n    item_reference: str\n    \"\"\"A reference to a variable in the `item` namespace. Ie, \"item.name\" \"\"\"\n\n    type: Literal[\"item_reference\"]\n    \"\"\"The type of input messages. Always `item_reference`.\"\"\"\n\n\nDataSourceResponsesInputMessages: TypeAlias = Annotated[\n    Union[DataSourceResponsesInputMessagesTemplate, DataSourceResponsesInputMessagesItemReference],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesSamplingParamsText(BaseModel):\n    format: Optional[ResponseFormatTextConfig] = None\n    \"\"\"An object specifying the format that the model must output.\n\n    Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, which\n    ensures the model will match your supplied JSON schema. Learn more in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    The default format is `{ \"type\": \"text\" }` with no additional options.\n\n    **Not recommended for gpt-4o and newer models:**\n\n    Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n    ensures the message the model generates is valid JSON. Using `json_schema` is\n    preferred for models that support it.\n    \"\"\"\n\n\nclass DataSourceResponsesSamplingParams(BaseModel):\n    max_completion_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens in the generated output.\"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    seed: Optional[int] = None\n    \"\"\"A seed value to initialize the randomness, during sampling.\"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"A higher temperature increases randomness in the outputs.\"\"\"\n\n    text: Optional[DataSourceResponsesSamplingParamsText] = None\n    \"\"\"Configuration options for a text response from the model.\n\n    Can be plain text or structured JSON data. Learn more:\n\n    - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n    - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n    \"\"\"\n\n    tools: Optional[List[Tool]] = None\n    \"\"\"An array of tools the model may call while generating a response.\n\n    You can specify which tool to use by setting the `tool_choice` parameter.\n\n    The two categories of tools you can provide the model are:\n\n    - **Built-in tools**: Tools that are provided by OpenAI that extend the model's\n      capabilities, like\n      [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n      [file search](https://platform.openai.com/docs/guides/tools-file-search).\n      Learn more about\n      [built-in tools](https://platform.openai.com/docs/guides/tools).\n    - **Function calls (custom tools)**: Functions that are defined by you, enabling\n      the model to call your own code. Learn more about\n      [function calling](https://platform.openai.com/docs/guides/function-calling).\n    \"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\"\"\"\n\n\nclass DataSourceResponses(BaseModel):\n    source: DataSourceResponsesSource\n    \"\"\"Determines what populates the `item` namespace in this run's data source.\"\"\"\n\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    input_messages: Optional[DataSourceResponsesInputMessages] = None\n    \"\"\"Used when sampling from a model.\n\n    Dictates the structure of the messages passed into the model. Can either be a\n    reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template\n    with variable references to the `item` namespace.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to use for generating completions (e.g. \"o3-mini\").\"\"\"\n\n    sampling_params: Optional[DataSourceResponsesSamplingParams] = None\n\n\nDataSource: TypeAlias = Annotated[\n    Union[CreateEvalJSONLRunDataSource, CreateEvalCompletionsRunDataSource, DataSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass PerModelUsage(BaseModel):\n    cached_tokens: int\n    \"\"\"The number of tokens retrieved from cache.\"\"\"\n\n    completion_tokens: int\n    \"\"\"The number of completion tokens generated.\"\"\"\n\n    invocation_count: int\n    \"\"\"The number of invocations.\"\"\"\n\n    run_model_name: str = FieldInfo(alias=\"model_name\")\n    \"\"\"The name of the model.\"\"\"\n\n    prompt_tokens: int\n    \"\"\"The number of prompt tokens used.\"\"\"\n\n    total_tokens: int\n    \"\"\"The total number of tokens used.\"\"\"\n\n\nclass PerTestingCriteriaResult(BaseModel):\n    failed: int\n    \"\"\"Number of tests failed for this criteria.\"\"\"\n\n    passed: int\n    \"\"\"Number of tests passed for this criteria.\"\"\"\n\n    testing_criteria: str\n    \"\"\"A description of the testing criteria.\"\"\"\n\n\nclass ResultCounts(BaseModel):\n    errored: int\n    \"\"\"Number of output items that resulted in an error.\"\"\"\n\n    failed: int\n    \"\"\"Number of output items that failed to pass the evaluation.\"\"\"\n\n    passed: int\n    \"\"\"Number of output items that passed the evaluation.\"\"\"\n\n    total: int\n    \"\"\"Total number of executed output items.\"\"\"\n\n\nclass RunListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_list_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 18,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 16,
          "position": 1386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 22,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 20,
          "position": 1386
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "(BaseModel):\n    id: str\n    \"\"\"Unique identifier for the evaluation run.\"\"\"\n\n    created_at: int\n    \"\"\"Unix timestamp (in seconds) when the evaluation run was created.\"\"\"\n\n    data_source: DataSource\n    \"\"\"Information about the run's data source.\"\"\"\n\n    error: EvalAPIError\n    \"\"\"An object representing an error response from the Eval API.\"\"\"\n\n    eval_id: str\n    \"\"\"The identifier of the associated evaluation.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n    model: str\n    \"\"\"The model that is evaluated, if applicable.\"\"\"\n\n    name: str\n    \"\"\"The name of the evaluation run.\"\"\"\n\n    object: Literal[\"eval.run\"]\n    \"\"\"The type of the object. Always \"eval.run\".\"\"\"\n\n    per_model_usage: List[PerModelUsage]\n    \"\"\"Usage statistics for each model during the evaluation run.\"\"\"\n\n    per_testing_criteria_results: List[PerTestingCriteriaResult]\n    \"\"\"Results per testing criteria applied during the evaluation run.\"\"\"\n\n    report_url: str\n    \"\"\"The URL to the rendered evaluation run report on the UI dashboard.\"\"\"\n\n    result_counts: ResultCounts\n    \"\"\"Counters summarizing the outcomes of the evaluation run.\"\"\"\n\n    status: str\n    \"\"\"The status of the evaluation run.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_list_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 16,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 20,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom ..._utils import PropertyInfo\nfrom ..._models import BaseModel\nfrom .eval_api_error import EvalAPIError\nfrom ..responses.tool import Tool\nfrom ..shared.metadata import Metadata\nfrom ..shared.reasoning_effort import ReasoningEffort\nfrom ..responses.response_input_text import ResponseInputText\nfrom ..responses.response_input_audio import ResponseInputAudio\nfrom .create_eval_jsonl_run_data_source import CreateEvalJSONLRunDataSource\nfrom ..responses.response_format_text_config import ResponseFormatTextConfig\nfrom .create_eval_completions_run_data_source import CreateEvalCompletionsRunDataSource\n\n__all__ = [\n    \"RunCreateResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_create_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 20,
          "position": 177
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 22,
          "position": 177
        }
      }
    },
    {
      "format": "python",
      "lines": 341,
      "fragment": ",\n    \"DataSource\",\n    \"DataSourceResponses\",\n    \"DataSourceResponsesSource\",\n    \"DataSourceResponsesSourceFileContent\",\n    \"DataSourceResponsesSourceFileContentContent\",\n    \"DataSourceResponsesSourceFileID\",\n    \"DataSourceResponsesSourceResponses\",\n    \"DataSourceResponsesInputMessages\",\n    \"DataSourceResponsesInputMessagesTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateChatMessage\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItem\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage\",\n    \"DataSourceResponsesInputMessagesItemReference\",\n    \"DataSourceResponsesSamplingParams\",\n    \"DataSourceResponsesSamplingParamsText\",\n    \"PerModelUsage\",\n    \"PerTestingCriteriaResult\",\n    \"ResultCounts\",\n]\n\n\nclass DataSourceResponsesSourceFileContentContent(BaseModel):\n    item: Dict[str, object]\n\n    sample: Optional[Dict[str, object]] = None\n\n\nclass DataSourceResponsesSourceFileContent(BaseModel):\n    content: List[DataSourceResponsesSourceFileContentContent]\n    \"\"\"The content of the jsonl file.\"\"\"\n\n    type: Literal[\"file_content\"]\n    \"\"\"The type of jsonl source. Always `file_content`.\"\"\"\n\n\nclass DataSourceResponsesSourceFileID(BaseModel):\n    id: str\n    \"\"\"The identifier of the file.\"\"\"\n\n    type: Literal[\"file_id\"]\n    \"\"\"The type of jsonl source. Always `file_id`.\"\"\"\n\n\nclass DataSourceResponsesSourceResponses(BaseModel):\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    created_after: Optional[int] = None\n    \"\"\"Only include items created after this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    created_before: Optional[int] = None\n    \"\"\"Only include items created before this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    instructions_search: Optional[str] = None\n    \"\"\"Optional string to search the 'instructions' field.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    metadata: Optional[object] = None\n    \"\"\"Metadata filter for the responses.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to find responses for.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"Sampling temperature. This is a query parameter used to select responses.\"\"\"\n\n    tools: Optional[List[str]] = None\n    \"\"\"List of tool names. This is a query parameter used to select responses.\"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"Nucleus sampling parameter. This is a query parameter used to select responses.\"\"\"\n\n    users: Optional[List[str]] = None\n    \"\"\"List of user identifiers. This is a query parameter used to select responses.\"\"\"\n\n\nDataSourceResponsesSource: TypeAlias = Annotated[\n    Union[DataSourceResponsesSourceFileContent, DataSourceResponsesSourceFileID, DataSourceResponsesSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateChatMessage(BaseModel):\n    content: str\n    \"\"\"The content of the message.\"\"\"\n\n    role: str\n    \"\"\"The role of the message (e.g. \"system\", \"assistant\", \"user\").\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText(BaseModel):\n    text: str\n    \"\"\"The text output from the model.\"\"\"\n\n    type: Literal[\"output_text\"]\n    \"\"\"The type of the output text. Always `output_text`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage(BaseModel):\n    image_url: str\n    \"\"\"The URL of the image input.\"\"\"\n\n    type: Literal[\"input_image\"]\n    \"\"\"The type of the image input. Always `input_image`.\"\"\"\n\n    detail: Optional[str] = None\n    \"\"\"The detail level of the image to be sent to the model.\n\n    One of `high`, `low`, or `auto`. Defaults to `auto`.\n    \"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplateEvalItemContent: TypeAlias = Union[\n    str,\n    ResponseInputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage,\n    ResponseInputAudio,\n    List[object],\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItem(BaseModel):\n    content: DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\n    \"\"\"Inputs to the model - can contain template strings.\"\"\"\n\n    role: Literal[\"user\", \"assistant\", \"system\", \"developer\"]\n    \"\"\"The role of the message input.\n\n    One of `user`, `assistant`, `system`, or `developer`.\n    \"\"\"\n\n    type: Optional[Literal[\"message\"]] = None\n    \"\"\"The type of the message input. Always `message`.\"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplate: TypeAlias = Union[\n    DataSourceResponsesInputMessagesTemplateTemplateChatMessage,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItem,\n]\n\n\nclass DataSourceResponsesInputMessagesTemplate(BaseModel):\n    template: List[DataSourceResponsesInputMessagesTemplateTemplate]\n    \"\"\"A list of chat messages forming the prompt or context.\n\n    May include variable references to the `item` namespace, ie {{item.name}}.\n    \"\"\"\n\n    type: Literal[\"template\"]\n    \"\"\"The type of input messages. Always `template`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesItemReference(BaseModel):\n    item_reference: str\n    \"\"\"A reference to a variable in the `item` namespace. Ie, \"item.name\" \"\"\"\n\n    type: Literal[\"item_reference\"]\n    \"\"\"The type of input messages. Always `item_reference`.\"\"\"\n\n\nDataSourceResponsesInputMessages: TypeAlias = Annotated[\n    Union[DataSourceResponsesInputMessagesTemplate, DataSourceResponsesInputMessagesItemReference],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesSamplingParamsText(BaseModel):\n    format: Optional[ResponseFormatTextConfig] = None\n    \"\"\"An object specifying the format that the model must output.\n\n    Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, which\n    ensures the model will match your supplied JSON schema. Learn more in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    The default format is `{ \"type\": \"text\" }` with no additional options.\n\n    **Not recommended for gpt-4o and newer models:**\n\n    Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n    ensures the message the model generates is valid JSON. Using `json_schema` is\n    preferred for models that support it.\n    \"\"\"\n\n\nclass DataSourceResponsesSamplingParams(BaseModel):\n    max_completion_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens in the generated output.\"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    seed: Optional[int] = None\n    \"\"\"A seed value to initialize the randomness, during sampling.\"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"A higher temperature increases randomness in the outputs.\"\"\"\n\n    text: Optional[DataSourceResponsesSamplingParamsText] = None\n    \"\"\"Configuration options for a text response from the model.\n\n    Can be plain text or structured JSON data. Learn more:\n\n    - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n    - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n    \"\"\"\n\n    tools: Optional[List[Tool]] = None\n    \"\"\"An array of tools the model may call while generating a response.\n\n    You can specify which tool to use by setting the `tool_choice` parameter.\n\n    The two categories of tools you can provide the model are:\n\n    - **Built-in tools**: Tools that are provided by OpenAI that extend the model's\n      capabilities, like\n      [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n      [file search](https://platform.openai.com/docs/guides/tools-file-search).\n      Learn more about\n      [built-in tools](https://platform.openai.com/docs/guides/tools).\n    - **Function calls (custom tools)**: Functions that are defined by you, enabling\n      the model to call your own code. Learn more about\n      [function calling](https://platform.openai.com/docs/guides/function-calling).\n    \"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\"\"\"\n\n\nclass DataSourceResponses(BaseModel):\n    source: DataSourceResponsesSource\n    \"\"\"Determines what populates the `item` namespace in this run's data source.\"\"\"\n\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    input_messages: Optional[DataSourceResponsesInputMessages] = None\n    \"\"\"Used when sampling from a model.\n\n    Dictates the structure of the messages passed into the model. Can either be a\n    reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template\n    with variable references to the `item` namespace.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to use for generating completions (e.g. \"o3-mini\").\"\"\"\n\n    sampling_params: Optional[DataSourceResponsesSamplingParams] = None\n\n\nDataSource: TypeAlias = Annotated[\n    Union[CreateEvalJSONLRunDataSource, CreateEvalCompletionsRunDataSource, DataSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass PerModelUsage(BaseModel):\n    cached_tokens: int\n    \"\"\"The number of tokens retrieved from cache.\"\"\"\n\n    completion_tokens: int\n    \"\"\"The number of completion tokens generated.\"\"\"\n\n    invocation_count: int\n    \"\"\"The number of invocations.\"\"\"\n\n    run_model_name: str = FieldInfo(alias=\"model_name\")\n    \"\"\"The name of the model.\"\"\"\n\n    prompt_tokens: int\n    \"\"\"The number of prompt tokens used.\"\"\"\n\n    total_tokens: int\n    \"\"\"The total number of tokens used.\"\"\"\n\n\nclass PerTestingCriteriaResult(BaseModel):\n    failed: int\n    \"\"\"Number of tests failed for this criteria.\"\"\"\n\n    passed: int\n    \"\"\"Number of tests passed for this criteria.\"\"\"\n\n    testing_criteria: str\n    \"\"\"A description of the testing criteria.\"\"\"\n\n\nclass ResultCounts(BaseModel):\n    errored: int\n    \"\"\"Number of output items that resulted in an error.\"\"\"\n\n    failed: int\n    \"\"\"Number of output items that failed to pass the evaluation.\"\"\"\n\n    passed: int\n    \"\"\"Number of output items that passed the evaluation.\"\"\"\n\n    total: int\n    \"\"\"Total number of executed output items.\"\"\"\n\n\nclass RunCreateResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_create_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 20,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 18,
          "position": 1386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 22,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 20,
          "position": 1386
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "(BaseModel):\n    id: str\n    \"\"\"Unique identifier for the evaluation run.\"\"\"\n\n    created_at: int\n    \"\"\"Unix timestamp (in seconds) when the evaluation run was created.\"\"\"\n\n    data_source: DataSource\n    \"\"\"Information about the run's data source.\"\"\"\n\n    error: EvalAPIError\n    \"\"\"An object representing an error response from the Eval API.\"\"\"\n\n    eval_id: str\n    \"\"\"The identifier of the associated evaluation.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n    model: str\n    \"\"\"The model that is evaluated, if applicable.\"\"\"\n\n    name: str\n    \"\"\"The name of the evaluation run.\"\"\"\n\n    object: Literal[\"eval.run\"]\n    \"\"\"The type of the object. Always \"eval.run\".\"\"\"\n\n    per_model_usage: List[PerModelUsage]\n    \"\"\"Usage statistics for each model during the evaluation run.\"\"\"\n\n    per_testing_criteria_results: List[PerTestingCriteriaResult]\n    \"\"\"Results per testing criteria applied during the evaluation run.\"\"\"\n\n    report_url: str\n    \"\"\"The URL to the rendered evaluation run report on the UI dashboard.\"\"\"\n\n    result_counts: ResultCounts\n    \"\"\"Counters summarizing the outcomes of the evaluation run.\"\"\"\n\n    status: str\n    \"\"\"The status of the evaluation run.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_create_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 18,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 20,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom ..._utils import PropertyInfo\nfrom ..._models import BaseModel\nfrom .eval_api_error import EvalAPIError\nfrom ..responses.tool import Tool\nfrom ..shared.metadata import Metadata\nfrom ..shared.reasoning_effort import ReasoningEffort\nfrom ..responses.response_input_text import ResponseInputText\nfrom ..responses.response_input_audio import ResponseInputAudio\nfrom .create_eval_jsonl_run_data_source import CreateEvalJSONLRunDataSource\nfrom ..responses.response_format_text_config import ResponseFormatTextConfig\nfrom .create_eval_completions_run_data_source import CreateEvalCompletionsRunDataSource\n\n__all__ = [\n    \"RunCancelResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_cancel_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 20,
          "position": 177
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 1,
        "end": 21,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 21,
          "column": 22,
          "position": 177
        }
      }
    },
    {
      "format": "python",
      "lines": 341,
      "fragment": ",\n    \"DataSource\",\n    \"DataSourceResponses\",\n    \"DataSourceResponsesSource\",\n    \"DataSourceResponsesSourceFileContent\",\n    \"DataSourceResponsesSourceFileContentContent\",\n    \"DataSourceResponsesSourceFileID\",\n    \"DataSourceResponsesSourceResponses\",\n    \"DataSourceResponsesInputMessages\",\n    \"DataSourceResponsesInputMessagesTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplate\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateChatMessage\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItem\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText\",\n    \"DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage\",\n    \"DataSourceResponsesInputMessagesItemReference\",\n    \"DataSourceResponsesSamplingParams\",\n    \"DataSourceResponsesSamplingParamsText\",\n    \"PerModelUsage\",\n    \"PerTestingCriteriaResult\",\n    \"ResultCounts\",\n]\n\n\nclass DataSourceResponsesSourceFileContentContent(BaseModel):\n    item: Dict[str, object]\n\n    sample: Optional[Dict[str, object]] = None\n\n\nclass DataSourceResponsesSourceFileContent(BaseModel):\n    content: List[DataSourceResponsesSourceFileContentContent]\n    \"\"\"The content of the jsonl file.\"\"\"\n\n    type: Literal[\"file_content\"]\n    \"\"\"The type of jsonl source. Always `file_content`.\"\"\"\n\n\nclass DataSourceResponsesSourceFileID(BaseModel):\n    id: str\n    \"\"\"The identifier of the file.\"\"\"\n\n    type: Literal[\"file_id\"]\n    \"\"\"The type of jsonl source. Always `file_id`.\"\"\"\n\n\nclass DataSourceResponsesSourceResponses(BaseModel):\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    created_after: Optional[int] = None\n    \"\"\"Only include items created after this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    created_before: Optional[int] = None\n    \"\"\"Only include items created before this timestamp (inclusive).\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    instructions_search: Optional[str] = None\n    \"\"\"Optional string to search the 'instructions' field.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    metadata: Optional[object] = None\n    \"\"\"Metadata filter for the responses.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to find responses for.\n\n    This is a query parameter used to select responses.\n    \"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"Sampling temperature. This is a query parameter used to select responses.\"\"\"\n\n    tools: Optional[List[str]] = None\n    \"\"\"List of tool names. This is a query parameter used to select responses.\"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"Nucleus sampling parameter. This is a query parameter used to select responses.\"\"\"\n\n    users: Optional[List[str]] = None\n    \"\"\"List of user identifiers. This is a query parameter used to select responses.\"\"\"\n\n\nDataSourceResponsesSource: TypeAlias = Annotated[\n    Union[DataSourceResponsesSourceFileContent, DataSourceResponsesSourceFileID, DataSourceResponsesSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateChatMessage(BaseModel):\n    content: str\n    \"\"\"The content of the message.\"\"\"\n\n    role: str\n    \"\"\"The role of the message (e.g. \"system\", \"assistant\", \"user\").\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText(BaseModel):\n    text: str\n    \"\"\"The text output from the model.\"\"\"\n\n    type: Literal[\"output_text\"]\n    \"\"\"The type of the output text. Always `output_text`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage(BaseModel):\n    image_url: str\n    \"\"\"The URL of the image input.\"\"\"\n\n    type: Literal[\"input_image\"]\n    \"\"\"The type of the image input. Always `input_image`.\"\"\"\n\n    detail: Optional[str] = None\n    \"\"\"The detail level of the image to be sent to the model.\n\n    One of `high`, `low`, or `auto`. Defaults to `auto`.\n    \"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplateEvalItemContent: TypeAlias = Union[\n    str,\n    ResponseInputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentOutputText,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItemContentInputImage,\n    ResponseInputAudio,\n    List[object],\n]\n\n\nclass DataSourceResponsesInputMessagesTemplateTemplateEvalItem(BaseModel):\n    content: DataSourceResponsesInputMessagesTemplateTemplateEvalItemContent\n    \"\"\"Inputs to the model - can contain template strings.\"\"\"\n\n    role: Literal[\"user\", \"assistant\", \"system\", \"developer\"]\n    \"\"\"The role of the message input.\n\n    One of `user`, `assistant`, `system`, or `developer`.\n    \"\"\"\n\n    type: Optional[Literal[\"message\"]] = None\n    \"\"\"The type of the message input. Always `message`.\"\"\"\n\n\nDataSourceResponsesInputMessagesTemplateTemplate: TypeAlias = Union[\n    DataSourceResponsesInputMessagesTemplateTemplateChatMessage,\n    DataSourceResponsesInputMessagesTemplateTemplateEvalItem,\n]\n\n\nclass DataSourceResponsesInputMessagesTemplate(BaseModel):\n    template: List[DataSourceResponsesInputMessagesTemplateTemplate]\n    \"\"\"A list of chat messages forming the prompt or context.\n\n    May include variable references to the `item` namespace, ie {{item.name}}.\n    \"\"\"\n\n    type: Literal[\"template\"]\n    \"\"\"The type of input messages. Always `template`.\"\"\"\n\n\nclass DataSourceResponsesInputMessagesItemReference(BaseModel):\n    item_reference: str\n    \"\"\"A reference to a variable in the `item` namespace. Ie, \"item.name\" \"\"\"\n\n    type: Literal[\"item_reference\"]\n    \"\"\"The type of input messages. Always `item_reference`.\"\"\"\n\n\nDataSourceResponsesInputMessages: TypeAlias = Annotated[\n    Union[DataSourceResponsesInputMessagesTemplate, DataSourceResponsesInputMessagesItemReference],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass DataSourceResponsesSamplingParamsText(BaseModel):\n    format: Optional[ResponseFormatTextConfig] = None\n    \"\"\"An object specifying the format that the model must output.\n\n    Configuring `{ \"type\": \"json_schema\" }` enables Structured Outputs, which\n    ensures the model will match your supplied JSON schema. Learn more in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    The default format is `{ \"type\": \"text\" }` with no additional options.\n\n    **Not recommended for gpt-4o and newer models:**\n\n    Setting to `{ \"type\": \"json_object\" }` enables the older JSON mode, which\n    ensures the message the model generates is valid JSON. Using `json_schema` is\n    preferred for models that support it.\n    \"\"\"\n\n\nclass DataSourceResponsesSamplingParams(BaseModel):\n    max_completion_tokens: Optional[int] = None\n    \"\"\"The maximum number of tokens in the generated output.\"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort] = None\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    seed: Optional[int] = None\n    \"\"\"A seed value to initialize the randomness, during sampling.\"\"\"\n\n    temperature: Optional[float] = None\n    \"\"\"A higher temperature increases randomness in the outputs.\"\"\"\n\n    text: Optional[DataSourceResponsesSamplingParamsText] = None\n    \"\"\"Configuration options for a text response from the model.\n\n    Can be plain text or structured JSON data. Learn more:\n\n    - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n    - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n    \"\"\"\n\n    tools: Optional[List[Tool]] = None\n    \"\"\"An array of tools the model may call while generating a response.\n\n    You can specify which tool to use by setting the `tool_choice` parameter.\n\n    The two categories of tools you can provide the model are:\n\n    - **Built-in tools**: Tools that are provided by OpenAI that extend the model's\n      capabilities, like\n      [web search](https://platform.openai.com/docs/guides/tools-web-search) or\n      [file search](https://platform.openai.com/docs/guides/tools-file-search).\n      Learn more about\n      [built-in tools](https://platform.openai.com/docs/guides/tools).\n    - **Function calls (custom tools)**: Functions that are defined by you, enabling\n      the model to call your own code. Learn more about\n      [function calling](https://platform.openai.com/docs/guides/function-calling).\n    \"\"\"\n\n    top_p: Optional[float] = None\n    \"\"\"An alternative to temperature for nucleus sampling; 1.0 includes all tokens.\"\"\"\n\n\nclass DataSourceResponses(BaseModel):\n    source: DataSourceResponsesSource\n    \"\"\"Determines what populates the `item` namespace in this run's data source.\"\"\"\n\n    type: Literal[\"responses\"]\n    \"\"\"The type of run data source. Always `responses`.\"\"\"\n\n    input_messages: Optional[DataSourceResponsesInputMessages] = None\n    \"\"\"Used when sampling from a model.\n\n    Dictates the structure of the messages passed into the model. Can either be a\n    reference to a prebuilt trajectory (ie, `item.input_trajectory`), or a template\n    with variable references to the `item` namespace.\n    \"\"\"\n\n    model: Optional[str] = None\n    \"\"\"The name of the model to use for generating completions (e.g. \"o3-mini\").\"\"\"\n\n    sampling_params: Optional[DataSourceResponsesSamplingParams] = None\n\n\nDataSource: TypeAlias = Annotated[\n    Union[CreateEvalJSONLRunDataSource, CreateEvalCompletionsRunDataSource, DataSourceResponses],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass PerModelUsage(BaseModel):\n    cached_tokens: int\n    \"\"\"The number of tokens retrieved from cache.\"\"\"\n\n    completion_tokens: int\n    \"\"\"The number of completion tokens generated.\"\"\"\n\n    invocation_count: int\n    \"\"\"The number of invocations.\"\"\"\n\n    run_model_name: str = FieldInfo(alias=\"model_name\")\n    \"\"\"The name of the model.\"\"\"\n\n    prompt_tokens: int\n    \"\"\"The number of prompt tokens used.\"\"\"\n\n    total_tokens: int\n    \"\"\"The total number of tokens used.\"\"\"\n\n\nclass PerTestingCriteriaResult(BaseModel):\n    failed: int\n    \"\"\"Number of tests failed for this criteria.\"\"\"\n\n    passed: int\n    \"\"\"Number of tests passed for this criteria.\"\"\"\n\n    testing_criteria: str\n    \"\"\"A description of the testing criteria.\"\"\"\n\n\nclass ResultCounts(BaseModel):\n    errored: int\n    \"\"\"Number of output items that resulted in an error.\"\"\"\n\n    failed: int\n    \"\"\"Number of output items that failed to pass the evaluation.\"\"\"\n\n    passed: int\n    \"\"\"Number of output items that passed the evaluation.\"\"\"\n\n    total: int\n    \"\"\"Total number of executed output items.\"\"\"\n\n\nclass RunCancelResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_cancel_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 20,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 18,
          "position": 1386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 21,
        "end": 361,
        "startLoc": {
          "line": 21,
          "column": 22,
          "position": 178
        },
        "endLoc": {
          "line": 361,
          "column": 20,
          "position": 1386
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "(BaseModel):\n    id: str\n    \"\"\"Unique identifier for the evaluation run.\"\"\"\n\n    created_at: int\n    \"\"\"Unix timestamp (in seconds) when the evaluation run was created.\"\"\"\n\n    data_source: DataSource\n    \"\"\"Information about the run's data source.\"\"\"\n\n    error: EvalAPIError\n    \"\"\"An object representing an error response from the Eval API.\"\"\"\n\n    eval_id: str\n    \"\"\"The identifier of the associated evaluation.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n    model: str\n    \"\"\"The model that is evaluated, if applicable.\"\"\"\n\n    name: str\n    \"\"\"The name of the evaluation run.\"\"\"\n\n    object: Literal[\"eval.run\"]\n    \"\"\"The type of the object. Always \"eval.run\".\"\"\"\n\n    per_model_usage: List[PerModelUsage]\n    \"\"\"Usage statistics for each model during the evaluation run.\"\"\"\n\n    per_testing_criteria_results: List[PerTestingCriteriaResult]\n    \"\"\"Results per testing criteria applied during the evaluation run.\"\"\"\n\n    report_url: str\n    \"\"\"The URL to the rendered evaluation run report on the UI dashboard.\"\"\"\n\n    result_counts: ResultCounts\n    \"\"\"Counters summarizing the outcomes of the evaluation run.\"\"\"\n\n    status: str\n    \"\"\"The status of the evaluation run.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_cancel_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 18,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/run_retrieve_response.py",
        "start": 361,
        "end": 409,
        "startLoc": {
          "line": 361,
          "column": 20,
          "position": 1387
        },
        "endLoc": {
          "line": 409,
          "column": 40,
          "position": 1545
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": ",\n]\n\n\nclass SourceFileContentContent(TypedDict, total=False):\n    item: Required[Dict[str, object]]\n\n    sample: Dict[str, object]\n\n\nclass SourceFileContent(TypedDict, total=False):\n    content: Required[Iterable[SourceFileContentContent]]\n    \"\"\"The content of the jsonl file.\"\"\"\n\n    type: Required[Literal[\"file_content\"]]\n    \"\"\"The type of jsonl source. Always `file_content`.\"\"\"\n\n\nclass SourceFileID(TypedDict, total=False):\n    id: Required[str]\n    \"\"\"The identifier of the file.\"\"\"\n\n    type: Required[Literal[\"file_id\"]]\n    \"\"\"The type of jsonl source. Always `file_id`.\"\"\"\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/create_eval_completions_run_data_source_param.py",
        "start": 34,
        "end": 60,
        "startLoc": {
          "line": 34,
          "column": 31,
          "position": 224
        },
        "endLoc": {
          "line": 60,
          "column": 6,
          "position": 362
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/create_eval_jsonl_run_data_source_param.py",
        "start": 13,
        "end": 39,
        "startLoc": {
          "line": 13,
          "column": 15,
          "position": 68
        },
        "endLoc": {
          "line": 39,
          "column": 7,
          "position": 206
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "]\n\n\nclass SourceFileContentContent(BaseModel):\n    item: Dict[str, object]\n\n    sample: Optional[Dict[str, object]] = None\n\n\nclass SourceFileContent(BaseModel):\n    content: List[SourceFileContentContent]\n    \"\"\"The content of the jsonl file.\"\"\"\n\n    type: Literal[\"file_content\"]\n    \"\"\"The type of jsonl source. Always `file_content`.\"\"\"\n\n\nclass SourceFileID(BaseModel):\n    id: str\n    \"\"\"The identifier of the file.\"\"\"\n\n    type: Literal[\"file_id\"]\n    \"\"\"The type of jsonl source. Always `file_id`.\"\"\"\n\n\nclass",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/create_eval_completions_run_data_source.py",
        "start": 35,
        "end": 60,
        "startLoc": {
          "line": 35,
          "column": 1,
          "position": 236
        },
        "endLoc": {
          "line": 60,
          "column": 6,
          "position": 349
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/evals/create_eval_jsonl_run_data_source.py",
        "start": 9,
        "end": 34,
        "startLoc": {
          "line": 9,
          "column": 15,
          "position": 76
        },
        "endLoc": {
          "line": 34,
          "column": 7,
          "position": 189
        }
      }
    },
    {
      "format": "python",
      "lines": 180,
      "fragment": ",\n    \"ImageGenerationCall\",\n    \"LocalShellCall\",\n    \"LocalShellCallAction\",\n    \"LocalShellCallOutput\",\n    \"McpListTools\",\n    \"McpListToolsTool\",\n    \"McpApprovalRequest\",\n    \"McpApprovalResponse\",\n    \"McpCall\",\n]\n\n\nclass ImageGenerationCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the image generation call.\"\"\"\n\n    result: Optional[str] = None\n    \"\"\"The generated image encoded in base64.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"generating\", \"failed\"]\n    \"\"\"The status of the image generation call.\"\"\"\n\n    type: Literal[\"image_generation_call\"]\n    \"\"\"The type of the image generation call. Always `image_generation_call`.\"\"\"\n\n\nclass LocalShellCallAction(BaseModel):\n    command: List[str]\n    \"\"\"The command to run.\"\"\"\n\n    env: Dict[str, str]\n    \"\"\"Environment variables to set for the command.\"\"\"\n\n    type: Literal[\"exec\"]\n    \"\"\"The type of the local shell action. Always `exec`.\"\"\"\n\n    timeout_ms: Optional[int] = None\n    \"\"\"Optional timeout in milliseconds for the command.\"\"\"\n\n    user: Optional[str] = None\n    \"\"\"Optional user to run the command as.\"\"\"\n\n    working_directory: Optional[str] = None\n    \"\"\"Optional working directory to run the command in.\"\"\"\n\n\nclass LocalShellCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the local shell call.\"\"\"\n\n    action: LocalShellCallAction\n    \"\"\"Execute a shell command on the server.\"\"\"\n\n    call_id: str\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    status: Literal[\"in_progress\", \"completed\", \"incomplete\"]\n    \"\"\"The status of the local shell call.\"\"\"\n\n    type: Literal[\"local_shell_call\"]\n    \"\"\"The type of the local shell call. Always `local_shell_call`.\"\"\"\n\n\nclass LocalShellCallOutput(BaseModel):\n    id: str\n    \"\"\"The unique ID of the local shell tool call generated by the model.\"\"\"\n\n    output: str\n    \"\"\"A JSON string of the output of the local shell tool call.\"\"\"\n\n    type: Literal[\"local_shell_call_output\"]\n    \"\"\"The type of the local shell tool call output. Always `local_shell_call_output`.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\"]] = None\n    \"\"\"The status of the item. One of `in_progress`, `completed`, or `incomplete`.\"\"\"\n\n\nclass McpListToolsTool(BaseModel):\n    input_schema: object\n    \"\"\"The JSON schema describing the tool's input.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool.\"\"\"\n\n    annotations: Optional[object] = None\n    \"\"\"Additional annotations about the tool.\"\"\"\n\n    description: Optional[str] = None\n    \"\"\"The description of the tool.\"\"\"\n\n\nclass McpListTools(BaseModel):\n    id: str\n    \"\"\"The unique ID of the list.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server.\"\"\"\n\n    tools: List[McpListToolsTool]\n    \"\"\"The tools available on the server.\"\"\"\n\n    type: Literal[\"mcp_list_tools\"]\n    \"\"\"The type of the item. Always `mcp_list_tools`.\"\"\"\n\n    error: Optional[str] = None\n    \"\"\"Error message if the server could not list tools.\"\"\"\n\n\nclass McpApprovalRequest(BaseModel):\n    id: str\n    \"\"\"The unique ID of the approval request.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of arguments for the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool to run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server making the request.\"\"\"\n\n    type: Literal[\"mcp_approval_request\"]\n    \"\"\"The type of the item. Always `mcp_approval_request`.\"\"\"\n\n\nclass McpApprovalResponse(BaseModel):\n    id: str\n    \"\"\"The unique ID of the approval response\"\"\"\n\n    approval_request_id: str\n    \"\"\"The ID of the approval request being answered.\"\"\"\n\n    approve: bool\n    \"\"\"Whether the request was approved.\"\"\"\n\n    type: Literal[\"mcp_approval_response\"]\n    \"\"\"The type of the item. Always `mcp_approval_response`.\"\"\"\n\n    reason: Optional[str] = None\n    \"\"\"Optional reason for the decision.\"\"\"\n\n\nclass McpCall(BaseModel):\n    id: str\n    \"\"\"The unique ID of the tool call.\"\"\"\n\n    arguments: str\n    \"\"\"A JSON string of the arguments passed to the tool.\"\"\"\n\n    name: str\n    \"\"\"The name of the tool that was run.\"\"\"\n\n    server_label: str\n    \"\"\"The label of the MCP server running the tool.\"\"\"\n\n    type: Literal[\"mcp_call\"]\n    \"\"\"The type of the item. Always `mcp_call`.\"\"\"\n\n    approval_request_id: Optional[str] = None\n    \"\"\"\n    Unique identifier for the MCP tool call approval request. Include this value in\n    a subsequent `mcp_approval_response` input to approve or reject the\n    corresponding tool call.\n    \"\"\"\n\n    error: Optional[str] = None\n    \"\"\"The error from the tool call, if any.\"\"\"\n\n    output: Optional[str] = None\n    \"\"\"The output from the tool call.\"\"\"\n\n    status: Optional[Literal[\"in_progress\", \"completed\", \"incomplete\", \"calling\", \"failed\"]] = None\n    \"\"\"The status of the tool call.\n\n    One of `in_progress`, `completed`, `incomplete`, `calling`, or `failed`.\n    \"\"\"\n\n\nConversationItem",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/conversations/conversation_item.py",
        "start": 21,
        "end": 200,
        "startLoc": {
          "line": 21,
          "column": 19,
          "position": 195
        },
        "endLoc": {
          "line": 200,
          "column": 17,
          "position": 960
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_item.py",
        "start": 19,
        "end": 116,
        "startLoc": {
          "line": 19,
          "column": 15,
          "position": 147
        },
        "endLoc": {
          "line": 116,
          "column": 6,
          "position": 561
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ".\n    \"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort]\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    response_format: ResponseFormat\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 185,
        "end": 201,
        "startLoc": {
          "line": 185,
          "column": 2,
          "position": 652
        },
        "endLoc": {
          "line": 201,
          "column": 8,
          "position": 788
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 107,
        "end": 123,
        "startLoc": {
          "line": 107,
          "column": 4,
          "position": 931
        },
        "endLoc": {
          "line": 123,
          "column": 8,
          "position": 1067
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ".\n\n    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n    Outputs which ensures the model will match your supplied JSON schema. Learn more\n    in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ \"type\": \"json_object\" }` enables the",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 201,
        "end": 208,
        "startLoc": {
          "line": 201,
          "column": 7,
          "position": 808
        },
        "endLoc": {
          "line": 208,
          "column": 4,
          "position": 921
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 127,
        "end": 134,
        "startLoc": {
          "line": 127,
          "column": 2,
          "position": 1157
        },
        "endLoc": {
          "line": 134,
          "column": 5,
          "position": 1270
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ".\n    \"\"\"\n\n    safety_identifier: str\n    \"\"\"\n    A stable identifier used to help detect users of your application that may be\n    violating OpenAI's usage policies. The IDs should be a string that uniquely\n    identifies each user. We recommend hashing their username or email address, in\n    order to avoid sending us any identifying information.\n    [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n    \"\"\"\n\n    seed: Optional[int]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 210,
        "end": 223,
        "startLoc": {
          "line": 210,
          "column": 3,
          "position": 970
        },
        "endLoc": {
          "line": 223,
          "column": 8,
          "position": 1103
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 153,
        "end": 166,
        "startLoc": {
          "line": 153,
          "column": 2,
          "position": 523
        },
        "endLoc": {
          "line": 166,
          "column": 8,
          "position": 656
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "\"\"\"\n\n    service_tier: Optional[Literal[\"auto\", \"default\", \"flex\", \"scale\", \"priority\"]]\n    \"\"\"Specifies the processing type used for serving the request.\n\n    - If set to 'auto', then the request will be processed with the service tier\n      configured in the Project settings. Unless otherwise configured, the Project\n      will use 'default'.\n    - If set to 'default', then the request will be processed with the standard\n      pricing and performance for the selected model.\n    - If set to '[flex](https://platform.openai.com/docs/guides/flex-processing)' or\n      '[priority](https://openai.com/api-priority-processing/)', then the request\n      will be processed with the corresponding service tier.\n    - When not set, the default behavior is 'auto'.\n\n    When the `service_tier` parameter is set, the response body will include the\n    `service_tier` value based on the processing mode actually used to serve the\n    request. This response value may be different from the value set in the\n    parameter.\n    \"\"\"\n\n    stop: Union[Optional[str], SequenceNotStr[str], None]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 229,
        "end": 251,
        "startLoc": {
          "line": 229,
          "column": 5,
          "position": 1219
        },
        "endLoc": {
          "line": 251,
          "column": 8,
          "position": 1496
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 163,
        "end": 185,
        "startLoc": {
          "line": 163,
          "column": 5,
          "position": 656
        },
        "endLoc": {
          "line": 185,
          "column": 8,
          "position": 933
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ".\n    \"\"\"\n\n    user: str\n    \"\"\"This field is being replaced by `safety_identifier` and `prompt_cache_key`.\n\n    Use `prompt_cache_key` instead to maintain caching optimizations. A stable\n    identifier for your end-users. Used to boost cache hit rates by better bucketing\n    similar requests and to help OpenAI detect and prevent abuse.\n    [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#safety-identifiers).\n    \"\"\"\n\n    verbosity: Optional[Literal[\"low\", \"medium\", \"high\"]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 311,
        "end": 324,
        "startLoc": {
          "line": 311,
          "column": 5,
          "position": 2267
        },
        "endLoc": {
          "line": 324,
          "column": 8,
          "position": 2391
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 259,
        "end": 277,
        "startLoc": {
          "line": 259,
          "column": 6,
          "position": 1959
        },
        "endLoc": {
          "line": 277,
          "column": 8,
          "position": 2083
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "If set to true, the model response data will be streamed to the client as it is\n    generated using\n    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n    See the\n    [Streaming section below](https://platform.openai.com/docs/api-reference/chat/streaming)\n    for more information, along with the\n    [streaming responses](https://platform.openai.com/docs/guides/streaming-responses)\n    guide for more information on how to handle the streaming events.\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/chat/completion_create_params.py",
        "start": 427,
        "end": 435,
        "startLoc": {
          "line": 427,
          "column": 5,
          "position": 3211
        },
        "endLoc": {
          "line": 435,
          "column": 3,
          "position": 3386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_retrieve_params.py",
        "start": 50,
        "end": 426,
        "startLoc": {
          "line": 50,
          "column": 5,
          "position": 162
        },
        "endLoc": {
          "line": 426,
          "column": 8,
          "position": 3208
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "the format that the model must output.\n\n    Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n    Outputs which ensures the model will match your supplied JSON schema. Learn more\n    in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n    message the model generates is valid JSON.\n\n    **Important:** when using JSON mode, you **must** also instruct the model to\n    produce JSON yourself via a system or user message. Without this, the model may\n    generate an unending stream of whitespace until the generation reaches the token\n    limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n    the message content may be partially cut off if `finish_reason=\"length\"`, which\n    indicates the generation exceeded `max_tokens` or the conversation exceeded the\n    max context length.\n    \"\"\"\n\n    temperature: Optional[float]\n    \"\"\"What sampling temperature to use, between 0 and 2.\n\n    Higher values like 0.8 will make the output more random, while lower values like\n    0.2 will make it more focused and deterministic.\n    \"\"\"\n\n    thread: Thread\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 99,
        "end": 130,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 336
        },
        "endLoc": {
          "line": 130,
          "column": 8,
          "position": 808
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 123,
        "end": 154,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 1070
        },
        "endLoc": {
          "line": 154,
          "column": 8,
          "position": 1542
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ".\n    \"\"\"\n\n    tool_choice: Optional[AssistantToolChoiceOptionParam]\n    \"\"\"\n    Controls which (if any) tool is called by the model. `none` means the model will\n    not call any tools and instead generates a message. `auto` is the default value\n    and means the model can pick between generating a message or calling one or more\n    tools. `required` means the model must call one or more tools before responding\n    to the user. Specifying a particular tool like `{\"type\": \"file_search\"}` or\n    `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}` forces the model to\n    call that tool.\n    \"\"\"\n\n    tool_resources: Optional[ToolResources]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 133,
        "end": 148,
        "startLoc": {
          "line": 133,
          "column": 8,
          "position": 855
        },
        "endLoc": {
          "line": 148,
          "column": 8,
          "position": 1050
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 150,
        "end": 165,
        "startLoc": {
          "line": 150,
          "column": 14,
          "position": 1539
        },
        "endLoc": {
          "line": 165,
          "column": 8,
          "position": 1734
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ".\n    \"\"\"\n\n    tools: Optional[Iterable[AssistantToolParam]]\n    \"\"\"Override the tools the assistant can use for this run.\n\n    This is useful for modifying the behavior on a per-run basis.\n    \"\"\"\n\n    top_p: Optional[float]\n    \"\"\"\n    An alternative to sampling with temperature, called nucleus sampling, where the\n    model considers the results of the tokens with top_p probability mass. So 0.1\n    means only the tokens comprising the top 10% probability mass are considered.\n\n    We generally recommend altering this or temperature but not both.\n    \"\"\"\n\n    truncation_strategy: Optional[TruncationStrategy]\n    \"\"\"Controls for how a thread will be truncated prior to the run.\n\n    Use this to control the initial context window of the run.\n    \"\"\"\n\n\nclass ThreadMessageAttachmentToolFileSearch(TypedDict, total=False):\n    type: Required[Literal[\"file_search\"]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 152,
        "end": 179,
        "startLoc": {
          "line": 152,
          "column": 4,
          "position": 1142
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 1353
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 161,
        "end": 188,
        "startLoc": {
          "line": 161,
          "column": 5,
          "position": 1731
        },
        "endLoc": {
          "line": 188,
          "column": 8,
          "position": 1942
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "The text contents of the message.\"\"\"\n\n    role: Required[Literal[\"user\", \"assistant\"]]\n    \"\"\"The role of the entity that is creating the message. Allowed values include:\n\n    - `user`: Indicates the message is sent by an actual user and should be used in\n      most cases to represent user-generated messages.\n    - `assistant`: Indicates the message is generated by the assistant. Use this\n      value to insert messages from the assistant into the conversation.\n    \"\"\"\n\n    attachments: Optional[Iterable[ThreadMessageAttachment]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 195,
        "end": 207,
        "startLoc": {
          "line": 195,
          "column": 8,
          "position": 1405
        },
        "endLoc": {
          "line": 207,
          "column": 8,
          "position": 1547
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 204,
        "end": 216,
        "startLoc": {
          "line": 204,
          "column": 8,
          "position": 1994
        },
        "endLoc": {
          "line": 216,
          "column": 8,
          "position": 2136
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "A list of files attached to the message, and the tools they should be added to.\"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nclass ThreadToolResourcesCodeInterpreter(TypedDict, total=False):\n    file_ids: SequenceNotStr[str]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 207,
        "end": 222,
        "startLoc": {
          "line": 207,
          "column": 8,
          "position": 1548
        },
        "endLoc": {
          "line": 222,
          "column": 8,
          "position": 1708
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 216,
        "end": 96,
        "startLoc": {
          "line": 216,
          "column": 8,
          "position": 2137
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ".\n    \"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nclass ThreadToolResourcesFileSearch(TypedDict, total=False):\n    vector_store_ids: SequenceNotStr[str]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 273,
        "end": 289,
        "startLoc": {
          "line": 273,
          "column": 6,
          "position": 2022
        },
        "endLoc": {
          "line": 289,
          "column": 8,
          "position": 2152
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 82,
        "end": 96,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 651
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ".\n    \"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n    tool_resources: Optional[ThreadToolResources]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 315,
        "end": 329,
        "startLoc": {
          "line": 315,
          "column": 5,
          "position": 2355
        },
        "endLoc": {
          "line": 329,
          "column": 8,
          "position": 2485
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 82,
        "end": 96,
        "startLoc": {
          "line": 82,
          "column": 5,
          "position": 651
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "The truncation strategy to use for the thread.\n\n    The default is `auto`. If set to `last_messages`, the thread will be truncated\n    to the n most recent messages in the thread. When set to `auto`, messages in the\n    middle of the thread will be dropped to fit the context length of the model,\n    `max_prompt_tokens`.\n    \"\"\"\n\n    last_messages: Optional[int]\n    \"\"\"\n    The number of most recent messages from the thread when constructing the context\n    for the run.\n    \"\"\"\n\n\nclass ThreadCreateAndRunParamsNonStreaming(ThreadCreateAndRunParamsBase, total=False):\n    stream: Optional[Literal[False]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 364,
        "end": 381,
        "startLoc": {
          "line": 364,
          "column": 8,
          "position": 2743
        },
        "endLoc": {
          "line": 381,
          "column": 8,
          "position": 2900
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/threads/run_create_params.py",
        "start": 231,
        "end": 248,
        "startLoc": {
          "line": 231,
          "column": 8,
          "position": 2298
        },
        "endLoc": {
          "line": 248,
          "column": 8,
          "position": 2455
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "\"\"\"The ranking options for the file search.\n\n    If not specified, the file search tool will use the `auto` ranker and a\n    score_threshold of 0.\n\n    See the\n    [file search tool documentation](https://platform.openai.com/docs/assistants/tools/file-search#customizing-file-search-settings)\n    for more information.\n    \"\"\"\n\n\nclass FileSearchTool(BaseModel):\n    type: Literal[\"file_search\"]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/file_search_tool.py",
        "start": 39,
        "end": 52,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 128
        },
        "endLoc": {
          "line": 52,
          "column": 8,
          "position": 229
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/file_search_tool_param.py",
        "start": 38,
        "end": 51,
        "startLoc": {
          "line": 38,
          "column": 5,
          "position": 115
        },
        "endLoc": {
          "line": 51,
          "column": 8,
          "position": 216
        }
      }
    },
    {
      "format": "python",
      "lines": 75,
      "fragment": "name: Optional[str]\n    \"\"\"The name of the assistant. The maximum length is 256 characters.\"\"\"\n\n    reasoning_effort: Optional[ReasoningEffort]\n    \"\"\"\n    Constrains effort on reasoning for\n    [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\n    supported values are `minimal`, `low`, `medium`, and `high`. Reducing reasoning\n    effort can result in faster responses and fewer tokens used on reasoning in a\n    response.\n\n    Note: The `gpt-5-pro` model defaults to (and only supports) `high` reasoning\n    effort.\n    \"\"\"\n\n    response_format: Optional[AssistantResponseFormatOptionParam]\n    \"\"\"Specifies the format that the model must output.\n\n    Compatible with [GPT-4o](https://platform.openai.com/docs/models#gpt-4o),\n    [GPT-4 Turbo](https://platform.openai.com/docs/models#gpt-4-turbo-and-gpt-4),\n    and all GPT-3.5 Turbo models since `gpt-3.5-turbo-1106`.\n\n    Setting to `{ \"type\": \"json_schema\", \"json_schema\": {...} }` enables Structured\n    Outputs which ensures the model will match your supplied JSON schema. Learn more\n    in the\n    [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\n\n    Setting to `{ \"type\": \"json_object\" }` enables JSON mode, which ensures the\n    message the model generates is valid JSON.\n\n    **Important:** when using JSON mode, you **must** also instruct the model to\n    produce JSON yourself via a system or user message. Without this, the model may\n    generate an unending stream of whitespace until the generation reaches the token\n    limit, resulting in a long-running and seemingly \"stuck\" request. Also note that\n    the message content may be partially cut off if `finish_reason=\"length\"`, which\n    indicates the generation exceeded `max_tokens` or the conversation exceeded the\n    max context length.\n    \"\"\"\n\n    temperature: Optional[float]\n    \"\"\"What sampling temperature to use, between 0 and 2.\n\n    Higher values like 0.8 will make the output more random, while lower values like\n    0.2 will make it more focused and deterministic.\n    \"\"\"\n\n    tool_resources: Optional[ToolResources]\n    \"\"\"A set of resources that are used by the assistant's tools.\n\n    The resources are specific to the type of tool. For example, the\n    `code_interpreter` tool requires a list of file IDs, while the `file_search`\n    tool requires a list of vector store IDs.\n    \"\"\"\n\n    tools: Iterable[AssistantToolParam]\n    \"\"\"A list of tool enabled on the assistant.\n\n    There can be a maximum of 128 tools per assistant. Tools can be of types\n    `code_interpreter`, `file_search`, or `function`.\n    \"\"\"\n\n    top_p: Optional[float]\n    \"\"\"\n    An alternative to sampling with temperature, called nucleus sampling, where the\n    model considers the results of the tokens with top_p probability mass. So 0.1\n    means only the tokens comprising the top 10% probability mass are considered.\n\n    We generally recommend altering this or temperature but not both.\n    \"\"\"\n\n\nclass ToolResourcesCodeInterpreter(TypedDict, total=False):\n    file_ids: SequenceNotStr[str]\n    \"\"\"\n    A",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/assistant_create_params.py",
        "start": 58,
        "end": 132,
        "startLoc": {
          "line": 58,
          "column": 5,
          "position": 228
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 614
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/assistant_update_params.py",
        "start": 93,
        "end": 167,
        "startLoc": {
          "line": 93,
          "column": 5,
          "position": 358
        },
        "endLoc": {
          "line": 167,
          "column": 10,
          "position": 744
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "The number of tokens that overlap between chunks. The default value is `400`.\n\n    Note that the overlap must not exceed half of `max_chunk_size_tokens`.\n    \"\"\"\n\n    max_chunk_size_tokens: Required[int]\n    \"\"\"The maximum number of tokens in each chunk.\n\n    The default value is `800`. The minimum value is `100` and the maximum value is\n    `4096`.\n    \"\"\"\n\n\nclass ToolResourcesFileSearchVectorStoreChunkingStrategyStatic(TypedDict, total=False):\n    static: Required[ToolResourcesFileSearchVectorStoreChunkingStrategyStaticStatic]\n\n    type: Required[Literal[\"static\"]]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/assistant_create_params.py",
        "start": 145,
        "end": 162,
        "startLoc": {
          "line": 145,
          "column": 8,
          "position": 691
        },
        "endLoc": {
          "line": 162,
          "column": 8,
          "position": 807
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 236,
        "end": 253,
        "startLoc": {
          "line": 236,
          "column": 8,
          "position": 1788
        },
        "endLoc": {
          "line": 253,
          "column": 8,
          "position": 1904
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "The chunking strategy used to chunk the file(s).\n\n    If not set, will use the `auto` strategy.\n    \"\"\"\n\n    file_ids: SequenceNotStr[str]\n    \"\"\"\n    A list of [file](https://platform.openai.com/docs/api-reference/files) IDs to\n    add to the vector store. There can be a maximum of 10000 files in a vector\n    store.\n    \"\"\"\n\n    metadata: Optional[Metadata]\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nclass ToolResourcesFileSearch(TypedDict, total=False):\n    vector_store_ids: SequenceNotStr[str]\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/assistant_create_params.py",
        "start": 172,
        "end": 197,
        "startLoc": {
          "line": 172,
          "column": 8,
          "position": 813
        },
        "endLoc": {
          "line": 197,
          "column": 8,
          "position": 1055
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/beta/thread_create_and_run_params.py",
        "start": 264,
        "end": 96,
        "startLoc": {
          "line": 264,
          "column": 8,
          "position": 1910
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "If set to true, the model response data will be streamed to the client as it is\n    generated using\n    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n    See the\n    [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n    for more information.\n\n    Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 161,
        "end": 169,
        "startLoc": {
          "line": 161,
          "column": 5,
          "position": 979
        },
        "endLoc": {
          "line": 169,
          "column": 3,
          "position": 1144
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 147,
        "end": 160,
        "startLoc": {
          "line": 147,
          "column": 5,
          "position": 811
        },
        "endLoc": {
          "line": 160,
          "column": 8,
          "position": 976
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "class UsageTokensInputTokenDetails(BaseModel):\n    audio_tokens: Optional[int] = None\n    \"\"\"Number of audio tokens billed for this request.\"\"\"\n\n    text_tokens: Optional[int] = None\n    \"\"\"Number of text tokens billed for this request.\"\"\"\n\n\nclass UsageTokens(BaseModel):\n    input_tokens: int\n    \"\"\"Number of input tokens billed for this request.\"\"\"\n\n    output_tokens: int\n    \"\"\"Number of output tokens generated.\"\"\"\n\n    total_tokens: int\n    \"\"\"Total number of tokens used (input + output).\"\"\"\n\n    type: Literal[\"tokens\"]\n    \"\"\"The type of the usage object. Always `tokens` for this variant.\"\"\"\n\n    input_token_details: Optional[UsageTokensInputTokenDetails] = None\n    \"\"\"Details about the input tokens billed for this request.\"\"\"\n\n\nclass UsageDuration(BaseModel):\n    seconds: float\n    \"\"\"Duration of the input audio in seconds.\"\"\"\n\n    type: Literal[\"duration\"]\n    \"\"\"The type of the usage object. Always `duration` for this variant.\"\"\"\n\n\nUsage: TypeAlias = Annotated[Union[UsageTokens, UsageDuration], PropertyInfo(discriminator=\"type\")]\n\n\nclass Transcription",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription.py",
        "start": 23,
        "end": 59,
        "startLoc": {
          "line": 23,
          "column": 1,
          "position": 143
        },
        "endLoc": {
          "line": 59,
          "column": 14,
          "position": 317
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_diarized.py",
        "start": 13,
        "end": 49,
        "startLoc": {
          "line": 13,
          "column": 1,
          "position": 86
        },
        "endLoc": {
          "line": 49,
          "column": 22,
          "position": 260
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the vector",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 6,
          "position": 718
        },
        "endLoc": {
          "line": 117,
          "column": 7,
          "position": 862
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 90,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 90,
          "column": 4,
          "position": 709
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ",\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[VectorStore",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 238,
        "end": 250,
        "startLoc": {
          "line": 238,
          "column": 5,
          "position": 1600
        },
        "endLoc": {
          "line": 250,
          "column": 12,
          "position": 1756
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/chatkit/threads.py",
        "start": 179,
        "end": 117,
        "startLoc": {
          "line": 179,
          "column": 4,
          "position": 1099
        },
        "endLoc": {
          "line": 117,
          "column": 8,
          "position": 931
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "Create a vector store.\n\n        Args:\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy. Only applicable if `file_ids` is non-empty.\n\n          description: A description for the vector store. Can be used to describe the vector store's\n              purpose.\n\n          expires_after: The expiration policy for a vector store.\n\n          file_ids: A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the vector store.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 445,
        "end": 478,
        "startLoc": {
          "line": 445,
          "column": 9,
          "position": 2634
        },
        "endLoc": {
          "line": 478,
          "column": 6,
          "position": 3087
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 95,
        "end": 128,
        "startLoc": {
          "line": 95,
          "column": 9,
          "position": 521
        },
        "endLoc": {
          "line": 128,
          "column": 5,
          "position": 974
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ".\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await self._post(\n            \"/vector_stores\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 467,
        "end": 479,
        "startLoc": {
          "line": 467,
          "column": 6,
          "position": 2978
        },
        "endLoc": {
          "line": 479,
          "column": 17,
          "position": 3095
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/realtime/transcription_sessions.py",
        "start": 217,
        "end": 229,
        "startLoc": {
          "line": 217,
          "column": 8,
          "position": 2123
        },
        "endLoc": {
          "line": 229,
          "column": 35,
          "position": 2240
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(\n                {\n                    \"chunking_strategy\": chunking_strategy,\n                    \"description\": description,\n                    \"expires_after\": expires_after,\n                    \"file_ids\": file_ids,\n                    \"metadata\": metadata,\n                    \"name\": name,\n                },\n                vector_store_create_params.VectorStoreCreateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=VectorStore,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 480,
        "end": 497,
        "startLoc": {
          "line": 480,
          "column": 22,
          "position": 3104
        },
        "endLoc": {
          "line": 497,
          "column": 6,
          "position": 3206
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 130,
        "end": 147,
        "startLoc": {
          "line": 130,
          "column": 16,
          "position": 987
        },
        "endLoc": {
          "line": 147,
          "column": 4,
          "position": 1089
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def retrieve(\n        self,\n        vector_store_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStore:\n        \"\"\"\n        Retrieves a vector store.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 497,
        "end": 523,
        "startLoc": {
          "line": 497,
          "column": 2,
          "position": 3208
        },
        "endLoc": {
          "line": 523,
          "column": 6,
          "position": 3359
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 147,
        "end": 173,
        "startLoc": {
          "line": 147,
          "column": 5,
          "position": 1089
        },
        "endLoc": {
          "line": 173,
          "column": 5,
          "position": 1240
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": "def update(\n        self,\n        vector_store_id: str,\n        *,\n        expires_after: Optional[vector_store_update_params.ExpiresAfter] | Omit = omit,\n        metadata: Optional[Metadata] | Omit = omit,\n        name: Optional[str] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStore:\n        \"\"\"\n        Modifies a vector store.\n\n        Args:\n          expires_after: The expiration policy for a vector store.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the vector store.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 531,
        "end": 571,
        "startLoc": {
          "line": 531,
          "column": 2,
          "position": 3414
        },
        "endLoc": {
          "line": 571,
          "column": 6,
          "position": 3621
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 181,
        "end": 221,
        "startLoc": {
          "line": 181,
          "column": 5,
          "position": 1291
        },
        "endLoc": {
          "line": 221,
          "column": 5,
          "position": 1498
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "(\n                {\n                    \"expires_after\": expires_after,\n                    \"metadata\": metadata,\n                    \"name\": name,\n                },\n                vector_store_update_params.VectorStoreUpdateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=VectorStore,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[VectorStore",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 573,
        "end": 600,
        "startLoc": {
          "line": 573,
          "column": 22,
          "position": 3639
        },
        "endLoc": {
          "line": 600,
          "column": 12,
          "position": 3883
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 223,
        "end": 273,
        "startLoc": {
          "line": 223,
          "column": 16,
          "position": 1512
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[VectorStore],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    vector_store_list_params.VectorStoreListParams,\n                ),\n            ),\n            model=VectorStore,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 633,
        "end": 652,
        "startLoc": {
          "line": 633,
          "column": 16,
          "position": 3935
        },
        "endLoc": {
          "line": 652,
          "column": 6,
          "position": 4036
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 283,
        "end": 302,
        "startLoc": {
          "line": 283,
          "column": 15,
          "position": 1802
        },
        "endLoc": {
          "line": 302,
          "column": 4,
          "position": 1903
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def delete(\n        self,\n        vector_store_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreDeleted:\n        \"\"\"\n        Delete a vector store.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 652,
        "end": 678,
        "startLoc": {
          "line": 652,
          "column": 2,
          "position": 4038
        },
        "endLoc": {
          "line": 678,
          "column": 6,
          "position": 4189
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 302,
        "end": 328,
        "startLoc": {
          "line": 302,
          "column": 5,
          "position": 1903
        },
        "endLoc": {
          "line": 328,
          "column": 5,
          "position": 2054
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "self._delete(\n            f\"/vector_stores/{vector_store_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=VectorStoreDeleted,\n        )\n\n    def search(\n        self,\n        vector_store_id: str,\n        *,\n        query: Union[str, SequenceNotStr[str]],\n        filters: vector_store_search_params.Filters | Omit = omit,\n        max_num_results: int | Omit = omit,\n        ranking_options: vector_store_search_params.RankingOptions | Omit = omit,\n        rewrite_query: bool | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 678,
        "end": 701,
        "startLoc": {
          "line": 678,
          "column": 2,
          "position": 4191
        },
        "endLoc": {
          "line": 701,
          "column": 15,
          "position": 4424
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 328,
        "end": 351,
        "startLoc": {
          "line": 328,
          "column": 2,
          "position": 2054
        },
        "endLoc": {
          "line": 351,
          "column": 9,
          "position": 2287
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[VectorStoreSearchResponse],\n            body=maybe_transform(\n                {\n                    \"query\": query,\n                    \"filters\": filters,\n                    \"max_num_results\": max_num_results,\n                    \"ranking_options\": ranking_options,\n                    \"rewrite_query\": rewrite_query,\n                },\n                vector_store_search_params.VectorStoreSearchParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            model=VectorStoreSearchResponse,\n            method=\"post\",\n        )\n\n\nclass VectorStoresWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 731,
        "end": 750,
        "startLoc": {
          "line": 731,
          "column": 10,
          "position": 4496
        },
        "endLoc": {
          "line": 750,
          "column": 28,
          "position": 4608
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/vector_stores.py",
        "start": 381,
        "end": 400,
        "startLoc": {
          "line": 381,
          "column": 9,
          "position": 2353
        },
        "endLoc": {
          "line": 400,
          "column": 18,
          "position": 2465
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "@cached_property\n    def with_raw_response(self) -> FilesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return FilesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> FilesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return FilesWithStreamingResponse(self)\n\n    def create(\n        self,\n        vector_store_id: str,\n        *,\n        file_id: str,\n        attributes: Optional[Dict[str, Union[str, float, bool]]] | Omit = omit,\n        chunking_strategy: FileChunkingStrategyParam | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFile:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 29,
        "end": 62,
        "startLoc": {
          "line": 29,
          "column": 5,
          "position": 289
        },
        "endLoc": {
          "line": 62,
          "column": 12,
          "position": 392
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 39,
        "end": 71,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 328
        },
        "endLoc": {
          "line": 71,
          "column": 12,
          "position": 431
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[VectorStoreFile",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 196,
        "end": 205,
        "startLoc": {
          "line": 196,
          "column": 12,
          "position": 1513
        },
        "endLoc": {
          "line": 205,
          "column": 16,
          "position": 1644
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 15,
          "position": 800
        },
        "endLoc": {
          "line": 117,
          "column": 8,
          "position": 931
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "@cached_property\n    def with_raw_response(self) -> AsyncFilesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return AsyncFilesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> AsyncFilesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return AsyncFilesWithStreamingResponse(self)\n\n    async def create(\n        self,\n        vector_store_id: str,\n        *,\n        file_id: str,\n        attributes: Optional[Dict[str, Union[str, float, bool]]] | Omit = omit,\n        chunking_strategy: FileChunkingStrategyParam | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFile:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 437,
        "end": 470,
        "startLoc": {
          "line": 437,
          "column": 5,
          "position": 3021
        },
        "endLoc": {
          "line": 470,
          "column": 12,
          "position": 3124
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 252,
        "end": 284,
        "startLoc": {
          "line": 252,
          "column": 5,
          "position": 1561
        },
        "endLoc": {
          "line": 284,
          "column": 12,
          "position": 1664
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "Create a vector store file by attaching a\n        [File](https://platform.openai.com/docs/api-reference/files) to a\n        [vector store](https://platform.openai.com/docs/api-reference/vector-stores/object).\n\n        Args:\n          file_id: A [File](https://platform.openai.com/docs/api-reference/files) ID that the\n              vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          attributes: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard. Keys are strings with a maximum\n              length of 64 characters. Values are strings with a maximum length of 512\n              characters, booleans, or numbers.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy. Only applicable if `file_ids` is non-empty.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 471,
        "end": 500,
        "startLoc": {
          "line": 471,
          "column": 9,
          "position": 3127
        },
        "endLoc": {
          "line": 500,
          "column": 6,
          "position": 3588
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 63,
        "end": 92,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 395
        },
        "endLoc": {
          "line": 92,
          "column": 5,
          "position": 856
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def retrieve(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFile:\n        \"\"\"\n        Retrieves a vector store file.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 516,
        "end": 545,
        "startLoc": {
          "line": 516,
          "column": 2,
          "position": 3689
        },
        "endLoc": {
          "line": 545,
          "column": 6,
          "position": 3864
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 108,
        "end": 137,
        "startLoc": {
          "line": 108,
          "column": 5,
          "position": 951
        },
        "endLoc": {
          "line": 137,
          "column": 5,
          "position": 1126
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "def update(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        attributes: Optional[Dict[str, Union[str, float, bool]]],\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFile:\n        \"\"\"\n        Update attributes on a vector store file.\n\n        Args:\n          attributes: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard. Keys are strings with a maximum\n              length of 64 characters. Values are strings with a maximum length of 512\n              characters, booleans, or numbers.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 553,
        "end": 589,
        "startLoc": {
          "line": 553,
          "column": 2,
          "position": 3919
        },
        "endLoc": {
          "line": 589,
          "column": 6,
          "position": 4119
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 145,
        "end": 181,
        "startLoc": {
          "line": 145,
          "column": 5,
          "position": 1177
        },
        "endLoc": {
          "line": 181,
          "column": 5,
          "position": 1377
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "({\"attributes\": attributes}, file_update_params.FileUpdateParams),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=VectorStoreFile,\n        )\n\n    def list(\n        self,\n        vector_store_id: str,\n        *,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        filter: Literal[\"in_progress\", \"completed\", \"failed\", \"cancelled\"] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[VectorStoreFile",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 591,
        "end": 613,
        "startLoc": {
          "line": 591,
          "column": 22,
          "position": 4137
        },
        "endLoc": {
          "line": 613,
          "column": 16,
          "position": 4390
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 183,
        "end": 273,
        "startLoc": {
          "line": 183,
          "column": 16,
          "position": 1391
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[VectorStoreFile],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"filter\": filter,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    file_list_params.FileListParams,\n                ),\n            ),\n            model=VectorStoreFile,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 649,
        "end": 669,
        "startLoc": {
          "line": 649,
          "column": 16,
          "position": 4460
        },
        "endLoc": {
          "line": 669,
          "column": 6,
          "position": 4568
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 241,
        "end": 261,
        "startLoc": {
          "line": 241,
          "column": 15,
          "position": 1708
        },
        "endLoc": {
          "line": 261,
          "column": 4,
          "position": 1816
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "def delete(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFileDeleted:\n        \"\"\"Delete a vector store file.\n\n        This will remove the file from the vector store but\n        the file itself will not be deleted. To delete the file, use the\n        [delete file](https://platform.openai.com/docs/api-reference/files/delete)\n        endpoint.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 669,
        "end": 702,
        "startLoc": {
          "line": 669,
          "column": 2,
          "position": 4570
        },
        "endLoc": {
          "line": 702,
          "column": 6,
          "position": 4745
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 261,
        "end": 294,
        "startLoc": {
          "line": 261,
          "column": 5,
          "position": 1816
        },
        "endLoc": {
          "line": 294,
          "column": 5,
          "position": 1991
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def create_and_poll(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        attributes: Optional[Dict[str, Union[str, float, bool]]] | Omit = omit,\n        poll_interval_ms: int | Omit = omit,\n        chunking_strategy: FileChunkingStrategyParam | Omit = omit,\n    ) -> VectorStoreFile:\n        \"\"\"Attach a file to the given vector store and wait for it to be processed.\"\"\"\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 710,
        "end": 720,
        "startLoc": {
          "line": 710,
          "column": 2,
          "position": 4800
        },
        "endLoc": {
          "line": 720,
          "column": 6,
          "position": 4903
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 302,
        "end": 312,
        "startLoc": {
          "line": 302,
          "column": 5,
          "position": 2042
        },
        "endLoc": {
          "line": 312,
          "column": 5,
          "position": 2145
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "def poll(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        poll_interval_ms: int | Omit = omit,\n    ) -> VectorStoreFile:\n        \"\"\"Wait for the vector store file to finish processing.\n\n        Note: this will return even if the file failed to process, you need to check\n        file.last_error and file.status to handle these cases\n        \"\"\"\n        headers: dict[str, str] = {\"X-Stainless-Poll-Helper\": \"true\"}\n        if is_given(poll_interval_ms):\n            headers[\"X-Stainless-Custom-Poll-Interval\"] = str(poll_interval_ms)\n\n        while True:\n            response = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 730,
        "end": 747,
        "startLoc": {
          "line": 730,
          "column": 2,
          "position": 4967
        },
        "endLoc": {
          "line": 747,
          "column": 6,
          "position": 5076
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 322,
        "end": 339,
        "startLoc": {
          "line": 322,
          "column": 5,
          "position": 2203
        },
        "endLoc": {
          "line": 339,
          "column": 5,
          "position": 2312
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "self.with_raw_response.retrieve(\n                file_id,\n                vector_store_id=vector_store_id,\n                extra_headers=headers,\n            )\n\n            file = response.parse()\n            if file.status == \"in_progress\":\n                if not is_given(poll_interval_ms):\n                    from_header = response.headers.get(\"openai-poll-after-ms\")\n                    if from_header is not None:\n                        poll_interval_ms = int(from_header)\n                    else:\n                        poll_interval_ms = 1000\n\n                await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 747,
        "end": 762,
        "startLoc": {
          "line": 747,
          "column": 2,
          "position": 5078
        },
        "endLoc": {
          "line": 762,
          "column": 6,
          "position": 5188
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 339,
        "end": 354,
        "startLoc": {
          "line": 339,
          "column": 2,
          "position": 2312
        },
        "endLoc": {
          "line": 354,
          "column": 5,
          "position": 2422
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def upload_and_poll(\n        self,\n        *,\n        vector_store_id: str,\n        file: FileTypes,\n        attributes: Optional[Dict[str, Union[str, float, bool]]] | Omit = omit,\n        poll_interval_ms: int | Omit = omit,\n        chunking_strategy: FileChunkingStrategyParam | Omit = omit,\n    ) -> VectorStoreFile:\n        \"\"\"Add a file to a vector store and poll until processing is complete.\"\"\"\n        file_obj = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 788,
        "end": 798,
        "startLoc": {
          "line": 788,
          "column": 2,
          "position": 5384
        },
        "endLoc": {
          "line": 798,
          "column": 6,
          "position": 5491
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 378,
        "end": 388,
        "startLoc": {
          "line": 378,
          "column": 5,
          "position": 2604
        },
        "endLoc": {
          "line": 388,
          "column": 5,
          "position": 2711
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ",\n            attributes=attributes,\n        )\n\n    def content(\n        self,\n        file_id: str,\n        *,\n        vector_store_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 803,
        "end": 818,
        "startLoc": {
          "line": 803,
          "column": 18,
          "position": 5545
        },
        "endLoc": {
          "line": 818,
          "column": 15,
          "position": 5667
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 393,
        "end": 408,
        "startLoc": {
          "line": 393,
          "column": 17,
          "position": 2761
        },
        "endLoc": {
          "line": 408,
          "column": 9,
          "position": 2883
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          attributes: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard. Keys are strings with a maximum\n              length of 64 characters. Values are strings with a maximum length of 512\n              characters, booleans, or numbers.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy. Only applicable if `file_ids` is non-empty.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return self._post(\n            f\"/vector_stores/{vector_store_id}/file_batches\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 69,
        "end": 94,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 460
        },
        "endLoc": {
          "line": 94,
          "column": 48,
          "position": 820
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 68,
        "end": 93,
        "startLoc": {
          "line": 68,
          "column": 2,
          "position": 503
        },
        "endLoc": {
          "line": 93,
          "column": 41,
          "position": 863
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": ",\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        filter: Literal[\"in_progress\", \"completed\", \"failed\", \"cancelled\"] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[VectorStoreFile]:\n        \"\"\"\n        Returns a list of vector store files in a batch.\n\n        Args:\n          after: A cursor for use in pagination. `after` is an object ID that defines your place\n              in the list. For instance, if you make a list request and receive 100 objects,\n              ending with obj_foo, your subsequent call can include after=obj_foo in order to\n              fetch the next page of the list.\n\n          before: A cursor for use in pagination. `before` is an object ID that defines your place\n              in the list. For instance, if you make a list request and receive 100 objects,\n              starting with obj_foo, your subsequent call can include before=obj_foo in order\n              to fetch the previous page of the list.\n\n          filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n\n          limit: A limit on the number of objects to be returned. Limit can range between 1 and\n              100, and the default is 20.\n\n          order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n              order and `desc` for descending order.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 210,
        "end": 252,
        "startLoc": {
          "line": 210,
          "column": 4,
          "position": 1522
        },
        "endLoc": {
          "line": 252,
          "column": 12,
          "position": 1706
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 193,
        "end": 235,
        "startLoc": {
          "line": 193,
          "column": 2,
          "position": 1465
        },
        "endLoc": {
          "line": 235,
          "column": 12,
          "position": 1649
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "Create a vector store file batch.\n\n        Args:\n          file_ids: A list of [File](https://platform.openai.com/docs/api-reference/files) IDs that\n              the vector store should use. Useful for tools like `file_search` that can access\n              files.\n\n          attributes: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard. Keys are strings with a maximum\n              length of 64 characters. Values are strings with a maximum length of 512\n              characters, booleans, or numbers.\n\n          chunking_strategy: The chunking strategy used to chunk the file(s). If not set, will use the `auto`\n              strategy. Only applicable if `file_ids` is non-empty.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await self._post(\n            f\"/vector_stores/{vector_store_id}/file_batches\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 403,
        "end": 431,
        "startLoc": {
          "line": 403,
          "column": 9,
          "position": 2548
        },
        "endLoc": {
          "line": 431,
          "column": 48,
          "position": 2962
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 66,
        "end": 501,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 408
        },
        "endLoc": {
          "line": 501,
          "column": 41,
          "position": 3597
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def retrieve(\n        self,\n        batch_id: str,\n        *,\n        vector_store_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFileBatch:\n        \"\"\"\n        Retrieves a vector store file batch.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        if not batch_id:\n            raise ValueError(f\"Expected a non-empty value for `batch_id` but received {batch_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 446,
        "end": 475,
        "startLoc": {
          "line": 446,
          "column": 2,
          "position": 3054
        },
        "endLoc": {
          "line": 475,
          "column": 6,
          "position": 3229
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 109,
        "end": 138,
        "startLoc": {
          "line": 109,
          "column": 5,
          "position": 908
        },
        "endLoc": {
          "line": 138,
          "column": 5,
          "position": 1083
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "def cancel(\n        self,\n        batch_id: str,\n        *,\n        vector_store_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VectorStoreFileBatch:\n        \"\"\"Cancel a vector store file batch.\n\n        This attempts to cancel the processing of\n        files in this batch as soon as possible.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not vector_store_id:\n            raise ValueError(f\"Expected a non-empty value for `vector_store_id` but received {vector_store_id!r}\")\n        if not batch_id:\n            raise ValueError(f\"Expected a non-empty value for `batch_id` but received {batch_id!r}\")\n        extra_headers = {\"OpenAI-Beta\": \"assistants=v2\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 483,
        "end": 514,
        "startLoc": {
          "line": 483,
          "column": 2,
          "position": 3284
        },
        "endLoc": {
          "line": 514,
          "column": 6,
          "position": 3459
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 146,
        "end": 177,
        "startLoc": {
          "line": 146,
          "column": 5,
          "position": 1134
        },
        "endLoc": {
          "line": 177,
          "column": 5,
          "position": 1309
        }
      }
    },
    {
      "format": "python",
      "lines": 53,
      "fragment": "self.poll(\n            batch.id,\n            vector_store_id=vector_store_id,\n            poll_interval_ms=poll_interval_ms,\n        )\n\n    def list_files(\n        self,\n        batch_id: str,\n        *,\n        vector_store_id: str,\n        after: str | Omit = omit,\n        before: str | Omit = omit,\n        filter: Literal[\"in_progress\", \"completed\", \"failed\", \"cancelled\"] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[VectorStoreFile, AsyncCursorPage[VectorStoreFile]]:\n        \"\"\"\n        Returns a list of vector store files in a batch.\n\n        Args:\n          after: A cursor for use in pagination. `after` is an object ID that defines your place\n              in the list. For instance, if you make a list request and receive 100 objects,\n              ending with obj_foo, your subsequent call can include after=obj_foo in order to\n              fetch the next page of the list.\n\n          before: A cursor for use in pagination. `before` is an object ID that defines your place\n              in the list. For instance, if you make a list request and receive 100 objects,\n              starting with obj_foo, your subsequent call can include before=obj_foo in order\n              to fetch the previous page of the list.\n\n          filter: Filter by file status. One of `in_progress`, `completed`, `failed`, `cancelled`.\n\n          limit: A limit on the number of objects to be returned. Limit can range between 1 and\n              100, and the default is 20.\n\n          order: Sort order by the `created_at` timestamp of the objects. `asc` for ascending\n              order and `desc` for descending order.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 537,
        "end": 589,
        "startLoc": {
          "line": 537,
          "column": 2,
          "position": 3627
        },
        "endLoc": {
          "line": 589,
          "column": 12,
          "position": 3870
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 200,
        "end": 643,
        "startLoc": {
          "line": 200,
          "column": 2,
          "position": 1469
        },
        "endLoc": {
          "line": 643,
          "column": 12,
          "position": 4401
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[VectorStoreFile],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"before\": before,\n                        \"filter\": filter,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    file_batch_list_files_params.FileBatchListFilesParams,\n                ),\n            ),\n            model=VectorStoreFile,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 597,
        "end": 617,
        "startLoc": {
          "line": 597,
          "column": 16,
          "position": 3946
        },
        "endLoc": {
          "line": 617,
          "column": 6,
          "position": 4054
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 260,
        "end": 280,
        "startLoc": {
          "line": 260,
          "column": 15,
          "position": 1782
        },
        "endLoc": {
          "line": 280,
          "column": 4,
          "position": 1890
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "def poll(\n        self,\n        batch_id: str,\n        *,\n        vector_store_id: str,\n        poll_interval_ms: int | Omit = omit,\n    ) -> VectorStoreFileBatch:\n        \"\"\"Wait for the given file batch to be processed.\n\n        Note: this will return even if one of the files failed to process, you need to\n        check batch.file_counts.failed_count to handle this case.\n        \"\"\"\n        headers: dict[str, str] = {\"X-Stainless-Poll-Helper\": \"true\"}\n        if is_given(poll_interval_ms):\n            headers[\"X-Stainless-Custom-Poll-Interval\"] = str(poll_interval_ms)\n\n        while True:\n            response = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 617,
        "end": 634,
        "startLoc": {
          "line": 617,
          "column": 2,
          "position": 4056
        },
        "endLoc": {
          "line": 634,
          "column": 6,
          "position": 4165
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 280,
        "end": 297,
        "startLoc": {
          "line": 280,
          "column": 5,
          "position": 1890
        },
        "endLoc": {
          "line": 297,
          "column": 5,
          "position": 1999
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "self.with_raw_response.retrieve(\n                batch_id,\n                vector_store_id=vector_store_id,\n                extra_headers=headers,\n            )\n\n            batch = response.parse()\n            if batch.file_counts.in_progress > 0:\n                if not is_given(poll_interval_ms):\n                    from_header = response.headers.get(\"openai-poll-after-ms\")\n                    if from_header is not None:\n                        poll_interval_ms = int(from_header)\n                    else:\n                        poll_interval_ms = 1000\n\n                await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 634,
        "end": 649,
        "startLoc": {
          "line": 634,
          "column": 2,
          "position": 4167
        },
        "endLoc": {
          "line": 649,
          "column": 6,
          "position": 4279
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/file_batches.py",
        "start": 297,
        "end": 312,
        "startLoc": {
          "line": 297,
          "column": 2,
          "position": 1999
        },
        "endLoc": {
          "line": 312,
          "column": 5,
          "position": 2111
        }
      }
    },
    {
      "format": "python",
      "lines": 47,
      "fragment": "Creates an intermediate\n        [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\n        that you can add\n        [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\n        Currently, an Upload can accept at most 8 GB in total and expires after an hour\n        after you create it.\n\n        Once you complete the Upload, we will create a\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        contains all the parts you uploaded. This File is usable in the rest of our\n        platform as a regular File object.\n\n        For certain `purpose` values, the correct `mime_type` must be specified. Please\n        refer to documentation for the\n        [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\n\n        For guidance on the proper filename extensions for each purpose, please follow\n        the documentation on\n        [creating a File](https://platform.openai.com/docs/api-reference/files/create).\n\n        Args:\n          bytes: The number of bytes in the file you are uploading.\n\n          filename: The name of the file to upload.\n\n          mime_type: The MIME type of the file.\n\n              This must fall within the supported MIME types for your file purpose. See the\n              supported MIME types for assistants and vision.\n\n          purpose: The intended purpose of the uploaded file.\n\n              See the\n              [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\n\n          expires_after: The expiration policy for a file. By default, files with `purpose=batch` expire\n              after 30 days and all other files are persisted until they are manually deleted.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 490,
        "end": 536,
        "startLoc": {
          "line": 490,
          "column": 9,
          "position": 2018
        },
        "endLoc": {
          "line": 536,
          "column": 6,
          "position": 2687
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 182,
        "end": 228,
        "startLoc": {
          "line": 182,
          "column": 9,
          "position": 554
        },
        "endLoc": {
          "line": 228,
          "column": 5,
          "position": 1223
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def cancel(\n        self,\n        upload_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Upload:\n        \"\"\"Cancels the Upload.\n\n        No Parts may be added after an Upload is cancelled.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not upload_id:\n            raise ValueError(f\"Expected a non-empty value for `upload_id` but received {upload_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 554,
        "end": 580,
        "startLoc": {
          "line": 554,
          "column": 2,
          "position": 2801
        },
        "endLoc": {
          "line": 580,
          "column": 6,
          "position": 2929
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 246,
        "end": 272,
        "startLoc": {
          "line": 246,
          "column": 5,
          "position": 1331
        },
        "endLoc": {
          "line": 272,
          "column": 5,
          "position": 1459
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "def complete(\n        self,\n        upload_id: str,\n        *,\n        part_ids: SequenceNotStr[str],\n        md5: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Upload:\n        \"\"\"\n        Completes the\n        [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\n\n        Within the returned Upload object, there is a nested\n        [File](https://platform.openai.com/docs/api-reference/files/object) object that\n        is ready to use in the rest of the platform.\n\n        You can specify the order of the Parts by passing in an ordered list of the Part\n        IDs.\n\n        The number of bytes uploaded upon completion must match the number of bytes\n        initially specified when creating the Upload object. No Parts may be added after\n        an Upload is completed.\n\n        Args:\n          part_ids: The ordered list of Part IDs.\n\n          md5: The optional md5 checksum for the file contents to verify if the bytes uploaded\n              matches what you expect.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not upload_id:\n            raise ValueError(f\"Expected a non-empty value for `upload_id` but received {upload_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 588,
        "end": 632,
        "startLoc": {
          "line": 588,
          "column": 2,
          "position": 2984
        },
        "endLoc": {
          "line": 632,
          "column": 6,
          "position": 3137
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 280,
        "end": 324,
        "startLoc": {
          "line": 280,
          "column": 5,
          "position": 1510
        },
        "endLoc": {
          "line": 324,
          "column": 5,
          "position": 1663
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "Adds a\n        [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\n        [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\n        A Part represents a chunk of bytes from the file you are trying to upload.\n\n        Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\n        maximum of 8 GB.\n\n        It is possible to add multiple Parts in parallel. You can decide the intended\n        order of the Parts when you\n        [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\n\n        Args:\n          data: The chunk of bytes for this Part.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not upload_id:\n            raise ValueError(f\"Expected a non-empty value for `upload_id` but received {upload_id!r}\")\n        body = deepcopy_minimal({\"data\": data})\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"data\"]])\n        # It should be noted that the actual Content-Type header that will be\n        # sent to the server will contain a `boundary` parameter, e.g.\n        # multipart/form-data; boundary=---abc--\n        extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/parts.py",
        "start": 130,
        "end": 161,
        "startLoc": {
          "line": 130,
          "column": 9,
          "position": 899
        },
        "endLoc": {
          "line": 161,
          "column": 6,
          "position": 1320
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/parts.py",
        "start": 55,
        "end": 86,
        "startLoc": {
          "line": 55,
          "column": 9,
          "position": 292
        },
        "endLoc": {
          "line": 86,
          "column": 5,
          "position": 713
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "Configuration options for a text response from the model. Can be plain text or\n              structured JSON data. Learn more:\n\n              - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n              - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n\n          tool_choice",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 99,
        "end": 105,
        "startLoc": {
          "line": 99,
          "column": 2,
          "position": 861
        },
        "endLoc": {
          "line": 105,
          "column": 12,
          "position": 962
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 199,
        "end": 208,
        "startLoc": {
          "line": 199,
          "column": 8,
          "position": 1079
        },
        "endLoc": {
          "line": 208,
          "column": 8,
          "position": 1180
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "The truncation strategy to use for the model response. - `auto`: If the input to\n              this Response exceeds the model's context window size, the model will truncate\n              the response to fit the context window by dropping items from the beginning of\n              the conversation. - `disabled` (default): If the input size will exceed the\n              context window size for a model, the request will fail with a 400 error.\n\n          extra_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 112,
        "end": 118,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 1092
        },
        "endLoc": {
          "line": 118,
          "column": 14,
          "position": 1241
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/responses/response_create_params.py",
        "start": 253,
        "end": 263,
        "startLoc": {
          "line": 253,
          "column": 8,
          "position": 1812
        },
        "endLoc": {
          "line": 263,
          "column": 8,
          "position": 1962
        }
      }
    },
    {
      "format": "python",
      "lines": 59,
      "fragment": "Get input token counts\n\n        Args:\n          conversation: The conversation that this response belongs to. Items from this conversation are\n              prepended to `input_items` for this response request. Input items and output\n              items from this response are automatically added to this conversation after this\n              response completes.\n\n          input: Text, image, or file inputs to the model, used to generate a response\n\n          instructions: A system (or developer) message inserted into the model's context. When used\n              along with `previous_response_id`, the instructions from a previous response\n              will not be carried over to the next response. This makes it simple to swap out\n              system (or developer) messages in new responses.\n\n          model: Model ID used to generate the response, like `gpt-4o` or `o3`. OpenAI offers a\n              wide range of models with different capabilities, performance characteristics,\n              and price points. Refer to the\n              [model guide](https://platform.openai.com/docs/models) to browse and compare\n              available models.\n\n          parallel_tool_calls: Whether to allow the model to run tool calls in parallel.\n\n          previous_response_id: The unique ID of the previous response to the model. Use this to create\n              multi-turn conversations. Learn more about\n              [conversation state](https://platform.openai.com/docs/guides/conversation-state).\n              Cannot be used in conjunction with `conversation`.\n\n          reasoning: **gpt-5 and o-series models only** Configuration options for\n              [reasoning models](https://platform.openai.com/docs/guides/reasoning).\n\n          text: Configuration options for a text response from the model. Can be plain text or\n              structured JSON data. Learn more:\n\n              - [Text inputs and outputs](https://platform.openai.com/docs/guides/text)\n              - [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs)\n\n          tool_choice: How the model should select which tool (or tools) to use when generating a\n              response. See the `tools` parameter to see how to specify which tools the model\n              can call.\n\n          tools: An array of tools the model may call while generating a response. You can\n              specify which tool to use by setting the `tool_choice` parameter.\n\n          truncation: The truncation strategy to use for the model response. - `auto`: If the input to\n              this Response exceeds the model's context window size, the model will truncate\n              the response to fit the context window by dropping items from the beginning of\n              the conversation. - `disabled` (default): If the input size will exceed the\n              context window size for a model, the request will fail with a 400 error.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 193,
        "end": 251,
        "startLoc": {
          "line": 193,
          "column": 9,
          "position": 1588
        },
        "endLoc": {
          "line": 251,
          "column": 6,
          "position": 2566
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 68,
        "end": 126,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 345
        },
        "endLoc": {
          "line": 126,
          "column": 5,
          "position": 1323
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "(\n                {\n                    \"conversation\": conversation,\n                    \"input\": input,\n                    \"instructions\": instructions,\n                    \"model\": model,\n                    \"parallel_tool_calls\": parallel_tool_calls,\n                    \"previous_response_id\": previous_response_id,\n                    \"reasoning\": reasoning,\n                    \"text\": text,\n                    \"tool_choice\": tool_choice,\n                    \"tools\": tools,\n                    \"truncation\": truncation,\n                },\n                input_token_count_params.InputTokenCountParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=InputTokenCountResponse,\n        )\n\n\nclass InputTokensWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 253,
        "end": 276,
        "startLoc": {
          "line": 253,
          "column": 22,
          "position": 2583
        },
        "endLoc": {
          "line": 276,
          "column": 27,
          "position": 2722
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 128,
        "end": 151,
        "startLoc": {
          "line": 128,
          "column": 16,
          "position": 1336
        },
        "endLoc": {
          "line": 151,
          "column": 17,
          "position": 1475
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "Returns a list of input items for a given response.\n\n        Args:\n          after: An item ID to list items after, used in pagination.\n\n          include: Additional fields to include in the response. See the `include` parameter for\n              Response creation above for more information.\n\n          limit: A limit on the number of objects to be returned. Limit can range between 1 and\n              100, and the default is 20.\n\n          order: The order to return the input items in. Default is `desc`.\n\n              - `asc`: Return the input items in ascending order.\n              - `desc`: Return the input items in descending order.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not response_id:\n            raise ValueError(f\"Expected a non-empty value for `response_id` but received {response_id!r}\")\n        return self._get_api_list(\n            f\"/responses/{response_id}/input_items\",\n            page=AsyncCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_items.py",
        "start": 145,
        "end": 173,
        "startLoc": {
          "line": 145,
          "column": 9,
          "position": 889
        },
        "endLoc": {
          "line": 173,
          "column": 16,
          "position": 1224
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_items.py",
        "start": 61,
        "end": 89,
        "startLoc": {
          "line": 61,
          "column": 9,
          "position": 329
        },
        "endLoc": {
          "line": 89,
          "column": 15,
          "position": 664
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "[ResponseItem],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"include\": include,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    input_item_list_params.InputItemListParams,\n                ),\n            ),\n            model=cast(Any, ResponseItem),  # Union types cannot be passed in as arguments in the type system\n        )\n\n\nclass InputItemsWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_items.py",
        "start": 173,
        "end": 193,
        "startLoc": {
          "line": 173,
          "column": 16,
          "position": 1225
        },
        "endLoc": {
          "line": 193,
          "column": 26,
          "position": 1336
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_items.py",
        "start": 89,
        "end": 109,
        "startLoc": {
          "line": 89,
          "column": 15,
          "position": 665
        },
        "endLoc": {
          "line": 109,
          "column": 16,
          "position": 776
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "import httpx\n\nfrom ... import _legacy_response\nfrom ..._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ..._utils import maybe_transform, async_maybe_transform\nfrom ..._compat import cached_property\nfrom ..._resource import SyncAPIResource, AsyncAPIResource\nfrom ..._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ..._base_client import make_request_options\nfrom ...types.realtime",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/client_secrets.py",
        "start": 5,
        "end": 14,
        "startLoc": {
          "line": 5,
          "column": 1,
          "position": 12
        },
        "endLoc": {
          "line": 14,
          "column": 9,
          "position": 127
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 8,
        "end": 17,
        "startLoc": {
          "line": 8,
          "column": 1,
          "position": 35
        },
        "endLoc": {
          "line": 17,
          "column": 10,
          "position": 150
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "Create a Realtime client secret with an associated session configuration.\n\n        Args:\n          expires_after: Configuration for the client secret expiration. Expiration refers to the time\n              after which a client secret will no longer be valid for creating sessions. The\n              session itself may continue after that time once started. A secret can be used\n              to create multiple sessions until it expires.\n\n          session: Session configuration to use for the client secret. Choose either a realtime\n              session or a transcription session.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/client_secrets.py",
        "start": 121,
        "end": 140,
        "startLoc": {
          "line": 121,
          "column": 9,
          "position": 734
        },
        "endLoc": {
          "line": 140,
          "column": 6,
          "position": 989
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/client_secrets.py",
        "start": 53,
        "end": 72,
        "startLoc": {
          "line": 53,
          "column": 9,
          "position": 277
        },
        "endLoc": {
          "line": 72,
          "column": 5,
          "position": 532
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "Create a new Realtime API call over WebRTC and receive the SDP answer needed to\n        complete the peer connection.\n\n        Args:\n          sdp: WebRTC Session Description Protocol (SDP) offer generated by the caller.\n\n          session: Realtime session object configuration.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"Accept\": \"application/sdp\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 383,
        "end": 400,
        "startLoc": {
          "line": 383,
          "column": 9,
          "position": 2076
        },
        "endLoc": {
          "line": 400,
          "column": 6,
          "position": 2269
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 74,
        "end": 91,
        "startLoc": {
          "line": 74,
          "column": 9,
          "position": 434
        },
        "endLoc": {
          "line": 91,
          "column": 5,
          "position": 627
        }
      }
    },
    {
      "format": "python",
      "lines": 107,
      "fragment": "def accept(\n        self,\n        call_id: str,\n        *,\n        type: Literal[\"realtime\"],\n        audio: RealtimeAudioConfigParam | Omit = omit,\n        include: List[Literal[\"item.input_audio_transcription.logprobs\"]] | Omit = omit,\n        instructions: str | Omit = omit,\n        max_output_tokens: Union[int, Literal[\"inf\"]] | Omit = omit,\n        model: Union[\n            str,\n            Literal[\n                \"gpt-realtime\",\n                \"gpt-realtime-2025-08-28\",\n                \"gpt-4o-realtime-preview\",\n                \"gpt-4o-realtime-preview-2024-10-01\",\n                \"gpt-4o-realtime-preview-2024-12-17\",\n                \"gpt-4o-realtime-preview-2025-06-03\",\n                \"gpt-4o-mini-realtime-preview\",\n                \"gpt-4o-mini-realtime-preview-2024-12-17\",\n                \"gpt-realtime-mini\",\n                \"gpt-realtime-mini-2025-10-06\",\n                \"gpt-audio-mini\",\n                \"gpt-audio-mini-2025-10-06\",\n            ],\n        ]\n        | Omit = omit,\n        output_modalities: List[Literal[\"text\", \"audio\"]] | Omit = omit,\n        prompt: Optional[ResponsePromptParam] | Omit = omit,\n        tool_choice: RealtimeToolChoiceConfigParam | Omit = omit,\n        tools: RealtimeToolsConfigParam | Omit = omit,\n        tracing: Optional[RealtimeTracingConfigParam] | Omit = omit,\n        truncation: RealtimeTruncationParam | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        Accept an incoming SIP call and configure the realtime session that will handle\n        it.\n\n        Args:\n          type: The type of session to create. Always `realtime` for the Realtime API.\n\n          audio: Configuration for input and output audio.\n\n          include: Additional fields to include in server outputs.\n\n              `item.input_audio_transcription.logprobs`: Include logprobs for input audio\n              transcription.\n\n          instructions: The default system instructions (i.e. system message) prepended to model calls.\n              This field allows the client to guide the model on desired responses. The model\n              can be instructed on response content and format, (e.g. \"be extremely succinct\",\n              \"act friendly\", \"here are examples of good responses\") and on audio behavior\n              (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\n              instructions are not guaranteed to be followed by the model, but they provide\n              guidance to the model on the desired behavior.\n\n              Note that the server sets default instructions which will be used if this field\n              is not set and are visible in the `session.created` event at the start of the\n              session.\n\n          max_output_tokens: Maximum number of output tokens for a single assistant response, inclusive of\n              tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\n              `inf` for the maximum available tokens for a given model. Defaults to `inf`.\n\n          model: The Realtime model used for this session.\n\n          output_modalities: The set of modalities the model can respond with. It defaults to `[\"audio\"]`,\n              indicating that the model will respond with audio plus a transcript. `[\"text\"]`\n              can be used to make the model respond with text only. It is not possible to\n              request both `text` and `audio` at the same time.\n\n          prompt: Reference to a prompt template and its variables.\n              [Learn more](https://platform.openai.com/docs/guides/text?api-mode=responses#reusable-prompts).\n\n          tool_choice: How the model chooses tools. Provide one of the string modes or force a specific\n              function/MCP tool.\n\n          tools: Tools available to the model.\n\n          tracing: Realtime API can write session traces to the\n              [Traces Dashboard](/logs?api=traces). Set to null to disable tracing. Once\n              tracing is enabled for a session, the configuration cannot be modified.\n\n              `auto` will create a trace for the session with default values for the workflow\n              name, group id, and metadata.\n\n          truncation: Controls how the realtime conversation is truncated prior to model inference.\n              The default is `auto`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not call_id:\n            raise ValueError(f\"Expected a non-empty value for `call_id` but received {call_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 415,
        "end": 521,
        "startLoc": {
          "line": 415,
          "column": 2,
          "position": 2364
        },
        "endLoc": {
          "line": 521,
          "column": 6,
          "position": 2785
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 106,
        "end": 212,
        "startLoc": {
          "line": 106,
          "column": 5,
          "position": 716
        },
        "endLoc": {
          "line": 212,
          "column": 5,
          "position": 1137
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "(\n                {\n                    \"type\": type,\n                    \"audio\": audio,\n                    \"include\": include,\n                    \"instructions\": instructions,\n                    \"max_output_tokens\": max_output_tokens,\n                    \"model\": model,\n                    \"output_modalities\": output_modalities,\n                    \"prompt\": prompt,\n                    \"tool_choice\": tool_choice,\n                    \"tools\": tools,\n                    \"tracing\": tracing,\n                    \"truncation\": truncation,\n                },\n                call_accept_params.CallAcceptParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=NoneType,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 523,
        "end": 546,
        "startLoc": {
          "line": 523,
          "column": 22,
          "position": 2803
        },
        "endLoc": {
          "line": 546,
          "column": 6,
          "position": 2947
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 214,
        "end": 237,
        "startLoc": {
          "line": 214,
          "column": 16,
          "position": 1151
        },
        "endLoc": {
          "line": 237,
          "column": 4,
          "position": 1295
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def hangup(\n        self,\n        call_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        End an active Realtime API call, whether it was initiated over SIP or WebRTC.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not call_id:\n            raise ValueError(f\"Expected a non-empty value for `call_id` but received {call_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 546,
        "end": 572,
        "startLoc": {
          "line": 546,
          "column": 2,
          "position": 2949
        },
        "endLoc": {
          "line": 572,
          "column": 6,
          "position": 3100
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 237,
        "end": 263,
        "startLoc": {
          "line": 237,
          "column": 5,
          "position": 1295
        },
        "endLoc": {
          "line": 263,
          "column": 5,
          "position": 1446
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "def refer(\n        self,\n        call_id: str,\n        *,\n        target_uri: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        Transfer an active SIP call to a new destination using the SIP REFER verb.\n\n        Args:\n          target_uri: URI that should appear in the SIP Refer-To header. Supports values like\n              `tel:+14155550123` or `sip:agent@example.com`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not call_id:\n            raise ValueError(f\"Expected a non-empty value for `call_id` but received {call_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 580,
        "end": 610,
        "startLoc": {
          "line": 580,
          "column": 2,
          "position": 3155
        },
        "endLoc": {
          "line": 610,
          "column": 6,
          "position": 3313
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 271,
        "end": 301,
        "startLoc": {
          "line": 271,
          "column": 5,
          "position": 1497
        },
        "endLoc": {
          "line": 301,
          "column": 5,
          "position": 1655
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "def reject(\n        self,\n        call_id: str,\n        *,\n        status_code: int | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        Decline an incoming SIP call by returning a SIP status code to the caller.\n\n        Args:\n          status_code: SIP response code to send back to the caller. Defaults to `603` (Decline) when\n              omitted.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not call_id:\n            raise ValueError(f\"Expected a non-empty value for `call_id` but received {call_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 619,
        "end": 649,
        "startLoc": {
          "line": 619,
          "column": 2,
          "position": 3389
        },
        "endLoc": {
          "line": 649,
          "column": 6,
          "position": 3555
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/realtime/calls.py",
        "start": 310,
        "end": 340,
        "startLoc": {
          "line": 310,
          "column": 5,
          "position": 1725
        },
        "endLoc": {
          "line": 340,
          "column": 5,
          "position": 1891
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the evaluation",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 90,
        "end": 99,
        "startLoc": {
          "line": 90,
          "column": 2,
          "position": 777
        },
        "endLoc": {
          "line": 99,
          "column": 11,
          "position": 921
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 90,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 90,
          "column": 4,
          "position": 709
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "Create the structure of an evaluation that can be used to test a model's\n        performance. An evaluation is a set of testing criteria and the config for a\n        data source, which dictates the schema of the data used in the evaluation. After\n        creating an evaluation, you can run it on different models and model parameters.\n        We support several types of graders and datasources. For more information, see\n        the [Evals guide](https://platform.openai.com/docs/guides/evals).\n\n        Args:\n          data_source_config: The configuration for the data source used for the evaluation runs. Dictates the\n              schema of the data used in the evaluation.\n\n          testing_criteria: A list of graders for all eval runs in this group. Graders can reference\n              variables in the data source using double curly braces notation, like\n              `{{item.variable_name}}`. To reference the model's output, use the `sample`\n              namespace (ie, `{{sample.output_text}}`).\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: The name of the evaluation.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 340,
        "end": 373,
        "startLoc": {
          "line": 340,
          "column": 9,
          "position": 2152
        },
        "endLoc": {
          "line": 373,
          "column": 6,
          "position": 2712
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 76,
        "end": 109,
        "startLoc": {
          "line": 76,
          "column": 9,
          "position": 448
        },
        "endLoc": {
          "line": 109,
          "column": 5,
          "position": 1008
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve(\n        self,\n        eval_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> EvalRetrieveResponse:\n        \"\"\"\n        Get an evaluation by ID.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 390,
        "end": 415,
        "startLoc": {
          "line": 390,
          "column": 2,
          "position": 2819
        },
        "endLoc": {
          "line": 415,
          "column": 6,
          "position": 2947
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 126,
        "end": 151,
        "startLoc": {
          "line": 126,
          "column": 5,
          "position": 1109
        },
        "endLoc": {
          "line": 151,
          "column": 5,
          "position": 1237
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "def update(\n        self,\n        eval_id: str,\n        *,\n        metadata: Optional[Metadata] | Omit = omit,\n        name: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> EvalUpdateResponse:\n        \"\"\"\n        Update certain properties of an evaluation.\n\n        Args:\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          name: Rename the evaluation.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 423,
        "end": 459,
        "startLoc": {
          "line": 423,
          "column": 2,
          "position": 3002
        },
        "endLoc": {
          "line": 459,
          "column": 6,
          "position": 3163
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 159,
        "end": 195,
        "startLoc": {
          "line": 159,
          "column": 5,
          "position": 1288
        },
        "endLoc": {
          "line": 195,
          "column": 5,
          "position": 1449
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "(\n                {\n                    \"metadata\": metadata,\n                    \"name\": name,\n                },\n                eval_update_params.EvalUpdateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=EvalUpdateResponse,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        order_by: Literal[\"created_at\", \"updated_at\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 461,
        "end": 487,
        "startLoc": {
          "line": 461,
          "column": 22,
          "position": 3181
        },
        "endLoc": {
          "line": 487,
          "column": 15,
          "position": 3422
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 197,
        "end": 223,
        "startLoc": {
          "line": 197,
          "column": 16,
          "position": 1463
        },
        "endLoc": {
          "line": 223,
          "column": 15,
          "position": 1704
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[EvalListResponse],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"order_by\": order_by,\n                    },\n                    eval_list_params.EvalListParams,\n                ),\n            ),\n            model=EvalListResponse,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 512,
        "end": 531,
        "startLoc": {
          "line": 512,
          "column": 16,
          "position": 3453
        },
        "endLoc": {
          "line": 531,
          "column": 6,
          "position": 3554
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 248,
        "end": 267,
        "startLoc": {
          "line": 248,
          "column": 15,
          "position": 1729
        },
        "endLoc": {
          "line": 267,
          "column": 4,
          "position": 1830
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def delete(\n        self,\n        eval_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> EvalDeleteResponse:\n        \"\"\"\n        Delete an evaluation.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not eval_id:\n            raise ValueError(f\"Expected a non-empty value for `eval_id` but received {eval_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 531,
        "end": 556,
        "startLoc": {
          "line": 531,
          "column": 2,
          "position": 3556
        },
        "endLoc": {
          "line": 556,
          "column": 6,
          "position": 3684
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/evals/evals.py",
        "start": 267,
        "end": 292,
        "startLoc": {
          "line": 267,
          "column": 5,
          "position": 1830
        },
        "endLoc": {
          "line": 292,
          "column": 5,
          "position": 1958
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "from typing_extensions import Literal\n\nimport httpx\n\nfrom ... import _legacy_response\nfrom ..._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ..._utils import maybe_transform, async_maybe_transform\nfrom ..._compat import cached_property\nfrom ..._resource import SyncAPIResource, AsyncAPIResource\nfrom ..._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ...pagination",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 6,
        "end": 16,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 29
        },
        "endLoc": {
          "line": 16,
          "column": 11,
          "position": 140
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 6,
        "end": 16,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 16,
          "column": 13,
          "position": 137
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncConversationCursorPage[ConversationItem",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 147,
        "end": 156,
        "startLoc": {
          "line": 147,
          "column": 19,
          "position": 1021
        },
        "endLoc": {
          "line": 156,
          "column": 17,
          "position": 1152
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/beta/threads/runs/steps.py",
        "start": 108,
        "end": 191,
        "startLoc": {
          "line": 108,
          "column": 15,
          "position": 800
        },
        "endLoc": {
          "line": 191,
          "column": 5,
          "position": 1255
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "Create items in a conversation with the given ID.\n\n        Args:\n          items: The items to add to the conversation. You may add up to 20 items at a time.\n\n          include: Additional fields to include in the response. See the `include` parameter for\n              [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include)\n              for more information.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 292,
        "end": 311,
        "startLoc": {
          "line": 292,
          "column": 9,
          "position": 1620
        },
        "endLoc": {
          "line": 311,
          "column": 6,
          "position": 1856
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 62,
        "end": 81,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 386
        },
        "endLoc": {
          "line": 81,
          "column": 5,
          "position": 622
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": "def retrieve(\n        self,\n        item_id: str,\n        *,\n        conversation_id: str,\n        include: List[ResponseIncludable] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ConversationItem:\n        \"\"\"\n        Get a single item from a conversation with the given IDs.\n\n        Args:\n          include: Additional fields to include in the response. See the `include` parameter for\n              [listing Conversation items above](https://platform.openai.com/docs/api-reference/conversations/list-items#conversations_list_items-include)\n              for more information.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        if not item_id:\n            raise ValueError(f\"Expected a non-empty value for `item_id` but received {item_id!r}\")\n        return cast(\n            ConversationItem,\n            await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 324,
        "end": 359,
        "startLoc": {
          "line": 324,
          "column": 2,
          "position": 1957
        },
        "endLoc": {
          "line": 359,
          "column": 6,
          "position": 2135
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 94,
        "end": 129,
        "startLoc": {
          "line": 94,
          "column": 5,
          "position": 715
        },
        "endLoc": {
          "line": 129,
          "column": 5,
          "position": 893
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "({\"include\": include}, item_retrieve_params.ItemRetrieveParams),\n                ),\n                cast_to=cast(Any, ConversationItem),  # Union types cannot be passed in as arguments in the type system\n            ),\n        )\n\n    def list(\n        self,\n        conversation_id: str,\n        *,\n        after: str | Omit = omit,\n        include: List[ResponseIncludable] | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[ConversationItem",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 366,
        "end": 386,
        "startLoc": {
          "line": 366,
          "column": 22,
          "position": 2183
        },
        "endLoc": {
          "line": 386,
          "column": 17,
          "position": 2398
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 136,
        "end": 273,
        "startLoc": {
          "line": 136,
          "column": 16,
          "position": 937
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[ConversationItem],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"include\": include,\n                        \"limit\": limit,\n                        \"order\": order,\n                    },\n                    item_list_params.ItemListParams,\n                ),\n            ),\n            model=cast(Any, ConversationItem),  # Union types cannot be passed in as arguments in the type system\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 432,
        "end": 451,
        "startLoc": {
          "line": 432,
          "column": 28,
          "position": 2445
        },
        "endLoc": {
          "line": 451,
          "column": 6,
          "position": 2554
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 202,
        "end": 221,
        "startLoc": {
          "line": 202,
          "column": 27,
          "position": 1193
        },
        "endLoc": {
          "line": 221,
          "column": 4,
          "position": 1302
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def delete(\n        self,\n        item_id: str,\n        *,\n        conversation_id: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Conversation:\n        \"\"\"\n        Delete an item from a conversation with the given IDs.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        if not item_id:\n            raise ValueError(f\"Expected a non-empty value for `item_id` but received {item_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 451,
        "end": 479,
        "startLoc": {
          "line": 451,
          "column": 2,
          "position": 2556
        },
        "endLoc": {
          "line": 479,
          "column": 6,
          "position": 2708
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/items.py",
        "start": 221,
        "end": 249,
        "startLoc": {
          "line": 221,
          "column": 5,
          "position": 1302
        },
        "endLoc": {
          "line": 249,
          "column": 5,
          "position": 1454
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "from ..._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ..._utils import maybe_transform, async_maybe_transform\nfrom ..._compat import cached_property\nfrom ..._resource import SyncAPIResource, AsyncAPIResource\nfrom ..._response import to_streamed_response_wrapper, async_to_streamed_response_wrapper\nfrom ..._base_client import make_request_options\nfrom ...types.conversations",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 18,
        "end": 24,
        "startLoc": {
          "line": 18,
          "column": 1,
          "position": 74
        },
        "endLoc": {
          "line": 24,
          "column": 14,
          "position": 174
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 11,
        "end": 17,
        "startLoc": {
          "line": 11,
          "column": 1,
          "position": 50
        },
        "endLoc": {
          "line": 17,
          "column": 10,
          "position": 150
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 74,
        "end": 91,
        "startLoc": {
          "line": 74,
          "column": 5,
          "position": 453
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 666
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 98,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 98,
          "column": 3,
          "position": 813
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "Create a conversation.\n\n        Args:\n          items: Initial items to include in the conversation context. You may add up to 20 items\n              at a time.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 253,
        "end": 274,
        "startLoc": {
          "line": 253,
          "column": 9,
          "position": 1464
        },
        "endLoc": {
          "line": 274,
          "column": 6,
          "position": 1732
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 70,
        "end": 91,
        "startLoc": {
          "line": 70,
          "column": 9,
          "position": 400
        },
        "endLoc": {
          "line": 91,
          "column": 5,
          "position": 668
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve(\n        self,\n        conversation_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Conversation:\n        \"\"\"\n        Get a conversation\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 289,
        "end": 314,
        "startLoc": {
          "line": 289,
          "column": 2,
          "position": 1825
        },
        "endLoc": {
          "line": 314,
          "column": 6,
          "position": 1953
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 106,
        "end": 131,
        "startLoc": {
          "line": 106,
          "column": 5,
          "position": 755
        },
        "endLoc": {
          "line": 131,
          "column": 5,
          "position": 883
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "def update(\n        self,\n        conversation_id: str,\n        *,\n        metadata: Optional[Metadata],\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Conversation:\n        \"\"\"\n        Update a conversation\n\n        Args:\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 322,
        "end": 355,
        "startLoc": {
          "line": 322,
          "column": 2,
          "position": 2008
        },
        "endLoc": {
          "line": 355,
          "column": 6,
          "position": 2146
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 139,
        "end": 172,
        "startLoc": {
          "line": 139,
          "column": 5,
          "position": 934
        },
        "endLoc": {
          "line": 172,
          "column": 5,
          "position": 1072
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def delete(\n        self,\n        conversation_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ConversationDeletedResource:\n        \"\"\"Delete a conversation.\n\n        Items in the conversation will not be deleted.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not conversation_id:\n            raise ValueError(f\"Expected a non-empty value for `conversation_id` but received {conversation_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 366,
        "end": 392,
        "startLoc": {
          "line": 366,
          "column": 2,
          "position": 2226
        },
        "endLoc": {
          "line": 392,
          "column": 6,
          "position": 2354
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/conversations/conversations.py",
        "start": 181,
        "end": 207,
        "startLoc": {
          "line": 181,
          "column": 5,
          "position": 1142
        },
        "endLoc": {
          "line": 207,
          "column": 5,
          "position": 1270
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[ContainerListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 138,
        "end": 149,
        "startLoc": {
          "line": 138,
          "column": 5,
          "position": 721
        },
        "endLoc": {
          "line": 149,
          "column": 22,
          "position": 862
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 151,
        "end": 117,
        "startLoc": {
          "line": 151,
          "column": 4,
          "position": 1022
        },
        "endLoc": {
          "line": 117,
          "column": 8,
          "position": 931
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "Create Container\n\n        Args:\n          name: Name of the container to create.\n\n          expires_after: Container expiration time in seconds relative to the 'anchor' time.\n\n          file_ids: IDs of files to copy to the container.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await self._post(\n            \"/containers\",\n            body=await async_maybe_transform(\n                {\n                    \"name\": name,\n                    \"expires_after\": expires_after,\n                    \"file_ids\": file_ids,\n                },\n                container_create_params.ContainerCreateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=ContainerCreateResponse,\n        )\n\n    async def retrieve(\n        self,\n        container_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ContainerRetrieveResponse:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 267,
        "end": 311,
        "startLoc": {
          "line": 267,
          "column": 9,
          "position": 1324
        },
        "endLoc": {
          "line": 311,
          "column": 12,
          "position": 1476
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 71,
        "end": 115,
        "startLoc": {
          "line": 71,
          "column": 9,
          "position": 399
        },
        "endLoc": {
          "line": 115,
          "column": 12,
          "position": 551
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._get(\n            f\"/containers/{container_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=ContainerRetrieveResponse,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[ContainerListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 325,
        "end": 345,
        "startLoc": {
          "line": 325,
          "column": 2,
          "position": 1590
        },
        "endLoc": {
          "line": 345,
          "column": 22,
          "position": 1789
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 129,
        "end": 273,
        "startLoc": {
          "line": 129,
          "column": 2,
          "position": 663
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def delete(\n        self,\n        container_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> None:\n        \"\"\"\n        Delete Container\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not container_id:\n            raise ValueError(f\"Expected a non-empty value for `container_id` but received {container_id!r}\")\n        extra_headers = {\"Accept\": \"*/*\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 390,
        "end": 416,
        "startLoc": {
          "line": 390,
          "column": 2,
          "position": 1914
        },
        "endLoc": {
          "line": 416,
          "column": 6,
          "position": 2065
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 194,
        "end": 220,
        "startLoc": {
          "line": 194,
          "column": 5,
          "position": 979
        },
        "endLoc": {
          "line": 220,
          "column": 5,
          "position": 1130
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/translations.py",
        "start": 133,
        "end": 139,
        "startLoc": {
          "line": 133,
          "column": 2,
          "position": 635
        },
        "endLoc": {
          "line": 139,
          "column": 14,
          "position": 761
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 100,
        "end": 109,
        "startLoc": {
          "line": 100,
          "column": 8,
          "position": 370
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 496
        }
      }
    },
    {
      "format": "python",
      "lines": 46,
      "fragment": "Translates audio into English.\n\n        Args:\n          file: The audio file object (not file name) translate, in one of these formats: flac,\n              mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n\n          model: ID of the model to use. Only `whisper-1` (which is powered by our open source\n              Whisper V2 model) is currently available.\n\n          prompt: An optional text to guide the model's style or continue a previous audio\n              segment. The\n              [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n              should be in English.\n\n          response_format: The format of the output, in one of these options: `json`, `text`, `srt`,\n              `verbose_json`, or `vtt`.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        body = deepcopy_minimal(\n            {\n                \"file\": file,\n                \"model\": model,\n                \"prompt\": prompt,\n                \"response_format\": response_format,\n                \"temperature\": temperature,\n            }\n        )\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"file\"]])\n        # It should be noted that the actual Content-Type header that will be\n        # sent to the server will contain a `boundary` parameter, e.g.\n        # multipart/form-data; boundary=---abc--\n        extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/translations.py",
        "start": 259,
        "end": 304,
        "startLoc": {
          "line": 259,
          "column": 9,
          "position": 1148
        },
        "endLoc": {
          "line": 304,
          "column": 6,
          "position": 1726
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/translations.py",
        "start": 116,
        "end": 161,
        "startLoc": {
          "line": 116,
          "column": 9,
          "position": 380
        },
        "endLoc": {
          "line": 161,
          "column": 5,
          "position": 958
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "If set to true, the model response data will be streamed to the client as it is\n              generated using\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n              See the\n              [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n              for more information.\n\n              Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n\n          temperature",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 121,
        "end": 130,
        "startLoc": {
          "line": 121,
          "column": 2,
          "position": 1094
        },
        "endLoc": {
          "line": 130,
          "column": 12,
          "position": 1260
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 147,
        "end": 160,
        "startLoc": {
          "line": 147,
          "column": 5,
          "position": 811
        },
        "endLoc": {
          "line": 160,
          "column": 8,
          "position": 976
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ".\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 128,
        "end": 136,
        "startLoc": {
          "line": 128,
          "column": 8,
          "position": 1256
        },
        "endLoc": {
          "line": 136,
          "column": 24,
          "position": 1389
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/translations.py",
        "start": 131,
        "end": 109,
        "startLoc": {
          "line": 131,
          "column": 6,
          "position": 628
        },
        "endLoc": {
          "line": 109,
          "column": 8,
          "position": 496
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "Transcribes audio into the input language.\n\n        Args:\n          file:\n              The audio file object (not file name) to transcribe, in one of these formats:\n              flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n\n          model: ID of the model to use. The options are `gpt-4o-transcribe`,\n              `gpt-4o-mini-transcribe`, `whisper",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 234,
        "end": 242,
        "startLoc": {
          "line": 234,
          "column": 9,
          "position": 1526
        },
        "endLoc": {
          "line": 242,
          "column": 9,
          "position": 1652
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 86,
        "end": 94,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 480
        },
        "endLoc": {
          "line": 94,
          "column": 4,
          "position": 606
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ".\n\n          stream: If set to true, the model response data will be streamed to the client as it is\n              generated using\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n              See the\n              [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n              for more information.\n\n              Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n\n          chunking_strategy",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 243,
        "end": 254,
        "startLoc": {
          "line": 243,
          "column": 9,
          "position": 1690
        },
        "endLoc": {
          "line": 254,
          "column": 18,
          "position": 1863
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 119,
        "end": 160,
        "startLoc": {
          "line": 119,
          "column": 7,
          "position": 1087
        },
        "endLoc": {
          "line": 160,
          "column": 8,
          "position": 976
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ".\n\n          chunking_strategy: Controls how the audio is cut into chunks. When set to `\"auto\"`, the server\n              first normalizes loudness and then uses voice activity detection (VAD) to choose\n              boundaries. `server_vad` object can be provided to tweak VAD detection\n              parameters manually. If unset, the audio is transcribed as a single block.\n              Required",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 252,
        "end": 258,
        "startLoc": {
          "line": 252,
          "column": 8,
          "position": 1859
        },
        "endLoc": {
          "line": 258,
          "column": 9,
          "position": 1976
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 95,
        "end": 102,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 635
        },
        "endLoc": {
          "line": 102,
          "column": 8,
          "position": 753
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ".\n\n          include: Additional information to include in the transcription response. `logprobs` will\n              return the log probabilities of the tokens in the response to understand the\n              model's confidence in the transcription. `logprobs` only works with\n              response_format set to `json` and only with the models `gpt-4o-transcribe` and\n              `gpt-4o-mini-transcribe`. This",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 259,
        "end": 265,
        "startLoc": {
          "line": 259,
          "column": 8,
          "position": 2002
        },
        "endLoc": {
          "line": 265,
          "column": 5,
          "position": 2114
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 100,
        "end": 108,
        "startLoc": {
          "line": 100,
          "column": 6,
          "position": 749
        },
        "endLoc": {
          "line": 108,
          "column": 9,
          "position": 863
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          language: The language of the input audio. Supplying the input language in\n              [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n              format will improve accuracy and latency.\n\n          prompt: An optional text to guide the model's style or continue a previous audio\n              segment. The\n              [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n              should match the audio language. This",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 276,
        "end": 285,
        "startLoc": {
          "line": 276,
          "column": 2,
          "position": 2334
        },
        "endLoc": {
          "line": 285,
          "column": 5,
          "position": 2486
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 106,
        "end": 117,
        "startLoc": {
          "line": 106,
          "column": 12,
          "position": 859
        },
        "endLoc": {
          "line": 117,
          "column": 16,
          "position": 1013
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "The format of the output, in one of these options: `json`, `text`, `srt`,\n              `verbose_json`, `vtt`, or `diarized_json`. For `gpt-4o-transcribe` and\n              `gpt-4o-mini-transcribe`, the only supported format is `json`. For\n              `gpt-4o-transcribe-diarize`, the supported formats are `json`, `text`, and\n              `diarized_json`, with `diarized_json` required to receive speaker annotations.\n\n          temperature",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 288,
        "end": 294,
        "startLoc": {
          "line": 288,
          "column": 2,
          "position": 2515
        },
        "endLoc": {
          "line": 294,
          "column": 12,
          "position": 2640
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 92,
        "end": 100,
        "startLoc": {
          "line": 92,
          "column": 5,
          "position": 245
        },
        "endLoc": {
          "line": 100,
          "column": 8,
          "position": 369
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ".\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency. This",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 292,
        "end": 304,
        "startLoc": {
          "line": 292,
          "column": 12,
          "position": 2636
        },
        "endLoc": {
          "line": 304,
          "column": 5,
          "position": 2872
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/translations.py",
        "start": 131,
        "end": 142,
        "startLoc": {
          "line": 131,
          "column": 6,
          "position": 628
        },
        "endLoc": {
          "line": 142,
          "column": 14,
          "position": 1494
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency. This option is not available for\n              `gpt-4o-transcribe-diarize`.\n\n          extra_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 300,
        "end": 307,
        "startLoc": {
          "line": 300,
          "column": 2,
          "position": 2772
        },
        "endLoc": {
          "line": 307,
          "column": 14,
          "position": 2896
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/audio/transcription_create_params.py",
        "start": 109,
        "end": 121,
        "startLoc": {
          "line": 109,
          "column": 8,
          "position": 497
        },
        "endLoc": {
          "line": 121,
          "column": 8,
          "position": 621
        }
      }
    },
    {
      "format": "python",
      "lines": 149,
      "fragment": "Transcribes audio into the input language.\n\n        Args:\n          file:\n              The audio file object (not file name) to transcribe, in one of these formats:\n              flac, mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\n\n          model: ID of the model to use. The options are `gpt-4o-transcribe`,\n              `gpt-4o-mini-transcribe`, `whisper-1` (which is powered by our open source\n              Whisper V2 model), and `gpt-4o-transcribe-diarize`.\n\n          stream: If set to true, the model response data will be streamed to the client as it is\n              generated using\n              [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format).\n              See the\n              [Streaming section of the Speech-to-Text guide](https://platform.openai.com/docs/guides/speech-to-text?lang=curl#streaming-transcriptions)\n              for more information.\n\n              Note: Streaming is not supported for the `whisper-1` model and will be ignored.\n\n          chunking_strategy: Controls how the audio is cut into chunks. When set to `\"auto\"`, the server\n              first normalizes loudness and then uses voice activity detection (VAD) to choose\n              boundaries. `server_vad` object can be provided to tweak VAD detection\n              parameters manually. If unset, the audio is transcribed as a single block.\n              Required when using `gpt-4o-transcribe-diarize` for inputs longer than 30\n              seconds.\n\n          include: Additional information to include in the transcription response. `logprobs` will\n              return the log probabilities of the tokens in the response to understand the\n              model's confidence in the transcription. `logprobs` only works with\n              response_format set to `json` and only with the models `gpt-4o-transcribe` and\n              `gpt-4o-mini-transcribe`. This field is not supported when using\n              `gpt-4o-transcribe-diarize`.\n\n          known_speaker_names: Optional list of speaker names that correspond to the audio samples provided in\n              `known_speaker_references[]`. Each entry should be a short identifier (for\n              example `customer` or `agent`). Up to 4 speakers are supported.\n\n          known_speaker_references: Optional list of audio samples (as\n              [data URLs](https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/Data_URLs))\n              that contain known speaker references matching `known_speaker_names[]`. Each\n              sample must be between 2 and 10 seconds, and can use any of the same input audio\n              formats supported by `file`.\n\n          language: The language of the input audio. Supplying the input language in\n              [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\n              format will improve accuracy and latency.\n\n          prompt: An optional text to guide the model's style or continue a previous audio\n              segment. The\n              [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\n              should match the audio language. This field is not supported when using\n              `gpt-4o-transcribe-diarize`.\n\n          response_format: The format of the output, in one of these options: `json`, `text`, `srt`,\n              `verbose_json`, `vtt`, or `diarized_json`. For `gpt-4o-transcribe` and\n              `gpt-4o-mini-transcribe`, the only supported format is `json`. For\n              `gpt-4o-transcribe-diarize`, the supported formats are `json`, `text`, and\n              `diarized_json`, with `diarized_json` required to receive speaker annotations.\n\n          temperature: The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\n              output more random, while lower values like 0.2 will make it more focused and\n              deterministic. If set to 0, the model will use\n              [log probability](https://en.wikipedia.org/wiki/Log_probability) to\n              automatically increase the temperature until certain thresholds are hit.\n\n          timestamp_granularities: The timestamp granularities to populate for this transcription.\n              `response_format` must be set `verbose_json` to use timestamp granularities.\n              Either or both of these options are supported: `word`, or `segment`. Note: There\n              is no additional latency for segment timestamps, but generating word timestamps\n              incurs additional latency. This option is not available for\n              `gpt-4o-transcribe-diarize`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        ...\n\n    @required_args([\"file\", \"model\"], [\"file\", \"model\", \"stream\"])\n    def create(\n        self,\n        *,\n        file: FileTypes,\n        model: Union[str, AudioModel],\n        chunking_strategy: Optional[transcription_create_params.ChunkingStrategy] | Omit = omit,\n        include: List[TranscriptionInclude] | Omit = omit,\n        known_speaker_names: SequenceNotStr[str] | Omit = omit,\n        known_speaker_references: SequenceNotStr[str] | Omit = omit,\n        language: str | Omit = omit,\n        prompt: str | Omit = omit,\n        response_format: Union[AudioResponseFormat, Omit] = omit,\n        stream: Optional[Literal[False]] | Literal[True] | Omit = omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> str | Transcription | TranscriptionDiarized | TranscriptionVerbose | Stream[TranscriptionStreamEvent]:\n        body = deepcopy_minimal(\n            {\n                \"file\": file,\n                \"model\": model,\n                \"chunking_strategy\": chunking_strategy,\n                \"include\": include,\n                \"known_speaker_names\": known_speaker_names,\n                \"known_speaker_references\": known_speaker_references,\n                \"language\": language,\n                \"prompt\": prompt,\n                \"response_format\": response_format,\n                \"stream\": stream,\n                \"temperature\": temperature,\n                \"timestamp_granularities\": timestamp_granularities,\n            }\n        )\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"file\"]])\n        # It should be noted that the actual Content-Type header that will be\n        # sent to the server will contain a `boundary` parameter, e.g.\n        # multipart/form-data; boundary=---abc--\n        extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return self._post(  # type: ignore[return-value]\n            \"/audio/transcriptions\",\n            body=maybe_transform(\n                body,\n                transcription_create_params.TranscriptionCreateParamsStreaming\n                if stream\n                else transcription_create_params.TranscriptionCreateParamsNonStreaming,\n            ),\n            files=files,\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=_get_response_format_type(response_format),\n            stream=stream or False,\n            stream_cls=Stream[TranscriptionStreamEvent],\n        )\n\n\nclass AsyncTranscriptions(AsyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> AsyncTranscriptionsWithRawResponse:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 341,
        "end": 489,
        "startLoc": {
          "line": 341,
          "column": 9,
          "position": 2975
        },
        "endLoc": {
          "line": 489,
          "column": 12,
          "position": 4421
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 86,
        "end": 340,
        "startLoc": {
          "line": 86,
          "column": 9,
          "position": 480
        },
        "endLoc": {
          "line": 340,
          "column": 12,
          "position": 2972
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "| Omit = omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> TranscriptionVerbose",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 618,
        "end": 627,
        "startLoc": {
          "line": 618,
          "column": 2,
          "position": 4962
        },
        "endLoc": {
          "line": 627,
          "column": 21,
          "position": 5092
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 519,
        "end": 528,
        "startLoc": {
          "line": 519,
          "column": 2,
          "position": 4718
        },
        "endLoc": {
          "line": 528,
          "column": 28,
          "position": 4848
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "],\n        language: str | Omit = omit,\n        prompt: str | Omit = omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> str",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 637,
        "end": 648,
        "startLoc": {
          "line": 637,
          "column": 6,
          "position": 5190
        },
        "endLoc": {
          "line": 648,
          "column": 4,
          "position": 5344
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 616,
        "end": 528,
        "startLoc": {
          "line": 616,
          "column": 15,
          "position": 4938
        },
        "endLoc": {
          "line": 528,
          "column": 28,
          "position": 4848
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "],\n        chunking_strategy: Optional[transcription_create_params.ChunkingStrategy] | Omit = omit,\n        include: List[TranscriptionInclude] | Omit = omit,\n        known_speaker_names: SequenceNotStr[str] | Omit = omit,\n        known_speaker_references: SequenceNotStr[str] | Omit = omit,\n        language: str | Omit = omit,\n        prompt: str | Omit = omit,\n        response_format: Union[AudioResponseFormat",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 656,
        "end": 663,
        "startLoc": {
          "line": 656,
          "column": 5,
          "position": 5398
        },
        "endLoc": {
          "line": 663,
          "column": 20,
          "position": 5511
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 511,
        "end": 518,
        "startLoc": {
          "line": 511,
          "column": 11,
          "position": 4579
        },
        "endLoc": {
          "line": 518,
          "column": 8,
          "position": 4692
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "= omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncStream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 663,
        "end": 672,
        "startLoc": {
          "line": 663,
          "column": 2,
          "position": 5517
        },
        "endLoc": {
          "line": 672,
          "column": 12,
          "position": 5643
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 519,
        "end": 528,
        "startLoc": {
          "line": 519,
          "column": 2,
          "position": 4722
        },
        "endLoc": {
          "line": 528,
          "column": 28,
          "position": 4848
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ",\n        chunking_strategy: Optional[transcription_create_params.ChunkingStrategy] | Omit = omit,\n        include: List[TranscriptionInclude] | Omit = omit,\n        known_speaker_names: SequenceNotStr[str] | Omit = omit,\n        known_speaker_references: SequenceNotStr[str] | Omit = omit,\n        language: str | Omit = omit,\n        prompt: str | Omit = omit,\n        response_format: Union[AudioResponseFormat, Omit] = omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> TranscriptionCreateResponse |",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 763,
        "end": 779,
        "startLoc": {
          "line": 763,
          "column": 5,
          "position": 5702
        },
        "endLoc": {
          "line": 779,
          "column": 2,
          "position": 5948
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 511,
        "end": 528,
        "startLoc": {
          "line": 511,
          "column": 2,
          "position": 4580
        },
        "endLoc": {
          "line": 528,
          "column": 2,
          "position": 4849
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "async def create(\n        self,\n        *,\n        file: FileTypes,\n        model: Union[str, AudioModel],\n        chunking_strategy: Optional[transcription_create_params.ChunkingStrategy] | Omit = omit,\n        include: List[TranscriptionInclude] | Omit = omit,\n        known_speaker_names: SequenceNotStr[str] | Omit = omit,\n        known_speaker_references: SequenceNotStr[str] | Omit = omit,\n        language: str | Omit = omit,\n        prompt: str | Omit = omit,\n        response_format: Union[AudioResponseFormat, Omit] = omit,\n        stream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 865,
        "end": 877,
        "startLoc": {
          "line": 865,
          "column": 5,
          "position": 5988
        },
        "endLoc": {
          "line": 877,
          "column": 7,
          "position": 6145
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 507,
        "end": 664,
        "startLoc": {
          "line": 507,
          "column": 5,
          "position": 4547
        },
        "endLoc": {
          "line": 664,
          "column": 12,
          "position": 5523
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "] | Omit = omit,\n        temperature: float | Omit = omit,\n        timestamp_granularities: List[Literal[\"word\", \"segment\"]] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Transcription",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 877,
        "end": 886,
        "startLoc": {
          "line": 877,
          "column": 5,
          "position": 6161
        },
        "endLoc": {
          "line": 886,
          "column": 14,
          "position": 6293
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/transcriptions.py",
        "start": 519,
        "end": 528,
        "startLoc": {
          "line": 519,
          "column": 2,
          "position": 4716
        },
        "endLoc": {
          "line": 528,
          "column": 28,
          "position": 4848
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "from typing_extensions import Literal\n\nimport httpx\n\nfrom ... import _legacy_response\nfrom ..._types import Body, Omit, Query, Headers, NotGiven, omit, not_given\nfrom ..._utils import maybe_transform, async_maybe_transform\nfrom ..._compat import cached_property\nfrom ..._resource import SyncAPIResource, AsyncAPIResource\nfrom ..._response import (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/speech.py",
        "start": 6,
        "end": 15,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 20
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 121
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/responses/input_tokens.py",
        "start": 6,
        "end": 15,
        "startLoc": {
          "line": 6,
          "column": 1,
          "position": 26
        },
        "endLoc": {
          "line": 15,
          "column": 29,
          "position": 127
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": "Generates audio from the input text.\n\n        Args:\n          input: The text to generate audio for. The maximum length is 4096 characters.\n\n          model:\n              One of the available [TTS models](https://platform.openai.com/docs/models#tts):\n              `tts-1`, `tts-1-hd` or `gpt-4o-mini-tts`.\n\n          voice: The voice to use when generating the audio. Supported voices are `alloy`, `ash`,\n              `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and\n              `verse`. Previews of the voices are available in the\n              [Text to speech guide](https://platform.openai.com/docs/guides/text-to-speech#voice-options).\n\n          instructions: Control the voice of your generated audio with additional instructions. Does not\n              work with `tts-1` or `tts-1-hd`.\n\n          response_format: The format to audio in. Supported formats are `mp3`, `opus`, `aac`, `flac`,\n              `wav`, and `pcm`.\n\n          speed: The speed of the generated audio. Select a value from `0.25` to `4.0`. `1.0` is\n              the default.\n\n          stream_format: The format to stream the audio in. Supported formats are `sse` and `audio`.\n              `sse` is not supported for `tts-1` or `tts-1-hd`.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        extra_headers = {\"Accept\": \"application/octet-stream\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/speech.py",
        "start": 164,
        "end": 199,
        "startLoc": {
          "line": 164,
          "column": 9,
          "position": 1072
        },
        "endLoc": {
          "line": 199,
          "column": 6,
          "position": 1596
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/speech.py",
        "start": 68,
        "end": 103,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 309
        },
        "endLoc": {
          "line": 103,
          "column": 5,
          "position": 833
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "(\n                {\n                    \"input\": input,\n                    \"model\": model,\n                    \"voice\": voice,\n                    \"instructions\": instructions,\n                    \"response_format\": response_format,\n                    \"speed\": speed,\n                    \"stream_format\": stream_format,\n                },\n                speech_create_params.SpeechCreateParams,\n            ),\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=_legacy_response.HttpxBinaryResponseContent,\n        )\n\n\nclass SpeechWithRawResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/speech.py",
        "start": 201,
        "end": 220,
        "startLoc": {
          "line": 201,
          "column": 22,
          "position": 1613
        },
        "endLoc": {
          "line": 220,
          "column": 22,
          "position": 1726
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/audio/speech.py",
        "start": 105,
        "end": 124,
        "startLoc": {
          "line": 105,
          "column": 16,
          "position": 846
        },
        "endLoc": {
          "line": 124,
          "column": 12,
          "position": 959
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n    sub.add_argument(\"-n\", \"--num-images\", type=int, default=1)\n    sub.add_argument(\n        \"-I\",\n        \"--image\",\n        type=str,\n        required=True,\n        help=\"Image to modify. Should be a local path and a PNG encoded image.\",\n    )\n    sub.add_argument(\"-s\", \"--size\", type=str, default=\"1024x1024\", help=\"Size of the output image\")\n    sub.add_argument(\"--response-format\", type=str, default=\"url\")\n    sub.set_defaults",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/cli/_api/image.py",
        "start": 47,
        "end": 58,
        "startLoc": {
          "line": 47,
          "column": 4,
          "position": 478
        },
        "endLoc": {
          "line": 58,
          "column": 13,
          "position": 583
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/cli/_api/image.py",
        "start": 26,
        "end": 37,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 297
        },
        "endLoc": {
          "line": 37,
          "column": 13,
          "position": 402
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ", task=\"feature-extraction\")\n\n    def _prepare_route(self, mapped_model: str, api_key: str) -> str:\n        return \"/v1/embeddings\"\n\n    def _prepare_payload_as_dict(\n        self, inputs: Any, parameters: Dict, provider_mapping_info: InferenceProviderMapping\n    ) -> Optional[Dict]:\n        parameters = filter_none(parameters)\n        return {\"input\": inputs, \"model\": provider_mapping_info.provider_id, **parameters}\n\n    def get_response(self, response: Union[bytes, Dict], request_params: Optional[RequestParameters] = None) -> Any:\n        embeddings = _as_dict(response)[\"data\"]\n        return [embedding[\"embedding\"] for embedding in embeddings]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/sambanova.py",
        "start": 29,
        "end": 42,
        "startLoc": {
          "line": 29,
          "column": 27,
          "position": 306
        },
        "endLoc": {
          "line": 42,
          "column": 2,
          "position": 486
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/scaleway.py",
        "start": 15,
        "end": 28,
        "startLoc": {
          "line": 15,
          "column": 26,
          "position": 122
        },
        "endLoc": {
          "line": 28,
          "column": 2,
          "position": 302
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "def get_response(self, response: Union[bytes, Dict], request_params: Optional[RequestParameters] = None) -> Any:\n        output = _as_dict(response)[\"choices\"][0]\n        return {\n            \"generated_text\": output[\"text\"],\n            \"details\": {\n                \"finish_reason\": output.get(\"finish_reason\"),\n                \"seed\": output.get(\"seed\"),\n            },\n        }\n\n\nclass NovitaConversationalTask",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/novita.py",
        "start": 26,
        "end": 37,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 172
        },
        "endLoc": {
          "line": 37,
          "column": 25,
          "position": 282
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 39,
        "end": 50,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 280
        },
        "endLoc": {
          "line": 50,
          "column": 27,
          "position": 390
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n\n    def get_response(self, response: Union[bytes, Dict], request_params: Optional[RequestParameters] = None) -> Any:\n        output = _as_dict(response)[\"choices\"][0]\n        return {\n            \"generated_text\": output[\"text\"],\n            \"details\": {\n                \"finish_reason\": output.get(\"finish_reason\"),\n                \"seed\": output.get(\"seed\"),\n            },\n        }\n\n\nclass NebiusConversationalTask",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/nebius.py",
        "start": 16,
        "end": 29,
        "startLoc": {
          "line": 16,
          "column": 31,
          "position": 113
        },
        "endLoc": {
          "line": 29,
          "column": 25,
          "position": 227
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 37,
        "end": 50,
        "startLoc": {
          "line": 37,
          "column": 10,
          "position": 276
        },
        "endLoc": {
          "line": 50,
          "column": 27,
          "position": 390
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")\n\n    def _prepare_payload_as_dict(\n        self, inputs: Any, parameters: Dict, provider_mapping_info: InferenceProviderMapping\n    ) -> Optional[Dict]:\n        payload = super()._prepare_payload_as_dict(inputs, parameters, provider_mapping_info)\n        response_format = parameters.get(\"response_format\")\n        if isinstance(response_format, dict) and response_format.get(\"type\") == \"json_schema\":\n            json_schema_details = response_format.get(\"json_schema\")\n            if isinstance(json_schema_details, dict) and \"schema\" in json_schema_details:\n                payload[\"guided_json\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/nebius.py",
        "start": 31,
        "end": 41,
        "startLoc": {
          "line": 31,
          "column": 31,
          "position": 257
        },
        "endLoc": {
          "line": 41,
          "column": 14,
          "position": 391
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 52,
        "end": 62,
        "startLoc": {
          "line": 52,
          "column": 10,
          "position": 420
        },
        "endLoc": {
          "line": 62,
          "column": 18,
          "position": 554
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "def _prepare_payload_as_dict(\n        self, inputs: Any, parameters: Dict, provider_mapping_info: InferenceProviderMapping\n    ) -> Optional[Dict]:\n        payload = super()._prepare_payload_as_dict(inputs, parameters, provider_mapping_info)\n        response_format = parameters.get(\"response_format\")\n        if isinstance(response_format, dict) and response_format.get(\"type\") == \"json_schema\":\n            json_schema_details = response_format.get(\"json_schema\")\n            if isinstance(json_schema_details, dict) and \"schema\" in json_schema_details:\n                payload[\"response_format\"] = {  # type: ignore [index]\n                    \"type\": \"json_object\",\n                    \"schema\": json_schema_details[\"schema\"],\n                }\n        return payload",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fireworks_ai.py",
        "start": 15,
        "end": 27,
        "startLoc": {
          "line": 15,
          "column": 5,
          "position": 105
        },
        "endLoc": {
          "line": 27,
          "column": 8,
          "position": 267
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 54,
        "end": 67,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 424
        },
        "endLoc": {
          "line": 67,
          "column": 8,
          "position": 587
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "def get_response(self, response: Union[bytes, Dict], request_params: Optional[RequestParameters] = None) -> Any:\n        output = _as_dict(response)[\"choices\"][0]\n        return {\n            \"generated_text\": output[\"text\"],\n            \"details\": {\n                \"finish_reason\": output.get(\"finish_reason\"),\n                \"seed\": output.get(\"seed\"),\n            },\n        }\n\n\nclass FeatherlessConversationalTask",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/featherless_ai.py",
        "start": 25,
        "end": 36,
        "startLoc": {
          "line": 25,
          "column": 5,
          "position": 206
        },
        "endLoc": {
          "line": 36,
          "column": 30,
          "position": 316
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 39,
        "end": 50,
        "startLoc": {
          "line": 39,
          "column": 5,
          "position": 280
        },
        "endLoc": {
          "line": 50,
          "column": 27,
          "position": 390
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", task=task)\n\n    def _prepare_headers(self, headers: Dict, api_key: str) -> Dict[str, Any]:\n        headers = super()._prepare_headers(headers, api_key)\n        if not api_key.startswith(\"hf_\"):\n            headers[\"authorization\"] = f\"Key {api_key}\"\n        return headers\n\n    def _prepare_route(self, mapped_model: str, api_key: str) -> str:\n        if",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 37,
        "end": 46,
        "startLoc": {
          "line": 37,
          "column": 24,
          "position": 347
        },
        "endLoc": {
          "line": 46,
          "column": 3,
          "position": 461
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 23,
        "end": 32,
        "startLoc": {
          "line": 23,
          "column": 18,
          "position": 185
        },
        "endLoc": {
          "line": 32,
          "column": 7,
          "position": 299
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ")\n        payload: Dict[str, Any] = {\n            \"image_url\": image_url,\n            **filter_none(parameters),\n        }\n        if provider_mapping_info.adapter_weights_path is not None:\n            lora_path = constants.HUGGINGFACE_CO_URL_TEMPLATE.format(\n                repo_id=provider_mapping_info.hf_model_id,\n                revision=\"main\",\n                filename=provider_mapping_info.adapter_weights_path,\n            )\n            payload[\"loras\"] = [{\"path\": lora_path, \"scale\": 1}]\n        return payload\n\n    def get_response(\n        self,\n        response: Union[bytes, Dict],\n        request_params: Optional[RequestParameters] = None,\n    ) -> Any:\n        output = super().get_response(response, request_params)\n        url = _as_dict(output)[\"video\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 227,
        "end": 247,
        "startLoc": {
          "line": 227,
          "column": 13,
          "position": 2145
        },
        "endLoc": {
          "line": 247,
          "column": 8,
          "position": 2334
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 195,
        "end": 216,
        "startLoc": {
          "line": 195,
          "column": 14,
          "position": 1850
        },
        "endLoc": {
          "line": 216,
          "column": 9,
          "position": 2040
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "def get_response(\n        self,\n        response: Union[bytes, Dict],\n        request_params: Optional[RequestParameters] = None,\n    ) -> Any:\n        output = super().get_response(response, request_params)\n        url = _as_dict(output)[\"video\"][\"url\"]\n        return get_session().get(url).content",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 241,
        "end": 248,
        "startLoc": {
          "line": 241,
          "column": 5,
          "position": 2262
        },
        "endLoc": {
          "line": 248,
          "column": 8,
          "position": 2352
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/fal_ai.py",
        "start": 176,
        "end": 183,
        "startLoc": {
          "line": 176,
          "column": 5,
          "position": 1651
        },
        "endLoc": {
          "line": 183,
          "column": 8,
          "position": 1741
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "def _prepare_payload_as_dict(\n        self, inputs: Any, parameters: Dict, provider_mapping_info: InferenceProviderMapping\n    ) -> Optional[Dict]:\n        payload = super()._prepare_payload_as_dict(inputs, parameters, provider_mapping_info)\n        response_format = parameters.get(\"response_format\")\n        if isinstance(response_format, dict) and response_format.get(\"type\") == \"json_schema\":\n            json_schema_details = response_format.get(\"json_schema\")\n            if isinstance(json_schema_details, dict) and \"schema\" in json_schema_details:\n                payload[\"response_format\"] = {  # type: ignore [index]\n                    \"type\": \"json_object\",\n                    \"schema\": json_schema_details[\"schema\"],\n                }\n\n        return payload",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/cohere.py",
        "start": 19,
        "end": 32,
        "startLoc": {
          "line": 19,
          "column": 5,
          "position": 119
        },
        "endLoc": {
          "line": 32,
          "column": 8,
          "position": 282
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_providers/together.py",
        "start": 54,
        "end": 67,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 424
        },
        "endLoc": {
          "line": 67,
          "column": 8,
          "position": 587
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                        fs_join(target, \"nesteddir\"),\n                    ],\n                    recursive=True,\n                )\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 291,
        "end": 305,
        "startLoc": {
          "line": 291,
          "column": 17,
          "position": 2504
        },
        "endLoc": {
          "line": 305,
          "column": 7,
          "position": 2642
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 141,
        "end": 155,
        "startLoc": {
          "line": 141,
          "column": 17,
          "position": 1013
        },
        "endLoc": {
          "line": 155,
          "column": 5,
          "position": 1151
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"nesteddir\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                    ],\n                    recursive=True,\n                )\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 316,
        "end": 328,
        "startLoc": {
          "line": 316,
          "column": 17,
          "position": 2720
        },
        "endLoc": {
          "line": 328,
          "column": 7,
          "position": 2831
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 170,
        "end": 182,
        "startLoc": {
          "line": 170,
          "column": 17,
          "position": 1337
        },
        "endLoc": {
          "line": 182,
          "column": 5,
          "position": 1448
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                    ],\n                    recursive=True,\n                )\n                assert fs.ls(target, detail=False) == (\n                    [] if supports_empty_directories else [dummy]\n                )\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 318,
        "end": 332,
        "startLoc": {
          "line": 318,
          "column": 12,
          "position": 2766
        },
        "endLoc": {
          "line": 332,
          "column": 4,
          "position": 2868
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 274,
        "end": 288,
        "startLoc": {
          "line": 274,
          "column": 13,
          "position": 2345
        },
        "endLoc": {
          "line": 288,
          "column": 17,
          "position": 2447
        }
      }
    },
    {
      "format": "python",
      "lines": 6,
      "fragment": ")\n            assert fs.isdir(fs_join(target, \"newdir\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n            assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\"))\n            assert not fs.exists(fs_join(target, \"newdir\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 347,
        "end": 352,
        "startLoc": {
          "line": 347,
          "column": 2,
          "position": 2985
        },
        "endLoc": {
          "line": 352,
          "column": 9,
          "position": 3076
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 236,
        "end": 241,
        "startLoc": {
          "line": 236,
          "column": 2,
          "position": 1978
        },
        "endLoc": {
          "line": 241,
          "column": 9,
          "position": 2069
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ")\n                assert fs.isdir(fs_join(target, \"newdir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"newdir\", \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 361,
        "end": 368,
        "startLoc": {
          "line": 361,
          "column": 10,
          "position": 3219
        },
        "endLoc": {
          "line": 368,
          "column": 7,
          "position": 3335
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 224,
        "end": 232,
        "startLoc": {
          "line": 224,
          "column": 5,
          "position": 1802
        },
        "endLoc": {
          "line": 232,
          "column": 3,
          "position": 1919
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(fs_join(target, \"newdir\", \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n                assert not fs.exists(fs_join(target, \"newdir\", \"subdir\"))\n\n                fs.rm(fs_join(target, \"newdir\"), recursive=True)\n                assert not fs.exists(fs_join(target, \"newdir\"))\n\n                # Limit recursive by maxdepth",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 366,
        "end": 373,
        "startLoc": {
          "line": 366,
          "column": 7,
          "position": 3300
        },
        "endLoc": {
          "line": 373,
          "column": 30,
          "position": 3395
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 352,
        "end": 359,
        "startLoc": {
          "line": 352,
          "column": 7,
          "position": 3070
        },
        "endLoc": {
          "line": 359,
          "column": 17,
          "position": 3165
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n                assert fs.isdir(fs_join(target, \"newdir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 379,
        "end": 385,
        "startLoc": {
          "line": 379,
          "column": 17,
          "position": 3433
        },
        "endLoc": {
          "line": 385,
          "column": 7,
          "position": 3529
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 236,
        "end": 243,
        "startLoc": {
          "line": 236,
          "column": 2,
          "position": 1978
        },
        "endLoc": {
          "line": 243,
          "column": 3,
          "position": 2075
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "assert local_fs.isfile(local_join(target, \"subfile1\"))\n                assert local_fs.isfile(local_join(target, \"subfile2\"))\n                assert local_fs.isdir(local_join(target, \"nesteddir\"))\n                assert local_fs.isfile(local_join(target, \"nesteddir\", \"nestedfile\"))\n                assert not local_fs.exists(local_join(target, \"subdir\"))\n\n                local_fs.rm(\n                    [\n                        local_join(target, \"subfile1\"),\n                        local_join(target, \"subfile2\"),\n                        local_join(target, \"nesteddir\"),\n                    ],\n                    recursive=True,\n                )\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 283,
        "end": 297,
        "startLoc": {
          "line": 283,
          "column": 17,
          "position": 2303
        },
        "endLoc": {
          "line": 297,
          "column": 7,
          "position": 2441
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 143,
        "end": 157,
        "startLoc": {
          "line": 143,
          "column": 17,
          "position": 937
        },
        "endLoc": {
          "line": 157,
          "column": 5,
          "position": 1075
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "assert local_fs.isfile(local_join(target, \"subfile1\"))\n                assert local_fs.isfile(local_join(target, \"subfile2\"))\n                assert not local_fs.exists(local_join(target, \"nesteddir\"))\n                assert not local_fs.exists(local_join(target, \"subdir\"))\n\n                local_fs.rm(\n                    [\n                        local_join(target, \"subfile1\"),\n                        local_join(target, \"subfile2\"),\n                    ],\n                    recursive=True,\n                )\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 303,
        "end": 315,
        "startLoc": {
          "line": 303,
          "column": 17,
          "position": 2494
        },
        "endLoc": {
          "line": 315,
          "column": 7,
          "position": 2605
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 172,
        "end": 184,
        "startLoc": {
          "line": 172,
          "column": 17,
          "position": 1244
        },
        "endLoc": {
          "line": 184,
          "column": 5,
          "position": 1355
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ")\n            assert local_fs.isdir(local_join(target, \"newdir\"))\n            assert local_fs.isfile(local_join(target, \"newdir\", \"subfile1\"))\n            assert local_fs.isfile(local_join(target, \"newdir\", \"subfile2\"))\n            assert not local_fs.exists(local_join(target, \"newdir\", \"nesteddir\"))\n            assert not local_fs.exists(\n                local_join(target, \"newdir\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 338,
        "end": 344,
        "startLoc": {
          "line": 338,
          "column": 2,
          "position": 2748
        },
        "endLoc": {
          "line": 344,
          "column": 9,
          "position": 2841
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 235,
        "end": 240,
        "startLoc": {
          "line": 235,
          "column": 2,
          "position": 1840
        },
        "endLoc": {
          "line": 240,
          "column": 9,
          "position": 1931
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n                assert local_fs.isdir(local_join(target, \"newdir\"))\n                assert local_fs.isfile(local_join(target, \"newdir\", \"subfile1\"))\n                assert local_fs.isfile(local_join(target, \"newdir\", \"subfile2\"))\n                assert local_fs.isdir(local_join(target, \"newdir\", \"nesteddir\"))\n                assert local_fs.isfile(\n                    local_join(target, \"newdir\", \"nesteddir\", \"nestedfile\")\n                )\n                assert not local_fs.exists(local_join(target, \"subdir\"))\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 354,
        "end": 363,
        "startLoc": {
          "line": 354,
          "column": 10,
          "position": 2983
        },
        "endLoc": {
          "line": 363,
          "column": 7,
          "position": 3103
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 221,
        "end": 231,
        "startLoc": {
          "line": 221,
          "column": 5,
          "position": 1663
        },
        "endLoc": {
          "line": 231,
          "column": 9,
          "position": 1784
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", maxdepth=1\n                )\n                assert local_fs.isdir(local_join(target, \"newdir\"))\n                assert local_fs.isfile(local_join(target, \"newdir\", \"subfile1\"))\n                assert local_fs.isfile(local_join(target, \"newdir\", \"subfile2\"))\n                assert not local_fs.exists(local_join(target, \"newdir\", \"nesteddir\"))\n                assert not local_fs.exists(local_join(target, \"subdir\"))\n                assert",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 370,
        "end": 377,
        "startLoc": {
          "line": 370,
          "column": 10,
          "position": 3190
        },
        "endLoc": {
          "line": 377,
          "column": 7,
          "position": 3293
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/get.py",
        "start": 235,
        "end": 242,
        "startLoc": {
          "line": 235,
          "column": 5,
          "position": 1835
        },
        "endLoc": {
          "line": 242,
          "column": 9,
          "position": 1937
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "target = fs_target\n        fs.mkdir(target)\n        if not supports_empty_directories:\n            # Force target directory to exist by adding a dummy file\n            dummy = fs_join(target, \"dummy\")\n            fs.touch(dummy)\n        assert fs.isdir(target)\n\n        for source_slash, target_slash in zip([False, True], [False, True]):\n            s = fs_join(source, \"subdir\")\n            if source_slash:\n                s += \"/\"\n            t = target + \"/\" if target_slash else target\n\n            # Without recursive does nothing\n            fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 115,
        "end": 130,
        "startLoc": {
          "line": 115,
          "column": 9,
          "position": 788
        },
        "endLoc": {
          "line": 130,
          "column": 3,
          "position": 926
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 118,
        "end": 133,
        "startLoc": {
          "line": 118,
          "column": 9,
          "position": 804
        },
        "endLoc": {
          "line": 133,
          "column": 4,
          "position": 942
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "(s, t, recursive=True)\n            if source_slash:\n                assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                        fs_join(target, \"nesteddir\"),\n                    ],\n                    recursive=True,\n                )\n            else:\n                assert fs.isdir(fs_join(target, \"subdir\"))\n                assert fs.isfile(fs_join(target, \"subdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subdir\", \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"subdir\", \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"subdir\", \"nesteddir\", \"nestedfile\"))\n\n                fs.rm(fs_join(target, \"subdir\"), recursive=True)\n            assert fs.ls(target, detail=False) == (\n                [] if supports_empty_directories else [dummy]\n            )\n\n            # Limit recursive by maxdepth\n            fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 136,
        "end": 165,
        "startLoc": {
          "line": 136,
          "column": 3,
          "position": 978
        },
        "endLoc": {
          "line": 165,
          "column": 3,
          "position": 1296
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 139,
        "end": 168,
        "startLoc": {
          "line": 139,
          "column": 4,
          "position": 994
        },
        "endLoc": {
          "line": 168,
          "column": 4,
          "position": 1312
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "(s, t, recursive=True, maxdepth=1)\n            if source_slash:\n                assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"nesteddir\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                    ],\n                    recursive=True,\n                )\n            else:\n                assert fs.isdir(fs_join(target, \"subdir\"))\n                assert fs.isfile(fs_join(target, \"subdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subdir\", \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"subdir\", \"nesteddir\"))\n\n                fs.rm(fs_join(target, \"subdir\"), recursive=True)\n            assert fs.ls(target, detail=False) == (\n                [] if supports_empty_directories else [dummy]\n            )\n\n    def test_copy_directory_to_new_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 165,
        "end": 190,
        "startLoc": {
          "line": 165,
          "column": 3,
          "position": 1297
        },
        "endLoc": {
          "line": 190,
          "column": 37,
          "position": 1570
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 168,
        "end": 193,
        "startLoc": {
          "line": 168,
          "column": 4,
          "position": 1313
        },
        "endLoc": {
          "line": 193,
          "column": 36,
          "position": 1586
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "target = fs_target\n        fs.mkdir(target)\n\n        for source_slash, target_slash in zip([False, True], [False, True]):\n            s = fs_join(source, \"subdir\")\n            if source_slash:\n                s += \"/\"\n            t = fs_join(target, \"newdir\")\n            if target_slash:\n                t += \"/\"\n\n            # Without recursive does nothing\n            fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 201,
        "end": 213,
        "startLoc": {
          "line": 201,
          "column": 9,
          "position": 1613
        },
        "endLoc": {
          "line": 213,
          "column": 3,
          "position": 1716
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 204,
        "end": 216,
        "startLoc": {
          "line": 204,
          "column": 9,
          "position": 1629
        },
        "endLoc": {
          "line": 216,
          "column": 4,
          "position": 1732
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(s, t, recursive=True)\n            assert fs.isdir(fs_join(target, \"newdir\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n            assert fs.isdir(fs_join(target, \"newdir\", \"nesteddir\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"nesteddir\", \"nestedfile\"))\n            assert not fs.exists(fs_join(target, \"subdir\"))\n\n            fs.rm(fs_join(target, \"newdir\"), recursive=True)\n            assert not fs.exists(fs_join(target, \"newdir\"))\n\n            # Limit recursive by maxdepth\n            fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 221,
        "end": 233,
        "startLoc": {
          "line": 221,
          "column": 3,
          "position": 1776
        },
        "endLoc": {
          "line": 233,
          "column": 3,
          "position": 1946
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 224,
        "end": 236,
        "startLoc": {
          "line": 224,
          "column": 4,
          "position": 1792
        },
        "endLoc": {
          "line": 236,
          "column": 4,
          "position": 1962
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(s, t, recursive=True, maxdepth=1)\n            assert fs.isdir(fs_join(target, \"newdir\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n            assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\"))\n            assert not fs.exists(fs_join(target, \"subdir\"))\n\n            fs.rm(fs_join(target, \"newdir\"), recursive=True)\n            assert not fs.exists(fs_join(target, \"newdir\"))\n\n    def test_copy_glob_to_existing_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 233,
        "end": 243,
        "startLoc": {
          "line": 233,
          "column": 3,
          "position": 1947
        },
        "endLoc": {
          "line": 243,
          "column": 37,
          "position": 2099
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 236,
        "end": 246,
        "startLoc": {
          "line": 236,
          "column": 4,
          "position": 1963
        },
        "endLoc": {
          "line": 246,
          "column": 36,
          "position": 2115
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "(source, \"subdir\", \"*\"), t)\n            assert fs.isfile(fs_join(target, \"subfile1\"))\n            assert fs.isfile(fs_join(target, \"subfile2\"))\n            assert not fs.isdir(fs_join(target, \"nesteddir\"))\n            assert not fs.exists(fs_join(target, \"nesteddir\", \"nestedfile\"))\n            assert not fs.exists(fs_join(target, \"subdir\"))\n\n            fs.rm(\n                [\n                    fs_join(target, \"subfile1\"),\n                    fs_join(target, \"subfile2\"),\n                ],\n                recursive=True,\n            )\n            assert fs.ls(target, detail=False) == (\n                [] if supports_empty_directories else [dummy]\n            )\n\n            # With recursive\n            for glob, recursive in zip([\"*\", \"**\"], [True, False]):\n                fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 266,
        "end": 286,
        "startLoc": {
          "line": 266,
          "column": 8,
          "position": 2243
        },
        "endLoc": {
          "line": 286,
          "column": 3,
          "position": 2461
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 270,
        "end": 290,
        "startLoc": {
          "line": 270,
          "column": 11,
          "position": 2263
        },
        "endLoc": {
          "line": 290,
          "column": 4,
          "position": 2481
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "(source, \"subdir\", glob), t, recursive=recursive)\n                assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                        fs_join(target, \"nesteddir\"),\n                    ],\n                    recursive=True,\n                )\n                assert fs.ls(target, detail=False) == (\n                    [] if supports_empty_directories else [dummy]\n                )\n\n                # Limit recursive by maxdepth\n                fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 286,
        "end": 306,
        "startLoc": {
          "line": 286,
          "column": 8,
          "position": 2464
        },
        "endLoc": {
          "line": 306,
          "column": 3,
          "position": 2664
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 290,
        "end": 310,
        "startLoc": {
          "line": 290,
          "column": 11,
          "position": 2484
        },
        "endLoc": {
          "line": 310,
          "column": 4,
          "position": 2684
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ")\n                assert fs.isfile(fs_join(target, \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"nesteddir\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n\n                fs.rm(\n                    [\n                        fs_join(target, \"subfile1\"),\n                        fs_join(target, \"subfile2\"),\n                    ],\n                    recursive=True,\n                )\n                assert fs.ls(target, detail=False) == (\n                    [] if supports_empty_directories else [dummy]\n                )\n\n    def test_copy_glob_to_new_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 308,
        "end": 325,
        "startLoc": {
          "line": 308,
          "column": 17,
          "position": 2693
        },
        "endLoc": {
          "line": 325,
          "column": 32,
          "position": 2846
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 315,
        "end": 332,
        "startLoc": {
          "line": 315,
          "column": 17,
          "position": 2717
        },
        "endLoc": {
          "line": 332,
          "column": 31,
          "position": 2870
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "(source, \"subdir\", \"*\"), t)\n            assert fs.isdir(fs_join(target, \"newdir\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n            assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n            assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\"))\n            assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\", \"nestedfile\"))\n            assert not fs.exists(fs_join(target, \"subdir\"))\n            assert not fs.exists(fs_join(target, \"newdir\", \"subdir\"))\n\n            fs.rm(fs_join(target, \"newdir\"), recursive=True)\n            assert not fs.exists(fs_join(target, \"newdir\"))\n\n            # With recursive\n            for glob, recursive in zip([\"*\", \"**\"], [True, False]):\n                fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 340,
        "end": 354,
        "startLoc": {
          "line": 340,
          "column": 8,
          "position": 2946
        },
        "endLoc": {
          "line": 354,
          "column": 3,
          "position": 3172
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 347,
        "end": 361,
        "startLoc": {
          "line": 347,
          "column": 11,
          "position": 2973
        },
        "endLoc": {
          "line": 361,
          "column": 4,
          "position": 3199
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "(source, \"subdir\", glob), t, recursive=recursive)\n                assert fs.isdir(fs_join(target, \"newdir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n                assert fs.isdir(fs_join(target, \"newdir\", \"nesteddir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"nesteddir\", \"nestedfile\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n                assert not fs.exists(fs_join(target, \"newdir\", \"subdir\"))\n\n                fs.rm(fs_join(target, \"newdir\"), recursive=True)\n                assert not fs.exists(fs_join(target, \"newdir\"))\n\n                # Limit recursive by maxdepth\n                fs.cp",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 354,
        "end": 367,
        "startLoc": {
          "line": 354,
          "column": 8,
          "position": 3175
        },
        "endLoc": {
          "line": 367,
          "column": 3,
          "position": 3373
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 361,
        "end": 374,
        "startLoc": {
          "line": 361,
          "column": 11,
          "position": 3202
        },
        "endLoc": {
          "line": 374,
          "column": 4,
          "position": 3400
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ", maxdepth=1\n                )\n                assert fs.isdir(fs_join(target, \"newdir\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n                assert fs.isfile(fs_join(target, \"newdir\", \"subfile2\"))\n                assert not fs.exists(fs_join(target, \"newdir\", \"nesteddir\"))\n                assert not fs.exists(fs_join(target, \"subdir\"))\n                assert not fs.exists(fs_join(target, \"newdir\", \"subdir\"))\n\n                fs.rm(fs_join(target, \"newdir\"), recursive=True)\n                assert not fs.exists(fs_join(target, \"newdir\"))\n\n    @pytest.mark.parametrize(\n        GLOB_EDGE_CASES_TESTS[\"argnames\"],\n        GLOB_EDGE_CASES_TESTS[\"argvalues\"],\n    )\n    def test_copy_glob_edge_cases",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 368,
        "end": 384,
        "startLoc": {
          "line": 368,
          "column": 10,
          "position": 3395
        },
        "endLoc": {
          "line": 384,
          "column": 26,
          "position": 3585
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 236,
        "end": 394,
        "startLoc": {
          "line": 236,
          "column": 5,
          "position": 1973
        },
        "endLoc": {
          "line": 394,
          "column": 25,
          "position": 3616
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "(source, path), t, recursive=recursive, maxdepth=maxdepth)\n\n            output = fs.find(target)\n            if new_dir:\n                prefixed_expected = [\n                    fs_sanitize_path(fs_join(target, \"newdir\", p)) for p in expected\n                ]\n            else:\n                prefixed_expected = [\n                    fs_sanitize_path(fs_join(target, p)) for p in expected\n                ]\n            assert sorted(output) == sorted(prefixed_expected)\n\n            try:\n                fs.rm(target, recursive=True)\n            except FileNotFoundError:\n                pass\n\n    def test_copy_list_of_files_to_existing_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 407,
        "end": 425,
        "startLoc": {
          "line": 407,
          "column": 8,
          "position": 3736
        },
        "endLoc": {
          "line": 425,
          "column": 46,
          "position": 3889
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 418,
        "end": 436,
        "startLoc": {
          "line": 418,
          "column": 11,
          "position": 3771
        },
        "endLoc": {
          "line": 436,
          "column": 45,
          "position": 3924
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(source_files, t)\n            assert fs.isfile(fs_join(target, \"file1\"))\n            assert fs.isfile(fs_join(target, \"file2\"))\n            assert fs.isfile(fs_join(target, \"subfile1\"))\n\n            fs.rm(\n                [\n                    fs_join(target, \"file1\"),\n                    fs_join(target, \"file2\"),\n                    fs_join(target, \"subfile1\"),\n                ],\n                recursive=True,\n            )\n            assert fs.ls(target, detail=False) == (\n                [] if supports_empty_directories else [dummy]\n            )\n\n    def test_copy_list_of_files_to_new_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 453,
        "end": 470,
        "startLoc": {
          "line": 453,
          "column": 3,
          "position": 4072
        },
        "endLoc": {
          "line": 470,
          "column": 41,
          "position": 4220
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 465,
        "end": 482,
        "startLoc": {
          "line": 465,
          "column": 4,
          "position": 4111
        },
        "endLoc": {
          "line": 482,
          "column": 40,
          "position": 4259
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "(source_files, fs_join(target, \"newdir\") + \"/\")  # Note trailing slash\n        assert fs.isdir(fs_join(target, \"newdir\"))\n        assert fs.isfile(fs_join(target, \"newdir\", \"file1\"))\n        assert fs.isfile(fs_join(target, \"newdir\", \"file2\"))\n        assert fs.isfile(fs_join(target, \"newdir\", \"subfile1\"))\n\n    def test_copy_two_files_new_directory",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/copy.py",
        "start": 485,
        "end": 491,
        "startLoc": {
          "line": 485,
          "column": 3,
          "position": 4317
        },
        "endLoc": {
          "line": 491,
          "column": 34,
          "position": 4413
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/tests/abstract/put.py",
        "start": 497,
        "end": 503,
        "startLoc": {
          "line": 497,
          "column": 4,
          "position": 4359
        },
        "endLoc": {
          "line": 503,
          "column": 29,
          "position": 4455
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ":\n    if not read and not write:\n        raise RuntimeError(\"must specify at least one of read=True, write=True\")\n    rcheck = []\n    wcheck = []\n    if read:\n        rcheck.append(sock)\n    if write:\n        wcheck.append(sock)\n    # When doing a non-blocking connect, most systems signal success by\n    # marking the socket writable. Windows, though, signals success by marked\n    # it as \"exceptional\". We paper over the difference by checking the write\n    # sockets for both conditions. (The stdlib selectors module does the same\n    # thing.)\n    fn = partial(select.select, rcheck, wcheck, wcheck)\n    rready, wready, xready = fn",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/wait.py",
        "start": 38,
        "end": 53,
        "startLoc": {
          "line": 38,
          "column": 5,
          "position": 140
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 255
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/wait.py",
        "start": 70,
        "end": 85,
        "startLoc": {
          "line": 70,
          "column": 2,
          "position": 361
        },
        "endLoc": {
          "line": 85,
          "column": 15,
          "position": 476
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "byte = uri_bytes[i : i + 1]\n        byte_ord = ord(byte)\n        if (is_percent_encoded and byte == b\"%\") or (\n            byte_ord < 128 and byte.decode() in allowed_chars\n        ):\n            encoded_component += byte\n            continue\n        encoded_component.extend(b\"%\" + (hex(byte_ord)[2:].encode().zfill(2).upper()))\n\n    return encoded_component.decode()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/url.py",
        "start": 251,
        "end": 260,
        "startLoc": {
          "line": 251,
          "column": 9,
          "position": 1658
        },
        "endLoc": {
          "line": 260,
          "column": 2,
          "position": 1781
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/url.py",
        "start": 232,
        "end": 241,
        "startLoc": {
          "line": 232,
          "column": 9,
          "position": 1468
        },
        "endLoc": {
          "line": 241,
          "column": 9,
          "position": 1591
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "segment != \"..\":\n            output.append(segment)\n        # In this case segment == '..', if we can, we should pop the last\n        # element\n        elif output:\n            output.pop()\n\n    # If the path starts with '/' and the output is empty or the first string\n    # is non-empty\n    if path.startswith(\"/\") and (not output or output[0]):\n        output.insert(0, \"\")\n\n    # If the path starts with '/.' or '/..' ensure we add one more empty\n    # string to add a trailing '/'\n    if path.endswith((\"/.\", \"/..\")):\n        output.append(\"\")\n\n    return \"/\".join(output)\n\n\n@typing",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/url.py",
        "start": 273,
        "end": 293,
        "startLoc": {
          "line": 273,
          "column": 2,
          "position": 1861
        },
        "endLoc": {
          "line": 293,
          "column": 8,
          "position": 1983
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/url.py",
        "start": 254,
        "end": 274,
        "startLoc": {
          "line": 254,
          "column": 2,
          "position": 1664
        },
        "endLoc": {
          "line": 274,
          "column": 4,
          "position": 1786
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ":\n        \"\"\"\n        Create an SSLTransport around socket using the provided ssl_context.\n        \"\"\"\n        self.incoming = ssl.MemoryBIO()\n        self.outgoing = ssl.MemoryBIO()\n\n        self.suppress_ragged_eofs = suppress_ragged_eofs\n        self.socket = socket\n\n        self.sslobj = ssl_context.wrap_bio(\n            self.incoming, self.outgoing, server_hostname=server_hostname\n        )\n\n        # Perform initial handshake.\n        self._ssl_io_loop(self.sslobj.do_handshake)\n\n    def __enter__(self) -",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssltransport.py",
        "start": 55,
        "end": 72,
        "startLoc": {
          "line": 55,
          "column": 5,
          "position": 230
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 336
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
        "start": 46,
        "end": 63,
        "startLoc": {
          "line": 46,
          "column": 2,
          "position": 152
        },
        "endLoc": {
          "line": 63,
          "column": 2,
          "position": 257
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ":\n        if flags != 0:\n            raise ValueError(\"non-zero flags not allowed in calls to sendall\")\n        count = 0\n        with memoryview(data) as view, view.cast(\"B\") as byte_view:\n            amount = len(byte_view)\n            while count < amount:\n                v = self.send(byte_view[count:])\n                count += v\n\n    def send(self, data:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssltransport.py",
        "start": 101,
        "end": 111,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 670
        },
        "endLoc": {
          "line": 111,
          "column": 2,
          "position": 775
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
        "start": 89,
        "end": 99,
        "startLoc": {
          "line": 89,
          "column": 2,
          "position": 500
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 605
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ")\n            except ssl.SSLError as e:\n                if e.errno not in (ssl.SSL_ERROR_WANT_READ, ssl.SSL_ERROR_WANT_WRITE):\n                    # WANT_READ, and WANT_WRITE are expected, others are not.\n                    raise e\n                errno = e.errno\n\n            buf = self.outgoing.read()\n            self.socket.sendall(buf)\n\n            if errno is None:\n                should_loop = False\n            elif errno == ssl.SSL_ERROR_WANT_READ:\n                buf = self.socket.recv(SSL_BLOCKSIZE)\n                if buf:\n                    self.incoming.write(buf)\n                else:\n                    self.incoming.write_eof()\n        return typing",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssltransport.py",
        "start": 253,
        "end": 271,
        "startLoc": {
          "line": 253,
          "column": 5,
          "position": 2164
        },
        "endLoc": {
          "line": 271,
          "column": 7,
          "position": 2318
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssltransport.py",
        "start": 203,
        "end": 221,
        "startLoc": {
          "line": 203,
          "column": 5,
          "position": 1436
        },
        "endLoc": {
          "line": 221,
          "column": 4,
          "position": 1590
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ":\n    \"\"\"Matching according to RFC 6125, section 6.4.3\n\n    http://tools.ietf.org/html/rfc6125#section-6.4.3\n    \"\"\"\n    pats = []\n    if not dn:\n        return False\n\n    # Ported from python3-syntax:\n    # leftmost, *remainder = dn.split(r'.')\n    parts = dn.split(r\".\")\n    leftmost = parts[0]\n    remainder = parts[1:]\n\n    wildcards = leftmost.count(\"*\")\n    if wildcards > max_wildcards:\n        # Issue #17980: avoid denials of service by refusing more\n        # than one wildcard per fragment.  A survey of established\n        # policy among SSL implementations showed it to be a\n        # reasonable choice.\n        raise CertificateError(\n            \"too many wildcards in certificate DNS name: \" + repr(dn)\n        )\n\n    # speed up common case w/o wildcards\n    if not wildcards:\n        return bool",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssl_match_hostname.py",
        "start": 26,
        "end": 53,
        "startLoc": {
          "line": 26,
          "column": 5,
          "position": 130
        },
        "endLoc": {
          "line": 53,
          "column": 5,
          "position": 266
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py",
        "start": 25,
        "end": 52,
        "startLoc": {
          "line": 25,
          "column": 2,
          "position": 81
        },
        "endLoc": {
          "line": 52,
          "column": 3,
          "position": 217
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ")\n\n    # RFC 6125, section 6.4.3, subitem 1.\n    # The client SHOULD NOT attempt to match a presented identifier in which\n    # the wildcard character comprises a label other than the left-most label.\n    if leftmost == \"*\":\n        # When '*' is a fragment by itself, it matches a non-empty dotless\n        # fragment.\n        pats.append(\"[^.]+\")\n    elif leftmost.startswith(\"xn--\") or hostname.startswith(\"xn--\"):\n        # RFC 6125, section 6.4.3, subitem 3.\n        # The client SHOULD NOT attempt to match a presented identifier\n        # where the wildcard character is embedded within an A-label or\n        # U-label of an internationalized domain name.\n        pats.append(re.escape(leftmost))\n    else:\n        # Otherwise, '*' matches any dotless string, e.g. www*\n        pats.append(re.escape(leftmost).replace(r\"\\*\", \"[^.]*\"))\n\n    # add the remaining fragments, ignore any wildcards\n    for frag in remainder:\n        pats.append(re.escape(frag))\n\n    pat = re.compile(r\"\\A\" + r\"\\.\".join(pats) + r\"\\Z\", re.IGNORECASE)\n    return pat.match(hostname)\n\n\ndef _ipaddress_match",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssl_match_hostname.py",
        "start": 53,
        "end": 80,
        "startLoc": {
          "line": 53,
          "column": 2,
          "position": 281
        },
        "endLoc": {
          "line": 80,
          "column": 17,
          "position": 466
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/ssl_match_hostname.py",
        "start": 52,
        "end": 79,
        "startLoc": {
          "line": 52,
          "column": 2,
          "position": 229
        },
        "endLoc": {
          "line": 79,
          "column": 12,
          "position": 414
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "@typing.overload\ndef ssl_wrap_socket(\n    sock: socket.socket,\n    keyfile: str | None = ...,\n    certfile: str | None = ...,\n    cert_reqs: int | None = ...,\n    ca_certs: str | None = ...,\n    server_hostname: str | None = ...,\n    ssl_version: int | None = ...,\n    ciphers: str | None = ...,\n    ssl_context: ssl.SSLContext | None = ...,\n    ca_cert_dir: str | None = ...,\n    key_password: str | None = ...,\n    ca_cert_data: None | str | bytes = ...,\n    tls_in_tls: bool",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssl_.py",
        "start": 392,
        "end": 406,
        "startLoc": {
          "line": 392,
          "column": 1,
          "position": 2391
        },
        "endLoc": {
          "line": 406,
          "column": 5,
          "position": 2606
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/ssl_.py",
        "start": 374,
        "end": 388,
        "startLoc": {
          "line": 374,
          "column": 1,
          "position": 2146
        },
        "endLoc": {
          "line": 388,
          "column": 7,
          "position": 2361
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "self.total = total\n        self.connect = connect\n        self.read = read\n        self.status = status\n        self.other = other\n\n        if redirect is False or total is False:\n            redirect = 0\n            raise_on_redirect = False\n\n        self.redirect = redirect\n        self.status_forcelist = status_forcelist or set()\n        self.allowed_methods = allowed_methods\n        self.backoff_factor = backoff_factor\n        self.backoff_max",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/retry.py",
        "start": 223,
        "end": 237,
        "startLoc": {
          "line": 223,
          "column": 9,
          "position": 602
        },
        "endLoc": {
          "line": 237,
          "column": 12,
          "position": 725
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/retry.py",
        "start": 284,
        "end": 298,
        "startLoc": {
          "line": 284,
          "column": 9,
          "position": 764
        },
        "endLoc": {
          "line": 298,
          "column": 18,
          "position": 887
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ":\n        \"\"\"Backwards-compatibility for the old retries format.\"\"\"\n        if retries is None:\n            retries = default if default is not None else cls.DEFAULT\n\n        if isinstance(retries, Retry):\n            return retries\n\n        redirect = bool(redirect) and None\n        new_retries = cls(retries, redirect=redirect)\n        log.debug(\"Converted retries value: %r -> %r\", retries, new_retries)\n        return new_retries\n\n    def get_backoff_time(self) -",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/retry.py",
        "start": 276,
        "end": 289,
        "startLoc": {
          "line": 276,
          "column": 6,
          "position": 1078
        },
        "endLoc": {
          "line": 289,
          "column": 2,
          "position": 1192
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/retry.py",
        "start": 343,
        "end": 356,
        "startLoc": {
          "line": 343,
          "column": 2,
          "position": 1229
        },
        "endLoc": {
          "line": 356,
          "column": 2,
          "position": 1342
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "reraise(type(error), error, _stacktrace)\n\n        total = self.total\n        if total is not None:\n            total -= 1\n\n        connect = self.connect\n        read = self.read\n        redirect = self.redirect\n        status_count = self.status\n        other = self.other\n        cause = \"unknown\"\n        status = None\n        redirect_location = None\n\n        if error and self._is_connection_error(error):\n            # Connect retry?\n            if connect is False:\n                raise reraise",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/retry.py",
        "start": 449,
        "end": 467,
        "startLoc": {
          "line": 449,
          "column": 2,
          "position": 2255
        },
        "endLoc": {
          "line": 467,
          "column": 8,
          "position": 2397
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/retry.py",
        "start": 527,
        "end": 545,
        "startLoc": {
          "line": 527,
          "column": 2,
          "position": 2318
        },
        "endLoc": {
          "line": 545,
          "column": 4,
          "position": 2460
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "status = response.status\n\n        else:\n            # Incrementing because of a server error like a 500 in\n            # status_forcelist and the given method is in the allowed_methods\n            cause = ResponseError.GENERIC_ERROR\n            if response and response.status:\n                if status_count is not None:\n                    status_count -= 1\n                cause = ResponseError.SPECIFIC_ERROR.format(status_code=response.status)\n                status = response.status\n\n        history = self.history + (\n            RequestHistory(method, url, error, status, redirect_location),\n        )\n\n        new_retry = self.new(\n            total=total,\n            connect=connect,\n            read=read,\n            redirect=redirect,\n            status=status_count,\n            other=other,\n            history=history,\n        )\n\n        if new_retry.is_exhausted():\n            reason",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/retry.py",
        "start": 491,
        "end": 518,
        "startLoc": {
          "line": 491,
          "column": 13,
          "position": 2612
        },
        "endLoc": {
          "line": 518,
          "column": 7,
          "position": 2802
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/retry.py",
        "start": 567,
        "end": 594,
        "startLoc": {
          "line": 567,
          "column": 13,
          "position": 2658
        },
        "endLoc": {
          "line": 594,
          "column": 6,
          "position": 2848
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "= {}\n    if accept_encoding:\n        if isinstance(accept_encoding, str):\n            pass\n        elif isinstance(accept_encoding, list):\n            accept_encoding = \",\".join(accept_encoding)\n        else:\n            accept_encoding = ACCEPT_ENCODING\n        headers[\"accept-encoding\"] = accept_encoding\n\n    if user_agent:\n        headers[\"user-agent\"] = user_agent\n\n    if keep_alive:\n        headers[\"connection\"] = \"keep-alive\"\n\n    if basic_auth:\n        headers[\"authorization\"] = (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/util/request.py",
        "start": 112,
        "end": 129,
        "startLoc": {
          "line": 112,
          "column": 2,
          "position": 452
        },
        "endLoc": {
          "line": 129,
          "column": 2,
          "position": 572
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/util/request.py",
        "start": 62,
        "end": 79,
        "startLoc": {
          "line": 62,
          "column": 2,
          "position": 143
        },
        "endLoc": {
          "line": 79,
          "column": 9,
          "position": 263
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "= {}\n        if self.source_address:\n            extra_kw[\"source_address\"] = self.source_address\n\n        if self.socket_options:\n            extra_kw[\"socket_options\"] = self.socket_options\n\n        try:\n            conn = socks.create_connection(\n                (self.host, self.port),\n                proxy_type=self._socks_options[\"socks_version\"],\n                proxy_addr=self._socks_options[\"proxy_host\"],\n                proxy_port=self._socks_options[\"proxy_port\"],\n                proxy_username=self._socks_options[\"username\"],\n                proxy_password=self._socks_options[\"password\"],\n                proxy_rdns=self._socks_options[\"rdns\"],\n                timeout=self.timeout,\n                **extra_kw,",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/socks.py",
        "start": 102,
        "end": 119,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 361
        },
        "endLoc": {
          "line": 119,
          "column": 2,
          "position": 512
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/socks.py",
        "start": 88,
        "end": 106,
        "startLoc": {
          "line": 88,
          "column": 2,
          "position": 264
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 417
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "):\n        parsed = parse_url(proxy_url)\n\n        if username is None and password is None and parsed.auth is not None:\n            split = parsed.auth.split(\":\")\n            if len(split) == 2:\n                username, password = split\n        if parsed.scheme == \"socks5\":\n            socks_version = socks.PROXY_TYPE_SOCKS5\n            rdns = False\n        elif parsed.scheme == \"socks5h\":\n            socks_version = socks.PROXY_TYPE_SOCKS5\n            rdns = True\n        elif parsed.scheme == \"socks4\":\n            socks_version = socks.PROXY_TYPE_SOCKS4\n            rdns = False\n        elif parsed.scheme == \"socks4a\":\n            socks_version = socks.PROXY_TYPE_SOCKS4\n            rdns = True\n        else:\n            raise ValueError(f",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/socks.py",
        "start": 192,
        "end": 212,
        "startLoc": {
          "line": 192,
          "column": 5,
          "position": 898
        },
        "endLoc": {
          "line": 212,
          "column": 2,
          "position": 1100
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/socks.py",
        "start": 178,
        "end": 198,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 760
        },
        "endLoc": {
          "line": 198,
          "column": 44,
          "position": 962
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "if hasattr(ssl, \"PROTOCOL_TLSv1_1\") and hasattr(OpenSSL.SSL, \"TLSv1_1_METHOD\"):\n    _openssl_versions[ssl.PROTOCOL_TLSv1_1] = OpenSSL.SSL.TLSv1_1_METHOD\n\nif hasattr(ssl, \"PROTOCOL_TLSv1_2\") and hasattr(OpenSSL.SSL, \"TLSv1_2_METHOD\"):\n    _openssl_versions[ssl.PROTOCOL_TLSv1_2] = OpenSSL.SSL.TLSv1_2_METHOD\n\n\n_stdlib_to_openssl_verify = {\n    ssl.CERT_NONE: OpenSSL.SSL.VERIFY_NONE,\n    ssl.CERT_OPTIONAL: OpenSSL.SSL.VERIFY_PEER,\n    ssl.CERT_REQUIRED: OpenSSL.SSL.VERIFY_PEER\n    + OpenSSL.SSL.VERIFY_FAIL_IF_NO_PEER_CERT,\n}\n_openssl_to_stdlib_verify = {",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/pyopenssl.py",
        "start": 76,
        "end": 89,
        "startLoc": {
          "line": 76,
          "column": 1,
          "position": 221
        },
        "endLoc": {
          "line": 89,
          "column": 2,
          "position": 362
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
        "start": 105,
        "end": 118,
        "startLoc": {
          "line": 105,
          "column": 1,
          "position": 347
        },
        "endLoc": {
          "line": 118,
          "column": 5,
          "position": 488
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": ":\n    \"\"\"\n    Verifies that PyOpenSSL's package-level dependencies have been met.\n    Throws `ImportError` if they are not met.\n    \"\"\"\n    # Method added in `cryptography==1.1`; not available in older versions\n    from cryptography.x509.extensions import Extensions\n\n    if getattr(Extensions, \"get_extension_for_class\", None) is None:\n        raise ImportError(\n            \"'cryptography' module missing required functionality.  \"\n            \"Try upgrading to v1.3.4 or newer.\"\n        )\n\n    # pyOpenSSL 0.14 and above use cryptography for OpenSSL bindings. The _x509\n    # attribute is only present on those versions.\n    from OpenSSL.crypto import X509\n\n    x509 = X509()\n    if getattr(x509, \"_x509\", None) is None:\n        raise ImportError(\n            \"'pyOpenSSL' module missing required functionality. \"\n            \"Try upgrading to v0.14 or newer.\"\n        )\n\n\ndef _dnsname_to_stdlib(name:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/pyopenssl.py",
        "start": 159,
        "end": 185,
        "startLoc": {
          "line": 159,
          "column": 5,
          "position": 949
        },
        "endLoc": {
          "line": 185,
          "column": 2,
          "position": 1074
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
        "start": 154,
        "end": 180,
        "startLoc": {
          "line": 154,
          "column": 2,
          "position": 713
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 838
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": ")\n\n    # We want to find the SAN extension. Ask Cryptography to locate it (it's\n    # faster than looping in Python)\n    try:\n        ext = cert.extensions.get_extension_for_class(x509.SubjectAlternativeName).value\n    except x509.ExtensionNotFound:\n        # No such extension, return the empty list.\n        return []\n    except (\n        x509.DuplicateExtension,\n        UnsupportedExtension,\n        x509.UnsupportedGeneralNameType,\n        UnicodeError,\n    ) as e:\n        # A problem has been found with the quality of the certificate. Assume\n        # no SAN field is present.\n        log.warning(\n            \"A problem was encountered with the certificate that prevented \"\n            \"urllib3 from finding the SubjectAlternativeName field. This can \"\n            \"affect certificate validation. The error was %s\",\n            e,\n        )\n        return []\n\n    # We want to return dNSName and iPAddress fields. We need to cast the IPs\n    # back to strings because the match_hostname function wants them as\n    # strings.\n    # Sadly the DNS names need to be idna encoded and then, on Python 3, UTF-8\n    # decoded. This is pretty frustrating, but that's what the standard library\n    # does with certificates, and so we need to attempt to do the same.\n    # We also want to skip over names which cannot be idna encoded.\n    names = [\n        (\"DNS\", name)\n        for name in map(_dnsname_to_stdlib, ext.get_values_for_type(x509.DNSName))\n        if name is not None\n    ]\n    names.extend(\n        (\"IP Address\", str(name)) for name in ext.get_values_for_type(x509.IPAddress)\n    )\n\n    return names\n\n\nclass WrappedSocket:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/pyopenssl.py",
        "start": 230,
        "end": 274,
        "startLoc": {
          "line": 230,
          "column": 2,
          "position": 1306
        },
        "endLoc": {
          "line": 274,
          "column": 2,
          "position": 1541
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/contrib/pyopenssl.py",
        "start": 232,
        "end": 276,
        "startLoc": {
          "line": 232,
          "column": 16,
          "position": 1116
        },
        "endLoc": {
          "line": 276,
          "column": 2,
          "position": 1351
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "]\n                return self._message_id\n\n    def write(self, s):\n        \"\"\"Replaces internal `message_id`'s text with `s`.\"\"\"\n        if not s:\n            s = \"...\"\n        s = s.replace('\\r', '').strip()\n        if s == self.text:\n            return  # avoid duplicate message Bot error\n        message_id = self.message_id\n        if message_id is None:\n            return\n        self.text = s\n        try:\n            future = self.submit(\n                self.session.patch",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/contrib/discord.py",
        "start": 56,
        "end": 72,
        "startLoc": {
          "line": 56,
          "column": 5,
          "position": 380
        },
        "endLoc": {
          "line": 72,
          "column": 6,
          "position": 506
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/contrib/telegram.py",
        "start": 53,
        "end": 69,
        "startLoc": {
          "line": 53,
          "column": 13,
          "position": 367
        },
        "endLoc": {
          "line": 69,
          "column": 5,
          "position": 493
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "))\n        super().__init__(*args, **kwargs)\n\n    def display(self, **kwargs):\n        super().display(**kwargs)\n        fmt = self.format_dict\n        if fmt.get('bar_format', None):\n            fmt['bar_format'] = fmt['bar_format'].replace(\n                '<bar/>', '{bar:10u}'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/contrib/discord.py",
        "start": 123,
        "end": 131,
        "startLoc": {
          "line": 123,
          "column": 2,
          "position": 760
        },
        "endLoc": {
          "line": 131,
          "column": 12,
          "position": 846
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/contrib/slack.py",
        "start": 90,
        "end": 98,
        "startLoc": {
          "line": 90,
          "column": 4,
          "position": 538
        },
        "endLoc": {
          "line": 98,
          "column": 13,
          "position": 624
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(\n    url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10\n) -> Optional[requests.Response]:\n    \"\"\"\n    Performs a GET request to the GitHub API with robust error handling.\n    Retries once without authorization on 401/403 errors.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[code_quality] Network error for %s: %s\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py",
        "start": 22,
        "end": 42,
        "startLoc": {
          "line": 22,
          "column": 31,
          "position": 148
        },
        "endLoc": {
          "line": 42,
          "column": 42,
          "position": 359
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 22,
        "end": 42,
        "startLoc": {
          "line": 22,
          "column": 35,
          "position": 148
        },
        "endLoc": {
          "line": 42,
          "column": 46,
          "position": 359
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without the auth header if token is bad\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\n                \"[code_quality] Retry without auth failed for %s: %s\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 42,
          "position": 360
        },
        "endLoc": {
          "line": 55,
          "column": 54,
          "position": 524
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 42,
        "end": 55,
        "startLoc": {
          "line": 42,
          "column": 46,
          "position": 360
        },
        "endLoc": {
          "line": 55,
          "column": 58,
          "position": 524
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": ", url, res.status_code\n        )\n        return None\n    return res\n\n\ndef get_github_repo_files(repo_url: str) -> set[str]:\n    \"\"\"Fetches the list of all files in a GitHub repository's default branch.\"\"\"\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", repo_url.replace(\".git\", \"\"))\n    if not match:\n        return set()\n\n    owner, repo = match.groups()\n\n    # Get repository info to find the default branch\n    repo_info_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    repo_res = _gh_get(repo_info_url)\n    if not repo_res:\n        logging.error(f\"Failed to fetch repo info from {repo_info_url}\")\n        return set()\n\n    try:\n        default_branch = repo_res.json().get(\"default_branch\", \"main\")\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON or find default_branch for {repo_url}\")\n        return set()\n\n    # Get the file tree for the default branch\n    trees_url = f\"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1\"\n    tree_res = _gh_get(trees_url)\n    if not tree_res:\n        logging.error(f\"Failed to fetch file tree from {trees_url}\")\n        return set()\n\n    try:\n        data = tree_res.json()\n        if \"tree\" not in data:\n            logging.warning(\n                f\"Response from {trees_url} is truncated: {data.get('message', '')}\"\n            )\n            return set()\n        return {item[\"path\"] for item in data.get(\"tree\", []) if item[\"type\"] == \"blob\"}\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON response for file tree of {repo_url}\")\n        return set()\n\n\ndef _score_single_url",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py",
        "start": 61,
        "end": 108,
        "startLoc": {
          "line": 61,
          "column": 43,
          "position": 561
        },
        "endLoc": {
          "line": 108,
          "column": 18,
          "position": 929
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 61,
        "end": 108,
        "startLoc": {
          "line": 61,
          "column": 47,
          "position": 561
        },
        "endLoc": {
          "line": 108,
          "column": 8,
          "position": 929
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10):",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py",
        "start": 42,
        "end": 50,
        "startLoc": {
          "line": 42,
          "column": 29,
          "position": 264
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 388
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 22,
        "end": 32,
        "startLoc": {
          "line": 22,
          "column": 35,
          "position": 148
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 276
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "link = res.headers.get(\"Link\", \"\")\n        nxt = next(\n            (\n                p[p.find(\"<\") + 1 : p.find(\">\")]\n                for p in link.split(\",\")\n                if 'rel=\"next\"' in p\n            ),\n            None,\n        )\n        if not nxt:\n            break\n        url, params = nxt, {}\n    return total",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py",
        "start": 314,
        "end": 326,
        "startLoc": {
          "line": 314,
          "column": 9,
          "position": 3146
        },
        "endLoc": {
          "line": 326,
          "column": 6,
          "position": 3259
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py",
        "start": 214,
        "end": 226,
        "startLoc": {
          "line": 214,
          "column": 9,
          "position": 2110
        },
        "endLoc": {
          "line": 226,
          "column": 8,
          "position": 2223
        }
      }
    },
    {
      "format": "python",
      "lines": 85,
      "fragment": "background_color = BACKGROUND\n    highlight_color = SELECTION\n\n    styles = {\n        # No corresponding class for the following:\n        Text:                      FOREGROUND,  # class:  ''\n        Whitespace:                \"\",          # class: 'w'\n        Error:                     RED,         # class: 'err'\n        Other:                     \"\",          # class 'x'\n\n        Comment:                   COMMENT,   # class: 'c'\n        Comment.Multiline:         \"\",        # class: 'cm'\n        Comment.Preproc:           \"\",        # class: 'cp'\n        Comment.Single:            \"\",        # class: 'c1'\n        Comment.Special:           \"\",        # class: 'cs'\n\n        Keyword:                   PURPLE,    # class: 'k'\n        Keyword.Constant:          \"\",        # class: 'kc'\n        Keyword.Declaration:       \"\",        # class: 'kd'\n        Keyword.Namespace:         AQUA,      # class: 'kn'\n        Keyword.Pseudo:            \"\",        # class: 'kp'\n        Keyword.Reserved:          \"\",        # class: 'kr'\n        Keyword.Type:              YELLOW,    # class: 'kt'\n\n        Operator:                  AQUA,      # class: 'o'\n        Operator.Word:             \"\",        # class: 'ow' - like keywords\n\n        Punctuation:               FOREGROUND,  # class: 'p'\n\n        Name:                      FOREGROUND,  # class: 'n'\n        Name.Attribute:            BLUE,        # class: 'na' - to be revised\n        Name.Builtin:              \"\",          # class: 'nb'\n        Name.Builtin.Pseudo:       \"\",          # class: 'bp'\n        Name.Class:                YELLOW,      # class: 'nc' - to be revised\n        Name.Constant:             RED,         # class: 'no' - to be revised\n        Name.Decorator:            AQUA,        # class: 'nd' - to be revised\n        Name.Entity:               \"\",          # class: 'ni'\n        Name.Exception:            RED,         # class: 'ne'\n        Name.Function:             BLUE,        # class: 'nf'\n        Name.Property:             \"\",          # class: 'py'\n        Name.Label:                \"\",          # class: 'nl'\n        Name.Namespace:            YELLOW,      # class: 'nn' - to be revised\n        Name.Other:                BLUE,        # class: 'nx'\n        Name.Tag:                  AQUA,        # class: 'nt' - like a keyword\n        Name.Variable:             RED,         # class: 'nv' - to be revised\n        Name.Variable.Class:       \"\",          # class: 'vc' - to be revised\n        Name.Variable.Global:      \"\",          # class: 'vg' - to be revised\n        Name.Variable.Instance:    \"\",          # class: 'vi' - to be revised\n\n        Number:                    ORANGE,    # class: 'm'\n        Number.Float:              \"\",        # class: 'mf'\n        Number.Hex:                \"\",        # class: 'mh'\n        Number.Integer:            \"\",        # class: 'mi'\n        Number.Integer.Long:       \"\",        # class: 'il'\n        Number.Oct:                \"\",        # class: 'mo'\n\n        Literal:                   ORANGE,    # class: 'l'\n        Literal.Date:              GREEN,     # class: 'ld'\n\n        String:                    GREEN,       # class: 's'\n        String.Backtick:           \"\",          # class: 'sb'\n        String.Char:               FOREGROUND,  # class: 'sc'\n        String.Doc:                COMMENT,     # class: 'sd' - like a comment\n        String.Double:             \"\",          # class: 's2'\n        String.Escape:             ORANGE,      # class: 'se'\n        String.Heredoc:            \"\",          # class: 'sh'\n        String.Interpol:           ORANGE,      # class: 'si'\n        String.Other:              \"\",          # class: 'sx'\n        String.Regex:              \"\",          # class: 'sr'\n        String.Single:             \"\",          # class: 's1'\n        String.Symbol:             \"\",          # class: 'ss'\n\n        Generic:                   \"\",                    # class: 'g'\n        Generic.Deleted:           RED,                   # class: 'gd',\n        Generic.Emph:              \"italic\",              # class: 'ge'\n        Generic.Error:             \"\",                    # class: 'gr'\n        Generic.Heading:           \"bold \" + FOREGROUND,  # class: 'gh'\n        Generic.Inserted:          GREEN,                 # class: 'gi'\n        Generic.Output:            \"\",                    # class: 'go'\n        Generic.Prompt:            \"bold \" + COMMENT,     # class: 'gp'\n        Generic.Strong:            \"bold\",                # class: 'gs'\n        Generic.EmphStrong:        \"bold italic\",         # class: 'ges'\n        Generic.Subheading:        \"bold \" + AQUA,        # class: 'gu'\n        Generic.Traceback:         \"\",                    # class: 'gt'\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/paraiso_dark.py",
        "start": 40,
        "end": 124,
        "startLoc": {
          "line": 40,
          "column": 5,
          "position": 165
        },
        "endLoc": {
          "line": 124,
          "column": 2,
          "position": 965
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/paraiso_light.py",
        "start": 40,
        "end": 124,
        "startLoc": {
          "line": 40,
          "column": 5,
          "position": 165
        },
        "endLoc": {
          "line": 124,
          "column": 2,
          "position": 965
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "highlight_color = \"#3B4252\"\n\n    styles = {\n        Token:                      \"#d8dee9\",\n\n        Whitespace:                 '#d8dee9',\n        Punctuation:                '#eceff4',\n\n        Comment:                    'italic #616e87',\n        Comment.Preproc:            '#5e81ac',\n\n        Keyword:                    'bold #81a1c1',\n        Keyword.Pseudo:             'nobold #81a1c1',\n        Keyword.Type:               'nobold #81a1c1',\n\n        Operator:                   'bold #81a1c1',\n        Operator.Word:              'bold #81a1c1',\n\n        Name:                       '#d8dee9',\n        Name.Builtin:               '#81a1c1',\n        Name.Function:              '#88c0d0',\n        Name.Class:                 '#8fbcbb',\n        Name.Namespace:             '#8fbcbb',\n        Name.Exception:             '#bf616a',\n        Name.Variable:              '#d8dee9',\n        Name.Constant:              '#8fbcbb',\n        Name.Entity:                '#d08770',\n        Name.Attribute:             '#8fbcbb',\n        Name.Tag:                   '#81a1c1',\n        Name.Decorator:             '#d08770',\n\n        String:                     '#a3be8c',\n        String.Doc:                 '#616e87',\n        String.Interpol:            '#a3be8c',\n        String.Escape:              '#ebcb8b',\n        String.Regex:               '#ebcb8b',\n        String.Symbol:              '#a3be8c',\n        String.Other:               '#a3be8c',\n\n        Number:                     '#b48ead',\n\n        Generic.Heading:            'bold #88c0d0',\n        Generic.Subheading:         'bold #88c0d0',\n        Generic.Deleted:            '#bf616a',\n        Generic.Inserted:           '#a3be8c',\n        Generic.Error:              '#bf616a',\n        Generic.Emph:               'italic',\n        Generic.Strong:             'bold',\n        Generic.Prompt",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/nord.py",
        "start": 102,
        "end": 150,
        "startLoc": {
          "line": 102,
          "column": 5,
          "position": 569
        },
        "endLoc": {
          "line": 150,
          "column": 7,
          "position": 900
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/nord.py",
        "start": 32,
        "end": 80,
        "startLoc": {
          "line": 32,
          "column": 5,
          "position": 130
        },
        "endLoc": {
          "line": 80,
          "column": 11,
          "position": 461
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ",\n\n        Generic.Heading:           \"bold #000080\",\n        Generic.Subheading:        \"bold #800080\",\n        Generic.Deleted:           \"#A00000\",\n        Generic.Inserted:          \"#00A000\",\n        Generic.Error:             \"#FF0000\",\n        Generic.Emph:              \"italic\",\n        Generic.Strong:            \"bold\",\n        Generic.EmphStrong:        \"bold italic\",\n        Generic.Prompt:            \"bold #c65d09\",\n        Generic.Output:            \"#888\",\n        Generic.Traceback:         \"#04D\",\n\n        Error:                     \"border:#FF0000\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/friendly.py",
        "start": 61,
        "end": 75,
        "startLoc": {
          "line": 61,
          "column": 10,
          "position": 349
        },
        "endLoc": {
          "line": 75,
          "column": 17,
          "position": 454
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/murphy.py",
        "start": 67,
        "end": 81,
        "startLoc": {
          "line": 67,
          "column": 12,
          "position": 414
        },
        "endLoc": {
          "line": 81,
          "column": 15,
          "position": 519
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ",\n\n        Generic.Heading:           \"bold #000080\",\n        Generic.Subheading:        \"bold #800080\",\n        Generic.Deleted:           \"#A00000\",\n        Generic.Inserted:          \"#00A000\",\n        Generic.Error:             \"#FF0000\",\n        Generic.Emph:              \"italic\",\n        Generic.Strong:            \"bold\",\n        Generic.EmphStrong:        \"bold italic\",\n        Generic.Prompt:            \"bold #000080\",\n        Generic.Output:            \"#888\",\n        Generic.Traceback:         \"#04D\",\n\n        Error:                     \"border:#FF0000\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/emacs.py",
        "start": 60,
        "end": 74,
        "startLoc": {
          "line": 60,
          "column": 10,
          "position": 343
        },
        "endLoc": {
          "line": 74,
          "column": 17,
          "position": 448
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/inkpot.py",
        "start": 57,
        "end": 71,
        "startLoc": {
          "line": 57,
          "column": 10,
          "position": 325
        },
        "endLoc": {
          "line": 71,
          "column": 21,
          "position": 430
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ",\n        Number.Float:              \"bold #60E\",\n        Number.Hex:                \"bold #058\",\n        Number.Oct:                \"bold #40E\",\n\n        Generic.Heading:           \"bold #000080\",\n        Generic.Subheading:        \"bold #800080\",\n        Generic.Deleted:           \"#A00000\",\n        Generic.Inserted:          \"#00A000\",\n        Generic.Error:             \"#FF0000\",\n        Generic.Emph:              \"italic\",\n        Generic.Strong:            \"bold\",\n        Generic.EmphStrong:        \"bold italic\",\n        Generic.Prompt:            \"bold #c65d09\",\n        Generic.Output:            \"#888\",\n        Generic.Traceback:         \"#04D\",\n\n        Error:                     \"#F00 bg:#FAA\"\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/colorful.py",
        "start": 65,
        "end": 83,
        "startLoc": {
          "line": 65,
          "column": 12,
          "position": 386
        },
        "endLoc": {
          "line": 83,
          "column": 2,
          "position": 521
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/murphy.py",
        "start": 64,
        "end": 82,
        "startLoc": {
          "line": 64,
          "column": 12,
          "position": 387
        },
        "endLoc": {
          "line": 82,
          "column": 2,
          "position": 522
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ",\n\n        Generic.Heading:        '#999999',\n        Generic.Subheading:     '#aaaaaa',\n        Generic.Deleted:        'bg:#ffdddd #000000',\n        Generic.Inserted:       'bg:#ddffdd #000000',\n        Generic.Error:          '#aa0000',\n        Generic.Emph:           'italic',\n        Generic.Strong:         'bold',\n        Generic.EmphStrong:     'bold italic',\n        Generic.Prompt:         '#555555',\n        Generic.Output:         '#888888',\n        Generic.Traceback:      '#aa0000',\n\n        Error:                  'bg:#e3d2d2 #a61717'\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/borland.py",
        "start": 38,
        "end": 53,
        "startLoc": {
          "line": 38,
          "column": 10,
          "position": 176
        },
        "endLoc": {
          "line": 53,
          "column": 2,
          "position": 284
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/trac.py",
        "start": 51,
        "end": 66,
        "startLoc": {
          "line": 51,
          "column": 10,
          "position": 257
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 365
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ",\n\n        Generic.Heading:            'bold #000080',\n        Generic.Subheading:         'bold #800080',\n        Generic.Deleted:            '#aa0000',\n        Generic.Inserted:           '#00aa00',\n        Generic.Error:              '#aa0000',\n        Generic.Emph:               'italic',\n        Generic.Strong:             'bold',\n        Generic.EmphStrong:         'bold italic',\n        Generic.Prompt:             '#555555',\n        Generic.Output:             '#888888',\n        Generic.Traceback:          '#aa0000',\n\n        Error:                      '#F00 bg:#FAA'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/autumn.py",
        "start": 52,
        "end": 66,
        "startLoc": {
          "line": 52,
          "column": 10,
          "position": 265
        },
        "endLoc": {
          "line": 66,
          "column": 15,
          "position": 370
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/perldoc.py",
        "start": 58,
        "end": 72,
        "startLoc": {
          "line": 58,
          "column": 10,
          "position": 292
        },
        "endLoc": {
          "line": 72,
          "column": 21,
          "position": 397
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ",\n        Keyword.Declaration:       \"italic\",\n\n        Name.Builtin:              \"bold italic\",\n        Name.Builtin.Pseudo:       \"bold italic\",\n        Name.Namespace:            \"bold italic #666\",\n        Name.Class:                \"bold italic #666\",\n        Name.Function:             \"bold italic #666\",\n        Name.Variable:             \"bold italic #666\",\n        Name.Constant:             \"bold italic #666\",\n\n        Operator.Word:             \"bold\",\n\n        String:                    \"italic #666\",\n\n        Error:                     \"border:#FF0000\"\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/algol.py",
        "start": 49,
        "end": 65,
        "startLoc": {
          "line": 49,
          "column": 17,
          "position": 110
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 211
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/algol_nu.py",
        "start": 49,
        "end": 65,
        "startLoc": {
          "line": 49,
          "column": 7,
          "position": 110
        },
        "endLoc": {
          "line": 65,
          "column": 2,
          "position": 211
        }
      }
    },
    {
      "format": "python",
      "lines": 54,
      "fragment": "# Automatically generated by scripts/gen_mapfiles.py.\n# DO NOT EDIT BY HAND; run `tox -e mapfiles` instead.\n\nSTYLES = {\n    'AbapStyle': ('pygments.styles.abap', 'abap', ()),\n    'AlgolStyle': ('pygments.styles.algol', 'algol', ()),\n    'Algol_NuStyle': ('pygments.styles.algol_nu', 'algol_nu', ()),\n    'ArduinoStyle': ('pygments.styles.arduino', 'arduino', ()),\n    'AutumnStyle': ('pygments.styles.autumn', 'autumn', ()),\n    'BlackWhiteStyle': ('pygments.styles.bw', 'bw', ()),\n    'BorlandStyle': ('pygments.styles.borland', 'borland', ()),\n    'CoffeeStyle': ('pygments.styles.coffee', 'coffee', ()),\n    'ColorfulStyle': ('pygments.styles.colorful', 'colorful', ()),\n    'DefaultStyle': ('pygments.styles.default', 'default', ()),\n    'DraculaStyle': ('pygments.styles.dracula', 'dracula', ()),\n    'EmacsStyle': ('pygments.styles.emacs', 'emacs', ()),\n    'FriendlyGrayscaleStyle': ('pygments.styles.friendly_grayscale', 'friendly_grayscale', ()),\n    'FriendlyStyle': ('pygments.styles.friendly', 'friendly', ()),\n    'FruityStyle': ('pygments.styles.fruity', 'fruity', ()),\n    'GhDarkStyle': ('pygments.styles.gh_dark', 'github-dark', ()),\n    'GruvboxDarkStyle': ('pygments.styles.gruvbox', 'gruvbox-dark', ()),\n    'GruvboxLightStyle': ('pygments.styles.gruvbox', 'gruvbox-light', ()),\n    'IgorStyle': ('pygments.styles.igor', 'igor', ()),\n    'InkPotStyle': ('pygments.styles.inkpot', 'inkpot', ()),\n    'LightbulbStyle': ('pygments.styles.lightbulb', 'lightbulb', ()),\n    'LilyPondStyle': ('pygments.styles.lilypond', 'lilypond', ()),\n    'LovelaceStyle': ('pygments.styles.lovelace', 'lovelace', ()),\n    'ManniStyle': ('pygments.styles.manni', 'manni', ()),\n    'MaterialStyle': ('pygments.styles.material', 'material', ()),\n    'MonokaiStyle': ('pygments.styles.monokai', 'monokai', ()),\n    'MurphyStyle': ('pygments.styles.murphy', 'murphy', ()),\n    'NativeStyle': ('pygments.styles.native', 'native', ()),\n    'NordDarkerStyle': ('pygments.styles.nord', 'nord-darker', ()),\n    'NordStyle': ('pygments.styles.nord', 'nord', ()),\n    'OneDarkStyle': ('pygments.styles.onedark', 'one-dark', ()),\n    'ParaisoDarkStyle': ('pygments.styles.paraiso_dark', 'paraiso-dark', ()),\n    'ParaisoLightStyle': ('pygments.styles.paraiso_light', 'paraiso-light', ()),\n    'PastieStyle': ('pygments.styles.pastie', 'pastie', ()),\n    'PerldocStyle': ('pygments.styles.perldoc', 'perldoc', ()),\n    'RainbowDashStyle': ('pygments.styles.rainbow_dash', 'rainbow_dash', ()),\n    'RrtStyle': ('pygments.styles.rrt', 'rrt', ()),\n    'SasStyle': ('pygments.styles.sas', 'sas', ()),\n    'SolarizedDarkStyle': ('pygments.styles.solarized', 'solarized-dark', ()),\n    'SolarizedLightStyle': ('pygments.styles.solarized', 'solarized-light', ()),\n    'StarofficeStyle': ('pygments.styles.staroffice', 'staroffice', ()),\n    'StataDarkStyle': ('pygments.styles.stata_dark', 'stata-dark', ()),\n    'StataLightStyle': ('pygments.styles.stata_light', 'stata-light', ()),\n    'TangoStyle': ('pygments.styles.tango', 'tango', ()),\n    'TracStyle': ('pygments.styles.trac', 'trac', ()),\n    'VimStyle': ('pygments.styles.vim', 'vim', ()),\n    'VisualStudioStyle': ('pygments.styles.vs', 'vs', ()),\n    'XcodeStyle': ('pygments.styles.xcode', 'xcode', ()),\n    'ZenburnStyle': ('pygments.styles.zenburn', 'zenburn', ()),\n}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/_mapping.py",
        "start": 1,
        "end": 54,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 795
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/styles/_mapping.py",
        "start": 1,
        "end": 54,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 54,
          "column": 2,
          "position": 795
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "pygments.styles._mapping import STYLES\n\n#: A dictionary of built-in styles, mapping style names to\n#: ``'submodule::classname'`` strings.\n#: This list is deprecated. Use `pygments.styles.STYLES` instead\nSTYLE_MAP = {v[1]: v[0].split('.')[-1] + '::' + k for k, v in STYLES.items()}\n\n#: Internal reverse mapping to make `get_style_by_name` more efficient\n_STYLE_NAME_TO_MODULE_MAP = {v[1]: (v[0], k) for k, v in STYLES.items()}\n\n\ndef get_style_by_name(name):\n    \"\"\"\n    Return a style class by its short name. The names of the builtin styles\n    are listed in :data:`pygments.styles.STYLE_MAP`.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no style of that name is\n    found.\n    \"\"\"\n    if name in _STYLE_NAME_TO_MODULE_MAP:\n        mod, cls = _STYLE_NAME_TO_MODULE_MAP[name]\n        builtin = \"yes\"\n    else:\n        for found_name, style in find_plugin_styles():\n            if name == found_name:\n                return style\n        # perhaps it got dropped into our styles package\n        builtin = \"\"\n        mod = 'pygments.styles.' + name\n        cls = name.title() + \"Style\"\n\n    try:\n        mod = __import__(mod, None, None, [cls])\n    except ImportError:\n        raise ClassNotFound(f\"Could not find style module {mod!r}\" +\n                            (builtin and \", though it should be builtin\")\n                            + \".\")\n    try:\n        return getattr(mod, cls)\n    except AttributeError:\n        raise ClassNotFound(f\"Could not find style class {cls!r} in style module.\")\n\n\ndef get_all_styles():\n    \"\"\"Return a generator for all styles by name, both builtin and plugin.\"\"\"\n    for v in STYLES.values():\n        yield v[1]\n    for name, _ in find_plugin_styles():\n        yield name",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/styles/__init__.py",
        "start": 13,
        "end": 61,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 25
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 383
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/styles/__init__.py",
        "start": 13,
        "end": 61,
        "startLoc": {
          "line": 13,
          "column": 2,
          "position": 37
        },
        "endLoc": {
          "line": 61,
          "column": 5,
          "position": 395
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "tokens = {\n        'root': [\n            # Whitespace and Comments\n            (r'\\n', Text),\n            (r'\\s+', Text),\n            (r'\\\\\\n', Text),  # line continuation\n            (r'//[/!](.*?)\\n', Comment.Doc),\n            (r'//(.*?)\\n', Comment.Single),\n            (r'/\\*', Comment.Multiline, 'comment'),\n\n            (words((\n                'result'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/verification.py",
        "start": 75,
        "end": 86,
        "startLoc": {
          "line": 75,
          "column": 5,
          "position": 532
        },
        "endLoc": {
          "line": 86,
          "column": 9,
          "position": 626
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/verification.py",
        "start": 28,
        "end": 39,
        "startLoc": {
          "line": 28,
          "column": 5,
          "position": 119
        },
        "endLoc": {
          "line": 39,
          "column": 8,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", Name),\n        ],\n        'comment': [\n            (r'[^*/]+', Comment.Multiline),\n            (r'/\\*', Comment.Multiline, '#push'),\n            (r'\\*/', Comment.Multiline, '#pop'),\n            (r'[*/]', Comment.Multiline),\n        ],\n        'numbers': [\n            (r'[0-9]+', Number.Integer),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/verification.py",
        "start": 102,
        "end": 113,
        "startLoc": {
          "line": 102,
          "column": 11,
          "position": 912
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 1009
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/verification.py",
        "start": 51,
        "end": 62,
        "startLoc": {
          "line": 51,
          "column": 15,
          "position": 376
        },
        "endLoc": {
          "line": 62,
          "column": 2,
          "position": 473
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "flags = re.MULTILINE\n\n    tokens = {\n        'root': [\n            (r'[^\\S\\n]+', Text),\n            (r'#.*?\\n', Comment.Single),\n            (r'[^\\S\\n]+', Text),\n            (r'class|method|procedure', Keyword.Declaration, 'subprogram'),\n            (r'(record)(\\s+)(\\w+)',\n             bygroups(Keyword.Declaration, Text, Keyword.Type), 'type_def'),\n            (r'(#line|\\$C|\\$Cend|\\$define|\\$else|\\$endif|\\$error|\\$ifdef|'\n             r'\\$ifndef|\\$include|\\$line|\\$undef)\\b', Keyword.PreProc),\n            (r'(&null|&fail)\\b', Keyword.Constant),\n            (r'&allocated|&ascii|&clock|&collections|&column|&col|&control|'\n             r'&cset|&current|&dateline|&date|&digits|&dump|'\n             r'&errno|&errornumber|&errortext|&errorvalue|&error|&errout|'\n             r'&eventcode|&eventvalue|&eventsource|&e|'\n             r'&features|&file|&host|&input|&interval|&lcase|&letters|'\n             r'&level|&line|&ldrag|&lpress|&lrelease|'\n             r'&main|&mdrag|&meta|&mpress|&mrelease|&now|&output|'\n             r'&phi|&pick|&pi|&pos|&progname|'\n             r'&random|&rdrag|&regions|&resize|&row|&rpress|&rrelease|'\n             r'&shift|&source|&storage|&subject|'\n             r'&time|&trace|&ucase|&version|'\n             r'&window|&x|&y', Keyword.Reserved),\n            (r'(by|of|not|to)\\b', Keyword.Reserved),\n            (r'(global|local|static)\\b'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 177,
        "end": 203,
        "startLoc": {
          "line": 177,
          "column": 5,
          "position": 1828
        },
        "endLoc": {
          "line": 203,
          "column": 26,
          "position": 2023
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 32,
        "end": 58,
        "startLoc": {
          "line": 32,
          "column": 5,
          "position": 146
        },
        "endLoc": {
          "line": 58,
          "column": 35,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ",\n                'delay', 'delete', 'detab', 'display', 'DrawArc',\n                'DrawCircle', 'DrawCube', 'DrawCurve', 'DrawCylinder',\n                'DrawDisk', 'DrawImage', 'DrawLine', 'DrawPoint', 'DrawPolygon',\n                'DrawRectangle', 'DrawSegment', 'DrawSphere', 'DrawString',\n                'DrawTorus', 'dtor',\n                'entab', 'EraseArea', 'errorclear', 'Event', 'eventmask',\n                'EvGet', 'EvSend', 'exec', 'exit', 'exp', 'Eye',\n                'fcntl'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 219,
        "end": 227,
        "startLoc": {
          "line": 219,
          "column": 8,
          "position": 2252
        },
        "endLoc": {
          "line": 227,
          "column": 8,
          "position": 2355
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 76,
        "end": 83,
        "startLoc": {
          "line": 76,
          "column": 11,
          "position": 629
        },
        "endLoc": {
          "line": 83,
          "column": 7,
          "position": 731
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n                'GetSpace', 'gettimeofday',\n                'getuid', 'globalnames', 'GotoRC', 'GotoXY', 'gtime', 'hardlink',\n                'iand', 'icom', 'IdentityMatrix', 'image', 'InPort', 'insert',\n                'Int86', 'integer', 'ioctl', 'ior', 'ishift', 'istate', 'ixor',\n                'kbhit', 'key', 'keyword', 'kill',\n                'left', 'Len', 'list', 'load', 'loadfunc', 'localnames',\n                'lock', 'log', 'Lower', 'lstat',\n                'many', 'map', 'match', 'MatrixMode', 'max', 'member',\n                'membernames', 'methodnames', 'methods', 'min', 'mkdir', 'move',\n                'MultMatrix', 'mutex',\n                'name', 'NewColor', 'Normals', 'numeric'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 231,
        "end": 242,
        "startLoc": {
          "line": 231,
          "column": 9,
          "position": 2417
        },
        "endLoc": {
          "line": 242,
          "column": 10,
          "position": 2586
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 89,
        "end": 99,
        "startLoc": {
          "line": 89,
          "column": 10,
          "position": 840
        },
        "endLoc": {
          "line": 99,
          "column": 9,
          "position": 1008
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ",\n                'Poke', 'pop', 'PopMatrix', 'Pos', 'pos',\n                'proc', 'pull', 'push', 'PushMatrix', 'PushRotate', 'PushScale',\n                'PushTranslate', 'put',\n                'QueryPointer',\n                'Raise', 'read', 'ReadImage', 'readlink', 'reads', 'ready',\n                'real', 'receive', 'Refresh', 'Rem', 'remove', 'rename',\n                'repl', 'reverse', 'right', 'rmdir', 'Rotate', 'Rpos',\n                'rtod'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 245,
        "end": 253,
        "startLoc": {
          "line": 245,
          "column": 8,
          "position": 2635
        },
        "endLoc": {
          "line": 253,
          "column": 7,
          "position": 2741
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 103,
        "end": 110,
        "startLoc": {
          "line": 103,
          "column": 12,
          "position": 1064
        },
        "endLoc": {
          "line": 110,
          "column": 7,
          "position": 1169
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ",\n                'wait', 'WAttrib', 'WDefault', 'WFlush', 'where',\n                'WinAssociate', 'WinButton', 'WinColorDialog', 'WindowContents',\n                'WinEditRegion', 'WinFontDialog', 'WinMenuBar', 'WinOpenDialog',\n                'WinPlayMedia', 'WinSaveDialog', 'WinScrollBar', 'WinSelectDialog',\n                'write', 'WriteImage', 'writes', 'WSection',\n                'WSync'), prefix=r'\\b', suffix=r'\\b'),\n             Name.Function),\n            include('numbers'),\n            (r'===|~===|\\*\\*|\\+\\+|--|\\.|==|~==|<=|>=|=|~=|<<=|<<|>>=|>>|'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 264,
        "end": 273,
        "startLoc": {
          "line": 264,
          "column": 11,
          "position": 2891
        },
        "endLoc": {
          "line": 273,
          "column": 60,
          "position": 2996
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 122,
        "end": 131,
        "startLoc": {
          "line": 122,
          "column": 10,
          "position": 1356
        },
        "endLoc": {
          "line": 131,
          "column": 65,
          "position": 1461
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ", Punctuation),\n            (r'\\n+', Text),\n        ],\n        'numbers': [\n            (r'\\b([+-]?([2-9]|[12][0-9]|3[0-6])[rR][0-9a-zA-Z]+)\\b', Number.Hex),\n            (r'[+-]?[0-9]*\\.([0-9]*)([Ee][+-]?[0-9]*)?', Number.Float),\n            (r'\\b([+-]?[0-9]+[KMGTPkmgtp]?)\\b', Number.Integer),\n        ],\n        'subprogram': [\n            (r'\\(', Punctuation, ('#pop', 'formal_part')),\n            (r';', Punctuation, '#pop'),\n            (r'\"[^\"]+\"|\\w+', Name.Function),\n            include('root'),\n        ],\n        'type_def': [\n            (r'\\(', Punctuation, 'formal_part'),\n        ],\n        'formal_part': [\n            (r'\\)', Punctuation, '#pop'),\n            (r'\\w+', Name.Variable),\n            (r',', Punctuation),\n            (r'(:string|:integer|:real)\\b', Keyword.Reserved),\n            include('root'),\n        ],\n    }\n\n\nclass UcodeLexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 280,
        "end": 307,
        "startLoc": {
          "line": 280,
          "column": 27,
          "position": 3072
        },
        "endLoc": {
          "line": 307,
          "column": 11,
          "position": 3292
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/unicon.py",
        "start": 139,
        "end": 166,
        "startLoc": {
          "line": 139,
          "column": 25,
          "position": 1547
        },
        "endLoc": {
          "line": 166,
          "column": 10,
          "position": 1767
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "# marker: ###MARK###\n            (r'(.*)(###\\w+###)(.*)', bygroups(String, Name.Constant, String)),\n            # constant: {$some.constant}\n            (r'(\\{)(\\$)((?:[\\w\\-]+\\.)*)([\\w\\-]+)(\\})',\n             bygroups(String.Symbol, Operator, Name.Constant,\n                      Name.Constant, String.Symbol)),  # constant\n            # constant: {register:somevalue}\n            (r'(.*)(\\{)([\\w\\-]+)(\\s*:\\s*)([\\w\\-]+)(\\})(.*)',\n             bygroups(String, String.Symbol, Name.Constant, Operator,\n                      Name.Constant, String.Symbol, String)),  # constant\n            # whitespace\n            (r'\\s+', Text),\n            # other",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/typoscript.py",
        "start": 80,
        "end": 92,
        "startLoc": {
          "line": 80,
          "column": 13,
          "position": 394
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 517
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/typoscript.py",
        "start": 41,
        "end": 53,
        "startLoc": {
          "line": 41,
          "column": 13,
          "position": 132
        },
        "endLoc": {
          "line": 53,
          "column": 11,
          "position": 255
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", word\n        elif re.match(r\".*\\!$\", word):\n            yield match.start(), Keyword.Type, word\n        elif re.match(\"'.*\", word):\n            yield match.start(), Name.Variable.Instance, word  # lit-word\n        elif re.match(\"#.*\", word):\n            yield match.start(), Name.Label, word  # issue\n        elif re.match(\"%.*\", word):\n            yield match.start(), Name.Decorator, word  # file\n        elif",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 296,
        "end": 305,
        "startLoc": {
          "line": 296,
          "column": 9,
          "position": 2527
        },
        "endLoc": {
          "line": 305,
          "column": 5,
          "position": 2665
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 108,
        "end": 117,
        "startLoc": {
          "line": 108,
          "column": 8,
          "position": 663
        },
        "endLoc": {
          "line": 117,
          "column": 5,
          "position": 801
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "),\n            (r'\"', String, 'string'),\n            (r'\\{', String, 'string2'),\n            (r';#+.*\\n', Comment.Special),\n            (r';\\*+.*\\n', Comment.Preproc),\n            (r';.*\\n', Comment),\n            (r'%\"', Name.Decorator, 'stringFile'),\n            (r'%[^(^{\")\\s\\[\\]]+', Name.Decorator),\n            (r'[+-]?([a-z]{1,3})?\\$\\d+(\\.\\d+)?', Number.Float),  # money\n            (r'[+-]?\\d+\\:\\d+(\\:\\d+)?(\\.\\d+)?', String.Other),    # time\n            (r'\\d+[\\-/][0-9a-z]+[\\-/]\\d+(/\\d+:\\d+((:\\d+)?'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 318,
        "end": 328,
        "startLoc": {
          "line": 318,
          "column": 2,
          "position": 2817
        },
        "endLoc": {
          "line": 328,
          "column": 45,
          "position": 2938
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 126,
        "end": 136,
        "startLoc": {
          "line": 126,
          "column": 4,
          "position": 896
        },
        "endLoc": {
          "line": 136,
          "column": 48,
          "position": 1017
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ", String.Other),   # date\n            (r'\\d+(\\.\\d+)+\\.\\d+', Keyword.Constant),             # tuple\n            (r'\\d+X\\d+', Keyword.Constant),                   # pair\n            (r'[+-]?\\d+(\\'\\d+)?([.,]\\d*)?E[+-]?\\d+', Number.Float),\n            (r'[+-]?\\d+(\\'\\d+)?[.,]\\d*', Number.Float),\n            (r'[+-]?\\d+(\\'\\d+)?', Number),\n            (r'[\\[\\]()]', Generic.Strong),\n            (r'[a-z]+[^(^{\"\\s:)]*://[^(^{\"\\s)]*', Name.Decorator),  # url\n            (r'mailto:[^(^{\"@\\s)]+@[^(^{\"@\\s)]+', Name.Decorator),  # url\n            (r'[^(^{\"@\\s)]+@[^(^{\"@\\s)]+', Name.Decorator),         # email\n            (r'comment\\s\"', Comment, 'commentString1'),\n            (r'comment\\s\\{', Comment, 'commentString2'),\n            (r'comment\\s\\[', Comment, 'commentBlock'),\n            (r'comment\\s[^(\\s{\"\\[]+', Comment),\n            (r'/[^(^{^\")\\s/[\\]]*'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 329,
        "end": 343,
        "startLoc": {
          "line": 329,
          "column": 33,
          "position": 2943
        },
        "endLoc": {
          "line": 343,
          "column": 20,
          "position": 3121
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 137,
        "end": 151,
        "startLoc": {
          "line": 137,
          "column": 32,
          "position": 1022
        },
        "endLoc": {
          "line": 151,
          "column": 19,
          "position": 1200
        }
      }
    },
    {
      "format": "python",
      "lines": 76,
      "fragment": ", word_callback),\n            (r'<[\\w:.-]*>', Name.Tag),\n            (r'<[^(<>\\s\")]+', Name.Tag, 'tag'),\n            (r'([^(^{\")\\s]+)', Text),\n        ],\n        'string': [\n            (r'[^(^\")]+', String),\n            (escape_re, String.Escape),\n            (r'[(|)]+', String),\n            (r'\\^.', String.Escape),\n            (r'\"', String, '#pop'),\n        ],\n        'string2': [\n            (r'[^(^{})]+', String),\n            (escape_re, String.Escape),\n            (r'[(|)]+', String),\n            (r'\\^.', String.Escape),\n            (r'\\{', String, '#push'),\n            (r'\\}', String, '#pop'),\n        ],\n        'stringFile': [\n            (r'[^(^\")]+', Name.Decorator),\n            (escape_re, Name.Decorator),\n            (r'\\^.', Name.Decorator),\n            (r'\"', Name.Decorator, '#pop'),\n        ],\n        'char': [\n            (escape_re + '\"', String.Char, '#pop'),\n            (r'\\^.\"', String.Char, '#pop'),\n            (r'.\"', String.Char, '#pop'),\n        ],\n        'tag': [\n            (escape_re, Name.Tag),\n            (r'\"', Name.Tag, 'tagString'),\n            (r'[^(<>\\r\\n\")]+', Name.Tag),\n            (r'>', Name.Tag, '#pop'),\n        ],\n        'tagString': [\n            (r'[^(^\")]+', Name.Tag),\n            (escape_re, Name.Tag),\n            (r'[(|)]+', Name.Tag),\n            (r'\\^.', Name.Tag),\n            (r'\"', Name.Tag, '#pop'),\n        ],\n        'tuple': [\n            (r'(\\d+\\.)+', Keyword.Constant),\n            (r'\\d+', Keyword.Constant, '#pop'),\n        ],\n        'bin2': [\n            (r'\\s+', Number.Hex),\n            (r'([01]\\s*){8}', Number.Hex),\n            (r'\\}', Number.Hex, '#pop'),\n        ],\n        'commentString1': [\n            (r'[^(^\")]+', Comment),\n            (escape_re, Comment),\n            (r'[(|)]+', Comment),\n            (r'\\^.', Comment),\n            (r'\"', Comment, '#pop'),\n        ],\n        'commentString2': [\n            (r'[^(^{})]+', Comment),\n            (escape_re, Comment),\n            (r'[(|)]+', Comment),\n            (r'\\^.', Comment),\n            (r'\\{', Comment, '#push'),\n            (r'\\}', Comment, '#pop'),\n        ],\n        'commentBlock': [\n            (r'\\[', Comment, '#push'),\n            (r'\\]', Comment, '#pop'),\n            (r'\"', Comment, \"commentString1\"),\n            (r'\\{', Comment, \"commentString2\"),\n            (r'[^(\\[\\]\"{)]+', Comment),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 344,
        "end": 419,
        "startLoc": {
          "line": 344,
          "column": 38,
          "position": 3134
        },
        "endLoc": {
          "line": 419,
          "column": 2,
          "position": 3875
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rebol.py",
        "start": 152,
        "end": 227,
        "startLoc": {
          "line": 152,
          "column": 37,
          "position": 1213
        },
        "endLoc": {
          "line": 227,
          "column": 2,
          "position": 1954
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "PERCENT = '%' + HEX + HEX\n\n    PN_LOCAL_ESC = r'\\\\' + PN_LOCAL_ESC_CHARS\n\n    PLX = '(?:' + PERCENT + ')|(?:' + PN_LOCAL_ESC + ')'\n\n    PN_LOCAL = ('(?:[' + PN_CHARS_U_GRP + ':0-9' + ']|' + PLX + ')' +\n                '(?:(?:[' + PN_CHARS_GRP + '.:]|' + PLX + ')*(?:[' +\n                PN_CHARS_GRP + ':]|' + PLX + '))?')\n\n    EXPONENT = r'[eE][+-]?\\d+'\n\n    #",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rdf.py",
        "start": 385,
        "end": 397,
        "startLoc": {
          "line": 385,
          "column": 5,
          "position": 2839
        },
        "endLoc": {
          "line": 397,
          "column": 2,
          "position": 2969
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rdf.py",
        "start": 81,
        "end": 93,
        "startLoc": {
          "line": 81,
          "column": 5,
          "position": 445
        },
        "endLoc": {
          "line": 93,
          "column": 29,
          "position": 575
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "(r'\"\"\"', String, 'triple-double-quoted-string'),\n            (r'\"', String, 'single-double-quoted-string'),\n            (r\"'''\", String, 'triple-single-quoted-string'),\n            (r\"'\", String, 'single-single-quoted-string'),\n        ],\n        'triple-double-quoted-string': [\n            (r'\"\"\"', String, 'end-of-string'),\n            (r'[^\\\\]+', String),\n            (r'\\\\', String, 'string-escape'),\n        ],\n        'single-double-quoted-string': [\n            (r'\"', String, 'end-of-string'),\n            (r'[^\"\\\\\\n]+', String),\n            (r'\\\\', String, 'string-escape'),\n        ],\n        'triple-single-quoted-string': [\n            (r\"'''\", String, 'end-of-string'),\n            (r'[^\\\\]+', String),\n            (r'\\\\', String.Escape, 'string-escape'),\n        ],\n        'single-single-quoted-string': [\n            (r\"'\", String, 'end-of-string'),\n            (r\"[^'\\\\\\n]+\", String),\n            (r'\\\\', String, 'string-escape'),\n        ],\n        'string-escape': [\n            (UCHAR_NO_BACKSLASH",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rdf.py",
        "start": 433,
        "end": 459,
        "startLoc": {
          "line": 433,
          "column": 13,
          "position": 3349
        },
        "endLoc": {
          "line": 459,
          "column": 19,
          "position": 3598
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/rdf.py",
        "start": 139,
        "end": 165,
        "startLoc": {
          "line": 139,
          "column": 13,
          "position": 911
        },
        "endLoc": {
          "line": 165,
          "column": 2,
          "position": 1160
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "#: only one /* */ style comment\n    _ws1 = r'\\s*(?:/[*].*?[*]/\\s*)*'\n\n    tokens = {\n        'root': [\n            # preprocessor directives: without whitespace\n            (r'^#if\\s+0', Comment.Preproc, 'if0'),\n            ('^#', Comment.Preproc, 'macro'),\n            # or with whitespace\n            ('^' + _ws1 + r'#if\\s+0', Comment.Preproc, 'if0'),\n            ('^' + _ws1 + '#', Comment.Preproc, 'macro'),\n            (r'\\n', Text),\n            (r'\\s+', Text),\n            (r'\\\\\\n', Text),  # line continuation\n            (r'/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single),\n            (r'/(\\\\\\n)?\\*[\\w\\W]*?\\*(\\\\\\n)?/'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 143,
        "end": 158,
        "startLoc": {
          "line": 143,
          "column": 5,
          "position": 1224
        },
        "endLoc": {
          "line": 158,
          "column": 31,
          "position": 1375
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 32,
        "end": 47,
        "startLoc": {
          "line": 32,
          "column": 5,
          "position": 143
        },
        "endLoc": {
          "line": 47,
          "column": 31,
          "position": 294
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", Comment.Multiline),\n            (r'[{}]', Punctuation),\n            (r'L?\"', String, 'string'),\n            (r\"L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'\", String.Char),\n            (r'(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[LlUu]*', Number.Float),\n            (r'(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float),\n            (r'0x[0-9a-fA-F]+[LlUu]*', Number.Hex),\n            (r'0[0-7]+[LlUu]*', Number.Oct),\n            (r'\\d+[LlUu]*', Number.Integer),\n            (r'[~!%^&*+=|?:<>/-]', Operator),\n            (r'[()\\[\\],.;]', Punctuation),\n            (r'(switch|case|default|const|new|static|char|continue|break|'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 158,
        "end": 169,
        "startLoc": {
          "line": 158,
          "column": 31,
          "position": 1376
        },
        "endLoc": {
          "line": 169,
          "column": 61,
          "position": 1502
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 47,
        "end": 58,
        "startLoc": {
          "line": 47,
          "column": 31,
          "position": 295
        },
        "endLoc": {
          "line": 58,
          "column": 31,
          "position": 421
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ", Keyword),\n            (r'(bool|Float)\\b', Keyword.Type),\n            (r'(true|false)\\b', Keyword.Constant),\n            (r'[a-zA-Z_]\\w*', Name),\n        ],\n        'string': [\n            (r'\"', String, '#pop'),\n            (r'\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape),\n            (r'[^\\\\\"\\n]+', String),  # all other characters\n            (r'\\\\\\n', String),       # line continuation\n            (r'\\\\', String),         # stray backslash\n        ],\n        'macro': [\n            (r'[^/\\n]+', Comment.Preproc),\n            (r'/\\*(.|\\n)*?\\*/', Comment.Multiline),\n            (r'//.*?\\n', Comment.Single, '#pop'),\n            (r'/', Comment.Preproc),\n            (r'(?<=\\\\)\\n', Comment.Preproc),\n            (r'\\n', Comment.Preproc, '#pop'),\n        ],\n        'if0': [\n            (r'^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'),\n            (r'^\\s*#endif.*?(?<!\\\\)\\n', Comment.Preproc, '#pop'),\n            (r'.*?\\n', Comment),\n        ]\n    }\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 171,
        "end": 198,
        "startLoc": {
          "line": 171,
          "column": 43,
          "position": 1511
        },
        "endLoc": {
          "line": 198,
          "column": 4,
          "position": 1768
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 60,
        "end": 87,
        "startLoc": {
          "line": 60,
          "column": 52,
          "position": 430
        },
        "endLoc": {
          "line": 87,
          "column": 9,
          "position": 687
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ", '#pop'),\n            include('comment'),\n            (r'[^\\n]+', Comment.Single)\n        ],\n        'comment-multi': [\n            include('comment'),\n            (r'[^*/]+', Comment.Multiline),\n            (r'/\\*', Comment.Multiline, '#push'),\n            (r'\\*/', Comment.Multiline, '#pop'),\n            (r'[*/]+'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/objective.py",
        "start": 458,
        "end": 467,
        "startLoc": {
          "line": 458,
          "column": 11,
          "position": 4109
        },
        "endLoc": {
          "line": 467,
          "column": 8,
          "position": 4195
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/openscad.py",
        "start": 85,
        "end": 94,
        "startLoc": {
          "line": 85,
          "column": 5,
          "position": 769
        },
        "endLoc": {
          "line": 94,
          "column": 7,
          "position": 855
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String.Double),\n            include('escape-sequence'),\n            (r'\\\\\\n', String.Double),\n            (r'\"', String.Double, '#pop'),\n        ],\n        'dotted': [\n            (r'\\s+', Text),\n            (r'\\.', Punctuation),\n            (r'[A-Z][\\w\\']*(?=\\s*\\.)', Name.Namespace",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 428,
        "end": 439,
        "startLoc": {
          "line": 428,
          "column": 8,
          "position": 3612
        },
        "endLoc": {
          "line": 439,
          "column": 10,
          "position": 3709
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/sophia.py",
        "start": 86,
        "end": 97,
        "startLoc": {
          "line": 86,
          "column": 10,
          "position": 736
        },
        "endLoc": {
          "line": 97,
          "column": 9,
          "position": 833
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ", 'lxor', 'mod', 'or')\n    prefix_syms = r'[!?~]'\n    infix_syms = r'[=<>@^|&+\\*/$%-]'\n    primitives = ('unit', 'int', 'float', 'bool', 'string', 'char', 'list', 'array')\n\n    tokens = {\n        'escape-sequence': [\n            (r'\\\\[\\\\\"\\'ntbr]', String.Escape),\n            (r'\\\\[0-9]{3}', String.Escape),\n            (r'\\\\x[0-9a-fA-F]{2}', String.Escape),\n        ],\n        'root': [\n            (r'\\s+', Text),\n            (r'false|true|\\(\\)|\\[\\]', Name.Builtin.Pseudo),\n            (r'\\b([A-Z][\\w\\']*)(?=\\s*\\.)', Name.Namespace, 'dotted'),\n            (r'\\b([A-Z][\\w\\']*)', Name.Class),\n            (r'//.*?\\n'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 798,
        "end": 814,
        "startLoc": {
          "line": 798,
          "column": 6,
          "position": 6303
        },
        "endLoc": {
          "line": 814,
          "column": 10,
          "position": 6474
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 384,
        "end": 400,
        "startLoc": {
          "line": 384,
          "column": 6,
          "position": 3139
        },
        "endLoc": {
          "line": 400,
          "column": 14,
          "position": 3310
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "),\n            (rf'({infix_syms}|{prefix_syms})?{operators}', Operator),\n            (r'\\b({})\\b'.format('|'.join(word_operators)), Operator.Word),\n            (r'\\b({})\\b'.format('|'.join(primitives)), Keyword.Type),\n\n            (r\"[^\\W\\d][\\w']*\", Name),\n\n            (r'-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float),\n            (r'0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex),\n            (r'0[oO][0-7][0-7_]*', Number.Oct),\n            (r'0[bB][01][01_]*', Number.Bin),\n            (r'\\d[\\d_]*', Number.Integer),\n\n            (r\"'(?:(\\\\[\\\\\\\"'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))'\",\n             String.Char),\n            (r\"'.'\", String.Char),\n            (r\"'\", Keyword),\n\n            (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 817,
        "end": 835,
        "startLoc": {
          "line": 817,
          "column": 5,
          "position": 6543
        },
        "endLoc": {
          "line": 835,
          "column": 2,
          "position": 6710
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 402,
        "end": 418,
        "startLoc": {
          "line": 402,
          "column": 9,
          "position": 3363
        },
        "endLoc": {
          "line": 418,
          "column": 42,
          "position": 3528
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "],\n        'comment': [\n            (r'[^/*]+', Comment.Multiline),\n            (r'\\/\\*', Comment.Multiline, '#push'),\n            (r'\\*\\/', Comment.Multiline, '#pop'),\n            (r'\\*', Comment.Multiline),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String.Double),\n            include('escape-sequence'),\n            (r'\\\\\\n', String.Double),\n            (r'\"', String.Double, '#pop'),\n        ],\n        'dotted': [\n            (r'\\s+', Text),\n            (r'\\.', Punctuation),\n            (r'[A-Z][\\w\\']*(?=\\s*\\.)', Name.Namespace),\n            (r'[A-Z][\\w\\']*', Name.Class, '#pop'),\n            (r'[a-z_][\\w\\']*', Name, '#pop'),\n            default('#pop'),\n        ],\n    }\n\n\nclass FStarLexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 838,
        "end": 862,
        "startLoc": {
          "line": 838,
          "column": 9,
          "position": 6738
        },
        "endLoc": {
          "line": 862,
          "column": 11,
          "position": 6945
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/sophia.py",
        "start": 81,
        "end": 447,
        "startLoc": {
          "line": 81,
          "column": 9,
          "position": 676
        },
        "endLoc": {
          "line": 447,
          "column": 9,
          "position": 3759
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "prefix_syms = r'[!?~]'\n    infix_syms = r'[=<>@^|&+\\*/$%-]'\n    primitives = ('unit', 'int', 'float', 'bool', 'string', 'char', 'list', 'array')\n\n    tokens = {\n        'escape-sequence': [\n            (r'\\\\[\\\\\"\\'ntbr]', String.Escape),\n            (r'\\\\[0-9]{3}', String.Escape),\n            (r'\\\\x[0-9a-fA-F]{2}', String.Escape),\n        ],\n        'root': [\n            (r'\\s+', Text),\n            (r'false|true|False|True|\\(\\)|\\[\\]'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 896,
        "end": 908,
        "startLoc": {
          "line": 896,
          "column": 5,
          "position": 7428
        },
        "endLoc": {
          "line": 908,
          "column": 34,
          "position": 7546
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 385,
        "end": 397,
        "startLoc": {
          "line": 385,
          "column": 5,
          "position": 3151
        },
        "endLoc": {
          "line": 397,
          "column": 23,
          "position": 3269
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "),\n            (r'\\b({})\\b'.format('|'.join(primitives)), Keyword.Type),\n\n            (r\"[^\\W\\d][\\w']*\", Name),\n\n            (r'-?\\d[\\d_]*(.[\\d_]*)?([eE][+\\-]?\\d[\\d_]*)', Number.Float),\n            (r'0[xX][\\da-fA-F][\\da-fA-F_]*', Number.Hex),\n            (r'0[oO][0-7][0-7_]*', Number.Oct),\n            (r'0[bB][01][01_]*', Number.Bin),\n            (r'\\d[\\d_]*', Number.Integer),\n\n            (r\"'(?:(\\\\[\\\\\\\"'ntbr ])|(\\\\[0-9]{3})|(\\\\x[0-9a-fA-F]{2}))'\",\n             String.Char),\n            (r\"'.'\", String.Char),\n            (r\"'\", Keyword),  # a stray quote is another syntax element\n            (r\"\\`([\\w\\'.]+)\\`\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 917,
        "end": 932,
        "startLoc": {
          "line": 917,
          "column": 9,
          "position": 7704
        },
        "endLoc": {
          "line": 932,
          "column": 17,
          "position": 7842
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 404,
        "end": 420,
        "startLoc": {
          "line": 404,
          "column": 5,
          "position": 3395
        },
        "endLoc": {
          "line": 420,
          "column": 4,
          "position": 3534
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "(r'\"', String.Double, 'string'),\n\n            (r'[~?][a-z][\\w\\']*:', Name.Variable),\n        ],\n        'comment': [\n            (r'[^(*)]+', Comment),\n            (r'\\(\\*', Comment, '#push'),\n            (r'\\*\\)', Comment, '#pop'),\n            (r'[(*)]', Comment),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String.Double),\n            include('escape-sequence'),\n            (r'\\\\\\n', String.Double),\n            (r'\"', String.Double, '#pop'),\n        ],\n        'dotted': [\n            (r'\\s+', Text),\n            (r'\\.', Punctuation),\n            (r'[A-Z][\\w\\']*(?=\\s*\\.)', Name.Namespace),\n            (r'[A-Z][\\w\\']*', Name.Class, '#pop'),\n            (r'[a-z_][\\w\\']*', Name, '#pop'),\n            default('#pop'),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 934,
        "end": 958,
        "startLoc": {
          "line": 934,
          "column": 13,
          "position": 7866
        },
        "endLoc": {
          "line": 958,
          "column": 2,
          "position": 8087
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ml.py",
        "start": 420,
        "end": 444,
        "startLoc": {
          "line": 420,
          "column": 13,
          "position": 3532
        },
        "endLoc": {
          "line": 444,
          "column": 2,
          "position": 3753
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(r'[^/-]+', Comment.Multiline),\n            (r'/-', Comment.Multiline, '#push'),\n            (r'-/', Comment.Multiline, '#pop'),\n            (r'[/-]', Comment.Multiline)\n        ],\n        'docstring': [\n            (r'[^/-]+', String.Doc),\n            (r'-/', String.Doc, '#pop'),\n            (r'[/-]', String.Doc)\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String.Double),\n            (r'\\\\[n\"\\\\\\n]'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/lean.py",
        "start": 222,
        "end": 234,
        "startLoc": {
          "line": 222,
          "column": 13,
          "position": 2110
        },
        "endLoc": {
          "line": 234,
          "column": 13,
          "position": 2235
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/lean.py",
        "start": 110,
        "end": 122,
        "startLoc": {
          "line": 110,
          "column": 13,
          "position": 928
        },
        "endLoc": {
          "line": 122,
          "column": 60,
          "position": 1053
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "tokens = {\n        'root': [\n            (r'[ \\t]*\\n', Text),\n            (r'[ \\t]*', _indentation),\n        ],\n\n        'css': [\n            (r'\\.[\\w:-]+', Name.Class, 'tag'),\n            (r'\\#[\\w:-]+', Name.Function, 'tag'),\n        ],\n\n        'eval-or-plain': [\n            (r'[&!]?==', Punctuation, 'plain'),\n            (r'([&!]?[=~])(' + _dot",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 408,
        "end": 421,
        "startLoc": {
          "line": 408,
          "column": 5,
          "position": 3319
        },
        "endLoc": {
          "line": 421,
          "column": 5,
          "position": 3423
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 299,
        "end": 312,
        "startLoc": {
          "line": 299,
          "column": 5,
          "position": 2369
        },
        "endLoc": {
          "line": 312,
          "column": 11,
          "position": 2473
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ")),\n             'root'),\n            default('plain'),\n        ],\n\n        'content': [\n            include('css'),\n            (r'%[\\w:-]+', Name.Tag, 'tag'),\n            (r'!!!' + _dot + r'*\\n', Name.Namespace, '#pop'),\n            (r'(/)(\\[' + _dot + r'*?\\])(' + _dot + r'*\\n)',\n             bygroups(Comment, Comment.Special, Comment),\n             '#pop'),\n            (r'/' + _dot + r'*\\n', _starts_block(Comment, 'html-comment-block'),\n             '#pop'),\n            (r'-#' + _dot + r'*\\n', _starts_block(Comment.Preproc,\n                                                  'scaml-comment-block'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 422,
        "end": 437,
        "startLoc": {
          "line": 422,
          "column": 11,
          "position": 3440
        },
        "endLoc": {
          "line": 437,
          "column": 22,
          "position": 3609
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 313,
        "end": 328,
        "startLoc": {
          "line": 313,
          "column": 10,
          "position": 2490
        },
        "endLoc": {
          "line": 328,
          "column": 21,
          "position": 2659
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ")),\n            (r'\\(', Text, 'html-attributes'),\n            (r'/[ \\t]*\\n', Punctuation, '#pop:2'),\n            (r'[<>]{1,2}(?=[ \\t=])', Punctuation),\n            include('eval-or-plain'),\n        ],\n\n        'plain': [\n            (r'([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text),\n            (r'(#\\{)(' + _dot + r'*?)(\\})',\n             bygroups(String.Interpol, using(ScalaLexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 452,
        "end": 462,
        "startLoc": {
          "line": 452,
          "column": 11,
          "position": 3782
        },
        "endLoc": {
          "line": 462,
          "column": 11,
          "position": 3875
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 340,
        "end": 350,
        "startLoc": {
          "line": 340,
          "column": 10,
          "position": 2796
        },
        "endLoc": {
          "line": 350,
          "column": 10,
          "position": 2889
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "), String.Interpol)),\n            (r'\\n', Text, 'root'),\n        ],\n\n        'html-attributes': [\n            (r'\\s+', Text),\n            (r'[\\w:-]+[ \\t]*=', Name.Attribute, 'html-attribute-value'),\n            (r'[\\w:-]+', Name.Attribute),\n            (r'\\)', Text, '#pop'),\n        ],\n\n        'html-attribute-value': [\n            (r'[ \\t]+', Text),\n            (r'\\w+', Name.Variable, '#pop'),\n            (r'@\\w+', Name.Variable.Instance, '#pop'),\n            (r'\\$\\w+', Name.Variable.Global, '#pop'),\n            (r\"'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\\\n])*'\", String, '#pop'),\n            (r'\"(\\\\\\\\|\\\\[^\\\\]|[^\"\\\\\\n])*\"', String, '#pop'),\n        ],\n\n        'html-comment-block': [\n            (_dot + '+', Comment),\n            (r'\\n', Text, 'root'),\n        ],\n\n        'scaml-comment-block'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 462,
        "end": 487,
        "startLoc": {
          "line": 462,
          "column": 11,
          "position": 3876
        },
        "endLoc": {
          "line": 487,
          "column": 22,
          "position": 4099
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 350,
        "end": 375,
        "startLoc": {
          "line": 350,
          "column": 10,
          "position": 2890
        },
        "endLoc": {
          "line": 375,
          "column": 21,
          "position": 3113
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "_dot = r'.'\n\n    tokens = {\n        'root': [\n            (r'[ \\t]*\\n', Text),\n            (r'[ \\t]*', _indentation),\n        ],\n\n        'css': [\n            (r'\\.[\\w:-]+', Name.Class, 'tag'),\n            (r'\\#[\\w:-]+', Name.Function, 'tag'),\n        ],\n\n        'eval-or-plain': [\n            (r'[&!]?==', Punctuation, 'plain'),\n            (r'([&!]?[=~])(' + _dot + r'*\\n)',\n             bygroups(Punctuation, using(ScalaLexer)),  'root'),\n            default('plain'),\n        ],\n\n        'content': [\n            include('css'),\n            (r'!!!'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 516,
        "end": 538,
        "startLoc": {
          "line": 516,
          "column": 5,
          "position": 4293
        },
        "endLoc": {
          "line": 538,
          "column": 6,
          "position": 4459
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 406,
        "end": 429,
        "startLoc": {
          "line": 406,
          "column": 5,
          "position": 3310
        },
        "endLoc": {
          "line": 429,
          "column": 11,
          "position": 3477
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "),\n            (r'!!!' + _dot + r'*\\n', Name.Namespace, '#pop'),\n            (r'(/)(\\[' + _dot + r'*?\\])(' + _dot + r'*\\n)',\n             bygroups(Comment, Comment.Special, Comment),\n             '#pop'),\n            (r'/' + _dot + r'*\\n', _starts_block(Comment, 'html-comment-block'),\n             '#pop'),\n            (r'-#' + _dot + r'*\\n', _starts_block(Comment.Preproc,\n                                                  'scaml-comment-block'), '#pop'),\n            (r'(-@\\s*)(import)?(' + _dot + r'*\\n)',\n             bygroups(Punctuation, Keyword, using(ScalaLexer)),\n             '#pop'),\n            (r'(-)(' + _dot + r'*\\n)',\n             bygroups(Punctuation, using(ScalaLexer)),\n             '#pop'),\n            (r':' + _dot + r'*\\n', _starts_block(Name.Decorator, 'filter-block'),\n             '#pop'),\n            (",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 537,
        "end": 554,
        "startLoc": {
          "line": 537,
          "column": 6,
          "position": 4453
        },
        "endLoc": {
          "line": 554,
          "column": 2,
          "position": 4685
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 320,
        "end": 446,
        "startLoc": {
          "line": 320,
          "column": 6,
          "position": 2536
        },
        "endLoc": {
          "line": 446,
          "column": 8,
          "position": 3718
        }
      }
    },
    {
      "format": "python",
      "lines": 54,
      "fragment": "'eval-or-plain'),\n        ],\n\n        'tag': [\n            include('css'),\n            (r'\\{(,\\n|' + _dot + r')*?\\}', using(ScalaLexer)),\n            (r'\\[' + _dot + r'*?\\]', using(ScalaLexer)),\n            (r'\\(', Text, 'html-attributes'),\n            (r'/[ \\t]*\\n', Punctuation, '#pop:2'),\n            (r'[<>]{1,2}(?=[ \\t=])', Punctuation),\n            include('eval-or-plain'),\n        ],\n\n        'plain': [\n            (r'([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Text),\n            (r'(#\\{)(' + _dot + r'*?)(\\})',\n             bygroups(String.Interpol, using(ScalaLexer), String.Interpol)),\n            (r'\\n', Text, 'root'),\n        ],\n\n        'html-attributes': [\n            (r'\\s+', Text),\n            (r'[\\w:-]+[ \\t]*=', Name.Attribute, 'html-attribute-value'),\n            (r'[\\w:-]+', Name.Attribute),\n            (r'\\)', Text, '#pop'),\n        ],\n\n        'html-attribute-value': [\n            (r'[ \\t]+', Text),\n            (r'\\w+', Name.Variable, '#pop'),\n            (r'@\\w+', Name.Variable.Instance, '#pop'),\n            (r'\\$\\w+', Name.Variable.Global, '#pop'),\n            (r\"'(\\\\\\\\|\\\\[^\\\\]|[^'\\\\\\n])*'\", String, '#pop'),\n            (r'\"(\\\\\\\\|\\\\[^\\\\]|[^\"\\\\\\n])*\"', String, '#pop'),\n        ],\n\n        'html-comment-block': [\n            (_dot + '+', Comment),\n            (r'\\n', Text, 'root'),\n        ],\n\n        'scaml-comment-block': [\n            (_dot + '+', Comment.Preproc),\n            (r'\\n', Text, 'root'),\n        ],\n\n        'filter-block': [\n            (r'([^#\\n]|#[^{\\n]|(\\\\\\\\)*\\\\#\\{)+', Name.Decorator),\n            (r'(#\\{)(' + _dot + r'*?)(\\})',\n             bygroups(String.Interpol, using(ScalaLexer), String.Interpol)),\n            (r'\\n', Text, 'root'),\n        ],\n    }\nJadeLexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 555,
        "end": 608,
        "startLoc": {
          "line": 555,
          "column": 2,
          "position": 4708
        },
        "endLoc": {
          "line": 608,
          "column": 10,
          "position": 5199
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 446,
        "end": 501,
        "startLoc": {
          "line": 446,
          "column": 2,
          "position": 3720
        },
        "endLoc": {
          "line": 501,
          "column": 6,
          "position": 4213
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "),\n\n            (r'\\s+', Whitespace),\n            (r'(\\\\)(\\n)', bygroups(String.Escape, Whitespace)),  # line continuation\n            (r'/(\\\\\\n)?/(\\n|(.|\\n)*?[^\\\\]\\n)', Comment.Single),\n            (r'/(\\\\\\n)?[*](.|\\n)*?[*](\\\\\\n)?/', Comment.Multiline),\n            (r'[{}#@]', Punctuation),\n            (r'L?\"', String, 'string'),\n            (r\"L?'(\\\\.|\\\\[0-7]{1,3}|\\\\x[a-fA-F0-9]{1,2}|[^\\\\\\'\\n])'\", String.Char),\n\n            (r'(\\d+\\.\\d*|\\.\\d+|\\d+)[eE][+-]?\\d+[lL]?', Number.Float),\n            (r'(\\d+\\.\\d*|\\.\\d+|\\d+[fF])[fF]?', Number.Float),\n\n            (r'([1-9][_0-9]*)?\\s*\\'[sS]?[bB]\\s*[xXzZ?01][_xXzZ?01]*'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/hdl.py",
        "start": 165,
        "end": 178,
        "startLoc": {
          "line": 165,
          "column": 9,
          "position": 1694
        },
        "endLoc": {
          "line": 178,
          "column": 55,
          "position": 1816
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/hdl.py",
        "start": 36,
        "end": 46,
        "startLoc": {
          "line": 36,
          "column": 8,
          "position": 187
        },
        "endLoc": {
          "line": 46,
          "column": 29,
          "position": 306
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "),\n\n            (r'[a-zA-Z_]\\w*:(?!:)', Name.Label),\n            (r'\\$?[a-zA-Z_]\\w*', Name),\n            (r'\\\\(\\S+)', Name),\n        ],\n        'string': [\n            (r'\"', String, '#pop'),\n            (r'\\\\([\\\\abfnrtv\"\\']|x[a-fA-F0-9]{2,4}|[0-7]{1,3})', String.Escape),\n            (r'[^\\\\\"\\n]+', String),  # all other characters\n            (r'(\\\\)(\\n)', bygroups(String.Escape, Whitespace)),  # line continuation\n            (r'\\\\', String),  # stray backslash\n        ],\n        'macro': [\n            (r'[^/\\n]+', Comment.Preproc),\n            (r'/[*](.|\\n)*?[*]/', Comment.Multiline),\n            (r'//.*?$'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/hdl.py",
        "start": 346,
        "end": 362,
        "startLoc": {
          "line": 346,
          "column": 8,
          "position": 3675
        },
        "endLoc": {
          "line": 362,
          "column": 9,
          "position": 3827
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/hdl.py",
        "start": 107,
        "end": 122,
        "startLoc": {
          "line": 107,
          "column": 5,
          "position": 1231
        },
        "endLoc": {
          "line": 122,
          "column": 10,
          "position": 1382
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ", Comment.Single),\n            (r'\\{-', Comment.Multiline, 'comment'),\n            (r',', Punctuation),\n            (r'[:!#$%&*+.\\\\/<=>?@^|~-]+', Operator),\n            # (HACK, but it makes sense to push two instances, believe me)\n            (r'\\(', Punctuation, ('funclist', 'funclist')),\n            (r'\\)', Punctuation, '#pop:2'),\n        ],\n        # NOTE: the next four states are shared in the AgdaLexer; make sure\n        # any change is compatible with Agda as well or copy over and change\n        'comment': [\n            # Multiline Comments\n            (r'[^-{}]+', Comment.Multiline),\n            (r'\\{-', Comment.Multiline, '#push'),\n            (r'-\\}', Comment.Multiline, '#pop'),\n            (r'[-{}]', Comment.Multiline),\n        ],\n        'character': [\n            # Allows multi-chars, incorrectly.\n            (r\"[^\\\\']\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 248,
        "end": 267,
        "startLoc": {
          "line": 248,
          "column": 8,
          "position": 2575
        },
        "endLoc": {
          "line": 267,
          "column": 9,
          "position": 2741
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 116,
        "end": 135,
        "startLoc": {
          "line": 116,
          "column": 36,
          "position": 1222
        },
        "endLoc": {
          "line": 135,
          "column": 10,
          "position": 1388
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "),\n            (r\"\\\\\", String.Escape, 'escape'),\n            (\"'\", String.Char, '#pop'),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String),\n            (r\"\\\\\", String.Escape, 'escape'),\n            ('\"', String, '#pop'),\n        ],\n        'escape': [\n            (r'[abfnrtv\"\\'&\\\\]', String.Escape, '#pop'),\n            (r'\\^[][A-Z@^_]'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 267,
        "end": 278,
        "startLoc": {
          "line": 267,
          "column": 5,
          "position": 2747
        },
        "endLoc": {
          "line": 278,
          "column": 15,
          "position": 2854
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 135,
        "end": 146,
        "startLoc": {
          "line": 135,
          "column": 7,
          "position": 1397
        },
        "endLoc": {
          "line": 146,
          "column": 8,
          "position": 1504
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": ", String.Escape, '#pop'),\n            ('|'.join(ascii), String.Escape, '#pop'),\n            (r'o[0-7]+', String.Escape, '#pop'),\n            (r'x[\\da-fA-F]+', String.Escape, '#pop'),\n            (r'\\d+', String.Escape, '#pop'),\n            (r'(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop')\n        ]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 278,
        "end": 284,
        "startLoc": {
          "line": 278,
          "column": 15,
          "position": 2855
        },
        "endLoc": {
          "line": 284,
          "column": 2,
          "position": 2951
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 146,
        "end": 151,
        "startLoc": {
          "line": 146,
          "column": 7,
          "position": 1516
        },
        "endLoc": {
          "line": 151,
          "column": 2,
          "position": 1610
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "#  Numbers\n            (r'\\d+[eE][+-]?\\d+', Number.Float),\n            (r'\\d+\\.\\d+([eE][+-]?\\d+)?', Number.Float),\n            (r'0[xX][\\da-fA-F]+', Number.Hex),\n            (r'\\d+', Number.Integer),\n            # Strings\n            (r\"'\", String.Char, 'character'),\n            (r'\"', String, 'string'),\n            (r'[^\\s(){}]+', Text),\n            (r'\\s+?', Whitespace),  # Whitespace\n        ],\n        'hole'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 331,
        "end": 342,
        "startLoc": {
          "line": 331,
          "column": 13,
          "position": 3350
        },
        "endLoc": {
          "line": 342,
          "column": 7,
          "position": 3458
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 227,
        "end": 238,
        "startLoc": {
          "line": 227,
          "column": 13,
          "position": 2364
        },
        "endLoc": {
          "line": 238,
          "column": 9,
          "position": 2472
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ")\n    ascii = ('NUL', 'SOH', '[SE]TX', 'EOT', 'ENQ', 'ACK',\n             'BEL', 'BS', 'HT', 'LF', 'VT', 'FF', 'CR', 'S[OI]', 'DLE',\n             'DC[1-4]', 'NAK', 'SYN', 'ETB', 'CAN',\n             'EM', 'SUB', 'ESC', '[FGRU]S', 'SP', 'DEL')\n\n    tokens = {\n        'root': [\n            # Whitespace:\n            (r'\\s+', Whitespace),\n            # (r'--\\s*|.*$', Comment.Doc),\n            (r'//.*$'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 375,
        "end": 386,
        "startLoc": {
          "line": 375,
          "column": 8,
          "position": 3765
        },
        "endLoc": {
          "line": 386,
          "column": 8,
          "position": 3887
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 37,
        "end": 48,
        "startLoc": {
          "line": 37,
          "column": 4,
          "position": 260
        },
        "endLoc": {
          "line": 48,
          "column": 36,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ", Comment.Multiline, 'comment'),\n            # Lexemes:\n            #  Identifiers\n            (r'\\bimport\\b', Keyword.Reserved, 'import'),\n            (r'\\bmodule\\b', Keyword.Reserved, 'module'),\n            (r'\\berror\\b', Name.Exception),\n            (r'\\b({})(?!\\')\\b'.format('|'.join(reserved)), Keyword.Reserved),\n            (r'^[_a-z][\\w\\']*'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 387,
        "end": 394,
        "startLoc": {
          "line": 387,
          "column": 6,
          "position": 3900
        },
        "endLoc": {
          "line": 394,
          "column": 17,
          "position": 3984
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 49,
        "end": 56,
        "startLoc": {
          "line": 49,
          "column": 6,
          "position": 395
        },
        "endLoc": {
          "line": 56,
          "column": 10,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ", Number.Integer),\n            #  Character/String Literals\n            (r\"'\", String.Char, 'character'),\n            (r'\"', String, 'string'),\n            #  Special\n            (r'\\[\\]', Keyword.Type),\n            (r'\\(\\)', Name.Builtin),\n            (r'[][(),;`{}]', Punctuation),\n        ],\n        'import': [\n            # Import statements\n            (r'\\s+', Whitespace),\n            (r'\"', String, 'string'),\n            # after \"funclist\" state\n            (r'\\)', Punctuation, '#pop'),\n            (r'qualified\\b', Keyword),\n            # import X as Y\n            (r'([A-Z][\\w.]*)(\\s+)(as)(\\s+)([A-Z][\\w.]*)'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 407,
        "end": 424,
        "startLoc": {
          "line": 407,
          "column": 6,
          "position": 4127
        },
        "endLoc": {
          "line": 424,
          "column": 43,
          "position": 4271
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 78,
        "end": 95,
        "startLoc": {
          "line": 78,
          "column": 12,
          "position": 774
        },
        "endLoc": {
          "line": 95,
          "column": 5,
          "position": 918
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "],\n        'module': [\n            (r'\\s+', Whitespace),\n            (r'([A-Z][\\w.]*)(\\s+)(\\()',\n             bygroups(Name.Namespace, Whitespace, Punctuation), 'funclist'),\n            (r'[A-Z][\\w.]*', Name.Namespace, '#pop'),\n        ],\n        'funclist': [\n            (r'\\s+', Whitespace),\n            (r'[A-Z]\\w*', Keyword.Type),\n            (r'(_[\\w\\']+|[a-z][\\w\\']*)', Name.Function),\n            # TODO: these don't match the comments in docs, remove.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 434,
        "end": 445,
        "startLoc": {
          "line": 434,
          "column": 9,
          "position": 4380
        },
        "endLoc": {
          "line": 445,
          "column": 56,
          "position": 4484
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 237,
        "end": 248,
        "startLoc": {
          "line": 237,
          "column": 9,
          "position": 2468
        },
        "endLoc": {
          "line": 248,
          "column": 2,
          "position": 2572
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ", Comment.Multiline),\n        ],\n        'character': [\n            # Allows multi-chars, incorrectly.\n            (r\"[^\\\\']'\", String.Char, '#pop'),\n            (r\"\\\\\", String.Escape, 'escape'),\n            (\"'\", String.Char, '#pop'),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String),\n            (r\"\\\\\", String.Escape, 'escape'),\n            ('\"', String, '#pop'),\n        ],\n        'escape': [\n            (r'[abfnrtv\"\\'&\\\\]', String.Escape, '#pop'),\n            (r'\\^[][A-Z@^_]', String.Escape, '#pop'),\n            ('|'.join(ascii), String.Escape, '#pop'),\n            (r'o[0-7]+', String.Escape, '#pop'),\n            (r'x[\\da-fA-F]+', String.Escape, '#pop'),\n            (r'\\d+', String.Escape, '#pop'),\n            (r'(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop'),\n        ],\n    }\n\n    EXTRA_KEYWORDS",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 459,
        "end": 483,
        "startLoc": {
          "line": 459,
          "column": 7,
          "position": 4605
        },
        "endLoc": {
          "line": 483,
          "column": 15,
          "position": 4851
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 131,
        "end": 156,
        "startLoc": {
          "line": 131,
          "column": 8,
          "position": 1364
        },
        "endLoc": {
          "line": 156,
          "column": 6,
          "position": 1621
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "),\n        ],\n        'character': [\n            # Allows multi-chars, incorrectly.\n            (r\"[^\\\\']'\", String.Char, '#pop'),\n            (r\"\\\\\", String.Escape, 'escape'),\n            (\"'\", String.Char, '#pop'),\n        ],\n        'string': [\n            (r'[^\\\\\"]+', String),\n            (r\"\\\\\", String.Escape, 'escape'),\n            ('\"', String, '#pop'),\n        ],\n\n        'escape': [\n            (r'[abfnrtv\"\\'&\\\\]', String.Escape, '#pop'),\n            (r'\\^[][' + uni.Lu + r'@^_]', String.Escape, '#pop'),\n            ('|'.join(ascii), String.Escape, '#pop'),\n            (r'o[0-7]+', String.Escape, '#pop'),\n            (r'x[\\da-fA-F]+', String.Escape, '#pop'),\n            (r'\\d+', String.Escape, '#pop'),\n            (r'(\\s+)(\\\\)', bygroups(Whitespace, String.Escape), '#pop'),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/futhark.py",
        "start": 82,
        "end": 105,
        "startLoc": {
          "line": 82,
          "column": 8,
          "position": 713
        },
        "endLoc": {
          "line": 105,
          "column": 2,
          "position": 962
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/haskell.py",
        "start": 131,
        "end": 153,
        "startLoc": {
          "line": 131,
          "column": 10,
          "position": 1369
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 1617
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ")\n        ],\n\n        'comments': [\n            (r'//.*', Comment.Singleline),\n            (r'/\\*', Comment.Multiline, 'comment'),\n        ],\n        'comment': [\n            (r'[^/*]+', Comment.Multiline),\n            (r'/\\*', Comment.Multiline, '#push'),\n            (r'\\*/', Comment.Multiline, '#pop'),\n            (r'[*/]', Comment.Multiline),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/fift.py",
        "start": 55,
        "end": 68,
        "startLoc": {
          "line": 55,
          "column": 7,
          "position": 286
        },
        "endLoc": {
          "line": 68,
          "column": 2,
          "position": 395
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/tlb.py",
        "start": 46,
        "end": 59,
        "startLoc": {
          "line": 46,
          "column": 12,
          "position": 275
        },
        "endLoc": {
          "line": 59,
          "column": 2,
          "position": 384
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "(**self.options)\n\n        curcode = ''\n        insertions = []\n        for match in line_re.finditer(text):\n            line = match.group()\n            m = self._prompt_re.match(line)\n            if m is not None:\n                end = m.end()\n                insertions.append((len(curcode),\n                                   [(0, Generic.Prompt, line[:end])]))\n                curcode += line[end:]\n            else:\n                if curcode:\n                    yield from do_insertions(insertions,\n                                             erlexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/erlang.py",
        "start": 163,
        "end": 178,
        "startLoc": {
          "line": 163,
          "column": 12,
          "position": 1537
        },
        "endLoc": {
          "line": 178,
          "column": 8,
          "position": 1688
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 411,
        "end": 426,
        "startLoc": {
          "line": 411,
          "column": 10,
          "position": 4029
        },
        "endLoc": {
          "line": 426,
          "column": 8,
          "position": 4181
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "(**self.options)\n\n        curcode = ''\n        insertions = []\n        for match in line_re.finditer(text):\n            line = match.group()\n            m = self._prompt_re.match(line)\n            if m is not None:\n                end = m.end()\n                insertions.append((len(curcode),\n                                   [(0, Generic.Prompt, line[:end])]))\n                curcode += line[end:]\n            else:\n                if curcode:\n                    yield from do_insertions(insertions,\n                                             dylexer",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dylan.py",
        "start": 258,
        "end": 273,
        "startLoc": {
          "line": 258,
          "column": 11,
          "position": 2116
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 2267
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 411,
        "end": 426,
        "startLoc": {
          "line": 411,
          "column": 10,
          "position": 4029
        },
        "endLoc": {
          "line": 426,
          "column": 8,
          "position": 4181
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "),\n        ],\n        'curly': [\n            (r'\\}', Keyword, '#pop'),\n            (r':-', Keyword),\n            (r'\\w+', Name.Variable),\n            (r'[^}:\"\\'`$]+', Punctuation),\n            (r':', Punctuation),\n            include('root'),\n        ],\n        'paren': [\n            (r'\\)', Keyword, '#pop'),\n            include('root'),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dsls.py",
        "start": 701,
        "end": 715,
        "startLoc": {
          "line": 701,
          "column": 7,
          "position": 6085
        },
        "endLoc": {
          "line": 715,
          "column": 2,
          "position": 6195
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/shell.py",
        "start": 600,
        "end": 614,
        "startLoc": {
          "line": 600,
          "column": 9,
          "position": 5396
        },
        "endLoc": {
          "line": 614,
          "column": 12,
          "position": 5506
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "flags = re.MULTILINE | re.DOTALL\n\n    # for the range of allowed unicode characters in identifiers, see\n    # http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-334.pdf\n\n    levels = {\n        'none': r'@?[_a-zA-Z]\\w*',\n        'basic': ('@?[_' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl') + ']' +\n                  '[' + uni.combine('Lu', 'Ll', 'Lt', 'Lm', 'Nl', 'Nd', 'Pc',\n                                    'Cf', 'Mn', 'Mc') + ']*'),\n        'full': ('@?(?:_|[^' +\n                 uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl') + '])' +\n                 '[^' + uni.allexcept('Lu', 'Ll', 'Lt', 'Lm', 'Lo', 'Nl',\n                                      'Nd', 'Pc', 'Cf', 'Mn', 'Mc') + ']*'),\n    }\n\n    tokens = {}\n    token_variants = True\n\n    for levelname, cs_ident in levels.items():\n        tokens[levelname] = {\n            'root': [\n                # method names",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 204,
        "end": 226,
        "startLoc": {
          "line": 204,
          "column": 5,
          "position": 1692
        },
        "endLoc": {
          "line": 226,
          "column": 15,
          "position": 1950
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 55,
        "end": 77,
        "startLoc": {
          "line": 55,
          "column": 5,
          "position": 221
        },
        "endLoc": {
          "line": 77,
          "column": 8,
          "position": 479
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "Punctuation)),\n                (r'^(\\s*)(\\[.*?\\])', bygroups(Whitespace, Name.Attribute)),\n                (r'[^\\S\\n]+', Whitespace),\n                (r'(\\\\)(\\n)', bygroups(Text, Whitespace)),  # line continuation\n                (r'//.*?\\n', Comment.Single),\n                (r'/[*].*?[*]/', Comment.Multiline),\n                (r'\\n', Whitespace),\n                (r",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 231,
        "end": 238,
        "startLoc": {
          "line": 231,
          "column": 27,
          "position": 2012
        },
        "endLoc": {
          "line": 238,
          "column": 2,
          "position": 2099
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 83,
        "end": 90,
        "startLoc": {
          "line": 83,
          "column": 27,
          "position": 546
        },
        "endLoc": {
          "line": 90,
          "column": 6,
          "position": 633
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "]\n        }\n\n    def __init__(self, **options):\n        level = get_choice_opt(options, 'unicodelevel', list(self.tokens),\n                               'basic')\n        if level not in self._all_tokens:\n            # compile the regexes now\n            self._tokens = self.__class__.process_tokendef(level)\n        else:\n            self._tokens = self._all_tokens[level]\n\n        RegexLexer.__init__(self, **options)\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 328,
        "end": 342,
        "startLoc": {
          "line": 328,
          "column": 13,
          "position": 2912
        },
        "endLoc": {
          "line": 342,
          "column": 4,
          "position": 3022
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/dotnet.py",
        "start": 162,
        "end": 176,
        "startLoc": {
          "line": 162,
          "column": 13,
          "position": 1520
        },
        "endLoc": {
          "line": 176,
          "column": 6,
          "position": 1629
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "yield match.start(2), String.Heredoc, match.group(2)    # quote \", ', `\n        yield match.start(3), String.Delimiter, match.group(3)  # heredoc name\n        yield match.start(4), String.Heredoc, match.group(4)    # quote again\n\n        heredocstack = ctx.__dict__.setdefault('heredocstack', [])\n        outermost = not bool(heredocstack)\n        heredocstack.append((match.group(1) ==",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 47,
        "end": 53,
        "startLoc": {
          "line": 47,
          "column": 9,
          "position": 315
        },
        "endLoc": {
          "line": 53,
          "column": 3,
          "position": 433
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 49,
        "end": 55,
        "startLoc": {
          "line": 49,
          "column": 9,
          "position": 365
        },
        "endLoc": {
          "line": 55,
          "column": 3,
          "position": 483
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": ", match.group(3)))\n\n        ctx.pos = match.start(5)\n        ctx.end = match.end(5)\n        # this may find other heredocs, so limit the recursion depth\n        if len(heredocstack) < 100:\n            yield from self.get_tokens_unprocessed(context=ctx)\n        else:\n            yield ctx.pos, String.Heredoc, match.group(5)\n        ctx.pos = match.end()\n\n        if outermost:\n            # this is the outer heredoc again, now we can process them all\n            for tolerant, hdname in heredocstack:\n                lines = []\n                for match in line_re.finditer(ctx.text, ctx.pos):\n                    if tolerant:\n                        check = match.group().strip()\n                    else:\n                        check = match.group().rstrip()\n                    if check == hdname:\n                        for amatch in lines:\n                            yield amatch.start(), String.Heredoc, amatch.group()\n                        yield match.start(), String.Delimiter, match.group()\n                        ctx.pos = match.end()\n                        break\n                    else:\n                        lines.append(match)\n                else:\n                    # end of heredoc not found -- error!\n                    for amatch in lines:\n                        yield amatch.start(), Error, amatch.group()\n            ctx.end = len(ctx.text)\n            del heredocstack[:]\n\n    def gen_crystalstrings_rules",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 53,
        "end": 88,
        "startLoc": {
          "line": 53,
          "column": 6,
          "position": 436
        },
        "endLoc": {
          "line": 88,
          "column": 25,
          "position": 788
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 55,
        "end": 90,
        "startLoc": {
          "line": 55,
          "column": 2,
          "position": 491
        },
        "endLoc": {
          "line": 90,
          "column": 22,
          "position": 843
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", String.Regex, '#pop'),\n                include('string-intp'),\n                (r'[\\\\#' + bracecc + ']', String.Regex),\n                (r'[^\\\\#' + bracecc + ']+', String.Regex),\n            ]\n            states['strings'].append((r'%r' + lbrace, String.Regex,\n                                      name+'-regex'))\n\n        return",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 150,
        "end": 158,
        "startLoc": {
          "line": 150,
          "column": 10,
          "position": 1567
        },
        "endLoc": {
          "line": 158,
          "column": 7,
          "position": 1659
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 161,
        "end": 169,
        "startLoc": {
          "line": 161,
          "column": 14,
          "position": 1824
        },
        "endLoc": {
          "line": 169,
          "column": 34,
          "position": 1916
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": ", heredoc_callback),\n            (r'__END__', Comment.Preproc, 'end-part'),\n            # multiline regex (after keywords or assignments)\n            (r'(?:^|(?<=[=<>~!:])|'\n             r'(?<=(?:\\s|;)when\\s)|'\n             r'(?<=(?:\\s|;)or\\s)|'\n             r'(?<=(?:\\s|;)and\\s)|'\n             r'(?<=\\.index\\s)|'\n             r'(?<=\\.scan\\s)|'\n             r'(?<=\\.sub\\s)|'\n             r'(?<=\\.sub!\\s)|'\n             r'(?<=\\.gsub\\s)|'\n             r'(?<=\\.gsub!\\s)|'\n             r'(?<=\\.match\\s)|'\n             r'(?<=(?:\\s|;)if\\s)|'\n             r'(?<=(?:\\s|;)elsif\\s)|'\n             r'(?<=^when\\s)|'\n             r'(?<=^index\\s)|'\n             r'(?<=^scan\\s)|'\n             r'(?<=^sub\\s)|'\n             r'(?<=^gsub\\s)|'\n             r'(?<=^sub!\\s)|'\n             r'(?<=^gsub!\\s)|'\n             r'(?<=^match\\s)|'\n             r'(?<=^if\\s)|'\n             r'(?<=^elsif\\s)'\n             r')(\\s*)(/)', bygroups(Whitespace",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 203,
        "end": 229,
        "startLoc": {
          "line": 203,
          "column": 28,
          "position": 2001
        },
        "endLoc": {
          "line": 229,
          "column": 11,
          "position": 2125
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 255,
        "end": 281,
        "startLoc": {
          "line": 255,
          "column": 31,
          "position": 2864
        },
        "endLoc": {
          "line": 281,
          "column": 5,
          "position": 2988
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n             bygroups(Number.Integer, Whitespace, Operator)),\n            # Names\n            (r'@@[a-zA-Z_]\\w*', Name.Variable.Class),\n            (r'@[a-zA-Z_]\\w*', Name.Variable.Instance),\n            (r'\\$\\w+', Name.Variable.Global),\n            (r'\\$[!@&`\\'+~=/\\\\,;.<>_*$?:\"^-]', Name.Variable.Global),\n            (r'\\$-[0adFiIlpvw]', Name.Variable.Global),\n            (r'::', Operator),\n            include('strings'),\n            # https://crystal-lang.org/reference/syntax_and_semantics/literals/char.html",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 260,
        "end": 270,
        "startLoc": {
          "line": 260,
          "column": 59,
          "position": 2359
        },
        "endLoc": {
          "line": 270,
          "column": 77,
          "position": 2468
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 301,
        "end": 311,
        "startLoc": {
          "line": 301,
          "column": 31,
          "position": 3138
        },
        "endLoc": {
          "line": 311,
          "column": 8,
          "position": 3247
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "],\n        'interpolated-regex': [\n            include('string-intp'),\n            (r'[\\\\#]', String.Regex),\n            (r'[^\\\\#]+', String.Regex),\n        ],\n        'interpolated-string': [\n            include('string-intp'),\n            (r'[\\\\#]', String.Other),\n            (r'[^\\\\#]+', String.Other),\n        ],\n        'multiline-regex': [\n            include('string-intp'),\n            (r'\\\\\\\\', String.Regex),\n            (r'\\\\/', String.Regex),\n            (r'[\\\\#]', String.Regex),\n            (r'[^\\\\/#]+', String.Regex),\n            (r'/[imsx]*'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/crystal.py",
        "start": 325,
        "end": 342,
        "startLoc": {
          "line": 325,
          "column": 9,
          "position": 2901
        },
        "endLoc": {
          "line": 342,
          "column": 11,
          "position": 3050
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/ruby.py",
        "start": 367,
        "end": 384,
        "startLoc": {
          "line": 367,
          "column": 9,
          "position": 3707
        },
        "endLoc": {
          "line": 384,
          "column": 15,
          "position": 3856
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", Comment.Multiline),\n            (r'//.*?\\n', Comment.Single, '#pop'),\n            (r'/', Comment.Preproc),\n            (r'(?<=\\\\)\\n', Comment.Preproc),\n            (r'\\n', Comment.Preproc, '#pop'),\n        ],\n        'if0': [\n            (r'^\\s*#if.*?(?<!\\\\)\\n', Comment.Preproc, '#push'),\n            (r'^\\s*#el(?:se|if).*\\n'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/c_cpp.py",
        "start": 194,
        "end": 202,
        "startLoc": {
          "line": 194,
          "column": 19,
          "position": 1872
        },
        "endLoc": {
          "line": 202,
          "column": 23,
          "position": 1962
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/pawn.py",
        "start": 74,
        "end": 82,
        "startLoc": {
          "line": 74,
          "column": 17,
          "position": 567
        },
        "endLoc": {
          "line": 82,
          "column": 25,
          "position": 657
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ", bygroups(Text, Name.Label)),\n        ],\n        'numbers': [\n            (r'(\\d+\\.\\d*|\\d*\\.\\d+)([eE][+-]?[0-9]+)?', Number.Float),\n            (r'\\d+[eE][+-]?[0-9]+', Number.Float),\n            (r'0\\d+', Number.Oct),\n            (r'0[xX][a-fA-F0-9]+', Number.Hex),\n            (r'\\d+L', Number.Integer.Long),\n            (r'\\d+', Number.Integer)\n        ],\n        'stringescape': [\n            (r'\\\"\\\"|\\`([,%`abfnrtv])', String.Escape),\n        ],\n        'strings': [\n            (r'[^\"\\n]+', String),\n        ],\n        'dqs': [\n            (r'\"', String, '#pop'),\n            include('strings')\n        ],\n        'sqs'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/automation.py",
        "start": 351,
        "end": 371,
        "startLoc": {
          "line": 351,
          "column": 19,
          "position": 2638
        },
        "endLoc": {
          "line": 371,
          "column": 6,
          "position": 2811
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/automation.py",
        "start": 168,
        "end": 188,
        "startLoc": {
          "line": 168,
          "column": 23,
          "position": 925
        },
        "endLoc": {
          "line": 188,
          "column": 10,
          "position": 1098
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": ",\n                \"CONTA177\",\n                \"CONTA178\",\n                \"PRETS179\",\n                \"LINK180\",\n                \"SHELL181\",\n                \"PLANE182\",\n                \"PLANE183\",\n                \"MPC184\",\n                \"SOLID185\",\n                \"SOLID186\",\n                \"SOLID187\",\n                \"BEAM188\",\n                \"BEAM189\",\n                \"SOLSH190\",\n                \"INTER192\",\n                \"INTER193\",\n                \"INTER194\",\n                \"INTER195\",\n                \"MESH200\",\n                \"FOLLW201\",\n                \"INTER202\",\n                \"INTER203\",\n                \"INTER204\",\n                \"INTER205\",\n                \"SHELL208\",\n                \"SHELL209\",\n                \"CPT212\",\n                \"CPT213\",\n                \"COMBI214\",\n                \"CPT215\",\n                \"CPT216\",\n                \"CPT217\",\n                \"FLUID218\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/apdlexer.py",
        "start": 484,
        "end": 517,
        "startLoc": {
          "line": 484,
          "column": 11,
          "position": 6705
        },
        "endLoc": {
          "line": 517,
          "column": 11,
          "position": 6836
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/apdlexer.py",
        "start": 38,
        "end": 46,
        "startLoc": {
          "line": 38,
          "column": 11,
          "position": 223
        },
        "endLoc": {
          "line": 46,
          "column": 11,
          "position": 329
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "),\n        ],\n        'tag': [\n            (r'\\s+', Whitespace),\n            (r'[\\w.:-]+\\s*=', Name.Attribute, 'attr'),\n            (r'/?\\s*>', Name.Tag, '#pop'),\n        ],\n        'attr': [\n            (r'\\s+', Whitespace),\n            ('\".*?\"', String, '#pop'),\n            (\"'.*?'\", String, '#pop'),\n            (r'[^\\s>]+', String, '#pop'),\n        ],\n    }",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/actionscript.py",
        "start": 230,
        "end": 243,
        "startLoc": {
          "line": 230,
          "column": 8,
          "position": 2280
        },
        "endLoc": {
          "line": 243,
          "column": 2,
          "position": 2395
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/html.py",
        "start": 221,
        "end": 234,
        "startLoc": {
          "line": 221,
          "column": 4,
          "position": 1775
        },
        "endLoc": {
          "line": 234,
          "column": 2,
          "position": 1890
        }
      }
    },
    {
      "format": "python",
      "lines": 343,
      "fragment": "pygments.util import ClassNotFound, guess_decode\n\nCOMPAT = {\n    'Python3Lexer': 'PythonLexer',\n    'Python3TracebackLexer': 'PythonTracebackLexer',\n    'LeanLexer': 'Lean3Lexer',\n}\n\n__all__ = ['get_lexer_by_name', 'get_lexer_for_filename', 'find_lexer_class',\n           'guess_lexer', 'load_lexer_from_file'] + list(LEXERS) + list(COMPAT)\n\n_lexer_cache = {}\n_pattern_cache = {}\n\n\ndef _fn_matches(fn, glob):\n    \"\"\"Return whether the supplied file name fn matches pattern filename.\"\"\"\n    if glob not in _pattern_cache:\n        pattern = _pattern_cache[glob] = re.compile(fnmatch.translate(glob))\n        return pattern.match(fn)\n    return _pattern_cache[glob].match(fn)\n\n\ndef _load_lexers(module_name):\n    \"\"\"Load a lexer (and all others in the module too).\"\"\"\n    mod = __import__(module_name, None, None, ['__all__'])\n    for lexer_name in mod.__all__:\n        cls = getattr(mod, lexer_name)\n        _lexer_cache[cls.name] = cls\n\n\ndef get_all_lexers(plugins=True):\n    \"\"\"Return a generator of tuples in the form ``(name, aliases,\n    filenames, mimetypes)`` of all know lexers.\n\n    If *plugins* is true (the default), plugin lexers supplied by entrypoints\n    are also returned.  Otherwise, only builtin ones are considered.\n    \"\"\"\n    for item in LEXERS.values():\n        yield item[1:]\n    if plugins:\n        for lexer in find_plugin_lexers():\n            yield lexer.name, lexer.aliases, lexer.filenames, lexer.mimetypes\n\n\ndef find_lexer_class(name):\n    \"\"\"\n    Return the `Lexer` subclass that with the *name* attribute as given by\n    the *name* argument.\n    \"\"\"\n    if name in _lexer_cache:\n        return _lexer_cache[name]\n    # lookup builtin lexers\n    for module_name, lname, aliases, _, _ in LEXERS.values():\n        if name == lname:\n            _load_lexers(module_name)\n            return _lexer_cache[name]\n    # continue with lexers from setuptools entrypoints\n    for cls in find_plugin_lexers():\n        if cls.name == name:\n            return cls\n\n\ndef find_lexer_class_by_name(_alias):\n    \"\"\"\n    Return the `Lexer` subclass that has `alias` in its aliases list, without\n    instantiating it.\n\n    Like `get_lexer_by_name`, but does not instantiate the class.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is\n    found.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    if not _alias:\n        raise ClassNotFound(f'no lexer for alias {_alias!r} found')\n    # lookup builtin lexers\n    for module_name, name, aliases, _, _ in LEXERS.values():\n        if _alias.lower() in aliases:\n            if name not in _lexer_cache:\n                _load_lexers(module_name)\n            return _lexer_cache[name]\n    # continue with lexers from setuptools entrypoints\n    for cls in find_plugin_lexers():\n        if _alias.lower() in cls.aliases:\n            return cls\n    raise ClassNotFound(f'no lexer for alias {_alias!r} found')\n\n\ndef get_lexer_by_name(_alias, **options):\n    \"\"\"\n    Return an instance of a `Lexer` subclass that has `alias` in its\n    aliases list. The lexer is given the `options` at its\n    instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no lexer with that alias is\n    found.\n    \"\"\"\n    if not _alias:\n        raise ClassNotFound(f'no lexer for alias {_alias!r} found')\n\n    # lookup builtin lexers\n    for module_name, name, aliases, _, _ in LEXERS.values():\n        if _alias.lower() in aliases:\n            if name not in _lexer_cache:\n                _load_lexers(module_name)\n            return _lexer_cache[name](**options)\n    # continue with lexers from setuptools entrypoints\n    for cls in find_plugin_lexers():\n        if _alias.lower() in cls.aliases:\n            return cls(**options)\n    raise ClassNotFound(f'no lexer for alias {_alias!r} found')\n\n\ndef load_lexer_from_file(filename, lexername=\"CustomLexer\", **options):\n    \"\"\"Load a lexer from a file.\n\n    This method expects a file located relative to the current working\n    directory, which contains a Lexer class. By default, it expects the\n    Lexer to be name CustomLexer; you can specify your own class name\n    as the second argument to this function.\n\n    Users should be very careful with the input, because this method\n    is equivalent to running eval on the input file.\n\n    Raises ClassNotFound if there are any problems importing the Lexer.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    try:\n        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `lexername` from that namespace\n        if lexername not in custom_namespace:\n            raise ClassNotFound(f'no valid {lexername} class found in {filename}')\n        lexer_class = custom_namespace[lexername]\n        # And finally instantiate it with the options\n        return lexer_class(**options)\n    except OSError as err:\n        raise ClassNotFound(f'cannot read {filename}: {err}')\n    except ClassNotFound:\n        raise\n    except Exception as err:\n        raise ClassNotFound(f'error when loading custom lexer: {err}')\n\n\ndef find_lexer_class_for_filename(_fn, code=None):\n    \"\"\"Get a lexer for a filename.\n\n    If multiple lexers match the filename pattern, use ``analyse_text()`` to\n    figure out which one is more appropriate.\n\n    Returns None if not found.\n    \"\"\"\n    matches = []\n    fn = basename(_fn)\n    for modname, name, _, filenames, _ in LEXERS.values():\n        for filename in filenames:\n            if _fn_matches(fn, filename):\n                if name not in _lexer_cache:\n                    _load_lexers(modname)\n                matches.append((_lexer_cache[name], filename))\n    for cls in find_plugin_lexers():\n        for filename in cls.filenames:\n            if _fn_matches(fn, filename):\n                matches.append((cls, filename))\n\n    if isinstance(code, bytes):\n        # decode it, since all analyse_text functions expect unicode\n        code = guess_decode(code)\n\n    def get_rating(info):\n        cls, filename = info\n        # explicit patterns get a bonus\n        bonus = '*' not in filename and 0.5 or 0\n        # The class _always_ defines analyse_text because it's included in\n        # the Lexer class.  The default implementation returns None which\n        # gets turned into 0.0.  Run scripts/detect_missing_analyse_text.py\n        # to find lexers which need it overridden.\n        if code:\n            return cls.analyse_text(code) + bonus, cls.__name__\n        return cls.priority + bonus, cls.__name__\n\n    if matches:\n        matches.sort(key=get_rating)\n        # print \"Possible lexers, after sort:\", matches\n        return matches[-1][0]\n\n\ndef get_lexer_for_filename(_fn, code=None, **options):\n    \"\"\"Get a lexer for a filename.\n\n    Return a `Lexer` subclass instance that has a filename pattern\n    matching `fn`. The lexer is given the `options` at its\n    instantiation.\n\n    Raise :exc:`pygments.util.ClassNotFound` if no lexer for that filename\n    is found.\n\n    If multiple lexers match the filename pattern, use their ``analyse_text()``\n    methods to figure out which one is more appropriate.\n    \"\"\"\n    res = find_lexer_class_for_filename(_fn, code)\n    if not res:\n        raise ClassNotFound(f'no lexer for filename {_fn!r} found')\n    return res(**options)\n\n\ndef get_lexer_for_mimetype(_mime, **options):\n    \"\"\"\n    Return a `Lexer` subclass instance that has `mime` in its mimetype\n    list. The lexer is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if not lexer for that mimetype\n    is found.\n    \"\"\"\n    for modname, name, _, _, mimetypes in LEXERS.values():\n        if _mime in mimetypes:\n            if name not in _lexer_cache:\n                _load_lexers(modname)\n            return _lexer_cache[name](**options)\n    for cls in find_plugin_lexers():\n        if _mime in cls.mimetypes:\n            return cls(**options)\n    raise ClassNotFound(f'no lexer for mimetype {_mime!r} found')\n\n\ndef _iter_lexerclasses(plugins=True):\n    \"\"\"Return an iterator over all lexer classes.\"\"\"\n    for key in sorted(LEXERS):\n        module_name, name = LEXERS[key][:2]\n        if name not in _lexer_cache:\n            _load_lexers(module_name)\n        yield _lexer_cache[name]\n    if plugins:\n        yield from find_plugin_lexers()\n\n\ndef guess_lexer_for_filename(_fn, _text, **options):\n    \"\"\"\n    As :func:`guess_lexer()`, but only lexers which have a pattern in `filenames`\n    or `alias_filenames` that matches `filename` are taken into consideration.\n\n    :exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can\n    handle the content.\n    \"\"\"\n    fn = basename(_fn)\n    primary = {}\n    matching_lexers = set()\n    for lexer in _iter_lexerclasses():\n        for filename in lexer.filenames:\n            if _fn_matches(fn, filename):\n                matching_lexers.add(lexer)\n                primary[lexer] = True\n        for filename in lexer.alias_filenames:\n            if _fn_matches(fn, filename):\n                matching_lexers.add(lexer)\n                primary[lexer] = False\n    if not matching_lexers:\n        raise ClassNotFound(f'no lexer for filename {fn!r} found')\n    if len(matching_lexers) == 1:\n        return matching_lexers.pop()(**options)\n    result = []\n    for lexer in matching_lexers:\n        rv = lexer.analyse_text(_text)\n        if rv == 1.0:\n            return lexer(**options)\n        result.append((rv, lexer))\n\n    def type_sort(t):\n        # sort by:\n        # - analyse score\n        # - is primary filename pattern?\n        # - priority\n        # - last resort: class name\n        return (t[0], primary[t[1]], t[1].priority, t[1].__name__)\n    result.sort(key=type_sort)\n\n    return result[-1][1](**options)\n\n\ndef guess_lexer(_text, **options):\n    \"\"\"\n    Return a `Lexer` subclass instance that's guessed from the text in\n    `text`. For that, the :meth:`.analyse_text()` method of every known lexer\n    class is called with the text as argument, and the lexer which returned the\n    highest value will be instantiated and returned.\n\n    :exc:`pygments.util.ClassNotFound` is raised if no lexer thinks it can\n    handle the content.\n    \"\"\"\n\n    if not isinstance(_text, str):\n        inencoding = options.get('inencoding', options.get('encoding'))\n        if inencoding:\n            _text = _text.decode(inencoding or 'utf8')\n        else:\n            _text, _ = guess_decode(_text)\n\n    # try to get a vim modeline first\n    ft = get_filetype_from_buffer(_text)\n\n    if ft is not None:\n        try:\n            return get_lexer_by_name(ft, **options)\n        except ClassNotFound:\n            pass\n\n    best_lexer = [0.0, None]\n    for lexer in _iter_lexerclasses():\n        rv = lexer.analyse_text(_text)\n        if rv == 1.0:\n            return lexer(**options)\n        if rv > best_lexer[0]:\n            best_lexer[:] = (rv, lexer)\n    if not best_lexer[0] or best_lexer[1] is None:\n        raise ClassNotFound('no lexer matching the text found')\n    return best_lexer[1](**options)\n\n\nclass _automodule(types.ModuleType):\n    \"\"\"Automatically import lexers.\"\"\"\n\n    def __getattr__(self, name):\n        info = LEXERS.get(name)\n        if info:\n            _load_lexers(info[0])\n            cls = _lexer_cache[info[1]]\n            setattr(self, name, cls)\n            return cls\n        if name in COMPAT:\n            return getattr(self, COMPAT[name])\n        raise AttributeError(name)\n\n\noldmod = sys.modules[__name__]\nnewmod = _automodule(__name__)\nnewmod.__dict__.update(oldmod.__dict__)\nsys.modules[__name__] = newmod\ndel newmod.newmod, newmod.oldmod, newmod.sys, newmod.types",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexers/__init__.py",
        "start": 20,
        "end": 362,
        "startLoc": {
          "line": 20,
          "column": 2,
          "position": 64
        },
        "endLoc": {
          "line": 362,
          "column": 6,
          "position": 2334
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexers/__init__.py",
        "start": 20,
        "end": 362,
        "startLoc": {
          "line": 20,
          "column": 2,
          "position": 80
        },
        "endLoc": {
          "line": 362,
          "column": 6,
          "position": 2350
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "(ndef['bgcolor'])\n            if self.usebold and ndef['bold']:\n                escape.bold = True\n            if self.useunderline and ndef['underline']:\n                escape.underline = True\n            if self.useitalic and ndef['italic']:\n                escape.italic = True\n            self.style_string[str(ttype)] = (escape.true_color_string",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/terminal256.py",
        "start": 330,
        "end": 337,
        "startLoc": {
          "line": 330,
          "column": 13,
          "position": 2634
        },
        "endLoc": {
          "line": 337,
          "column": 18,
          "position": 2729
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/terminal256.py",
        "start": 235,
        "end": 242,
        "startLoc": {
          "line": 235,
          "column": 13,
          "position": 1932
        },
        "endLoc": {
          "line": 242,
          "column": 13,
          "position": 2027
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "= {\n    Token:              ('',            ''),\n\n    Whitespace:         ('gray',   'brightblack'),\n    Comment:            ('gray',   'brightblack'),\n    Comment.Preproc:    ('cyan',        'brightcyan'),\n    Keyword:            ('blue',    'brightblue'),\n    Keyword.Type:       ('cyan',        'brightcyan'),\n    Operator.Word:      ('magenta',      'brightcyan'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/irc.py",
        "start": 22,
        "end": 30,
        "startLoc": {
          "line": 22,
          "column": 2,
          "position": 81
        },
        "endLoc": {
          "line": 30,
          "column": 13,
          "position": 172
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/terminal.py",
        "start": 23,
        "end": 31,
        "startLoc": {
          "line": 23,
          "column": 2,
          "position": 91
        },
        "endLoc": {
          "line": 31,
          "column": 16,
          "position": 182
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "),\n    Name.Builtin:       ('cyan',        'brightcyan'),\n    Name.Function:      ('green',   'brightgreen'),\n    Name.Namespace:     ('_cyan_',      '_brightcyan_'),\n    Name.Class:         ('_green_', '_brightgreen_'),\n    Name.Exception:     ('cyan',        'brightcyan'),\n    Name.Decorator:     ('brightblack',    'gray'),\n    Name.Variable:      ('red',     'brightred'),\n    Name.Constant:      ('red',     'brightred'),\n    Name.Attribute:     ('cyan',        'brightcyan'),\n    Name.Tag:           ('brightblue',        'brightblue'),\n    String:             ('yellow',       'yellow'),\n    Number:             ('blue',    'brightblue'),\n\n    Generic.Deleted:    ('brightred',        'brightred'),\n    Generic.Inserted:   ('green',  'brightgreen'),\n    Generic.Heading:    ('**',         '**'),\n    Generic.Subheading: ('*magenta*',   '*brightmagenta*'),\n    Generic.Error",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/irc.py",
        "start": 30,
        "end": 48,
        "startLoc": {
          "line": 30,
          "column": 13,
          "position": 173
        },
        "endLoc": {
          "line": 48,
          "column": 6,
          "position": 400
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/terminal.py",
        "start": 31,
        "end": 49,
        "startLoc": {
          "line": 31,
          "column": 16,
          "position": 183
        },
        "endLoc": {
          "line": 49,
          "column": 7,
          "position": 410
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.font_name, name)\n            if path is not None:\n                self.fonts['NORMAL'] = ImageFont.truetype(path, self.font_size)\n                break\n        else:\n            raise FontNotFound(f'No usable fonts named: \"{self.font_name}\"')\n        for style in ('ITALIC', 'BOLD', 'BOLDITALIC'):\n            for stylename in STYLES[style]:\n                path = self._get_mac_font_path",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/img.py",
        "start": 140,
        "end": 148,
        "startLoc": {
          "line": 140,
          "column": 2,
          "position": 1102
        },
        "endLoc": {
          "line": 148,
          "column": 19,
          "position": 1198
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/img.py",
        "start": 108,
        "end": 116,
        "startLoc": {
          "line": 108,
          "column": 2,
          "position": 695
        },
        "endLoc": {
          "line": 116,
          "column": 19,
          "position": 791
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "self.font_name, stylename)\n                if path is not None:\n                    self.fonts[style] = ImageFont.truetype(path, self.font_size)\n                    break\n            else:\n                if style == 'BOLDITALIC':\n                    self.fonts[style] = self.fonts['BOLD']\n                else:\n                    self.fonts[style] = self.fonts['NORMAL']\n\n    def _lookup_win",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/img.py",
        "start": 148,
        "end": 158,
        "startLoc": {
          "line": 148,
          "column": 2,
          "position": 1203
        },
        "endLoc": {
          "line": 158,
          "column": 12,
          "position": 1304
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/img.py",
        "start": 116,
        "end": 126,
        "startLoc": {
          "line": 116,
          "column": 2,
          "position": 793
        },
        "endLoc": {
          "line": 126,
          "column": 19,
          "position": 894
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "# Automatically generated by scripts/gen_mapfiles.py.\n# DO NOT EDIT BY HAND; run `tox -e mapfiles` instead.\n\nFORMATTERS = {\n    'BBCodeFormatter': ('pygments.formatters.bbcode', 'BBCode', ('bbcode', 'bb'), (), 'Format tokens with BBcodes. These formatting codes are used by many bulletin boards, so you can highlight your sourcecode with pygments before posting it there.'),\n    'BmpImageFormatter': ('pygments.formatters.img', 'img_bmp', ('bmp', 'bitmap'), ('*.bmp',), 'Create a bitmap image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),\n    'GifImageFormatter': ('pygments.formatters.img', 'img_gif', ('gif',), ('*.gif',), 'Create a GIF image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),\n    'GroffFormatter': ('pygments.formatters.groff', 'groff', ('groff', 'troff', 'roff'), (), 'Format tokens with groff escapes to change their color and font style.'),\n    'HtmlFormatter': ('pygments.formatters.html', 'HTML', ('html',), ('*.html', '*.htm'), \"Format tokens as HTML 4 ``<span>`` tags. By default, the content is enclosed in a ``<pre>`` tag, itself wrapped in a ``<div>`` tag (but see the `nowrap` option). The ``<div>``'s CSS class can be set by the `cssclass` option.\"),\n    'IRCFormatter': ('pygments.formatters.irc', 'IRC', ('irc', 'IRC'), (), 'Format tokens with IRC color sequences'),\n    'ImageFormatter': ('pygments.formatters.img', 'img', ('img', 'IMG', 'png'), ('*.png',), 'Create a PNG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),\n    'JpgImageFormatter': ('pygments.formatters.img', 'img_jpg', ('jpg', 'jpeg'), ('*.jpg',), 'Create a JPEG image from source code. This uses the Python Imaging Library to generate a pixmap from the source code.'),\n    'LatexFormatter': ('pygments.formatters.latex', 'LaTeX', ('latex', 'tex'), ('*.tex',), 'Format tokens as LaTeX code. This needs the `fancyvrb` and `color` standard packages.'),\n    'NullFormatter': ('pygments.formatters.other', 'Text only', ('text', 'null'), ('*.txt',), 'Output the text unchanged without any formatting.'),\n    'PangoMarkupFormatter': ('pygments.formatters.pangomarkup', 'Pango Markup', ('pango', 'pangomarkup'), (), 'Format tokens as Pango Markup code. It can then be rendered to an SVG.'),\n    'RawTokenFormatter': ('pygments.formatters.other', 'Raw tokens', ('raw', 'tokens'), ('*.raw',), 'Format tokens as a raw representation for storing token streams.'),\n    'RtfFormatter': ('pygments.formatters.rtf', 'RTF', ('rtf',), ('*.rtf',), 'Format tokens as RTF markup. This formatter automatically outputs full RTF documents with color information and other useful stuff. Perfect for Copy and Paste into Microsoft(R) Word(R) documents.'),\n    'SvgFormatter': ('pygments.formatters.svg', 'SVG', ('svg',), ('*.svg',), 'Format tokens as an SVG graphics file.  This formatter is still experimental. Each line of code is a ``<text>`` element with explicit ``x`` and ``y`` coordinates containing ``<tspan>`` elements with the individual token styles.'),\n    'Terminal256Formatter': ('pygments.formatters.terminal256', 'Terminal256', ('terminal256', 'console256', '256'), (), 'Format tokens with ANSI color sequences, for output in a 256-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.'),\n    'TerminalFormatter': ('pygments.formatters.terminal', 'Terminal', ('terminal', 'console'), (), 'Format tokens with ANSI color sequences, for output in a text console. Color sequences are terminated at newlines, so that paging the output works correctly.'),\n    'TerminalTrueColorFormatter': ('pygments.formatters.terminal256', 'TerminalTrueColor', ('terminal16m', 'console16m', '16m'), (), 'Format tokens with ANSI color sequences, for output in a true-color terminal or console.  Like in `TerminalFormatter` color sequences are terminated at newlines, so that paging the output works correctly.'),\n    'TestcaseFormatter': ('pygments.formatters.other', 'Testcase', ('testcase',), (), 'Format tokens as appropriate for a new testcase.'),\n}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/_mapping.py",
        "start": 1,
        "end": 23,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 23,
          "column": 2,
          "position": 521
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatters/_mapping.py",
        "start": 1,
        "end": 23,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 23,
          "column": 2,
          "position": 521
        }
      }
    },
    {
      "format": "python",
      "lines": 139,
      "fragment": "pygments.util import ClassNotFound\n\n__all__ = ['get_formatter_by_name', 'get_formatter_for_filename',\n           'get_all_formatters', 'load_formatter_from_file'] + list(FORMATTERS)\n\n_formatter_cache = {}  # classes by name\n_pattern_cache = {}\n\n\ndef _fn_matches(fn, glob):\n    \"\"\"Return whether the supplied file name fn matches pattern filename.\"\"\"\n    if glob not in _pattern_cache:\n        pattern = _pattern_cache[glob] = re.compile(fnmatch.translate(glob))\n        return pattern.match(fn)\n    return _pattern_cache[glob].match(fn)\n\n\ndef _load_formatters(module_name):\n    \"\"\"Load a formatter (and all others in the module too).\"\"\"\n    mod = __import__(module_name, None, None, ['__all__'])\n    for formatter_name in mod.__all__:\n        cls = getattr(mod, formatter_name)\n        _formatter_cache[cls.name] = cls\n\n\ndef get_all_formatters():\n    \"\"\"Return a generator for all formatter classes.\"\"\"\n    # NB: this returns formatter classes, not info like get_all_lexers().\n    for info in FORMATTERS.values():\n        if info[1] not in _formatter_cache:\n            _load_formatters(info[0])\n        yield _formatter_cache[info[1]]\n    for _, formatter in find_plugin_formatters():\n        yield formatter\n\n\ndef find_formatter_class(alias):\n    \"\"\"Lookup a formatter by alias.\n\n    Returns None if not found.\n    \"\"\"\n    for module_name, name, aliases, _, _ in FORMATTERS.values():\n        if alias in aliases:\n            if name not in _formatter_cache:\n                _load_formatters(module_name)\n            return _formatter_cache[name]\n    for _, cls in find_plugin_formatters():\n        if alias in cls.aliases:\n            return cls\n\n\ndef get_formatter_by_name(_alias, **options):\n    \"\"\"\n    Return an instance of a :class:`.Formatter` subclass that has `alias` in its\n    aliases list. The formatter is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no formatter with that\n    alias is found.\n    \"\"\"\n    cls = find_formatter_class(_alias)\n    if cls is None:\n        raise ClassNotFound(f\"no formatter found for name {_alias!r}\")\n    return cls(**options)\n\n\ndef load_formatter_from_file(filename, formattername=\"CustomFormatter\", **options):\n    \"\"\"\n    Return a `Formatter` subclass instance loaded from the provided file, relative\n    to the current directory.\n\n    The file is expected to contain a Formatter class named ``formattername``\n    (by default, CustomFormatter). Users should be very careful with the input, because\n    this method is equivalent to running ``eval()`` on the input file. The formatter is\n    given the `options` at its instantiation.\n\n    :exc:`pygments.util.ClassNotFound` is raised if there are any errors loading\n    the formatter.\n\n    .. versionadded:: 2.2\n    \"\"\"\n    try:\n        # This empty dict will contain the namespace for the exec'd file\n        custom_namespace = {}\n        with open(filename, 'rb') as f:\n            exec(f.read(), custom_namespace)\n        # Retrieve the class `formattername` from that namespace\n        if formattername not in custom_namespace:\n            raise ClassNotFound(f'no valid {formattername} class found in {filename}')\n        formatter_class = custom_namespace[formattername]\n        # And finally instantiate it with the options\n        return formatter_class(**options)\n    except OSError as err:\n        raise ClassNotFound(f'cannot read {filename}: {err}')\n    except ClassNotFound:\n        raise\n    except Exception as err:\n        raise ClassNotFound(f'error when loading custom formatter: {err}')\n\n\ndef get_formatter_for_filename(fn, **options):\n    \"\"\"\n    Return a :class:`.Formatter` subclass instance that has a filename pattern\n    matching `fn`. The formatter is given the `options` at its instantiation.\n\n    Will raise :exc:`pygments.util.ClassNotFound` if no formatter for that filename\n    is found.\n    \"\"\"\n    fn = basename(fn)\n    for modname, name, _, filenames, _ in FORMATTERS.values():\n        for filename in filenames:\n            if _fn_matches(fn, filename):\n                if name not in _formatter_cache:\n                    _load_formatters(modname)\n                return _formatter_cache[name](**options)\n    for _name, cls in find_plugin_formatters():\n        for filename in cls.filenames:\n            if _fn_matches(fn, filename):\n                return cls(**options)\n    raise ClassNotFound(f\"no formatter found for file name {fn!r}\")\n\n\nclass _automodule(types.ModuleType):\n    \"\"\"Automatically import formatters.\"\"\"\n\n    def __getattr__(self, name):\n        info = FORMATTERS.get(name)\n        if info:\n            _load_formatters(info[0])\n            cls = _formatter_cache[info[1]]\n            setattr(self, name, cls)\n            return cls\n        raise AttributeError(name)\n\n\noldmod = sys.modules[__name__]\nnewmod = _automodule(__name__)\nnewmod.__dict__.update(oldmod.__dict__)\nsys.modules[__name__] = newmod\ndel newmod.newmod, newmod.oldmod, newmod.sys, newmod.types",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatters/__init__.py",
        "start": 19,
        "end": 157,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 54
        },
        "endLoc": {
          "line": 157,
          "column": 6,
          "position": 974
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatters/__init__.py",
        "start": 19,
        "end": 157,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 66
        },
        "endLoc": {
          "line": 157,
          "column": 6,
          "position": 986
        }
      }
    },
    {
      "format": "python",
      "lines": 922,
      "fragment": "pygments.plugin import find_plugin_filters\n\n\ndef find_filter_class(filtername):\n    \"\"\"Lookup a filter by name. Return None if not found.\"\"\"\n    if filtername in FILTERS:\n        return FILTERS[filtername]\n    for name, cls in find_plugin_filters():\n        if name == filtername:\n            return cls\n    return None\n\n\ndef get_filter_by_name(filtername, **options):\n    \"\"\"Return an instantiated filter.\n\n    Options are passed to the filter initializer if wanted.\n    Raise a ClassNotFound if not found.\n    \"\"\"\n    cls = find_filter_class(filtername)\n    if cls:\n        return cls(**options)\n    else:\n        raise ClassNotFound(f'filter {filtername!r} not found')\n\n\ndef get_all_filters():\n    \"\"\"Return a generator of all filter names.\"\"\"\n    yield from FILTERS\n    for name, _ in find_plugin_filters():\n        yield name\n\n\ndef _replace_special(ttype, value, regex, specialttype,\n                     replacefunc=lambda x: x):\n    last = 0\n    for match in regex.finditer(value):\n        start, end = match.start(), match.end()\n        if start != last:\n            yield ttype, value[last:start]\n        yield specialttype, replacefunc(value[start:end])\n        last = end\n    if last != len(value):\n        yield ttype, value[last:]\n\n\nclass CodeTagFilter(Filter):\n    \"\"\"Highlight special code tags in comments and docstrings.\n\n    Options accepted:\n\n    `codetags` : list of strings\n       A list of strings that are flagged as code tags.  The default is to\n       highlight ``XXX``, ``TODO``, ``FIXME``, ``BUG`` and ``NOTE``.\n\n    .. versionchanged:: 2.13\n       Now recognizes ``FIXME`` by default.\n    \"\"\"\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        tags = get_list_opt(options, 'codetags',\n                            ['XXX', 'TODO', 'FIXME', 'BUG', 'NOTE'])\n        self.tag_re = re.compile(r'\\b({})\\b'.format('|'.join([\n            re.escape(tag) for tag in tags if tag\n        ])))\n\n    def filter(self, lexer, stream):\n        regex = self.tag_re\n        for ttype, value in stream:\n            if ttype in String.Doc or \\\n               ttype in Comment and \\\n               ttype not in Comment.Preproc:\n                yield from _replace_special(ttype, value, regex, Comment.Special)\n            else:\n                yield ttype, value\n\n\nclass SymbolFilter(Filter):\n    \"\"\"Convert mathematical symbols such as \\\\<longrightarrow> in Isabelle\n    or \\\\longrightarrow in LaTeX into Unicode characters.\n\n    This is mostly useful for HTML or console output when you want to\n    approximate the source rendering you'd see in an IDE.\n\n    Options accepted:\n\n    `lang` : string\n       The symbol language. Must be one of ``'isabelle'`` or\n       ``'latex'``.  The default is ``'isabelle'``.\n    \"\"\"\n\n    latex_symbols = {\n        '\\\\alpha'                : '\\U000003b1',\n        '\\\\beta'                 : '\\U000003b2',\n        '\\\\gamma'                : '\\U000003b3',\n        '\\\\delta'                : '\\U000003b4',\n        '\\\\varepsilon'           : '\\U000003b5',\n        '\\\\zeta'                 : '\\U000003b6',\n        '\\\\eta'                  : '\\U000003b7',\n        '\\\\vartheta'             : '\\U000003b8',\n        '\\\\iota'                 : '\\U000003b9',\n        '\\\\kappa'                : '\\U000003ba',\n        '\\\\lambda'               : '\\U000003bb',\n        '\\\\mu'                   : '\\U000003bc',\n        '\\\\nu'                   : '\\U000003bd',\n        '\\\\xi'                   : '\\U000003be',\n        '\\\\pi'                   : '\\U000003c0',\n        '\\\\varrho'               : '\\U000003c1',\n        '\\\\sigma'                : '\\U000003c3',\n        '\\\\tau'                  : '\\U000003c4',\n        '\\\\upsilon'              : '\\U000003c5',\n        '\\\\varphi'               : '\\U000003c6',\n        '\\\\chi'                  : '\\U000003c7',\n        '\\\\psi'                  : '\\U000003c8',\n        '\\\\omega'                : '\\U000003c9',\n        '\\\\Gamma'                : '\\U00000393',\n        '\\\\Delta'                : '\\U00000394',\n        '\\\\Theta'                : '\\U00000398',\n        '\\\\Lambda'               : '\\U0000039b',\n        '\\\\Xi'                   : '\\U0000039e',\n        '\\\\Pi'                   : '\\U000003a0',\n        '\\\\Sigma'                : '\\U000003a3',\n        '\\\\Upsilon'              : '\\U000003a5',\n        '\\\\Phi'                  : '\\U000003a6',\n        '\\\\Psi'                  : '\\U000003a8',\n        '\\\\Omega'                : '\\U000003a9',\n        '\\\\leftarrow'            : '\\U00002190',\n        '\\\\longleftarrow'        : '\\U000027f5',\n        '\\\\rightarrow'           : '\\U00002192',\n        '\\\\longrightarrow'       : '\\U000027f6',\n        '\\\\Leftarrow'            : '\\U000021d0',\n        '\\\\Longleftarrow'        : '\\U000027f8',\n        '\\\\Rightarrow'           : '\\U000021d2',\n        '\\\\Longrightarrow'       : '\\U000027f9',\n        '\\\\leftrightarrow'       : '\\U00002194',\n        '\\\\longleftrightarrow'   : '\\U000027f7',\n        '\\\\Leftrightarrow'       : '\\U000021d4',\n        '\\\\Longleftrightarrow'   : '\\U000027fa',\n        '\\\\mapsto'               : '\\U000021a6',\n        '\\\\longmapsto'           : '\\U000027fc',\n        '\\\\relbar'               : '\\U00002500',\n        '\\\\Relbar'               : '\\U00002550',\n        '\\\\hookleftarrow'        : '\\U000021a9',\n        '\\\\hookrightarrow'       : '\\U000021aa',\n        '\\\\leftharpoondown'      : '\\U000021bd',\n        '\\\\rightharpoondown'     : '\\U000021c1',\n        '\\\\leftharpoonup'        : '\\U000021bc',\n        '\\\\rightharpoonup'       : '\\U000021c0',\n        '\\\\rightleftharpoons'    : '\\U000021cc',\n        '\\\\leadsto'              : '\\U0000219d',\n        '\\\\downharpoonleft'      : '\\U000021c3',\n        '\\\\downharpoonright'     : '\\U000021c2',\n        '\\\\upharpoonleft'        : '\\U000021bf',\n        '\\\\upharpoonright'       : '\\U000021be',\n        '\\\\restriction'          : '\\U000021be',\n        '\\\\uparrow'              : '\\U00002191',\n        '\\\\Uparrow'              : '\\U000021d1',\n        '\\\\downarrow'            : '\\U00002193',\n        '\\\\Downarrow'            : '\\U000021d3',\n        '\\\\updownarrow'          : '\\U00002195',\n        '\\\\Updownarrow'          : '\\U000021d5',\n        '\\\\langle'               : '\\U000027e8',\n        '\\\\rangle'               : '\\U000027e9',\n        '\\\\lceil'                : '\\U00002308',\n        '\\\\rceil'                : '\\U00002309',\n        '\\\\lfloor'               : '\\U0000230a',\n        '\\\\rfloor'               : '\\U0000230b',\n        '\\\\flqq'                 : '\\U000000ab',\n        '\\\\frqq'                 : '\\U000000bb',\n        '\\\\bot'                  : '\\U000022a5',\n        '\\\\top'                  : '\\U000022a4',\n        '\\\\wedge'                : '\\U00002227',\n        '\\\\bigwedge'             : '\\U000022c0',\n        '\\\\vee'                  : '\\U00002228',\n        '\\\\bigvee'               : '\\U000022c1',\n        '\\\\forall'               : '\\U00002200',\n        '\\\\exists'               : '\\U00002203',\n        '\\\\nexists'              : '\\U00002204',\n        '\\\\neg'                  : '\\U000000ac',\n        '\\\\Box'                  : '\\U000025a1',\n        '\\\\Diamond'              : '\\U000025c7',\n        '\\\\vdash'                : '\\U000022a2',\n        '\\\\models'               : '\\U000022a8',\n        '\\\\dashv'                : '\\U000022a3',\n        '\\\\surd'                 : '\\U0000221a',\n        '\\\\le'                   : '\\U00002264',\n        '\\\\ge'                   : '\\U00002265',\n        '\\\\ll'                   : '\\U0000226a',\n        '\\\\gg'                   : '\\U0000226b',\n        '\\\\lesssim'              : '\\U00002272',\n        '\\\\gtrsim'               : '\\U00002273',\n        '\\\\lessapprox'           : '\\U00002a85',\n        '\\\\gtrapprox'            : '\\U00002a86',\n        '\\\\in'                   : '\\U00002208',\n        '\\\\notin'                : '\\U00002209',\n        '\\\\subset'               : '\\U00002282',\n        '\\\\supset'               : '\\U00002283',\n        '\\\\subseteq'             : '\\U00002286',\n        '\\\\supseteq'             : '\\U00002287',\n        '\\\\sqsubset'             : '\\U0000228f',\n        '\\\\sqsupset'             : '\\U00002290',\n        '\\\\sqsubseteq'           : '\\U00002291',\n        '\\\\sqsupseteq'           : '\\U00002292',\n        '\\\\cap'                  : '\\U00002229',\n        '\\\\bigcap'               : '\\U000022c2',\n        '\\\\cup'                  : '\\U0000222a',\n        '\\\\bigcup'               : '\\U000022c3',\n        '\\\\sqcup'                : '\\U00002294',\n        '\\\\bigsqcup'             : '\\U00002a06',\n        '\\\\sqcap'                : '\\U00002293',\n        '\\\\Bigsqcap'             : '\\U00002a05',\n        '\\\\setminus'             : '\\U00002216',\n        '\\\\propto'               : '\\U0000221d',\n        '\\\\uplus'                : '\\U0000228e',\n        '\\\\bigplus'              : '\\U00002a04',\n        '\\\\sim'                  : '\\U0000223c',\n        '\\\\doteq'                : '\\U00002250',\n        '\\\\simeq'                : '\\U00002243',\n        '\\\\approx'               : '\\U00002248',\n        '\\\\asymp'                : '\\U0000224d',\n        '\\\\cong'                 : '\\U00002245',\n        '\\\\equiv'                : '\\U00002261',\n        '\\\\Join'                 : '\\U000022c8',\n        '\\\\bowtie'               : '\\U00002a1d',\n        '\\\\prec'                 : '\\U0000227a',\n        '\\\\succ'                 : '\\U0000227b',\n        '\\\\preceq'               : '\\U0000227c',\n        '\\\\succeq'               : '\\U0000227d',\n        '\\\\parallel'             : '\\U00002225',\n        '\\\\mid'                  : '\\U000000a6',\n        '\\\\pm'                   : '\\U000000b1',\n        '\\\\mp'                   : '\\U00002213',\n        '\\\\times'                : '\\U000000d7',\n        '\\\\div'                  : '\\U000000f7',\n        '\\\\cdot'                 : '\\U000022c5',\n        '\\\\star'                 : '\\U000022c6',\n        '\\\\circ'                 : '\\U00002218',\n        '\\\\dagger'               : '\\U00002020',\n        '\\\\ddagger'              : '\\U00002021',\n        '\\\\lhd'                  : '\\U000022b2',\n        '\\\\rhd'                  : '\\U000022b3',\n        '\\\\unlhd'                : '\\U000022b4',\n        '\\\\unrhd'                : '\\U000022b5',\n        '\\\\triangleleft'         : '\\U000025c3',\n        '\\\\triangleright'        : '\\U000025b9',\n        '\\\\triangle'             : '\\U000025b3',\n        '\\\\triangleq'            : '\\U0000225c',\n        '\\\\oplus'                : '\\U00002295',\n        '\\\\bigoplus'             : '\\U00002a01',\n        '\\\\otimes'               : '\\U00002297',\n        '\\\\bigotimes'            : '\\U00002a02',\n        '\\\\odot'                 : '\\U00002299',\n        '\\\\bigodot'              : '\\U00002a00',\n        '\\\\ominus'               : '\\U00002296',\n        '\\\\oslash'               : '\\U00002298',\n        '\\\\dots'                 : '\\U00002026',\n        '\\\\cdots'                : '\\U000022ef',\n        '\\\\sum'                  : '\\U00002211',\n        '\\\\prod'                 : '\\U0000220f',\n        '\\\\coprod'               : '\\U00002210',\n        '\\\\infty'                : '\\U0000221e',\n        '\\\\int'                  : '\\U0000222b',\n        '\\\\oint'                 : '\\U0000222e',\n        '\\\\clubsuit'             : '\\U00002663',\n        '\\\\diamondsuit'          : '\\U00002662',\n        '\\\\heartsuit'            : '\\U00002661',\n        '\\\\spadesuit'            : '\\U00002660',\n        '\\\\aleph'                : '\\U00002135',\n        '\\\\emptyset'             : '\\U00002205',\n        '\\\\nabla'                : '\\U00002207',\n        '\\\\partial'              : '\\U00002202',\n        '\\\\flat'                 : '\\U0000266d',\n        '\\\\natural'              : '\\U0000266e',\n        '\\\\sharp'                : '\\U0000266f',\n        '\\\\angle'                : '\\U00002220',\n        '\\\\copyright'            : '\\U000000a9',\n        '\\\\textregistered'       : '\\U000000ae',\n        '\\\\textonequarter'       : '\\U000000bc',\n        '\\\\textonehalf'          : '\\U000000bd',\n        '\\\\textthreequarters'    : '\\U000000be',\n        '\\\\textordfeminine'      : '\\U000000aa',\n        '\\\\textordmasculine'     : '\\U000000ba',\n        '\\\\euro'                 : '\\U000020ac',\n        '\\\\pounds'               : '\\U000000a3',\n        '\\\\yen'                  : '\\U000000a5',\n        '\\\\textcent'             : '\\U000000a2',\n        '\\\\textcurrency'         : '\\U000000a4',\n        '\\\\textdegree'           : '\\U000000b0',\n    }\n\n    isabelle_symbols = {\n        '\\\\<zero>'                 : '\\U0001d7ec',\n        '\\\\<one>'                  : '\\U0001d7ed',\n        '\\\\<two>'                  : '\\U0001d7ee',\n        '\\\\<three>'                : '\\U0001d7ef',\n        '\\\\<four>'                 : '\\U0001d7f0',\n        '\\\\<five>'                 : '\\U0001d7f1',\n        '\\\\<six>'                  : '\\U0001d7f2',\n        '\\\\<seven>'                : '\\U0001d7f3',\n        '\\\\<eight>'                : '\\U0001d7f4',\n        '\\\\<nine>'                 : '\\U0001d7f5',\n        '\\\\<A>'                    : '\\U0001d49c',\n        '\\\\<B>'                    : '\\U0000212c',\n        '\\\\<C>'                    : '\\U0001d49e',\n        '\\\\<D>'                    : '\\U0001d49f',\n        '\\\\<E>'                    : '\\U00002130',\n        '\\\\<F>'                    : '\\U00002131',\n        '\\\\<G>'                    : '\\U0001d4a2',\n        '\\\\<H>'                    : '\\U0000210b',\n        '\\\\<I>'                    : '\\U00002110',\n        '\\\\<J>'                    : '\\U0001d4a5',\n        '\\\\<K>'                    : '\\U0001d4a6',\n        '\\\\<L>'                    : '\\U00002112',\n        '\\\\<M>'                    : '\\U00002133',\n        '\\\\<N>'                    : '\\U0001d4a9',\n        '\\\\<O>'                    : '\\U0001d4aa',\n        '\\\\<P>'                    : '\\U0001d4ab',\n        '\\\\<Q>'                    : '\\U0001d4ac',\n        '\\\\<R>'                    : '\\U0000211b',\n        '\\\\<S>'                    : '\\U0001d4ae',\n        '\\\\<T>'                    : '\\U0001d4af',\n        '\\\\<U>'                    : '\\U0001d4b0',\n        '\\\\<V>'                    : '\\U0001d4b1',\n        '\\\\<W>'                    : '\\U0001d4b2',\n        '\\\\<X>'                    : '\\U0001d4b3',\n        '\\\\<Y>'                    : '\\U0001d4b4',\n        '\\\\<Z>'                    : '\\U0001d4b5',\n        '\\\\<a>'                    : '\\U0001d5ba',\n        '\\\\<b>'                    : '\\U0001d5bb',\n        '\\\\<c>'                    : '\\U0001d5bc',\n        '\\\\<d>'                    : '\\U0001d5bd',\n        '\\\\<e>'                    : '\\U0001d5be',\n        '\\\\<f>'                    : '\\U0001d5bf',\n        '\\\\<g>'                    : '\\U0001d5c0',\n        '\\\\<h>'                    : '\\U0001d5c1',\n        '\\\\<i>'                    : '\\U0001d5c2',\n        '\\\\<j>'                    : '\\U0001d5c3',\n        '\\\\<k>'                    : '\\U0001d5c4',\n        '\\\\<l>'                    : '\\U0001d5c5',\n        '\\\\<m>'                    : '\\U0001d5c6',\n        '\\\\<n>'                    : '\\U0001d5c7',\n        '\\\\<o>'                    : '\\U0001d5c8',\n        '\\\\<p>'                    : '\\U0001d5c9',\n        '\\\\<q>'                    : '\\U0001d5ca',\n        '\\\\<r>'                    : '\\U0001d5cb',\n        '\\\\<s>'                    : '\\U0001d5cc',\n        '\\\\<t>'                    : '\\U0001d5cd',\n        '\\\\<u>'                    : '\\U0001d5ce',\n        '\\\\<v>'                    : '\\U0001d5cf',\n        '\\\\<w>'                    : '\\U0001d5d0',\n        '\\\\<x>'                    : '\\U0001d5d1',\n        '\\\\<y>'                    : '\\U0001d5d2',\n        '\\\\<z>'                    : '\\U0001d5d3',\n        '\\\\<AA>'                   : '\\U0001d504',\n        '\\\\<BB>'                   : '\\U0001d505',\n        '\\\\<CC>'                   : '\\U0000212d',\n        '\\\\<DD>'                   : '\\U0001d507',\n        '\\\\<EE>'                   : '\\U0001d508',\n        '\\\\<FF>'                   : '\\U0001d509',\n        '\\\\<GG>'                   : '\\U0001d50a',\n        '\\\\<HH>'                   : '\\U0000210c',\n        '\\\\<II>'                   : '\\U00002111',\n        '\\\\<JJ>'                   : '\\U0001d50d',\n        '\\\\<KK>'                   : '\\U0001d50e',\n        '\\\\<LL>'                   : '\\U0001d50f',\n        '\\\\<MM>'                   : '\\U0001d510',\n        '\\\\<NN>'                   : '\\U0001d511',\n        '\\\\<OO>'                   : '\\U0001d512',\n        '\\\\<PP>'                   : '\\U0001d513',\n        '\\\\<QQ>'                   : '\\U0001d514',\n        '\\\\<RR>'                   : '\\U0000211c',\n        '\\\\<SS>'                   : '\\U0001d516',\n        '\\\\<TT>'                   : '\\U0001d517',\n        '\\\\<UU>'                   : '\\U0001d518',\n        '\\\\<VV>'                   : '\\U0001d519',\n        '\\\\<WW>'                   : '\\U0001d51a',\n        '\\\\<XX>'                   : '\\U0001d51b',\n        '\\\\<YY>'                   : '\\U0001d51c',\n        '\\\\<ZZ>'                   : '\\U00002128',\n        '\\\\<aa>'                   : '\\U0001d51e',\n        '\\\\<bb>'                   : '\\U0001d51f',\n        '\\\\<cc>'                   : '\\U0001d520',\n        '\\\\<dd>'                   : '\\U0001d521',\n        '\\\\<ee>'                   : '\\U0001d522',\n        '\\\\<ff>'                   : '\\U0001d523',\n        '\\\\<gg>'                   : '\\U0001d524',\n        '\\\\<hh>'                   : '\\U0001d525',\n        '\\\\<ii>'                   : '\\U0001d526',\n        '\\\\<jj>'                   : '\\U0001d527',\n        '\\\\<kk>'                   : '\\U0001d528',\n        '\\\\<ll>'                   : '\\U0001d529',\n        '\\\\<mm>'                   : '\\U0001d52a',\n        '\\\\<nn>'                   : '\\U0001d52b',\n        '\\\\<oo>'                   : '\\U0001d52c',\n        '\\\\<pp>'                   : '\\U0001d52d',\n        '\\\\<qq>'                   : '\\U0001d52e',\n        '\\\\<rr>'                   : '\\U0001d52f',\n        '\\\\<ss>'                   : '\\U0001d530',\n        '\\\\<tt>'                   : '\\U0001d531',\n        '\\\\<uu>'                   : '\\U0001d532',\n        '\\\\<vv>'                   : '\\U0001d533',\n        '\\\\<ww>'                   : '\\U0001d534',\n        '\\\\<xx>'                   : '\\U0001d535',\n        '\\\\<yy>'                   : '\\U0001d536',\n        '\\\\<zz>'                   : '\\U0001d537',\n        '\\\\<alpha>'                : '\\U000003b1',\n        '\\\\<beta>'                 : '\\U000003b2',\n        '\\\\<gamma>'                : '\\U000003b3',\n        '\\\\<delta>'                : '\\U000003b4',\n        '\\\\<epsilon>'              : '\\U000003b5',\n        '\\\\<zeta>'                 : '\\U000003b6',\n        '\\\\<eta>'                  : '\\U000003b7',\n        '\\\\<theta>'                : '\\U000003b8',\n        '\\\\<iota>'                 : '\\U000003b9',\n        '\\\\<kappa>'                : '\\U000003ba',\n        '\\\\<lambda>'               : '\\U000003bb',\n        '\\\\<mu>'                   : '\\U000003bc',\n        '\\\\<nu>'                   : '\\U000003bd',\n        '\\\\<xi>'                   : '\\U000003be',\n        '\\\\<pi>'                   : '\\U000003c0',\n        '\\\\<rho>'                  : '\\U000003c1',\n        '\\\\<sigma>'                : '\\U000003c3',\n        '\\\\<tau>'                  : '\\U000003c4',\n        '\\\\<upsilon>'              : '\\U000003c5',\n        '\\\\<phi>'                  : '\\U000003c6',\n        '\\\\<chi>'                  : '\\U000003c7',\n        '\\\\<psi>'                  : '\\U000003c8',\n        '\\\\<omega>'                : '\\U000003c9',\n        '\\\\<Gamma>'                : '\\U00000393',\n        '\\\\<Delta>'                : '\\U00000394',\n        '\\\\<Theta>'                : '\\U00000398',\n        '\\\\<Lambda>'               : '\\U0000039b',\n        '\\\\<Xi>'                   : '\\U0000039e',\n        '\\\\<Pi>'                   : '\\U000003a0',\n        '\\\\<Sigma>'                : '\\U000003a3',\n        '\\\\<Upsilon>'              : '\\U000003a5',\n        '\\\\<Phi>'                  : '\\U000003a6',\n        '\\\\<Psi>'                  : '\\U000003a8',\n        '\\\\<Omega>'                : '\\U000003a9',\n        '\\\\<bool>'                 : '\\U0001d539',\n        '\\\\<complex>'              : '\\U00002102',\n        '\\\\<nat>'                  : '\\U00002115',\n        '\\\\<rat>'                  : '\\U0000211a',\n        '\\\\<real>'                 : '\\U0000211d',\n        '\\\\<int>'                  : '\\U00002124',\n        '\\\\<leftarrow>'            : '\\U00002190',\n        '\\\\<longleftarrow>'        : '\\U000027f5',\n        '\\\\<rightarrow>'           : '\\U00002192',\n        '\\\\<longrightarrow>'       : '\\U000027f6',\n        '\\\\<Leftarrow>'            : '\\U000021d0',\n        '\\\\<Longleftarrow>'        : '\\U000027f8',\n        '\\\\<Rightarrow>'           : '\\U000021d2',\n        '\\\\<Longrightarrow>'       : '\\U000027f9',\n        '\\\\<leftrightarrow>'       : '\\U00002194',\n        '\\\\<longleftrightarrow>'   : '\\U000027f7',\n        '\\\\<Leftrightarrow>'       : '\\U000021d4',\n        '\\\\<Longleftrightarrow>'   : '\\U000027fa',\n        '\\\\<mapsto>'               : '\\U000021a6',\n        '\\\\<longmapsto>'           : '\\U000027fc',\n        '\\\\<midarrow>'             : '\\U00002500',\n        '\\\\<Midarrow>'             : '\\U00002550',\n        '\\\\<hookleftarrow>'        : '\\U000021a9',\n        '\\\\<hookrightarrow>'       : '\\U000021aa',\n        '\\\\<leftharpoondown>'      : '\\U000021bd',\n        '\\\\<rightharpoondown>'     : '\\U000021c1',\n        '\\\\<leftharpoonup>'        : '\\U000021bc',\n        '\\\\<rightharpoonup>'       : '\\U000021c0',\n        '\\\\<rightleftharpoons>'    : '\\U000021cc',\n        '\\\\<leadsto>'              : '\\U0000219d',\n        '\\\\<downharpoonleft>'      : '\\U000021c3',\n        '\\\\<downharpoonright>'     : '\\U000021c2',\n        '\\\\<upharpoonleft>'        : '\\U000021bf',\n        '\\\\<upharpoonright>'       : '\\U000021be',\n        '\\\\<restriction>'          : '\\U000021be',\n        '\\\\<Colon>'                : '\\U00002237',\n        '\\\\<up>'                   : '\\U00002191',\n        '\\\\<Up>'                   : '\\U000021d1',\n        '\\\\<down>'                 : '\\U00002193',\n        '\\\\<Down>'                 : '\\U000021d3',\n        '\\\\<updown>'               : '\\U00002195',\n        '\\\\<Updown>'               : '\\U000021d5',\n        '\\\\<langle>'               : '\\U000027e8',\n        '\\\\<rangle>'               : '\\U000027e9',\n        '\\\\<lceil>'                : '\\U00002308',\n        '\\\\<rceil>'                : '\\U00002309',\n        '\\\\<lfloor>'               : '\\U0000230a',\n        '\\\\<rfloor>'               : '\\U0000230b',\n        '\\\\<lparr>'                : '\\U00002987',\n        '\\\\<rparr>'                : '\\U00002988',\n        '\\\\<lbrakk>'               : '\\U000027e6',\n        '\\\\<rbrakk>'               : '\\U000027e7',\n        '\\\\<lbrace>'               : '\\U00002983',\n        '\\\\<rbrace>'               : '\\U00002984',\n        '\\\\<guillemotleft>'        : '\\U000000ab',\n        '\\\\<guillemotright>'       : '\\U000000bb',\n        '\\\\<bottom>'               : '\\U000022a5',\n        '\\\\<top>'                  : '\\U000022a4',\n        '\\\\<and>'                  : '\\U00002227',\n        '\\\\<And>'                  : '\\U000022c0',\n        '\\\\<or>'                   : '\\U00002228',\n        '\\\\<Or>'                   : '\\U000022c1',\n        '\\\\<forall>'               : '\\U00002200',\n        '\\\\<exists>'               : '\\U00002203',\n        '\\\\<nexists>'              : '\\U00002204',\n        '\\\\<not>'                  : '\\U000000ac',\n        '\\\\<box>'                  : '\\U000025a1',\n        '\\\\<diamond>'              : '\\U000025c7',\n        '\\\\<turnstile>'            : '\\U000022a2',\n        '\\\\<Turnstile>'            : '\\U000022a8',\n        '\\\\<tturnstile>'           : '\\U000022a9',\n        '\\\\<TTurnstile>'           : '\\U000022ab',\n        '\\\\<stileturn>'            : '\\U000022a3',\n        '\\\\<surd>'                 : '\\U0000221a',\n        '\\\\<le>'                   : '\\U00002264',\n        '\\\\<ge>'                   : '\\U00002265',\n        '\\\\<lless>'                : '\\U0000226a',\n        '\\\\<ggreater>'             : '\\U0000226b',\n        '\\\\<lesssim>'              : '\\U00002272',\n        '\\\\<greatersim>'           : '\\U00002273',\n        '\\\\<lessapprox>'           : '\\U00002a85',\n        '\\\\<greaterapprox>'        : '\\U00002a86',\n        '\\\\<in>'                   : '\\U00002208',\n        '\\\\<notin>'                : '\\U00002209',\n        '\\\\<subset>'               : '\\U00002282',\n        '\\\\<supset>'               : '\\U00002283',\n        '\\\\<subseteq>'             : '\\U00002286',\n        '\\\\<supseteq>'             : '\\U00002287',\n        '\\\\<sqsubset>'             : '\\U0000228f',\n        '\\\\<sqsupset>'             : '\\U00002290',\n        '\\\\<sqsubseteq>'           : '\\U00002291',\n        '\\\\<sqsupseteq>'           : '\\U00002292',\n        '\\\\<inter>'                : '\\U00002229',\n        '\\\\<Inter>'                : '\\U000022c2',\n        '\\\\<union>'                : '\\U0000222a',\n        '\\\\<Union>'                : '\\U000022c3',\n        '\\\\<squnion>'              : '\\U00002294',\n        '\\\\<Squnion>'              : '\\U00002a06',\n        '\\\\<sqinter>'              : '\\U00002293',\n        '\\\\<Sqinter>'              : '\\U00002a05',\n        '\\\\<setminus>'             : '\\U00002216',\n        '\\\\<propto>'               : '\\U0000221d',\n        '\\\\<uplus>'                : '\\U0000228e',\n        '\\\\<Uplus>'                : '\\U00002a04',\n        '\\\\<noteq>'                : '\\U00002260',\n        '\\\\<sim>'                  : '\\U0000223c',\n        '\\\\<doteq>'                : '\\U00002250',\n        '\\\\<simeq>'                : '\\U00002243',\n        '\\\\<approx>'               : '\\U00002248',\n        '\\\\<asymp>'                : '\\U0000224d',\n        '\\\\<cong>'                 : '\\U00002245',\n        '\\\\<smile>'                : '\\U00002323',\n        '\\\\<equiv>'                : '\\U00002261',\n        '\\\\<frown>'                : '\\U00002322',\n        '\\\\<Join>'                 : '\\U000022c8',\n        '\\\\<bowtie>'               : '\\U00002a1d',\n        '\\\\<prec>'                 : '\\U0000227a',\n        '\\\\<succ>'                 : '\\U0000227b',\n        '\\\\<preceq>'               : '\\U0000227c',\n        '\\\\<succeq>'               : '\\U0000227d',\n        '\\\\<parallel>'             : '\\U00002225',\n        '\\\\<bar>'                  : '\\U000000a6',\n        '\\\\<plusminus>'            : '\\U000000b1',\n        '\\\\<minusplus>'            : '\\U00002213',\n        '\\\\<times>'                : '\\U000000d7',\n        '\\\\<div>'                  : '\\U000000f7',\n        '\\\\<cdot>'                 : '\\U000022c5',\n        '\\\\<star>'                 : '\\U000022c6',\n        '\\\\<bullet>'               : '\\U00002219',\n        '\\\\<circ>'                 : '\\U00002218',\n        '\\\\<dagger>'               : '\\U00002020',\n        '\\\\<ddagger>'              : '\\U00002021',\n        '\\\\<lhd>'                  : '\\U000022b2',\n        '\\\\<rhd>'                  : '\\U000022b3',\n        '\\\\<unlhd>'                : '\\U000022b4',\n        '\\\\<unrhd>'                : '\\U000022b5',\n        '\\\\<triangleleft>'         : '\\U000025c3',\n        '\\\\<triangleright>'        : '\\U000025b9',\n        '\\\\<triangle>'             : '\\U000025b3',\n        '\\\\<triangleq>'            : '\\U0000225c',\n        '\\\\<oplus>'                : '\\U00002295',\n        '\\\\<Oplus>'                : '\\U00002a01',\n        '\\\\<otimes>'               : '\\U00002297',\n        '\\\\<Otimes>'               : '\\U00002a02',\n        '\\\\<odot>'                 : '\\U00002299',\n        '\\\\<Odot>'                 : '\\U00002a00',\n        '\\\\<ominus>'               : '\\U00002296',\n        '\\\\<oslash>'               : '\\U00002298',\n        '\\\\<dots>'                 : '\\U00002026',\n        '\\\\<cdots>'                : '\\U000022ef',\n        '\\\\<Sum>'                  : '\\U00002211',\n        '\\\\<Prod>'                 : '\\U0000220f',\n        '\\\\<Coprod>'               : '\\U00002210',\n        '\\\\<infinity>'             : '\\U0000221e',\n        '\\\\<integral>'             : '\\U0000222b',\n        '\\\\<ointegral>'            : '\\U0000222e',\n        '\\\\<clubsuit>'             : '\\U00002663',\n        '\\\\<diamondsuit>'          : '\\U00002662',\n        '\\\\<heartsuit>'            : '\\U00002661',\n        '\\\\<spadesuit>'            : '\\U00002660',\n        '\\\\<aleph>'                : '\\U00002135',\n        '\\\\<emptyset>'             : '\\U00002205',\n        '\\\\<nabla>'                : '\\U00002207',\n        '\\\\<partial>'              : '\\U00002202',\n        '\\\\<flat>'                 : '\\U0000266d',\n        '\\\\<natural>'              : '\\U0000266e',\n        '\\\\<sharp>'                : '\\U0000266f',\n        '\\\\<angle>'                : '\\U00002220',\n        '\\\\<copyright>'            : '\\U000000a9',\n        '\\\\<registered>'           : '\\U000000ae',\n        '\\\\<hyphen>'               : '\\U000000ad',\n        '\\\\<inverse>'              : '\\U000000af',\n        '\\\\<onequarter>'           : '\\U000000bc',\n        '\\\\<onehalf>'              : '\\U000000bd',\n        '\\\\<threequarters>'        : '\\U000000be',\n        '\\\\<ordfeminine>'          : '\\U000000aa',\n        '\\\\<ordmasculine>'         : '\\U000000ba',\n        '\\\\<section>'              : '\\U000000a7',\n        '\\\\<paragraph>'            : '\\U000000b6',\n        '\\\\<exclamdown>'           : '\\U000000a1',\n        '\\\\<questiondown>'         : '\\U000000bf',\n        '\\\\<euro>'                 : '\\U000020ac',\n        '\\\\<pounds>'               : '\\U000000a3',\n        '\\\\<yen>'                  : '\\U000000a5',\n        '\\\\<cent>'                 : '\\U000000a2',\n        '\\\\<currency>'             : '\\U000000a4',\n        '\\\\<degree>'               : '\\U000000b0',\n        '\\\\<amalg>'                : '\\U00002a3f',\n        '\\\\<mho>'                  : '\\U00002127',\n        '\\\\<lozenge>'              : '\\U000025ca',\n        '\\\\<wp>'                   : '\\U00002118',\n        '\\\\<wrong>'                : '\\U00002240',\n        '\\\\<struct>'               : '\\U000022c4',\n        '\\\\<acute>'                : '\\U000000b4',\n        '\\\\<index>'                : '\\U00000131',\n        '\\\\<dieresis>'             : '\\U000000a8',\n        '\\\\<cedilla>'              : '\\U000000b8',\n        '\\\\<hungarumlaut>'         : '\\U000002dd',\n        '\\\\<some>'                 : '\\U000003f5',\n        '\\\\<newline>'              : '\\U000023ce',\n        '\\\\<open>'                 : '\\U00002039',\n        '\\\\<close>'                : '\\U0000203a',\n        '\\\\<here>'                 : '\\U00002302',\n        '\\\\<^sub>'                 : '\\U000021e9',\n        '\\\\<^sup>'                 : '\\U000021e7',\n        '\\\\<^bold>'                : '\\U00002759',\n        '\\\\<^bsub>'                : '\\U000021d8',\n        '\\\\<^esub>'                : '\\U000021d9',\n        '\\\\<^bsup>'                : '\\U000021d7',\n        '\\\\<^esup>'                : '\\U000021d6',\n    }\n\n    lang_map = {'isabelle' : isabelle_symbols, 'latex' : latex_symbols}\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        lang = get_choice_opt(options, 'lang',\n                              ['isabelle', 'latex'], 'isabelle')\n        self.symbols = self.lang_map[lang]\n\n    def filter(self, lexer, stream):\n        for ttype, value in stream:\n            if value in self.symbols:\n                yield ttype, self.symbols[value]\n            else:\n                yield ttype, value\n\n\nclass KeywordCaseFilter(Filter):\n    \"\"\"Convert keywords to lowercase or uppercase or capitalize them, which\n    means first letter uppercase, rest lowercase.\n\n    This can be useful e.g. if you highlight Pascal code and want to adapt the\n    code to your styleguide.\n\n    Options accepted:\n\n    `case` : string\n       The casing to convert keywords to. Must be one of ``'lower'``,\n       ``'upper'`` or ``'capitalize'``.  The default is ``'lower'``.\n    \"\"\"\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        case = get_choice_opt(options, 'case',\n                              ['lower', 'upper', 'capitalize'], 'lower')\n        self.convert = getattr(str, case)\n\n    def filter(self, lexer, stream):\n        for ttype, value in stream:\n            if ttype in Keyword:\n                yield ttype, self.convert(value)\n            else:\n                yield ttype, value\n\n\nclass NameHighlightFilter(Filter):\n    \"\"\"Highlight a normal Name (and Name.*) token with a different token type.\n\n    Example::\n\n        filter = NameHighlightFilter(\n            names=['foo', 'bar', 'baz'],\n            tokentype=Name.Function,\n        )\n\n    This would highlight the names \"foo\", \"bar\" and \"baz\"\n    as functions. `Name.Function` is the default token type.\n\n    Options accepted:\n\n    `names` : list of strings\n      A list of names that should be given the different token type.\n      There is no default.\n    `tokentype` : TokenType or string\n      A token type or a string containing a token type name that is\n      used for highlighting the strings in `names`.  The default is\n      `Name.Function`.\n    \"\"\"\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        self.names = set(get_list_opt(options, 'names', []))\n        tokentype = options.get('tokentype')\n        if tokentype:\n            self.tokentype = string_to_tokentype(tokentype)\n        else:\n            self.tokentype = Name.Function\n\n    def filter(self, lexer, stream):\n        for ttype, value in stream:\n            if ttype in Name and value in self.names:\n                yield self.tokentype, value\n            else:\n                yield ttype, value\n\n\nclass ErrorToken(Exception):\n    pass\n\n\nclass RaiseOnErrorTokenFilter(Filter):\n    \"\"\"Raise an exception when the lexer generates an error token.\n\n    Options accepted:\n\n    `excclass` : Exception class\n      The exception class to raise.\n      The default is `pygments.filters.ErrorToken`.\n\n    .. versionadded:: 0.8\n    \"\"\"\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        self.exception = options.get('excclass', ErrorToken)\n        try:\n            # issubclass() will raise TypeError if first argument is not a class\n            if not issubclass(self.exception, Exception):\n                raise TypeError\n        except TypeError:\n            raise OptionError('excclass option is not an exception class')\n\n    def filter(self, lexer, stream):\n        for ttype, value in stream:\n            if ttype is Error:\n                raise self.exception(value)\n            yield ttype, value\n\n\nclass VisibleWhitespaceFilter(Filter):\n    \"\"\"Convert tabs, newlines and/or spaces to visible characters.\n\n    Options accepted:\n\n    `spaces` : string or bool\n      If this is a one-character string, spaces will be replaces by this string.\n      If it is another true value, spaces will be replaced by ``·`` (unicode\n      MIDDLE DOT).  If it is a false value, spaces will not be replaced.  The\n      default is ``False``.\n    `tabs` : string or bool\n      The same as for `spaces`, but the default replacement character is ``»``\n      (unicode RIGHT-POINTING DOUBLE ANGLE QUOTATION MARK).  The default value\n      is ``False``.  Note: this will not work if the `tabsize` option for the\n      lexer is nonzero, as tabs will already have been expanded then.\n    `tabsize` : int\n      If tabs are to be replaced by this filter (see the `tabs` option), this\n      is the total number of characters that a tab should be expanded to.\n      The default is ``8``.\n    `newlines` : string or bool\n      The same as for `spaces`, but the default replacement character is ``¶``\n      (unicode PILCROW SIGN).  The default value is ``False``.\n    `wstokentype` : bool\n      If true, give whitespace the special `Whitespace` token type.  This allows\n      styling the visible whitespace differently (e.g. greyed out), but it can\n      disrupt background colors.  The default is ``True``.\n\n    .. versionadded:: 0.8\n    \"\"\"\n\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        for name, default in [('spaces',   '·'),\n                              ('tabs',     '»'),\n                              ('newlines', '¶')]:\n            opt = options.get(name, False)\n            if isinstance(opt, str) and len(opt) == 1:\n                setattr(self, name, opt)\n            else:\n                setattr(self, name, (opt and default or ''))\n        tabsize = get_int_opt(options, 'tabsize', 8)\n        if self.tabs:\n            self.tabs += ' ' * (tabsize - 1)\n        if self.newlines:\n            self.newlines += '\\n'\n        self.wstt = get_bool_opt(options, 'wstokentype', True)\n\n    def filter(self, lexer, stream):\n        if self.wstt:\n            spaces = self.spaces or ' '\n            tabs = self.tabs or '\\t'\n            newlines = self.newlines or '\\n'\n            regex = re.compile(r'\\s')\n\n            def replacefunc(wschar):\n                if wschar == ' ':\n                    return spaces\n                elif wschar == '\\t':\n                    return tabs\n                elif wschar == '\\n':\n                    return newlines\n                return wschar\n\n            for ttype, value in stream:\n                yield from _replace_special(ttype, value, regex, Whitespace,\n                                            replacefunc)\n        else:\n            spaces, tabs, newlines = self.spaces, self.tabs, self.newlines\n            # simpler processing\n            for ttype, value in stream:\n                if spaces:\n                    value = value.replace(' ', spaces)\n                if tabs:\n                    value = value.replace('\\t', tabs)\n                if newlines:\n                    value = value.replace('\\n', newlines)\n                yield ttype, value\n\n\nclass GobbleFilter(Filter):\n    \"\"\"Gobbles source code lines (eats initial characters).\n\n    This filter drops the first ``n`` characters off every line of code.  This\n    may be useful when the source code fed to the lexer is indented by a fixed\n    amount of space that isn't desired in the output.\n\n    Options accepted:\n\n    `n` : int\n       The number of characters to gobble.\n\n    .. versionadded:: 1.2\n    \"\"\"\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n        self.n = get_int_opt(options, 'n', 0)\n\n    def gobble(self, value, left):\n        if left < len(value):\n            return value[left:], 0\n        else:\n            return '', left - len(value)\n\n    def filter(self, lexer, stream):\n        n = self.n\n        left = n  # How many characters left to gobble.\n        for ttype, value in stream:\n            # Remove ``left`` tokens from first line, ``n`` from all others.\n            parts = value.split('\\n')\n            (parts[0], left) = self.gobble(parts[0], left)\n            for i in range(1, len(parts)):\n                (parts[i], left) = self.gobble(parts[i], n)\n            value = '\\n'.join(parts)\n\n            if value != '':\n                yield ttype, value\n\n\nclass TokenMergeFilter(Filter):\n    \"\"\"Merges consecutive tokens with the same token type in the output\n    stream of a lexer.\n\n    .. versionadded:: 1.2\n    \"\"\"\n    def __init__(self, **options):\n        Filter.__init__(self, **options)\n\n    def filter(self, lexer, stream):\n        current_type = None\n        current_value = None\n        for ttype, value in stream:\n            if ttype is current_type:\n                current_value += value\n            else:\n                if current_type is not None:\n                    yield current_type, current_value\n                current_type = ttype\n                current_value = value\n        if current_type is not None:\n            yield current_type, current_value\n\n\nFILTERS = {\n    'codetagify':     CodeTagFilter,\n    'keywordcase':    KeywordCaseFilter,\n    'highlight':      NameHighlightFilter,\n    'raiseonerror':   RaiseOnErrorTokenFilter,\n    'whitespace':     VisibleWhitespaceFilter,\n    'gobble':         GobbleFilter,\n    'tokenmerge':     TokenMergeFilter,\n    'symbols':        SymbolFilter,\n}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/filters/__init__.py",
        "start": 19,
        "end": 940,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 79
        },
        "endLoc": {
          "line": 940,
          "column": 2,
          "position": 6748
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/filters/__init__.py",
        "start": 19,
        "end": 940,
        "startLoc": {
          "line": 19,
          "column": 2,
          "position": 95
        },
        "endLoc": {
          "line": 940,
          "column": 2,
          "position": 6764
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "*,\n        init: bool = True,\n        repr: bool = True,\n        eq: bool = True,\n        order: bool = False,\n        unsafe_hash: bool = False,\n        frozen: bool = False,\n        config: Union[ConfigDict, Type[object], None] = None,\n        validate_on_init: Optional[bool] = None,\n        use_proxy: Optional[bool] = None,\n        kw_only: bool = ...,\n    ) -> 'DataclassClassOrWrapper'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 125,
        "end": 136,
        "startLoc": {
          "line": 125,
          "column": 9,
          "position": 779
        },
        "endLoc": {
          "line": 136,
          "column": 26,
          "position": 918
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 107,
        "end": 118,
        "startLoc": {
          "line": 107,
          "column": 9,
          "position": 585
        },
        "endLoc": {
          "line": 118,
          "column": 9,
          "position": 724
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ":\n\n    @dataclass_transform(field_specifiers=(dataclasses.field, Field))\n    @overload\n    def dataclass(\n        *,\n        init: bool = True,\n        repr: bool = True,\n        eq: bool = True,\n        order: bool = False,\n        unsafe_hash: bool = False,\n        frozen: bool = False,\n        config: Union[ConfigDict, Type[object], None] = None,\n        validate_on_init: Optional[bool] = None,\n        use_proxy: Optional[bool] = None,\n    )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 139,
        "end": 154,
        "startLoc": {
          "line": 139,
          "column": 5,
          "position": 928
        },
        "endLoc": {
          "line": 154,
          "column": 2,
          "position": 1077
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 102,
        "end": 117,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 557
        },
        "endLoc": {
          "line": 117,
          "column": 8,
          "position": 706
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ",\n    ) -> Callable[[Type[_T]], 'DataclassClassOrWrapper']:\n        ...\n\n    @dataclass_transform(field_specifiers=(dataclasses.field, Field))\n    @overload\n    def dataclass(\n        _cls: Type[_T],\n        *,\n        init: bool = True,\n        repr: bool = True,\n        eq: bool = True,\n        order: bool = False,\n        unsafe_hash: bool = False,\n        frozen: bool = False,\n        config: Union[ConfigDict, Type[object], None] = None,\n        validate_on_init: Optional[bool] = None,\n        use_proxy: Optional[bool] = None,\n    ) -> 'DataclassClassOrWrapper'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 153,
        "end": 171,
        "startLoc": {
          "line": 153,
          "column": 5,
          "position": 1074
        },
        "endLoc": {
          "line": 171,
          "column": 26,
          "position": 1263
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 117,
        "end": 154,
        "startLoc": {
          "line": 117,
          "column": 2,
          "position": 716
        },
        "endLoc": {
          "line": 154,
          "column": 9,
          "position": 1082
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n    *,\n    init: bool = True,\n    repr: bool = True,\n    eq: bool = True,\n    order: bool = False,\n    unsafe_hash: bool = False,\n    frozen: bool = False,\n    config: Union[ConfigDict, Type[object], None] = None,\n    validate_on_init: Optional[bool] = None,\n    use_proxy: Optional[bool] = None,\n    kw_only: bool = False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 177,
        "end": 188,
        "startLoc": {
          "line": 177,
          "column": 5,
          "position": 1307
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1438
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/dataclasses.py",
        "start": 124,
        "end": 117,
        "startLoc": {
          "line": 124,
          "column": 2,
          "position": 776
        },
        "endLoc": {
          "line": 117,
          "column": 2,
          "position": 713
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "if proto is None and content_type:\n        if content_type.endswith(('json', 'javascript')):\n            pass\n        elif allow_pickle and content_type.endswith('pickle'):\n            proto = Protocol.pickle\n        else:\n            raise TypeError(f'Unknown content-type: {content_type}')\n\n    proto = proto or Protocol.json\n\n    if proto == Protocol.json:\n        if isinstance(b, bytes):\n            b = b.decode(encoding)\n        return json_loads(b)  # type: ignore",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/parse.py",
        "start": 36,
        "end": 49,
        "startLoc": {
          "line": 36,
          "column": 5,
          "position": 251
        },
        "endLoc": {
          "line": 49,
          "column": 15,
          "position": 379
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/parse.py",
        "start": 24,
        "end": 38,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 170
        },
        "endLoc": {
          "line": 38,
          "column": 5,
          "position": 299
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "path = Path(path)\n    b = path.read_bytes()\n    if content_type is None:\n        if path.suffix in ('.js', '.json'):\n            proto = Protocol.json\n        elif path.suffix == '.pkl':\n            proto = Protocol.pickle\n\n    return load_str_bytes(\n        b, proto=proto, content_type=content_type, encoding=encoding, allow_pickle=allow_pickle, json_loads=json_loads\n    )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/parse.py",
        "start": 70,
        "end": 80,
        "startLoc": {
          "line": 70,
          "column": 5,
          "position": 591
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 704
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/parse.py",
        "start": 56,
        "end": 66,
        "startLoc": {
          "line": 56,
          "column": 5,
          "position": 472
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 585
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "[Any], Callable[[Any], Any]] = {\n    bytes: lambda o: o.decode(),\n    Color: str,\n    datetime.date: isoformat,\n    datetime.datetime: isoformat,\n    datetime.time: isoformat,\n    datetime.timedelta: lambda td: td.total_seconds(),\n    Decimal: decimal_encoder,\n    Enum: lambda o: o.value,\n    frozenset: list,\n    deque: list,\n    GeneratorType: list,\n    IPv4Address: str,\n    IPv4Interface: str,\n    IPv4Network: str,\n    IPv6Address: str,\n    IPv6Interface: str,\n    IPv6Network: str,\n    NameEmail: str,\n    Path: str,\n    Pattern: lambda o: o.pattern,\n    SecretBytes: str,\n    SecretStr: str,\n    set: list,\n    UUID: str,\n}\n\n\n@deprecated",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/json.py",
        "start": 54,
        "end": 82,
        "startLoc": {
          "line": 54,
          "column": 5,
          "position": 328
        },
        "endLoc": {
          "line": 82,
          "column": 12,
          "position": 560
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/json.py",
        "start": 44,
        "end": 72,
        "startLoc": {
          "line": 44,
          "column": 5,
          "position": 264
        },
        "endLoc": {
          "line": 72,
          "column": 4,
          "position": 496
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def validate(_func: 'AnyCallable') -> 'AnyCallable':\n        vd = ValidatedFunction(_func, config)\n\n        @wraps(_func)\n        def wrapper_function(*args: Any, **kwargs: Any) -> Any:\n            return vd.call(*args, **kwargs)\n\n        wrapper_function.vd = vd  # type: ignore\n        wrapper_function.validate = vd.init_model_instance  # type: ignore\n        wrapper_function.raw_function = vd.raw_function  # type: ignore\n        wrapper_function.model = vd.model  # type: ignore\n        return wrapper_function\n\n    if func:\n        return validate(func)\n    else:\n        return validate\n\n\nALT_V_ARGS = 'v__args'\nALT_V_KWARGS = 'v__kwargs'\nV_POSITIONAL_ONLY_NAME = 'v__positional_only'\nV_DUPLICATE_KWARGS = 'v__duplicate_kwargs'\n\n\nclass ValidatedFunction:\n    def __init__(self, function: 'AnyCallable'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 51,
        "end": 77,
        "startLoc": {
          "line": 51,
          "column": 5,
          "position": 374
        },
        "endLoc": {
          "line": 77,
          "column": 14,
          "position": 574
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 35,
        "end": 61,
        "startLoc": {
          "line": 35,
          "column": 5,
          "position": 311
        },
        "endLoc": {
          "line": 61,
          "column": 15,
          "position": 511
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "[Any, Any]] = {}\n        for i, (name, p) in enumerate(parameters.items()):\n            if p.annotation is p.empty:\n                annotation = Any\n            else:\n                annotation = type_hints[name]\n\n            default = ... if p.default is p.empty else p.default\n            if p.kind == Parameter.POSITIONAL_ONLY:\n                self.arg_mapping[i] = name\n                fields[name] = annotation, default\n                fields[V_POSITIONAL_ONLY_NAME] = list",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 98,
        "end": 109,
        "startLoc": {
          "line": 98,
          "column": 6,
          "position": 774
        },
        "endLoc": {
          "line": 109,
          "column": 5,
          "position": 922
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 81,
        "end": 92,
        "startLoc": {
          "line": 81,
          "column": 6,
          "position": 693
        },
        "endLoc": {
          "line": 92,
          "column": 5,
          "position": 841
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "[Any, Any], None\n\n        self.create_model(fields, takes_args, takes_kwargs, config)\n\n    def init_model_instance(self, *args: Any, **kwargs: Any) -> BaseModel:\n        values = self.build_values(args, kwargs)\n        return self.model(**values)\n\n    def call(self, *args: Any, **kwargs: Any) -> Any:\n        m = self.init_model_instance(*args, **kwargs)\n        return self.execute(m)\n\n    def build_values(self, args: tuple",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 141,
        "end": 153,
        "startLoc": {
          "line": 141,
          "column": 5,
          "position": 1245
        },
        "endLoc": {
          "line": 153,
          "column": 6,
          "position": 1396
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 124,
        "end": 136,
        "startLoc": {
          "line": 124,
          "column": 5,
          "position": 1166
        },
        "endLoc": {
          "line": 136,
          "column": 6,
          "position": 1317
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "[str, Any] = {}\n        if args:\n            arg_iter = enumerate(args)\n            while True:\n                try:\n                    i, a = next(arg_iter)\n                except StopIteration:\n                    break\n                arg_name = self.arg_mapping.get(i)\n                if arg_name is not None:\n                    values[arg_name] = a\n                else:\n                    values[self.v_args_name] = [a] + [a for _, a in arg_iter]\n                    break\n\n        var_kwargs: dict",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 154,
        "end": 169,
        "startLoc": {
          "line": 154,
          "column": 5,
          "position": 1436
        },
        "endLoc": {
          "line": 169,
          "column": 5,
          "position": 1575
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 137,
        "end": 152,
        "startLoc": {
          "line": 137,
          "column": 5,
          "position": 1357
        },
        "endLoc": {
          "line": 152,
          "column": 5,
          "position": 1496
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ") - {self.v_args_name, self.v_kwargs_name}\n        for k, v in kwargs.items():\n            if k in non_var_fields or k in fields_alias:\n                if k in self.positional_only_args:\n                    wrong_positional_args.append(k)\n                if k in values:\n                    duplicate_kwargs.append(k)\n                values[k] = v\n            else:\n                var_kwargs[k] = v\n\n        if var_kwargs:\n            values[self.v_kwargs_name] = var_kwargs\n        if wrong_positional_args:\n            values[V_POSITIONAL_ONLY_NAME] = wrong_positional_args\n        if duplicate_kwargs:\n            values[V_DUPLICATE_KWARGS] = duplicate_kwargs\n        return values\n\n    def execute(self, m: BaseModel) -> Any:\n        d = {\n            k: v\n            for k, v in m.__dict__",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 177,
        "end": 199,
        "startLoc": {
          "line": 177,
          "column": 20,
          "position": 1671
        },
        "endLoc": {
          "line": 199,
          "column": 9,
          "position": 1885
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 160,
        "end": 180,
        "startLoc": {
          "line": 160,
          "column": 11,
          "position": 1592
        },
        "endLoc": {
          "line": 180,
          "column": 6,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "[Any] = []\n            in_kwargs = False\n            kwargs = {}\n            for name, value in d.items():\n                if in_kwargs:\n                    kwargs[name] = value\n                elif name == self.v_args_name:\n                    args_ += value\n                    in_kwargs = True\n                else:\n                    args_.append(value)\n            return self.raw_function(*args_, **kwargs, **var_kwargs)\n        elif self.positional_only_args:\n            args_ = []\n            kwargs = {}\n            for name, value in d.items():\n                if name in self.positional_only_args:\n                    args_.append(value)\n                else:\n                    kwargs[name] = value\n            return self.raw_function(*args_, **kwargs, **var_kwargs)\n        else:\n            return self.raw_function(**d, **var_kwargs)\n\n    def create_model(self, fields: dict",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/deprecated/decorator.py",
        "start": 205,
        "end": 229,
        "startLoc": {
          "line": 205,
          "column": 5,
          "position": 1952
        },
        "endLoc": {
          "line": 229,
          "column": 5,
          "position": 2191
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/decorator.py",
        "start": 184,
        "end": 208,
        "startLoc": {
          "line": 184,
          "column": 5,
          "position": 1865
        },
        "endLoc": {
          "line": 208,
          "column": 5,
          "position": 2104
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": "= {}\n        all_items = None\n        for i, v in items.items():\n            if not (isinstance(v, Mapping) or isinstance(v, AbstractSet) or self.is_true(v)):\n                raise TypeError(f'Unexpected type of exclude value for index \"{i}\" {v.__class__}')\n            if i == '__all__':\n                all_items = self._coerce_value(v)\n                continue\n            if not isinstance(i, int):\n                raise TypeError(\n                    'Excluding fields from a sequence of sub-models or dicts must be performed index-wise: '\n                    'expected integer keys or keyword \"__all__\"'\n                )\n            normalized_i = v_length + i if i < 0 else i\n            normalized_items[normalized_i] = self.merge(v, normalized_items.get(normalized_i))\n\n        if not all_items:\n            return normalized_items\n        if self.is_true(all_items):\n            for i in range(v_length):\n                normalized_items.setdefault(i, ...)\n            return normalized_items\n        for i in range(v_length):\n            normalized_item = normalized_items.setdefault(i, {})\n            if not self.is_true(normalized_item):\n                normalized_items[i] = self.merge(all_items, normalized_item)\n        return normalized_items\n\n    @classmethod\n    def merge(cls, base: Any, override: Any, intersect: bool = False) -> Any:\n        \"\"\"Merge a `base` item with an `override` item.\n\n        Both `base` and `override` are converted to dictionaries if possible.\n        Sets are converted to dictionaries with the sets entries as keys and\n        Ellipsis as values.\n\n        Each key-value pair existing in `base` is merged with `override`,\n        while the rest of the key-value pairs are updated recursively with this function.\n\n        Merging takes place based on the \"union\" of keys if `intersect` is\n        set to `False` (default) and on the intersection of keys if\n        `intersect` is set to `True`.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_utils.py",
        "start": 215,
        "end": 257,
        "startLoc": {
          "line": 215,
          "column": 2,
          "position": 1108
        },
        "endLoc": {
          "line": 257,
          "column": 12,
          "position": 1444
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/utils.py",
        "start": 534,
        "end": 577,
        "startLoc": {
          "line": 534,
          "column": 2,
          "position": 3862
        },
        "endLoc": {
          "line": 577,
          "column": 12,
          "position": 4198
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "override = cls._coerce_value(override)\n        base = cls._coerce_value(base)\n        if override is None:\n            return base\n        if cls.is_true(base) or base is None:\n            return override\n        if cls.is_true(override):\n            return base if intersect else override\n\n        # intersection or union of keys while preserving ordering:\n        if intersect:\n            merge_keys = [k for k in base if k in override] + [k for k in override if k in base]\n        else:\n            merge_keys = list(base) + [k for k in override if k not in base]\n\n        merged: dict",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_utils.py",
        "start": 258,
        "end": 273,
        "startLoc": {
          "line": 258,
          "column": 9,
          "position": 1447
        },
        "endLoc": {
          "line": 273,
          "column": 5,
          "position": 1633
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/utils.py",
        "start": 578,
        "end": 593,
        "startLoc": {
          "line": 578,
          "column": 9,
          "position": 4201
        },
        "endLoc": {
          "line": 593,
          "column": 16,
          "position": 4387
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "@classmethod\n    def _coerce_value(cls, value: Any) -> Any:\n        if value is None or cls.is_true(value):\n            return value\n        return cls._coerce_items(value)\n\n    @staticmethod\n    def is_true(v: Any) -> bool:\n        return v is True or v is ...\n\n    def __repr_args__(self) -> _repr",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_utils.py",
        "start": 292,
        "end": 302,
        "startLoc": {
          "line": 292,
          "column": 5,
          "position": 1828
        },
        "endLoc": {
          "line": 302,
          "column": 6,
          "position": 1938
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/utils.py",
        "start": 615,
        "end": 625,
        "startLoc": {
          "line": 615,
          "column": 5,
          "position": 4577
        },
        "endLoc": {
          "line": 625,
          "column": 11,
          "position": 4687
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "] = {}\n    ns_resolver = ns_resolver or NsResolver()\n\n    for base in reversed(obj.__mro__):\n        # For Python 3.14, we could also use `Format.VALUE` and pass the globals/locals\n        # from the ns_resolver, but we want to be able to know which specific field failed\n        # to evaluate:\n        ann = safe_get_annotations(base)\n\n        if not ann:\n            continue\n\n        with ns_resolver.push(base):\n            globalns, localns = ns_resolver.types_namespace\n            for name, value in ann.items():\n                hints",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_typing_extra.py",
        "start": 365,
        "end": 380,
        "startLoc": {
          "line": 365,
          "column": 4,
          "position": 2570
        },
        "endLoc": {
          "line": 380,
          "column": 6,
          "position": 2679
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_typing_extra.py",
        "start": 324,
        "end": 339,
        "startLoc": {
          "line": 324,
          "column": 2,
          "position": 2301
        },
        "endLoc": {
          "line": 339,
          "column": 3,
          "position": 2410
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "),\n            ('data', Parameter.VAR_KEYWORD),\n        ]\n        if [(p.name, p.kind) for p in present_params] == default_model_signature:\n            # if this is the standard model signature, use extra_data as the extra args name\n            var_kw_name = 'extra_data'\n        else:\n            # else start from var_kw\n            var_kw_name = var_kw.name\n\n        # generate a name that's definitely unique\n        while var_kw_name in fields:\n            var_kw_name += '_'\n        merged_params[var_kw_name] = var_kw.replace(name=var_kw_name)\n\n    return merged_params",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_signature.py",
        "start": 146,
        "end": 161,
        "startLoc": {
          "line": 146,
          "column": 16,
          "position": 950
        },
        "endLoc": {
          "line": 161,
          "column": 14,
          "position": 1064
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/utils.py",
        "start": 283,
        "end": 298,
        "startLoc": {
          "line": 283,
          "column": 22,
          "position": 2050
        },
        "endLoc": {
          "line": 298,
          "column": 10,
          "position": 2164
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "raise_errors=False, _parent_namespace_depth=5) is not False:\n                return attr_fn(cls)\n            return None\n\n        return handler\n\n    cls.__pydantic_core_schema__ = MockCoreSchema(  # pyright: ignore[reportAttributeAccessIssue]\n        undefined_type_error_message,\n        code='class-not-fully-defined',\n        attempt_rebuild=attempt_rebuild_fn(lambda c: c.__pydantic_core_schema__),\n    )\n    cls.__pydantic_validator__ = MockValSer(  # pyright: ignore[reportAttributeAccessIssue]\n        undefined_type_error_message,\n        code='class-not-fully-defined',\n        val_or_ser='validator',\n        attempt_rebuild=attempt_rebuild_fn(lambda c: c.__pydantic_validator__),\n    )\n    cls.__pydantic_serializer__ = MockValSer(  # pyright: ignore[reportAttributeAccessIssue]\n        undefined_type_error_message,\n        code='class-not-fully-defined',\n        val_or_ser='serializer',\n        attempt_rebuild=attempt_rebuild_fn(lambda c: c.__pydantic_serializer__),\n    )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_mock_val_ser.py",
        "start": 206,
        "end": 228,
        "startLoc": {
          "line": 206,
          "column": 2,
          "position": 1636
        },
        "endLoc": {
          "line": 228,
          "column": 2,
          "position": 1806
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_mock_val_ser.py",
        "start": 165,
        "end": 187,
        "startLoc": {
          "line": 165,
          "column": 2,
          "position": 1335
        },
        "endLoc": {
          "line": 187,
          "column": 2,
          "position": 1505
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "FieldInfo_ = import_cached_field_info()\n\n    rebuilt_fields: dict[str, FieldInfo] = {}\n    with ns_resolver.push(cls):\n        for f_name, field_info in cls.__pydantic_fields__.items():\n            if field_info._complete:\n                rebuilt_fields[f_name] = field_info\n            else:\n                existing_desc = field_info.description\n                ann = _typing_extra.eval_type(\n                    field_info._original_annotation,\n                    *ns_resolver.types_namespace,\n                )\n                ann = _generics.replace_types(ann, typevars_map)\n                new_field",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_fields.py",
        "start": 586,
        "end": 600,
        "startLoc": {
          "line": 586,
          "column": 5,
          "position": 3816
        },
        "endLoc": {
          "line": 600,
          "column": 10,
          "position": 3945
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/_internal/_fields.py",
        "start": 433,
        "end": 448,
        "startLoc": {
          "line": 433,
          "column": 5,
          "position": 2825
        },
        "endLoc": {
          "line": 448,
          "column": 3,
          "position": 2955
        }
      }
    },
    {
      "format": "python",
      "lines": 758,
      "fragment": "from __future__ import annotations\n\nfrom typing import TypedDict\n\nclass SPDXLicense(TypedDict):\n    id: str\n    deprecated: bool\n\nclass SPDXException(TypedDict):\n    id: str\n    deprecated: bool\n\n\nVERSION = '3.25.0'\n\nLICENSES: dict[str, SPDXLicense] = {\n    '0bsd': {'id': '0BSD', 'deprecated': False},\n    '3d-slicer-1.0': {'id': '3D-Slicer-1.0', 'deprecated': False},\n    'aal': {'id': 'AAL', 'deprecated': False},\n    'abstyles': {'id': 'Abstyles', 'deprecated': False},\n    'adacore-doc': {'id': 'AdaCore-doc', 'deprecated': False},\n    'adobe-2006': {'id': 'Adobe-2006', 'deprecated': False},\n    'adobe-display-postscript': {'id': 'Adobe-Display-PostScript', 'deprecated': False},\n    'adobe-glyph': {'id': 'Adobe-Glyph', 'deprecated': False},\n    'adobe-utopia': {'id': 'Adobe-Utopia', 'deprecated': False},\n    'adsl': {'id': 'ADSL', 'deprecated': False},\n    'afl-1.1': {'id': 'AFL-1.1', 'deprecated': False},\n    'afl-1.2': {'id': 'AFL-1.2', 'deprecated': False},\n    'afl-2.0': {'id': 'AFL-2.0', 'deprecated': False},\n    'afl-2.1': {'id': 'AFL-2.1', 'deprecated': False},\n    'afl-3.0': {'id': 'AFL-3.0', 'deprecated': False},\n    'afmparse': {'id': 'Afmparse', 'deprecated': False},\n    'agpl-1.0': {'id': 'AGPL-1.0', 'deprecated': True},\n    'agpl-1.0-only': {'id': 'AGPL-1.0-only', 'deprecated': False},\n    'agpl-1.0-or-later': {'id': 'AGPL-1.0-or-later', 'deprecated': False},\n    'agpl-3.0': {'id': 'AGPL-3.0', 'deprecated': True},\n    'agpl-3.0-only': {'id': 'AGPL-3.0-only', 'deprecated': False},\n    'agpl-3.0-or-later': {'id': 'AGPL-3.0-or-later', 'deprecated': False},\n    'aladdin': {'id': 'Aladdin', 'deprecated': False},\n    'amd-newlib': {'id': 'AMD-newlib', 'deprecated': False},\n    'amdplpa': {'id': 'AMDPLPA', 'deprecated': False},\n    'aml': {'id': 'AML', 'deprecated': False},\n    'aml-glslang': {'id': 'AML-glslang', 'deprecated': False},\n    'ampas': {'id': 'AMPAS', 'deprecated': False},\n    'antlr-pd': {'id': 'ANTLR-PD', 'deprecated': False},\n    'antlr-pd-fallback': {'id': 'ANTLR-PD-fallback', 'deprecated': False},\n    'any-osi': {'id': 'any-OSI', 'deprecated': False},\n    'apache-1.0': {'id': 'Apache-1.0', 'deprecated': False},\n    'apache-1.1': {'id': 'Apache-1.1', 'deprecated': False},\n    'apache-2.0': {'id': 'Apache-2.0', 'deprecated': False},\n    'apafml': {'id': 'APAFML', 'deprecated': False},\n    'apl-1.0': {'id': 'APL-1.0', 'deprecated': False},\n    'app-s2p': {'id': 'App-s2p', 'deprecated': False},\n    'apsl-1.0': {'id': 'APSL-1.0', 'deprecated': False},\n    'apsl-1.1': {'id': 'APSL-1.1', 'deprecated': False},\n    'apsl-1.2': {'id': 'APSL-1.2', 'deprecated': False},\n    'apsl-2.0': {'id': 'APSL-2.0', 'deprecated': False},\n    'arphic-1999': {'id': 'Arphic-1999', 'deprecated': False},\n    'artistic-1.0': {'id': 'Artistic-1.0', 'deprecated': False},\n    'artistic-1.0-cl8': {'id': 'Artistic-1.0-cl8', 'deprecated': False},\n    'artistic-1.0-perl': {'id': 'Artistic-1.0-Perl', 'deprecated': False},\n    'artistic-2.0': {'id': 'Artistic-2.0', 'deprecated': False},\n    'aswf-digital-assets-1.0': {'id': 'ASWF-Digital-Assets-1.0', 'deprecated': False},\n    'aswf-digital-assets-1.1': {'id': 'ASWF-Digital-Assets-1.1', 'deprecated': False},\n    'baekmuk': {'id': 'Baekmuk', 'deprecated': False},\n    'bahyph': {'id': 'Bahyph', 'deprecated': False},\n    'barr': {'id': 'Barr', 'deprecated': False},\n    'bcrypt-solar-designer': {'id': 'bcrypt-Solar-Designer', 'deprecated': False},\n    'beerware': {'id': 'Beerware', 'deprecated': False},\n    'bitstream-charter': {'id': 'Bitstream-Charter', 'deprecated': False},\n    'bitstream-vera': {'id': 'Bitstream-Vera', 'deprecated': False},\n    'bittorrent-1.0': {'id': 'BitTorrent-1.0', 'deprecated': False},\n    'bittorrent-1.1': {'id': 'BitTorrent-1.1', 'deprecated': False},\n    'blessing': {'id': 'blessing', 'deprecated': False},\n    'blueoak-1.0.0': {'id': 'BlueOak-1.0.0', 'deprecated': False},\n    'boehm-gc': {'id': 'Boehm-GC', 'deprecated': False},\n    'borceux': {'id': 'Borceux', 'deprecated': False},\n    'brian-gladman-2-clause': {'id': 'Brian-Gladman-2-Clause', 'deprecated': False},\n    'brian-gladman-3-clause': {'id': 'Brian-Gladman-3-Clause', 'deprecated': False},\n    'bsd-1-clause': {'id': 'BSD-1-Clause', 'deprecated': False},\n    'bsd-2-clause': {'id': 'BSD-2-Clause', 'deprecated': False},\n    'bsd-2-clause-darwin': {'id': 'BSD-2-Clause-Darwin', 'deprecated': False},\n    'bsd-2-clause-first-lines': {'id': 'BSD-2-Clause-first-lines', 'deprecated': False},\n    'bsd-2-clause-freebsd': {'id': 'BSD-2-Clause-FreeBSD', 'deprecated': True},\n    'bsd-2-clause-netbsd': {'id': 'BSD-2-Clause-NetBSD', 'deprecated': True},\n    'bsd-2-clause-patent': {'id': 'BSD-2-Clause-Patent', 'deprecated': False},\n    'bsd-2-clause-views': {'id': 'BSD-2-Clause-Views', 'deprecated': False},\n    'bsd-3-clause': {'id': 'BSD-3-Clause', 'deprecated': False},\n    'bsd-3-clause-acpica': {'id': 'BSD-3-Clause-acpica', 'deprecated': False},\n    'bsd-3-clause-attribution': {'id': 'BSD-3-Clause-Attribution', 'deprecated': False},\n    'bsd-3-clause-clear': {'id': 'BSD-3-Clause-Clear', 'deprecated': False},\n    'bsd-3-clause-flex': {'id': 'BSD-3-Clause-flex', 'deprecated': False},\n    'bsd-3-clause-hp': {'id': 'BSD-3-Clause-HP', 'deprecated': False},\n    'bsd-3-clause-lbnl': {'id': 'BSD-3-Clause-LBNL', 'deprecated': False},\n    'bsd-3-clause-modification': {'id': 'BSD-3-Clause-Modification', 'deprecated': False},\n    'bsd-3-clause-no-military-license': {'id': 'BSD-3-Clause-No-Military-License', 'deprecated': False},\n    'bsd-3-clause-no-nuclear-license': {'id': 'BSD-3-Clause-No-Nuclear-License', 'deprecated': False},\n    'bsd-3-clause-no-nuclear-license-2014': {'id': 'BSD-3-Clause-No-Nuclear-License-2014', 'deprecated': False},\n    'bsd-3-clause-no-nuclear-warranty': {'id': 'BSD-3-Clause-No-Nuclear-Warranty', 'deprecated': False},\n    'bsd-3-clause-open-mpi': {'id': 'BSD-3-Clause-Open-MPI', 'deprecated': False},\n    'bsd-3-clause-sun': {'id': 'BSD-3-Clause-Sun', 'deprecated': False},\n    'bsd-4-clause': {'id': 'BSD-4-Clause', 'deprecated': False},\n    'bsd-4-clause-shortened': {'id': 'BSD-4-Clause-Shortened', 'deprecated': False},\n    'bsd-4-clause-uc': {'id': 'BSD-4-Clause-UC', 'deprecated': False},\n    'bsd-4.3reno': {'id': 'BSD-4.3RENO', 'deprecated': False},\n    'bsd-4.3tahoe': {'id': 'BSD-4.3TAHOE', 'deprecated': False},\n    'bsd-advertising-acknowledgement': {'id': 'BSD-Advertising-Acknowledgement', 'deprecated': False},\n    'bsd-attribution-hpnd-disclaimer': {'id': 'BSD-Attribution-HPND-disclaimer', 'deprecated': False},\n    'bsd-inferno-nettverk': {'id': 'BSD-Inferno-Nettverk', 'deprecated': False},\n    'bsd-protection': {'id': 'BSD-Protection', 'deprecated': False},\n    'bsd-source-beginning-file': {'id': 'BSD-Source-beginning-file', 'deprecated': False},\n    'bsd-source-code': {'id': 'BSD-Source-Code', 'deprecated': False},\n    'bsd-systemics': {'id': 'BSD-Systemics', 'deprecated': False},\n    'bsd-systemics-w3works': {'id': 'BSD-Systemics-W3Works', 'deprecated': False},\n    'bsl-1.0': {'id': 'BSL-1.0', 'deprecated': False},\n    'busl-1.1': {'id': 'BUSL-1.1', 'deprecated': False},\n    'bzip2-1.0.5': {'id': 'bzip2-1.0.5', 'deprecated': True},\n    'bzip2-1.0.6': {'id': 'bzip2-1.0.6', 'deprecated': False},\n    'c-uda-1.0': {'id': 'C-UDA-1.0', 'deprecated': False},\n    'cal-1.0': {'id': 'CAL-1.0', 'deprecated': False},\n    'cal-1.0-combined-work-exception': {'id': 'CAL-1.0-Combined-Work-Exception', 'deprecated': False},\n    'caldera': {'id': 'Caldera', 'deprecated': False},\n    'caldera-no-preamble': {'id': 'Caldera-no-preamble', 'deprecated': False},\n    'catharon': {'id': 'Catharon', 'deprecated': False},\n    'catosl-1.1': {'id': 'CATOSL-1.1', 'deprecated': False},\n    'cc-by-1.0': {'id': 'CC-BY-1.0', 'deprecated': False},\n    'cc-by-2.0': {'id': 'CC-BY-2.0', 'deprecated': False},\n    'cc-by-2.5': {'id': 'CC-BY-2.5', 'deprecated': False},\n    'cc-by-2.5-au': {'id': 'CC-BY-2.5-AU', 'deprecated': False},\n    'cc-by-3.0': {'id': 'CC-BY-3.0', 'deprecated': False},\n    'cc-by-3.0-at': {'id': 'CC-BY-3.0-AT', 'deprecated': False},\n    'cc-by-3.0-au': {'id': 'CC-BY-3.0-AU', 'deprecated': False},\n    'cc-by-3.0-de': {'id': 'CC-BY-3.0-DE', 'deprecated': False},\n    'cc-by-3.0-igo': {'id': 'CC-BY-3.0-IGO', 'deprecated': False},\n    'cc-by-3.0-nl': {'id': 'CC-BY-3.0-NL', 'deprecated': False},\n    'cc-by-3.0-us': {'id': 'CC-BY-3.0-US', 'deprecated': False},\n    'cc-by-4.0': {'id': 'CC-BY-4.0', 'deprecated': False},\n    'cc-by-nc-1.0': {'id': 'CC-BY-NC-1.0', 'deprecated': False},\n    'cc-by-nc-2.0': {'id': 'CC-BY-NC-2.0', 'deprecated': False},\n    'cc-by-nc-2.5': {'id': 'CC-BY-NC-2.5', 'deprecated': False},\n    'cc-by-nc-3.0': {'id': 'CC-BY-NC-3.0', 'deprecated': False},\n    'cc-by-nc-3.0-de': {'id': 'CC-BY-NC-3.0-DE', 'deprecated': False},\n    'cc-by-nc-4.0': {'id': 'CC-BY-NC-4.0', 'deprecated': False},\n    'cc-by-nc-nd-1.0': {'id': 'CC-BY-NC-ND-1.0', 'deprecated': False},\n    'cc-by-nc-nd-2.0': {'id': 'CC-BY-NC-ND-2.0', 'deprecated': False},\n    'cc-by-nc-nd-2.5': {'id': 'CC-BY-NC-ND-2.5', 'deprecated': False},\n    'cc-by-nc-nd-3.0': {'id': 'CC-BY-NC-ND-3.0', 'deprecated': False},\n    'cc-by-nc-nd-3.0-de': {'id': 'CC-BY-NC-ND-3.0-DE', 'deprecated': False},\n    'cc-by-nc-nd-3.0-igo': {'id': 'CC-BY-NC-ND-3.0-IGO', 'deprecated': False},\n    'cc-by-nc-nd-4.0': {'id': 'CC-BY-NC-ND-4.0', 'deprecated': False},\n    'cc-by-nc-sa-1.0': {'id': 'CC-BY-NC-SA-1.0', 'deprecated': False},\n    'cc-by-nc-sa-2.0': {'id': 'CC-BY-NC-SA-2.0', 'deprecated': False},\n    'cc-by-nc-sa-2.0-de': {'id': 'CC-BY-NC-SA-2.0-DE', 'deprecated': False},\n    'cc-by-nc-sa-2.0-fr': {'id': 'CC-BY-NC-SA-2.0-FR', 'deprecated': False},\n    'cc-by-nc-sa-2.0-uk': {'id': 'CC-BY-NC-SA-2.0-UK', 'deprecated': False},\n    'cc-by-nc-sa-2.5': {'id': 'CC-BY-NC-SA-2.5', 'deprecated': False},\n    'cc-by-nc-sa-3.0': {'id': 'CC-BY-NC-SA-3.0', 'deprecated': False},\n    'cc-by-nc-sa-3.0-de': {'id': 'CC-BY-NC-SA-3.0-DE', 'deprecated': False},\n    'cc-by-nc-sa-3.0-igo': {'id': 'CC-BY-NC-SA-3.0-IGO', 'deprecated': False},\n    'cc-by-nc-sa-4.0': {'id': 'CC-BY-NC-SA-4.0', 'deprecated': False},\n    'cc-by-nd-1.0': {'id': 'CC-BY-ND-1.0', 'deprecated': False},\n    'cc-by-nd-2.0': {'id': 'CC-BY-ND-2.0', 'deprecated': False},\n    'cc-by-nd-2.5': {'id': 'CC-BY-ND-2.5', 'deprecated': False},\n    'cc-by-nd-3.0': {'id': 'CC-BY-ND-3.0', 'deprecated': False},\n    'cc-by-nd-3.0-de': {'id': 'CC-BY-ND-3.0-DE', 'deprecated': False},\n    'cc-by-nd-4.0': {'id': 'CC-BY-ND-4.0', 'deprecated': False},\n    'cc-by-sa-1.0': {'id': 'CC-BY-SA-1.0', 'deprecated': False},\n    'cc-by-sa-2.0': {'id': 'CC-BY-SA-2.0', 'deprecated': False},\n    'cc-by-sa-2.0-uk': {'id': 'CC-BY-SA-2.0-UK', 'deprecated': False},\n    'cc-by-sa-2.1-jp': {'id': 'CC-BY-SA-2.1-JP', 'deprecated': False},\n    'cc-by-sa-2.5': {'id': 'CC-BY-SA-2.5', 'deprecated': False},\n    'cc-by-sa-3.0': {'id': 'CC-BY-SA-3.0', 'deprecated': False},\n    'cc-by-sa-3.0-at': {'id': 'CC-BY-SA-3.0-AT', 'deprecated': False},\n    'cc-by-sa-3.0-de': {'id': 'CC-BY-SA-3.0-DE', 'deprecated': False},\n    'cc-by-sa-3.0-igo': {'id': 'CC-BY-SA-3.0-IGO', 'deprecated': False},\n    'cc-by-sa-4.0': {'id': 'CC-BY-SA-4.0', 'deprecated': False},\n    'cc-pddc': {'id': 'CC-PDDC', 'deprecated': False},\n    'cc0-1.0': {'id': 'CC0-1.0', 'deprecated': False},\n    'cddl-1.0': {'id': 'CDDL-1.0', 'deprecated': False},\n    'cddl-1.1': {'id': 'CDDL-1.1', 'deprecated': False},\n    'cdl-1.0': {'id': 'CDL-1.0', 'deprecated': False},\n    'cdla-permissive-1.0': {'id': 'CDLA-Permissive-1.0', 'deprecated': False},\n    'cdla-permissive-2.0': {'id': 'CDLA-Permissive-2.0', 'deprecated': False},\n    'cdla-sharing-1.0': {'id': 'CDLA-Sharing-1.0', 'deprecated': False},\n    'cecill-1.0': {'id': 'CECILL-1.0', 'deprecated': False},\n    'cecill-1.1': {'id': 'CECILL-1.1', 'deprecated': False},\n    'cecill-2.0': {'id': 'CECILL-2.0', 'deprecated': False},\n    'cecill-2.1': {'id': 'CECILL-2.1', 'deprecated': False},\n    'cecill-b': {'id': 'CECILL-B', 'deprecated': False},\n    'cecill-c': {'id': 'CECILL-C', 'deprecated': False},\n    'cern-ohl-1.1': {'id': 'CERN-OHL-1.1', 'deprecated': False},\n    'cern-ohl-1.2': {'id': 'CERN-OHL-1.2', 'deprecated': False},\n    'cern-ohl-p-2.0': {'id': 'CERN-OHL-P-2.0', 'deprecated': False},\n    'cern-ohl-s-2.0': {'id': 'CERN-OHL-S-2.0', 'deprecated': False},\n    'cern-ohl-w-2.0': {'id': 'CERN-OHL-W-2.0', 'deprecated': False},\n    'cfitsio': {'id': 'CFITSIO', 'deprecated': False},\n    'check-cvs': {'id': 'check-cvs', 'deprecated': False},\n    'checkmk': {'id': 'checkmk', 'deprecated': False},\n    'clartistic': {'id': 'ClArtistic', 'deprecated': False},\n    'clips': {'id': 'Clips', 'deprecated': False},\n    'cmu-mach': {'id': 'CMU-Mach', 'deprecated': False},\n    'cmu-mach-nodoc': {'id': 'CMU-Mach-nodoc', 'deprecated': False},\n    'cnri-jython': {'id': 'CNRI-Jython', 'deprecated': False},\n    'cnri-python': {'id': 'CNRI-Python', 'deprecated': False},\n    'cnri-python-gpl-compatible': {'id': 'CNRI-Python-GPL-Compatible', 'deprecated': False},\n    'coil-1.0': {'id': 'COIL-1.0', 'deprecated': False},\n    'community-spec-1.0': {'id': 'Community-Spec-1.0', 'deprecated': False},\n    'condor-1.1': {'id': 'Condor-1.1', 'deprecated': False},\n    'copyleft-next-0.3.0': {'id': 'copyleft-next-0.3.0', 'deprecated': False},\n    'copyleft-next-0.3.1': {'id': 'copyleft-next-0.3.1', 'deprecated': False},\n    'cornell-lossless-jpeg': {'id': 'Cornell-Lossless-JPEG', 'deprecated': False},\n    'cpal-1.0': {'id': 'CPAL-1.0', 'deprecated': False},\n    'cpl-1.0': {'id': 'CPL-1.0', 'deprecated': False},\n    'cpol-1.02': {'id': 'CPOL-1.02', 'deprecated': False},\n    'cronyx': {'id': 'Cronyx', 'deprecated': False},\n    'crossword': {'id': 'Crossword', 'deprecated': False},\n    'crystalstacker': {'id': 'CrystalStacker', 'deprecated': False},\n    'cua-opl-1.0': {'id': 'CUA-OPL-1.0', 'deprecated': False},\n    'cube': {'id': 'Cube', 'deprecated': False},\n    'curl': {'id': 'curl', 'deprecated': False},\n    'cve-tou': {'id': 'cve-tou', 'deprecated': False},\n    'd-fsl-1.0': {'id': 'D-FSL-1.0', 'deprecated': False},\n    'dec-3-clause': {'id': 'DEC-3-Clause', 'deprecated': False},\n    'diffmark': {'id': 'diffmark', 'deprecated': False},\n    'dl-de-by-2.0': {'id': 'DL-DE-BY-2.0', 'deprecated': False},\n    'dl-de-zero-2.0': {'id': 'DL-DE-ZERO-2.0', 'deprecated': False},\n    'doc': {'id': 'DOC', 'deprecated': False},\n    'docbook-schema': {'id': 'DocBook-Schema', 'deprecated': False},\n    'docbook-xml': {'id': 'DocBook-XML', 'deprecated': False},\n    'dotseqn': {'id': 'Dotseqn', 'deprecated': False},\n    'drl-1.0': {'id': 'DRL-1.0', 'deprecated': False},\n    'drl-1.1': {'id': 'DRL-1.1', 'deprecated': False},\n    'dsdp': {'id': 'DSDP', 'deprecated': False},\n    'dtoa': {'id': 'dtoa', 'deprecated': False},\n    'dvipdfm': {'id': 'dvipdfm', 'deprecated': False},\n    'ecl-1.0': {'id': 'ECL-1.0', 'deprecated': False},\n    'ecl-2.0': {'id': 'ECL-2.0', 'deprecated': False},\n    'ecos-2.0': {'id': 'eCos-2.0', 'deprecated': True},\n    'efl-1.0': {'id': 'EFL-1.0', 'deprecated': False},\n    'efl-2.0': {'id': 'EFL-2.0', 'deprecated': False},\n    'egenix': {'id': 'eGenix', 'deprecated': False},\n    'elastic-2.0': {'id': 'Elastic-2.0', 'deprecated': False},\n    'entessa': {'id': 'Entessa', 'deprecated': False},\n    'epics': {'id': 'EPICS', 'deprecated': False},\n    'epl-1.0': {'id': 'EPL-1.0', 'deprecated': False},\n    'epl-2.0': {'id': 'EPL-2.0', 'deprecated': False},\n    'erlpl-1.1': {'id': 'ErlPL-1.1', 'deprecated': False},\n    'etalab-2.0': {'id': 'etalab-2.0', 'deprecated': False},\n    'eudatagrid': {'id': 'EUDatagrid', 'deprecated': False},\n    'eupl-1.0': {'id': 'EUPL-1.0', 'deprecated': False},\n    'eupl-1.1': {'id': 'EUPL-1.1', 'deprecated': False},\n    'eupl-1.2': {'id': 'EUPL-1.2', 'deprecated': False},\n    'eurosym': {'id': 'Eurosym', 'deprecated': False},\n    'fair': {'id': 'Fair', 'deprecated': False},\n    'fbm': {'id': 'FBM', 'deprecated': False},\n    'fdk-aac': {'id': 'FDK-AAC', 'deprecated': False},\n    'ferguson-twofish': {'id': 'Ferguson-Twofish', 'deprecated': False},\n    'frameworx-1.0': {'id': 'Frameworx-1.0', 'deprecated': False},\n    'freebsd-doc': {'id': 'FreeBSD-DOC', 'deprecated': False},\n    'freeimage': {'id': 'FreeImage', 'deprecated': False},\n    'fsfap': {'id': 'FSFAP', 'deprecated': False},\n    'fsfap-no-warranty-disclaimer': {'id': 'FSFAP-no-warranty-disclaimer', 'deprecated': False},\n    'fsful': {'id': 'FSFUL', 'deprecated': False},\n    'fsfullr': {'id': 'FSFULLR', 'deprecated': False},\n    'fsfullrwd': {'id': 'FSFULLRWD', 'deprecated': False},\n    'ftl': {'id': 'FTL', 'deprecated': False},\n    'furuseth': {'id': 'Furuseth', 'deprecated': False},\n    'fwlw': {'id': 'fwlw', 'deprecated': False},\n    'gcr-docs': {'id': 'GCR-docs', 'deprecated': False},\n    'gd': {'id': 'GD', 'deprecated': False},\n    'gfdl-1.1': {'id': 'GFDL-1.1', 'deprecated': True},\n    'gfdl-1.1-invariants-only': {'id': 'GFDL-1.1-invariants-only', 'deprecated': False},\n    'gfdl-1.1-invariants-or-later': {'id': 'GFDL-1.1-invariants-or-later', 'deprecated': False},\n    'gfdl-1.1-no-invariants-only': {'id': 'GFDL-1.1-no-invariants-only', 'deprecated': False},\n    'gfdl-1.1-no-invariants-or-later': {'id': 'GFDL-1.1-no-invariants-or-later', 'deprecated': False},\n    'gfdl-1.1-only': {'id': 'GFDL-1.1-only', 'deprecated': False},\n    'gfdl-1.1-or-later': {'id': 'GFDL-1.1-or-later', 'deprecated': False},\n    'gfdl-1.2': {'id': 'GFDL-1.2', 'deprecated': True},\n    'gfdl-1.2-invariants-only': {'id': 'GFDL-1.2-invariants-only', 'deprecated': False},\n    'gfdl-1.2-invariants-or-later': {'id': 'GFDL-1.2-invariants-or-later', 'deprecated': False},\n    'gfdl-1.2-no-invariants-only': {'id': 'GFDL-1.2-no-invariants-only', 'deprecated': False},\n    'gfdl-1.2-no-invariants-or-later': {'id': 'GFDL-1.2-no-invariants-or-later', 'deprecated': False},\n    'gfdl-1.2-only': {'id': 'GFDL-1.2-only', 'deprecated': False},\n    'gfdl-1.2-or-later': {'id': 'GFDL-1.2-or-later', 'deprecated': False},\n    'gfdl-1.3': {'id': 'GFDL-1.3', 'deprecated': True},\n    'gfdl-1.3-invariants-only': {'id': 'GFDL-1.3-invariants-only', 'deprecated': False},\n    'gfdl-1.3-invariants-or-later': {'id': 'GFDL-1.3-invariants-or-later', 'deprecated': False},\n    'gfdl-1.3-no-invariants-only': {'id': 'GFDL-1.3-no-invariants-only', 'deprecated': False},\n    'gfdl-1.3-no-invariants-or-later': {'id': 'GFDL-1.3-no-invariants-or-later', 'deprecated': False},\n    'gfdl-1.3-only': {'id': 'GFDL-1.3-only', 'deprecated': False},\n    'gfdl-1.3-or-later': {'id': 'GFDL-1.3-or-later', 'deprecated': False},\n    'giftware': {'id': 'Giftware', 'deprecated': False},\n    'gl2ps': {'id': 'GL2PS', 'deprecated': False},\n    'glide': {'id': 'Glide', 'deprecated': False},\n    'glulxe': {'id': 'Glulxe', 'deprecated': False},\n    'glwtpl': {'id': 'GLWTPL', 'deprecated': False},\n    'gnuplot': {'id': 'gnuplot', 'deprecated': False},\n    'gpl-1.0': {'id': 'GPL-1.0', 'deprecated': True},\n    'gpl-1.0+': {'id': 'GPL-1.0+', 'deprecated': True},\n    'gpl-1.0-only': {'id': 'GPL-1.0-only', 'deprecated': False},\n    'gpl-1.0-or-later': {'id': 'GPL-1.0-or-later', 'deprecated': False},\n    'gpl-2.0': {'id': 'GPL-2.0', 'deprecated': True},\n    'gpl-2.0+': {'id': 'GPL-2.0+', 'deprecated': True},\n    'gpl-2.0-only': {'id': 'GPL-2.0-only', 'deprecated': False},\n    'gpl-2.0-or-later': {'id': 'GPL-2.0-or-later', 'deprecated': False},\n    'gpl-2.0-with-autoconf-exception': {'id': 'GPL-2.0-with-autoconf-exception', 'deprecated': True},\n    'gpl-2.0-with-bison-exception': {'id': 'GPL-2.0-with-bison-exception', 'deprecated': True},\n    'gpl-2.0-with-classpath-exception': {'id': 'GPL-2.0-with-classpath-exception', 'deprecated': True},\n    'gpl-2.0-with-font-exception': {'id': 'GPL-2.0-with-font-exception', 'deprecated': True},\n    'gpl-2.0-with-gcc-exception': {'id': 'GPL-2.0-with-GCC-exception', 'deprecated': True},\n    'gpl-3.0': {'id': 'GPL-3.0', 'deprecated': True},\n    'gpl-3.0+': {'id': 'GPL-3.0+', 'deprecated': True},\n    'gpl-3.0-only': {'id': 'GPL-3.0-only', 'deprecated': False},\n    'gpl-3.0-or-later': {'id': 'GPL-3.0-or-later', 'deprecated': False},\n    'gpl-3.0-with-autoconf-exception': {'id': 'GPL-3.0-with-autoconf-exception', 'deprecated': True},\n    'gpl-3.0-with-gcc-exception': {'id': 'GPL-3.0-with-GCC-exception', 'deprecated': True},\n    'graphics-gems': {'id': 'Graphics-Gems', 'deprecated': False},\n    'gsoap-1.3b': {'id': 'gSOAP-1.3b', 'deprecated': False},\n    'gtkbook': {'id': 'gtkbook', 'deprecated': False},\n    'gutmann': {'id': 'Gutmann', 'deprecated': False},\n    'haskellreport': {'id': 'HaskellReport', 'deprecated': False},\n    'hdparm': {'id': 'hdparm', 'deprecated': False},\n    'hidapi': {'id': 'HIDAPI', 'deprecated': False},\n    'hippocratic-2.1': {'id': 'Hippocratic-2.1', 'deprecated': False},\n    'hp-1986': {'id': 'HP-1986', 'deprecated': False},\n    'hp-1989': {'id': 'HP-1989', 'deprecated': False},\n    'hpnd': {'id': 'HPND', 'deprecated': False},\n    'hpnd-dec': {'id': 'HPND-DEC', 'deprecated': False},\n    'hpnd-doc': {'id': 'HPND-doc', 'deprecated': False},\n    'hpnd-doc-sell': {'id': 'HPND-doc-sell', 'deprecated': False},\n    'hpnd-export-us': {'id': 'HPND-export-US', 'deprecated': False},\n    'hpnd-export-us-acknowledgement': {'id': 'HPND-export-US-acknowledgement', 'deprecated': False},\n    'hpnd-export-us-modify': {'id': 'HPND-export-US-modify', 'deprecated': False},\n    'hpnd-export2-us': {'id': 'HPND-export2-US', 'deprecated': False},\n    'hpnd-fenneberg-livingston': {'id': 'HPND-Fenneberg-Livingston', 'deprecated': False},\n    'hpnd-inria-imag': {'id': 'HPND-INRIA-IMAG', 'deprecated': False},\n    'hpnd-intel': {'id': 'HPND-Intel', 'deprecated': False},\n    'hpnd-kevlin-henney': {'id': 'HPND-Kevlin-Henney', 'deprecated': False},\n    'hpnd-markus-kuhn': {'id': 'HPND-Markus-Kuhn', 'deprecated': False},\n    'hpnd-merchantability-variant': {'id': 'HPND-merchantability-variant', 'deprecated': False},\n    'hpnd-mit-disclaimer': {'id': 'HPND-MIT-disclaimer', 'deprecated': False},\n    'hpnd-netrek': {'id': 'HPND-Netrek', 'deprecated': False},\n    'hpnd-pbmplus': {'id': 'HPND-Pbmplus', 'deprecated': False},\n    'hpnd-sell-mit-disclaimer-xserver': {'id': 'HPND-sell-MIT-disclaimer-xserver', 'deprecated': False},\n    'hpnd-sell-regexpr': {'id': 'HPND-sell-regexpr', 'deprecated': False},\n    'hpnd-sell-variant': {'id': 'HPND-sell-variant', 'deprecated': False},\n    'hpnd-sell-variant-mit-disclaimer': {'id': 'HPND-sell-variant-MIT-disclaimer', 'deprecated': False},\n    'hpnd-sell-variant-mit-disclaimer-rev': {'id': 'HPND-sell-variant-MIT-disclaimer-rev', 'deprecated': False},\n    'hpnd-uc': {'id': 'HPND-UC', 'deprecated': False},\n    'hpnd-uc-export-us': {'id': 'HPND-UC-export-US', 'deprecated': False},\n    'htmltidy': {'id': 'HTMLTIDY', 'deprecated': False},\n    'ibm-pibs': {'id': 'IBM-pibs', 'deprecated': False},\n    'icu': {'id': 'ICU', 'deprecated': False},\n    'iec-code-components-eula': {'id': 'IEC-Code-Components-EULA', 'deprecated': False},\n    'ijg': {'id': 'IJG', 'deprecated': False},\n    'ijg-short': {'id': 'IJG-short', 'deprecated': False},\n    'imagemagick': {'id': 'ImageMagick', 'deprecated': False},\n    'imatix': {'id': 'iMatix', 'deprecated': False},\n    'imlib2': {'id': 'Imlib2', 'deprecated': False},\n    'info-zip': {'id': 'Info-ZIP', 'deprecated': False},\n    'inner-net-2.0': {'id': 'Inner-Net-2.0', 'deprecated': False},\n    'intel': {'id': 'Intel', 'deprecated': False},\n    'intel-acpi': {'id': 'Intel-ACPI', 'deprecated': False},\n    'interbase-1.0': {'id': 'Interbase-1.0', 'deprecated': False},\n    'ipa': {'id': 'IPA', 'deprecated': False},\n    'ipl-1.0': {'id': 'IPL-1.0', 'deprecated': False},\n    'isc': {'id': 'ISC', 'deprecated': False},\n    'isc-veillard': {'id': 'ISC-Veillard', 'deprecated': False},\n    'jam': {'id': 'Jam', 'deprecated': False},\n    'jasper-2.0': {'id': 'JasPer-2.0', 'deprecated': False},\n    'jpl-image': {'id': 'JPL-image', 'deprecated': False},\n    'jpnic': {'id': 'JPNIC', 'deprecated': False},\n    'json': {'id': 'JSON', 'deprecated': False},\n    'kastrup': {'id': 'Kastrup', 'deprecated': False},\n    'kazlib': {'id': 'Kazlib', 'deprecated': False},\n    'knuth-ctan': {'id': 'Knuth-CTAN', 'deprecated': False},\n    'lal-1.2': {'id': 'LAL-1.2', 'deprecated': False},\n    'lal-1.3': {'id': 'LAL-1.3', 'deprecated': False},\n    'latex2e': {'id': 'Latex2e', 'deprecated': False},\n    'latex2e-translated-notice': {'id': 'Latex2e-translated-notice', 'deprecated': False},\n    'leptonica': {'id': 'Leptonica', 'deprecated': False},\n    'lgpl-2.0': {'id': 'LGPL-2.0', 'deprecated': True},\n    'lgpl-2.0+': {'id': 'LGPL-2.0+', 'deprecated': True},\n    'lgpl-2.0-only': {'id': 'LGPL-2.0-only', 'deprecated': False},\n    'lgpl-2.0-or-later': {'id': 'LGPL-2.0-or-later', 'deprecated': False},\n    'lgpl-2.1': {'id': 'LGPL-2.1', 'deprecated': True},\n    'lgpl-2.1+': {'id': 'LGPL-2.1+', 'deprecated': True},\n    'lgpl-2.1-only': {'id': 'LGPL-2.1-only', 'deprecated': False},\n    'lgpl-2.1-or-later': {'id': 'LGPL-2.1-or-later', 'deprecated': False},\n    'lgpl-3.0': {'id': 'LGPL-3.0', 'deprecated': True},\n    'lgpl-3.0+': {'id': 'LGPL-3.0+', 'deprecated': True},\n    'lgpl-3.0-only': {'id': 'LGPL-3.0-only', 'deprecated': False},\n    'lgpl-3.0-or-later': {'id': 'LGPL-3.0-or-later', 'deprecated': False},\n    'lgpllr': {'id': 'LGPLLR', 'deprecated': False},\n    'libpng': {'id': 'Libpng', 'deprecated': False},\n    'libpng-2.0': {'id': 'libpng-2.0', 'deprecated': False},\n    'libselinux-1.0': {'id': 'libselinux-1.0', 'deprecated': False},\n    'libtiff': {'id': 'libtiff', 'deprecated': False},\n    'libutil-david-nugent': {'id': 'libutil-David-Nugent', 'deprecated': False},\n    'liliq-p-1.1': {'id': 'LiLiQ-P-1.1', 'deprecated': False},\n    'liliq-r-1.1': {'id': 'LiLiQ-R-1.1', 'deprecated': False},\n    'liliq-rplus-1.1': {'id': 'LiLiQ-Rplus-1.1', 'deprecated': False},\n    'linux-man-pages-1-para': {'id': 'Linux-man-pages-1-para', 'deprecated': False},\n    'linux-man-pages-copyleft': {'id': 'Linux-man-pages-copyleft', 'deprecated': False},\n    'linux-man-pages-copyleft-2-para': {'id': 'Linux-man-pages-copyleft-2-para', 'deprecated': False},\n    'linux-man-pages-copyleft-var': {'id': 'Linux-man-pages-copyleft-var', 'deprecated': False},\n    'linux-openib': {'id': 'Linux-OpenIB', 'deprecated': False},\n    'loop': {'id': 'LOOP', 'deprecated': False},\n    'lpd-document': {'id': 'LPD-document', 'deprecated': False},\n    'lpl-1.0': {'id': 'LPL-1.0', 'deprecated': False},\n    'lpl-1.02': {'id': 'LPL-1.02', 'deprecated': False},\n    'lppl-1.0': {'id': 'LPPL-1.0', 'deprecated': False},\n    'lppl-1.1': {'id': 'LPPL-1.1', 'deprecated': False},\n    'lppl-1.2': {'id': 'LPPL-1.2', 'deprecated': False},\n    'lppl-1.3a': {'id': 'LPPL-1.3a', 'deprecated': False},\n    'lppl-1.3c': {'id': 'LPPL-1.3c', 'deprecated': False},\n    'lsof': {'id': 'lsof', 'deprecated': False},\n    'lucida-bitmap-fonts': {'id': 'Lucida-Bitmap-Fonts', 'deprecated': False},\n    'lzma-sdk-9.11-to-9.20': {'id': 'LZMA-SDK-9.11-to-9.20', 'deprecated': False},\n    'lzma-sdk-9.22': {'id': 'LZMA-SDK-9.22', 'deprecated': False},\n    'mackerras-3-clause': {'id': 'Mackerras-3-Clause', 'deprecated': False},\n    'mackerras-3-clause-acknowledgment': {'id': 'Mackerras-3-Clause-acknowledgment', 'deprecated': False},\n    'magaz': {'id': 'magaz', 'deprecated': False},\n    'mailprio': {'id': 'mailprio', 'deprecated': False},\n    'makeindex': {'id': 'MakeIndex', 'deprecated': False},\n    'martin-birgmeier': {'id': 'Martin-Birgmeier', 'deprecated': False},\n    'mcphee-slideshow': {'id': 'McPhee-slideshow', 'deprecated': False},\n    'metamail': {'id': 'metamail', 'deprecated': False},\n    'minpack': {'id': 'Minpack', 'deprecated': False},\n    'miros': {'id': 'MirOS', 'deprecated': False},\n    'mit': {'id': 'MIT', 'deprecated': False},\n    'mit-0': {'id': 'MIT-0', 'deprecated': False},\n    'mit-advertising': {'id': 'MIT-advertising', 'deprecated': False},\n    'mit-cmu': {'id': 'MIT-CMU', 'deprecated': False},\n    'mit-enna': {'id': 'MIT-enna', 'deprecated': False},\n    'mit-feh': {'id': 'MIT-feh', 'deprecated': False},\n    'mit-festival': {'id': 'MIT-Festival', 'deprecated': False},\n    'mit-khronos-old': {'id': 'MIT-Khronos-old', 'deprecated': False},\n    'mit-modern-variant': {'id': 'MIT-Modern-Variant', 'deprecated': False},\n    'mit-open-group': {'id': 'MIT-open-group', 'deprecated': False},\n    'mit-testregex': {'id': 'MIT-testregex', 'deprecated': False},\n    'mit-wu': {'id': 'MIT-Wu', 'deprecated': False},\n    'mitnfa': {'id': 'MITNFA', 'deprecated': False},\n    'mmixware': {'id': 'MMIXware', 'deprecated': False},\n    'motosoto': {'id': 'Motosoto', 'deprecated': False},\n    'mpeg-ssg': {'id': 'MPEG-SSG', 'deprecated': False},\n    'mpi-permissive': {'id': 'mpi-permissive', 'deprecated': False},\n    'mpich2': {'id': 'mpich2', 'deprecated': False},\n    'mpl-1.0': {'id': 'MPL-1.0', 'deprecated': False},\n    'mpl-1.1': {'id': 'MPL-1.1', 'deprecated': False},\n    'mpl-2.0': {'id': 'MPL-2.0', 'deprecated': False},\n    'mpl-2.0-no-copyleft-exception': {'id': 'MPL-2.0-no-copyleft-exception', 'deprecated': False},\n    'mplus': {'id': 'mplus', 'deprecated': False},\n    'ms-lpl': {'id': 'MS-LPL', 'deprecated': False},\n    'ms-pl': {'id': 'MS-PL', 'deprecated': False},\n    'ms-rl': {'id': 'MS-RL', 'deprecated': False},\n    'mtll': {'id': 'MTLL', 'deprecated': False},\n    'mulanpsl-1.0': {'id': 'MulanPSL-1.0', 'deprecated': False},\n    'mulanpsl-2.0': {'id': 'MulanPSL-2.0', 'deprecated': False},\n    'multics': {'id': 'Multics', 'deprecated': False},\n    'mup': {'id': 'Mup', 'deprecated': False},\n    'naist-2003': {'id': 'NAIST-2003', 'deprecated': False},\n    'nasa-1.3': {'id': 'NASA-1.3', 'deprecated': False},\n    'naumen': {'id': 'Naumen', 'deprecated': False},\n    'nbpl-1.0': {'id': 'NBPL-1.0', 'deprecated': False},\n    'ncbi-pd': {'id': 'NCBI-PD', 'deprecated': False},\n    'ncgl-uk-2.0': {'id': 'NCGL-UK-2.0', 'deprecated': False},\n    'ncl': {'id': 'NCL', 'deprecated': False},\n    'ncsa': {'id': 'NCSA', 'deprecated': False},\n    'net-snmp': {'id': 'Net-SNMP', 'deprecated': True},\n    'netcdf': {'id': 'NetCDF', 'deprecated': False},\n    'newsletr': {'id': 'Newsletr', 'deprecated': False},\n    'ngpl': {'id': 'NGPL', 'deprecated': False},\n    'nicta-1.0': {'id': 'NICTA-1.0', 'deprecated': False},\n    'nist-pd': {'id': 'NIST-PD', 'deprecated': False},\n    'nist-pd-fallback': {'id': 'NIST-PD-fallback', 'deprecated': False},\n    'nist-software': {'id': 'NIST-Software', 'deprecated': False},\n    'nlod-1.0': {'id': 'NLOD-1.0', 'deprecated': False},\n    'nlod-2.0': {'id': 'NLOD-2.0', 'deprecated': False},\n    'nlpl': {'id': 'NLPL', 'deprecated': False},\n    'nokia': {'id': 'Nokia', 'deprecated': False},\n    'nosl': {'id': 'NOSL', 'deprecated': False},\n    'noweb': {'id': 'Noweb', 'deprecated': False},\n    'npl-1.0': {'id': 'NPL-1.0', 'deprecated': False},\n    'npl-1.1': {'id': 'NPL-1.1', 'deprecated': False},\n    'nposl-3.0': {'id': 'NPOSL-3.0', 'deprecated': False},\n    'nrl': {'id': 'NRL', 'deprecated': False},\n    'ntp': {'id': 'NTP', 'deprecated': False},\n    'ntp-0': {'id': 'NTP-0', 'deprecated': False},\n    'nunit': {'id': 'Nunit', 'deprecated': True},\n    'o-uda-1.0': {'id': 'O-UDA-1.0', 'deprecated': False},\n    'oar': {'id': 'OAR', 'deprecated': False},\n    'occt-pl': {'id': 'OCCT-PL', 'deprecated': False},\n    'oclc-2.0': {'id': 'OCLC-2.0', 'deprecated': False},\n    'odbl-1.0': {'id': 'ODbL-1.0', 'deprecated': False},\n    'odc-by-1.0': {'id': 'ODC-By-1.0', 'deprecated': False},\n    'offis': {'id': 'OFFIS', 'deprecated': False},\n    'ofl-1.0': {'id': 'OFL-1.0', 'deprecated': False},\n    'ofl-1.0-no-rfn': {'id': 'OFL-1.0-no-RFN', 'deprecated': False},\n    'ofl-1.0-rfn': {'id': 'OFL-1.0-RFN', 'deprecated': False},\n    'ofl-1.1': {'id': 'OFL-1.1', 'deprecated': False},\n    'ofl-1.1-no-rfn': {'id': 'OFL-1.1-no-RFN', 'deprecated': False},\n    'ofl-1.1-rfn': {'id': 'OFL-1.1-RFN', 'deprecated': False},\n    'ogc-1.0': {'id': 'OGC-1.0', 'deprecated': False},\n    'ogdl-taiwan-1.0': {'id': 'OGDL-Taiwan-1.0', 'deprecated': False},\n    'ogl-canada-2.0': {'id': 'OGL-Canada-2.0', 'deprecated': False},\n    'ogl-uk-1.0': {'id': 'OGL-UK-1.0', 'deprecated': False},\n    'ogl-uk-2.0': {'id': 'OGL-UK-2.0', 'deprecated': False},\n    'ogl-uk-3.0': {'id': 'OGL-UK-3.0', 'deprecated': False},\n    'ogtsl': {'id': 'OGTSL', 'deprecated': False},\n    'oldap-1.1': {'id': 'OLDAP-1.1', 'deprecated': False},\n    'oldap-1.2': {'id': 'OLDAP-1.2', 'deprecated': False},\n    'oldap-1.3': {'id': 'OLDAP-1.3', 'deprecated': False},\n    'oldap-1.4': {'id': 'OLDAP-1.4', 'deprecated': False},\n    'oldap-2.0': {'id': 'OLDAP-2.0', 'deprecated': False},\n    'oldap-2.0.1': {'id': 'OLDAP-2.0.1', 'deprecated': False},\n    'oldap-2.1': {'id': 'OLDAP-2.1', 'deprecated': False},\n    'oldap-2.2': {'id': 'OLDAP-2.2', 'deprecated': False},\n    'oldap-2.2.1': {'id': 'OLDAP-2.2.1', 'deprecated': False},\n    'oldap-2.2.2': {'id': 'OLDAP-2.2.2', 'deprecated': False},\n    'oldap-2.3': {'id': 'OLDAP-2.3', 'deprecated': False},\n    'oldap-2.4': {'id': 'OLDAP-2.4', 'deprecated': False},\n    'oldap-2.5': {'id': 'OLDAP-2.5', 'deprecated': False},\n    'oldap-2.6': {'id': 'OLDAP-2.6', 'deprecated': False},\n    'oldap-2.7': {'id': 'OLDAP-2.7', 'deprecated': False},\n    'oldap-2.8': {'id': 'OLDAP-2.8', 'deprecated': False},\n    'olfl-1.3': {'id': 'OLFL-1.3', 'deprecated': False},\n    'oml': {'id': 'OML', 'deprecated': False},\n    'openpbs-2.3': {'id': 'OpenPBS-2.3', 'deprecated': False},\n    'openssl': {'id': 'OpenSSL', 'deprecated': False},\n    'openssl-standalone': {'id': 'OpenSSL-standalone', 'deprecated': False},\n    'openvision': {'id': 'OpenVision', 'deprecated': False},\n    'opl-1.0': {'id': 'OPL-1.0', 'deprecated': False},\n    'opl-uk-3.0': {'id': 'OPL-UK-3.0', 'deprecated': False},\n    'opubl-1.0': {'id': 'OPUBL-1.0', 'deprecated': False},\n    'oset-pl-2.1': {'id': 'OSET-PL-2.1', 'deprecated': False},\n    'osl-1.0': {'id': 'OSL-1.0', 'deprecated': False},\n    'osl-1.1': {'id': 'OSL-1.1', 'deprecated': False},\n    'osl-2.0': {'id': 'OSL-2.0', 'deprecated': False},\n    'osl-2.1': {'id': 'OSL-2.1', 'deprecated': False},\n    'osl-3.0': {'id': 'OSL-3.0', 'deprecated': False},\n    'padl': {'id': 'PADL', 'deprecated': False},\n    'parity-6.0.0': {'id': 'Parity-6.0.0', 'deprecated': False},\n    'parity-7.0.0': {'id': 'Parity-7.0.0', 'deprecated': False},\n    'pddl-1.0': {'id': 'PDDL-1.0', 'deprecated': False},\n    'php-3.0': {'id': 'PHP-3.0', 'deprecated': False},\n    'php-3.01': {'id': 'PHP-3.01', 'deprecated': False},\n    'pixar': {'id': 'Pixar', 'deprecated': False},\n    'pkgconf': {'id': 'pkgconf', 'deprecated': False},\n    'plexus': {'id': 'Plexus', 'deprecated': False},\n    'pnmstitch': {'id': 'pnmstitch', 'deprecated': False},\n    'polyform-noncommercial-1.0.0': {'id': 'PolyForm-Noncommercial-1.0.0', 'deprecated': False},\n    'polyform-small-business-1.0.0': {'id': 'PolyForm-Small-Business-1.0.0', 'deprecated': False},\n    'postgresql': {'id': 'PostgreSQL', 'deprecated': False},\n    'ppl': {'id': 'PPL', 'deprecated': False},\n    'psf-2.0': {'id': 'PSF-2.0', 'deprecated': False},\n    'psfrag': {'id': 'psfrag', 'deprecated': False},\n    'psutils': {'id': 'psutils', 'deprecated': False},\n    'python-2.0': {'id': 'Python-2.0', 'deprecated': False},\n    'python-2.0.1': {'id': 'Python-2.0.1', 'deprecated': False},\n    'python-ldap': {'id': 'python-ldap', 'deprecated': False},\n    'qhull': {'id': 'Qhull', 'deprecated': False},\n    'qpl-1.0': {'id': 'QPL-1.0', 'deprecated': False},\n    'qpl-1.0-inria-2004': {'id': 'QPL-1.0-INRIA-2004', 'deprecated': False},\n    'radvd': {'id': 'radvd', 'deprecated': False},\n    'rdisc': {'id': 'Rdisc', 'deprecated': False},\n    'rhecos-1.1': {'id': 'RHeCos-1.1', 'deprecated': False},\n    'rpl-1.1': {'id': 'RPL-1.1', 'deprecated': False},\n    'rpl-1.5': {'id': 'RPL-1.5', 'deprecated': False},\n    'rpsl-1.0': {'id': 'RPSL-1.0', 'deprecated': False},\n    'rsa-md': {'id': 'RSA-MD', 'deprecated': False},\n    'rscpl': {'id': 'RSCPL', 'deprecated': False},\n    'ruby': {'id': 'Ruby', 'deprecated': False},\n    'ruby-pty': {'id': 'Ruby-pty', 'deprecated': False},\n    'sax-pd': {'id': 'SAX-PD', 'deprecated': False},\n    'sax-pd-2.0': {'id': 'SAX-PD-2.0', 'deprecated': False},\n    'saxpath': {'id': 'Saxpath', 'deprecated': False},\n    'scea': {'id': 'SCEA', 'deprecated': False},\n    'schemereport': {'id': 'SchemeReport', 'deprecated': False},\n    'sendmail': {'id': 'Sendmail', 'deprecated': False},\n    'sendmail-8.23': {'id': 'Sendmail-8.23', 'deprecated': False},\n    'sgi-b-1.0': {'id': 'SGI-B-1.0', 'deprecated': False},\n    'sgi-b-1.1': {'id': 'SGI-B-1.1', 'deprecated': False},\n    'sgi-b-2.0': {'id': 'SGI-B-2.0', 'deprecated': False},\n    'sgi-opengl': {'id': 'SGI-OpenGL', 'deprecated': False},\n    'sgp4': {'id': 'SGP4', 'deprecated': False},\n    'shl-0.5': {'id': 'SHL-0.5', 'deprecated': False},\n    'shl-0.51': {'id': 'SHL-0.51', 'deprecated': False},\n    'simpl-2.0': {'id': 'SimPL-2.0', 'deprecated': False},\n    'sissl': {'id': 'SISSL', 'deprecated': False},\n    'sissl-1.2': {'id': 'SISSL-1.2', 'deprecated': False},\n    'sl': {'id': 'SL', 'deprecated': False},\n    'sleepycat': {'id': 'Sleepycat', 'deprecated': False},\n    'smlnj': {'id': 'SMLNJ', 'deprecated': False},\n    'smppl': {'id': 'SMPPL', 'deprecated': False},\n    'snia': {'id': 'SNIA', 'deprecated': False},\n    'snprintf': {'id': 'snprintf', 'deprecated': False},\n    'softsurfer': {'id': 'softSurfer', 'deprecated': False},\n    'soundex': {'id': 'Soundex', 'deprecated': False},\n    'spencer-86': {'id': 'Spencer-86', 'deprecated': False},\n    'spencer-94': {'id': 'Spencer-94', 'deprecated': False},\n    'spencer-99': {'id': 'Spencer-99', 'deprecated': False},\n    'spl-1.0': {'id': 'SPL-1.0', 'deprecated': False},\n    'ssh-keyscan': {'id': 'ssh-keyscan', 'deprecated': False},\n    'ssh-openssh': {'id': 'SSH-OpenSSH', 'deprecated': False},\n    'ssh-short': {'id': 'SSH-short', 'deprecated': False},\n    'ssleay-standalone': {'id': 'SSLeay-standalone', 'deprecated': False},\n    'sspl-1.0': {'id': 'SSPL-1.0', 'deprecated': False},\n    'standardml-nj': {'id': 'StandardML-NJ', 'deprecated': True},\n    'sugarcrm-1.1.3': {'id': 'SugarCRM-1.1.3', 'deprecated': False},\n    'sun-ppp': {'id': 'Sun-PPP', 'deprecated': False},\n    'sun-ppp-2000': {'id': 'Sun-PPP-2000', 'deprecated': False},\n    'sunpro': {'id': 'SunPro', 'deprecated': False},\n    'swl': {'id': 'SWL', 'deprecated': False},\n    'swrule': {'id': 'swrule', 'deprecated': False},\n    'symlinks': {'id': 'Symlinks', 'deprecated': False},\n    'tapr-ohl-1.0': {'id': 'TAPR-OHL-1.0', 'deprecated': False},\n    'tcl': {'id': 'TCL', 'deprecated': False},\n    'tcp-wrappers': {'id': 'TCP-wrappers', 'deprecated': False},\n    'termreadkey': {'id': 'TermReadKey', 'deprecated': False},\n    'tgppl-1.0': {'id': 'TGPPL-1.0', 'deprecated': False},\n    'threeparttable': {'id': 'threeparttable', 'deprecated': False},\n    'tmate': {'id': 'TMate', 'deprecated': False},\n    'torque-1.1': {'id': 'TORQUE-1.1', 'deprecated': False},\n    'tosl': {'id': 'TOSL', 'deprecated': False},\n    'tpdl': {'id': 'TPDL', 'deprecated': False},\n    'tpl-1.0': {'id': 'TPL-1.0', 'deprecated': False},\n    'ttwl': {'id': 'TTWL', 'deprecated': False},\n    'ttyp0': {'id': 'TTYP0', 'deprecated': False},\n    'tu-berlin-1.0': {'id': 'TU-Berlin-1.0', 'deprecated': False},\n    'tu-berlin-2.0': {'id': 'TU-Berlin-2.0', 'deprecated': False},\n    'ubuntu-font-1.0': {'id': 'Ubuntu-font-1.0', 'deprecated': False},\n    'ucar': {'id': 'UCAR', 'deprecated': False},\n    'ucl-1.0': {'id': 'UCL-1.0', 'deprecated': False},\n    'ulem': {'id': 'ulem', 'deprecated': False},\n    'umich-merit': {'id': 'UMich-Merit', 'deprecated': False},\n    'unicode-3.0': {'id': 'Unicode-3.0', 'deprecated': False},\n    'unicode-dfs-2015': {'id': 'Unicode-DFS-2015', 'deprecated': False},\n    'unicode-dfs-2016': {'id': 'Unicode-DFS-2016', 'deprecated': False},\n    'unicode-tou': {'id': 'Unicode-TOU', 'deprecated': False},\n    'unixcrypt': {'id': 'UnixCrypt', 'deprecated': False},\n    'unlicense': {'id': 'Unlicense', 'deprecated': False},\n    'upl-1.0': {'id': 'UPL-1.0', 'deprecated': False},\n    'urt-rle': {'id': 'URT-RLE', 'deprecated': False},\n    'vim': {'id': 'Vim', 'deprecated': False},\n    'vostrom': {'id': 'VOSTROM', 'deprecated': False},\n    'vsl-1.0': {'id': 'VSL-1.0', 'deprecated': False},\n    'w3c': {'id': 'W3C', 'deprecated': False},\n    'w3c-19980720': {'id': 'W3C-19980720', 'deprecated': False},\n    'w3c-20150513': {'id': 'W3C-20150513', 'deprecated': False},\n    'w3m': {'id': 'w3m', 'deprecated': False},\n    'watcom-1.0': {'id': 'Watcom-1.0', 'deprecated': False},\n    'widget-workshop': {'id': 'Widget-Workshop', 'deprecated': False},\n    'wsuipa': {'id': 'Wsuipa', 'deprecated': False},\n    'wtfpl': {'id': 'WTFPL', 'deprecated': False},\n    'wxwindows': {'id': 'wxWindows', 'deprecated': True},\n    'x11': {'id': 'X11', 'deprecated': False},\n    'x11-distribute-modifications-variant': {'id': 'X11-distribute-modifications-variant', 'deprecated': False},\n    'x11-swapped': {'id': 'X11-swapped', 'deprecated': False},\n    'xdebug-1.03': {'id': 'Xdebug-1.03', 'deprecated': False},\n    'xerox': {'id': 'Xerox', 'deprecated': False},\n    'xfig': {'id': 'Xfig', 'deprecated': False},\n    'xfree86-1.1': {'id': 'XFree86-1.1', 'deprecated': False},\n    'xinetd': {'id': 'xinetd', 'deprecated': False},\n    'xkeyboard-config-zinoviev': {'id': 'xkeyboard-config-Zinoviev', 'deprecated': False},\n    'xlock': {'id': 'xlock', 'deprecated': False},\n    'xnet': {'id': 'Xnet', 'deprecated': False},\n    'xpp': {'id': 'xpp', 'deprecated': False},\n    'xskat': {'id': 'XSkat', 'deprecated': False},\n    'xzoom': {'id': 'xzoom', 'deprecated': False},\n    'ypl-1.0': {'id': 'YPL-1.0', 'deprecated': False},\n    'ypl-1.1': {'id': 'YPL-1.1', 'deprecated': False},\n    'zed': {'id': 'Zed', 'deprecated': False},\n    'zeeff': {'id': 'Zeeff', 'deprecated': False},\n    'zend-2.0': {'id': 'Zend-2.0', 'deprecated': False},\n    'zimbra-1.3': {'id': 'Zimbra-1.3', 'deprecated': False},\n    'zimbra-1.4': {'id': 'Zimbra-1.4', 'deprecated': False},\n    'zlib': {'id': 'Zlib', 'deprecated': False},\n    'zlib-acknowledgement': {'id': 'zlib-acknowledgement', 'deprecated': False},\n    'zpl-1.1': {'id': 'ZPL-1.1', 'deprecated': False},\n    'zpl-2.0': {'id': 'ZPL-2.0', 'deprecated': False},\n    'zpl-2.1': {'id': 'ZPL-2.1', 'deprecated': False},\n}\n\nEXCEPTIONS: dict[str, SPDXException] = {\n    '389-exception': {'id': '389-exception', 'deprecated': False},\n    'asterisk-exception': {'id': 'Asterisk-exception', 'deprecated': False},\n    'asterisk-linking-protocols-exception': {'id': 'Asterisk-linking-protocols-exception', 'deprecated': False},\n    'autoconf-exception-2.0': {'id': 'Autoconf-exception-2.0', 'deprecated': False},\n    'autoconf-exception-3.0': {'id': 'Autoconf-exception-3.0', 'deprecated': False},\n    'autoconf-exception-generic': {'id': 'Autoconf-exception-generic', 'deprecated': False},\n    'autoconf-exception-generic-3.0': {'id': 'Autoconf-exception-generic-3.0', 'deprecated': False},\n    'autoconf-exception-macro': {'id': 'Autoconf-exception-macro', 'deprecated': False},\n    'bison-exception-1.24': {'id': 'Bison-exception-1.24', 'deprecated': False},\n    'bison-exception-2.2': {'id': 'Bison-exception-2.2', 'deprecated': False},\n    'bootloader-exception': {'id': 'Bootloader-exception', 'deprecated': False},\n    'classpath-exception-2.0': {'id': 'Classpath-exception-2.0', 'deprecated': False},\n    'clisp-exception-2.0': {'id': 'CLISP-exception-2.0', 'deprecated': False},\n    'cryptsetup-openssl-exception': {'id': 'cryptsetup-OpenSSL-exception', 'deprecated': False},\n    'digirule-foss-exception': {'id': 'DigiRule-FOSS-exception', 'deprecated': False},\n    'ecos-exception-2.0': {'id': 'eCos-exception-2.0', 'deprecated': False},\n    'erlang-otp-linking-exception': {'id': 'erlang-otp-linking-exception', 'deprecated': False},\n    'fawkes-runtime-exception': {'id': 'Fawkes-Runtime-exception', 'deprecated': False},\n    'fltk-exception': {'id': 'FLTK-exception', 'deprecated': False},\n    'fmt-exception': {'id': 'fmt-exception', 'deprecated': False},\n    'font-exception-2.0': {'id': 'Font-exception-2.0', 'deprecated': False},\n    'freertos-exception-2.0': {'id': 'freertos-exception-2.0', 'deprecated': False},\n    'gcc-exception-2.0': {'id': 'GCC-exception-2.0', 'deprecated': False},\n    'gcc-exception-2.0-note': {'id': 'GCC-exception-2.0-note', 'deprecated': False},\n    'gcc-exception-3.1': {'id': 'GCC-exception-3.1', 'deprecated': False},\n    'gmsh-exception': {'id': 'Gmsh-exception', 'deprecated': False},\n    'gnat-exception': {'id': 'GNAT-exception', 'deprecated': False},\n    'gnome-examples-exception': {'id': 'GNOME-examples-exception', 'deprecated': False},\n    'gnu-compiler-exception': {'id': 'GNU-compiler-exception', 'deprecated': False},\n    'gnu-javamail-exception': {'id': 'gnu-javamail-exception', 'deprecated': False},\n    'gpl-3.0-interface-exception': {'id': 'GPL-3.0-interface-exception', 'deprecated': False},\n    'gpl-3.0-linking-exception': {'id': 'GPL-3.0-linking-exception', 'deprecated': False},\n    'gpl-3.0-linking-source-exception': {'id': 'GPL-3.0-linking-source-exception', 'deprecated': False},\n    'gpl-cc-1.0': {'id': 'GPL-CC-1.0', 'deprecated': False},\n    'gstreamer-exception-2005': {'id': 'GStreamer-exception-2005', 'deprecated': False},\n    'gstreamer-exception-2008': {'id': 'GStreamer-exception-2008', 'deprecated': False},\n    'i2p-gpl-java-exception': {'id': 'i2p-gpl-java-exception', 'deprecated': False},\n    'kicad-libraries-exception': {'id': 'KiCad-libraries-exception', 'deprecated': False},\n    'lgpl-3.0-linking-exception': {'id': 'LGPL-3.0-linking-exception', 'deprecated': False},\n    'libpri-openh323-exception': {'id': 'libpri-OpenH323-exception', 'deprecated': False},\n    'libtool-exception': {'id': 'Libtool-exception', 'deprecated': False},\n    'linux-syscall-note': {'id': 'Linux-syscall-note', 'deprecated': False},\n    'llgpl': {'id': 'LLGPL', 'deprecated': False},\n    'llvm-exception': {'id': 'LLVM-exception', 'deprecated': False},\n    'lzma-exception': {'id': 'LZMA-exception', 'deprecated': False},\n    'mif-exception': {'id': 'mif-exception', 'deprecated': False},\n    'nokia-qt-exception-1.1': {'id': 'Nokia-Qt-exception-1.1', 'deprecated': True},\n    'ocaml-lgpl-linking-exception': {'id': 'OCaml-LGPL-linking-exception', 'deprecated': False},\n    'occt-exception-1.0': {'id': 'OCCT-exception-1.0', 'deprecated': False},\n    'openjdk-assembly-exception-1.0': {'id': 'OpenJDK-assembly-exception-1.0', 'deprecated': False},\n    'openvpn-openssl-exception': {'id': 'openvpn-openssl-exception', 'deprecated': False},\n    'pcre2-exception': {'id': 'PCRE2-exception', 'deprecated': False},\n    'ps-or-pdf-font-exception-20170817': {'id': 'PS-or-PDF-font-exception-20170817', 'deprecated': False},\n    'qpl-1.0-inria-2004-exception': {'id': 'QPL-1.0-INRIA-2004-exception', 'deprecated': False},\n    'qt-gpl-exception-1.0': {'id': 'Qt-GPL-exception-1.0', 'deprecated': False},\n    'qt-lgpl-exception-1.1': {'id': 'Qt-LGPL-exception-1.1', 'deprecated': False},\n    'qwt-exception-1.0': {'id': 'Qwt-exception-1.0', 'deprecated': False},\n    'romic-exception': {'id': 'romic-exception', 'deprecated': False},\n    'rrdtool-floss-exception-2.0': {'id': 'RRDtool-FLOSS-exception-2.0', 'deprecated': False},\n    'sane-exception': {'id': 'SANE-exception', 'deprecated': False},\n    'shl-2.0': {'id': 'SHL-2.0', 'deprecated': False},\n    'shl-2.1': {'id': 'SHL-2.1', 'deprecated': False},\n    'stunnel-exception': {'id': 'stunnel-exception', 'deprecated': False},\n    'swi-exception': {'id': 'SWI-exception', 'deprecated': False},\n    'swift-exception': {'id': 'Swift-exception', 'deprecated': False},\n    'texinfo-exception': {'id': 'Texinfo-exception', 'deprecated': False},\n    'u-boot-exception-2.0': {'id': 'u-boot-exception-2.0', 'deprecated': False},\n    'ubdl-exception': {'id': 'UBDL-exception', 'deprecated': False},\n    'universal-foss-exception-1.0': {'id': 'Universal-FOSS-exception-1.0', 'deprecated': False},\n    'vsftpd-openssl-exception': {'id': 'vsftpd-openssl-exception', 'deprecated': False},\n    'wxwindows-exception-3.1': {'id': 'WxWindows-exception-3.1', 'deprecated': False},\n    'x11vnc-openssl-exception': {'id': 'x11vnc-openssl-exception', 'deprecated': False},\n}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/licenses/_spdx.py",
        "start": 2,
        "end": 759,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 1
        },
        "endLoc": {
          "line": 759,
          "column": 2,
          "position": 13386
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/licenses/_spdx.py",
        "start": 2,
        "end": 759,
        "startLoc": {
          "line": 2,
          "column": 1,
          "position": 1
        },
        "endLoc": {
          "line": 759,
          "column": 2,
          "position": 13386
        }
      }
    },
    {
      "format": "python",
      "lines": 109,
      "fragment": "packaging.licenses._spdx import EXCEPTIONS, LICENSES\n\n__all__ = [\n    \"InvalidLicenseExpression\",\n    \"NormalizedLicenseExpression\",\n    \"canonicalize_license_expression\",\n]\n\nlicense_ref_allowed = re.compile(\"^[A-Za-z0-9.-]*$\")\n\nNormalizedLicenseExpression = NewType(\"NormalizedLicenseExpression\", str)\n\n\nclass InvalidLicenseExpression(ValueError):\n    \"\"\"Raised when a license-expression string is invalid\n\n    >>> canonicalize_license_expression(\"invalid\")\n    Traceback (most recent call last):\n        ...\n    packaging.licenses.InvalidLicenseExpression: Invalid license expression: 'invalid'\n    \"\"\"\n\n\ndef canonicalize_license_expression(\n    raw_license_expression: str,\n) -> NormalizedLicenseExpression:\n    if not raw_license_expression:\n        message = f\"Invalid license expression: {raw_license_expression!r}\"\n        raise InvalidLicenseExpression(message)\n\n    # Pad any parentheses so tokenization can be achieved by merely splitting on\n    # whitespace.\n    license_expression = raw_license_expression.replace(\"(\", \" ( \").replace(\")\", \" ) \")\n    licenseref_prefix = \"LicenseRef-\"\n    license_refs = {\n        ref.lower(): \"LicenseRef-\" + ref[len(licenseref_prefix) :]\n        for ref in license_expression.split()\n        if ref.lower().startswith(licenseref_prefix.lower())\n    }\n\n    # Normalize to lower case so we can look up licenses/exceptions\n    # and so boolean operators are Python-compatible.\n    license_expression = license_expression.lower()\n\n    tokens = license_expression.split()\n\n    # Rather than implementing boolean logic, we create an expression that Python can\n    # parse. Everything that is not involved with the grammar itself is treated as\n    # `False` and the expression should evaluate as such.\n    python_tokens = []\n    for token in tokens:\n        if token not in {\"or\", \"and\", \"with\", \"(\", \")\"}:\n            python_tokens.append(\"False\")\n        elif token == \"with\":\n            python_tokens.append(\"or\")\n        elif token == \"(\" and python_tokens and python_tokens[-1] not in {\"or\", \"and\"}:\n            message = f\"Invalid license expression: {raw_license_expression!r}\"\n            raise InvalidLicenseExpression(message)\n        else:\n            python_tokens.append(token)\n\n    python_expression = \" \".join(python_tokens)\n    try:\n        invalid = eval(python_expression, globals(), locals())\n    except Exception:\n        invalid = True\n\n    if invalid is not False:\n        message = f\"Invalid license expression: {raw_license_expression!r}\"\n        raise InvalidLicenseExpression(message) from None\n\n    # Take a final pass to check for unknown licenses/exceptions.\n    normalized_tokens = []\n    for token in tokens:\n        if token in {\"or\", \"and\", \"with\", \"(\", \")\"}:\n            normalized_tokens.append(token.upper())\n            continue\n\n        if normalized_tokens and normalized_tokens[-1] == \"WITH\":\n            if token not in EXCEPTIONS:\n                message = f\"Unknown license exception: {token!r}\"\n                raise InvalidLicenseExpression(message)\n\n            normalized_tokens.append(EXCEPTIONS[token][\"id\"])\n        else:\n            if token.endswith(\"+\"):\n                final_token = token[:-1]\n                suffix = \"+\"\n            else:\n                final_token = token\n                suffix = \"\"\n\n            if final_token.startswith(\"licenseref-\"):\n                if not license_ref_allowed.match(final_token):\n                    message = f\"Invalid licenseref: {final_token!r}\"\n                    raise InvalidLicenseExpression(message)\n                normalized_tokens.append(license_refs[final_token] + suffix)\n            else:\n                if final_token not in LICENSES:\n                    message = f\"Unknown license: {final_token!r}\"\n                    raise InvalidLicenseExpression(message)\n                normalized_tokens.append(LICENSES[final_token][\"id\"] + suffix)\n\n    normalized_expression = \" \".join(normalized_tokens)\n\n    return cast(\n        NormalizedLicenseExpression,\n        normalized_expression.replace(\"( \", \"(\").replace(\" )\", \")\"),\n    )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/licenses/__init__.py",
        "start": 37,
        "end": 145,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 89
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 887
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/licenses/__init__.py",
        "start": 37,
        "end": 145,
        "startLoc": {
          "line": 37,
          "column": 2,
          "position": 93
        },
        "endLoc": {
          "line": 145,
          "column": 2,
          "position": 891
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom .._utils import PropertyInfo\nfrom .._models import BaseModel\nfrom .shared.metadata import Metadata\nfrom .graders.python_grader import PythonGrader\nfrom .graders.label_model_grader import LabelModelGrader\nfrom .graders.score_model_grader import ScoreModelGrader\nfrom .graders.string_check_grader import StringCheckGrader\nfrom .eval_custom_data_source_config import EvalCustomDataSourceConfig\nfrom .graders.text_similarity_grader import TextSimilarityGrader\nfrom .eval_stored_completions_data_source_config import EvalStoredCompletionsDataSourceConfig\n\n__all__ = [\n    \"EvalRetrieveResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_retrieve_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 23,
          "position": 160
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 21,
          "position": 160
        }
      }
    },
    {
      "format": "python",
      "lines": 65,
      "fragment": ",\n    \"DataSourceConfig\",\n    \"DataSourceConfigLogs\",\n    \"TestingCriterion\",\n    \"TestingCriterionEvalGraderTextSimilarity\",\n    \"TestingCriterionEvalGraderPython\",\n    \"TestingCriterionEvalGraderScoreModel\",\n]\n\n\nclass DataSourceConfigLogs(BaseModel):\n    schema_: Dict[str, object] = FieldInfo(alias=\"schema\")\n    \"\"\"\n    The json schema for the run data source items. Learn how to build JSON schemas\n    [here](https://json-schema.org/).\n    \"\"\"\n\n    type: Literal[\"logs\"]\n    \"\"\"The type of data source. Always `logs`.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nDataSourceConfig: TypeAlias = Annotated[\n    Union[EvalCustomDataSourceConfig, DataSourceConfigLogs, EvalStoredCompletionsDataSourceConfig],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass TestingCriterionEvalGraderTextSimilarity(TextSimilarityGrader):\n    __test__ = False\n    pass_threshold: float\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderPython(PythonGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderScoreModel(ScoreModelGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nTestingCriterion: TypeAlias = Union[\n    LabelModelGrader,\n    StringCheckGrader,\n    TestingCriterionEvalGraderTextSimilarity,\n    TestingCriterionEvalGraderPython,\n    TestingCriterionEvalGraderScoreModel,\n]\n\n\nclass EvalRetrieveResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_retrieve_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 23,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 21,
          "position": 419
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 21,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 19,
          "position": 419
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom .._utils import PropertyInfo\nfrom .._models import BaseModel\nfrom .shared.metadata import Metadata\nfrom .graders.python_grader import PythonGrader\nfrom .graders.label_model_grader import LabelModelGrader\nfrom .graders.score_model_grader import ScoreModelGrader\nfrom .graders.string_check_grader import StringCheckGrader\nfrom .eval_custom_data_source_config import EvalCustomDataSourceConfig\nfrom .graders.text_similarity_grader import TextSimilarityGrader\nfrom .eval_stored_completions_data_source_config import EvalStoredCompletionsDataSourceConfig\n\n__all__ = [\n    \"EvalListResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_list_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 19,
          "position": 160
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 21,
          "position": 160
        }
      }
    },
    {
      "format": "python",
      "lines": 65,
      "fragment": ",\n    \"DataSourceConfig\",\n    \"DataSourceConfigLogs\",\n    \"TestingCriterion\",\n    \"TestingCriterionEvalGraderTextSimilarity\",\n    \"TestingCriterionEvalGraderPython\",\n    \"TestingCriterionEvalGraderScoreModel\",\n]\n\n\nclass DataSourceConfigLogs(BaseModel):\n    schema_: Dict[str, object] = FieldInfo(alias=\"schema\")\n    \"\"\"\n    The json schema for the run data source items. Learn how to build JSON schemas\n    [here](https://json-schema.org/).\n    \"\"\"\n\n    type: Literal[\"logs\"]\n    \"\"\"The type of data source. Always `logs`.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nDataSourceConfig: TypeAlias = Annotated[\n    Union[EvalCustomDataSourceConfig, DataSourceConfigLogs, EvalStoredCompletionsDataSourceConfig],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass TestingCriterionEvalGraderTextSimilarity(TextSimilarityGrader):\n    __test__ = False\n    pass_threshold: float\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderPython(PythonGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderScoreModel(ScoreModelGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nTestingCriterion: TypeAlias = Union[\n    LabelModelGrader,\n    StringCheckGrader,\n    TestingCriterionEvalGraderTextSimilarity,\n    TestingCriterionEvalGraderPython,\n    TestingCriterionEvalGraderScoreModel,\n]\n\n\nclass EvalListResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_list_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 19,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 17,
          "position": 419
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 21,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 19,
          "position": 419
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "# File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\n\nfrom typing import Dict, List, Union, Optional\nfrom typing_extensions import Literal, Annotated, TypeAlias\n\nfrom pydantic import Field as FieldInfo\n\nfrom .._utils import PropertyInfo\nfrom .._models import BaseModel\nfrom .shared.metadata import Metadata\nfrom .graders.python_grader import PythonGrader\nfrom .graders.label_model_grader import LabelModelGrader\nfrom .graders.score_model_grader import ScoreModelGrader\nfrom .graders.string_check_grader import StringCheckGrader\nfrom .eval_custom_data_source_config import EvalCustomDataSourceConfig\nfrom .graders.text_similarity_grader import TextSimilarityGrader\nfrom .eval_stored_completions_data_source_config import EvalStoredCompletionsDataSourceConfig\n\n__all__ = [\n    \"EvalCreateResponse\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_create_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 21,
          "position": 160
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 21,
          "position": 160
        }
      }
    },
    {
      "format": "python",
      "lines": 65,
      "fragment": ",\n    \"DataSourceConfig\",\n    \"DataSourceConfigLogs\",\n    \"TestingCriterion\",\n    \"TestingCriterionEvalGraderTextSimilarity\",\n    \"TestingCriterionEvalGraderPython\",\n    \"TestingCriterionEvalGraderScoreModel\",\n]\n\n\nclass DataSourceConfigLogs(BaseModel):\n    schema_: Dict[str, object] = FieldInfo(alias=\"schema\")\n    \"\"\"\n    The json schema for the run data source items. Learn how to build JSON schemas\n    [here](https://json-schema.org/).\n    \"\"\"\n\n    type: Literal[\"logs\"]\n    \"\"\"The type of data source. Always `logs`.\"\"\"\n\n    metadata: Optional[Metadata] = None\n    \"\"\"Set of 16 key-value pairs that can be attached to an object.\n\n    This can be useful for storing additional information about the object in a\n    structured format, and querying for objects via API or the dashboard.\n\n    Keys are strings with a maximum length of 64 characters. Values are strings with\n    a maximum length of 512 characters.\n    \"\"\"\n\n\nDataSourceConfig: TypeAlias = Annotated[\n    Union[EvalCustomDataSourceConfig, DataSourceConfigLogs, EvalStoredCompletionsDataSourceConfig],\n    PropertyInfo(discriminator=\"type\"),\n]\n\n\nclass TestingCriterionEvalGraderTextSimilarity(TextSimilarityGrader):\n    __test__ = False\n    pass_threshold: float\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderPython(PythonGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nclass TestingCriterionEvalGraderScoreModel(ScoreModelGrader):\n    __test__ = False\n    pass_threshold: Optional[float] = None\n    \"\"\"The threshold for the score.\"\"\"\n\n\nTestingCriterion: TypeAlias = Union[\n    LabelModelGrader,\n    StringCheckGrader,\n    TestingCriterionEvalGraderTextSimilarity,\n    TestingCriterionEvalGraderPython,\n    TestingCriterionEvalGraderScoreModel,\n]\n\n\nclass EvalCreateResponse",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_create_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 21,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 19,
          "position": 419
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/eval_update_response.py",
        "start": 20,
        "end": 84,
        "startLoc": {
          "line": 20,
          "column": 21,
          "position": 161
        },
        "endLoc": {
          "line": 84,
          "column": 19,
          "position": 419
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "to stream back partial progress.\n\n    If set, tokens will be sent as data-only\n    [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)\n    as they become available, with the stream terminated by a `data: [DONE]`\n    message.\n    [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).\n    \"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/completion_create_params.py",
        "start": 179,
        "end": 186,
        "startLoc": {
          "line": 179,
          "column": 2,
          "position": 533
        },
        "endLoc": {
          "line": 186,
          "column": 3,
          "position": 661
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/types/completion_create_params.py",
        "start": 167,
        "end": 179,
        "startLoc": {
          "line": 167,
          "column": 2,
          "position": 402
        },
        "endLoc": {
          "line": 179,
          "column": 8,
          "position": 530
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "):\n    def unwrap(\n        self,\n        payload: str | bytes,\n        headers: HeadersLike,\n        *,\n        secret: str | None = None,\n    ) -> UnwrapWebhookEvent:\n        \"\"\"Validates that the given payload was sent by OpenAI and parses the payload.\"\"\"\n        if secret is None:\n            secret = self._client.webhook_secret\n\n        self.verify_signature(payload=payload, headers=headers, secret=secret)\n\n        body",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 118,
        "end": 132,
        "startLoc": {
          "line": 118,
          "column": 17,
          "position": 786
        },
        "endLoc": {
          "line": 132,
          "column": 5,
          "position": 892
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 22,
        "end": 36,
        "startLoc": {
          "line": 22,
          "column": 16,
          "position": 127
        },
        "endLoc": {
          "line": 36,
          "column": 7,
          "position": 233
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "),\n            ),\n        )\n\n    def verify_signature(\n        self,\n        payload: str | bytes,\n        headers: HeadersLike,\n        *,\n        secret: str | None = None,\n        tolerance: int = 300,\n    ) -> None:\n        \"\"\"Validates whether or not the webhook payload was sent by OpenAI.\n\n        Args:\n            payload: The webhook payload\n            headers: The webhook headers\n            secret: The webhook secret (optional, will use client secret if not provided)\n            tolerance: Maximum age of the webhook in seconds (default: 300 = 5 minutes)\n        \"\"\"\n        if secret is None:\n            secret = self._client.webhook_secret\n\n        if secret is None:\n            raise ValueError(\n                \"The webhook secret must either be set using the env var, OPENAI_WEBHOOK_SECRET, \"\n                \"on the client class, OpenAI(webhook_secret='123'), or passed to this function\"\n            ) from",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 137,
        "end": 164,
        "startLoc": {
          "line": 137,
          "column": 5,
          "position": 945
        },
        "endLoc": {
          "line": 164,
          "column": 5,
          "position": 1073
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 40,
        "end": 69,
        "startLoc": {
          "line": 40,
          "column": 8,
          "position": 260
        },
        "endLoc": {
          "line": 69,
          "column": 17,
          "position": 390
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "signature_header = get_required_header(headers, \"webhook-signature\")\n        timestamp = get_required_header(headers, \"webhook-timestamp\")\n        webhook_id = get_required_header(headers, \"webhook-id\")\n\n        # Validate timestamp to prevent replay attacks\n        try:\n            timestamp_seconds = int(timestamp)\n        except ValueError:\n            raise InvalidWebhookSignatureError(\"Invalid webhook timestamp format\") from None\n\n        now = int(time.time())\n\n        if now - timestamp_seconds > tolerance:\n            raise InvalidWebhookSignatureError(\"Webhook timestamp is too old\") from None\n\n        if timestamp_seconds > now + tolerance:\n            raise InvalidWebhookSignatureError(\"Webhook timestamp is too new\") from None\n\n        # Extract signatures from v1,<base64> format\n        # The signature header can have multiple values, separated by spaces.\n        # Each value is in the format v1,<base64>. We should accept if any match.\n        signatures: list[str] = []\n        for part in signature_header.split():\n            if part.startswith(\"v1,\"):\n                signatures.append(part[3:])\n            else:\n                signatures.append(part)\n\n        # Decode the secret if it starts with whsec_\n        if secret.startswith(\"whsec_\"):\n            decoded_secret = base64.b64decode(secret[6:])\n        else:\n            decoded_secret = secret.encode()\n\n        body = payload.decode(\"utf-8\") if isinstance(payload, bytes) else payload\n\n        # Prepare the signed payload (OpenAI uses webhookId.timestamp.payload format)\n        signed_payload = f\"{webhook_id}.{timestamp}.{body}\"\n        expected_signature = base64.b64encode(\n            hmac.new(decoded_secret, signed_payload.encode(), hashlib.sha256).digest()\n        ).decode()\n\n        # Accept if any signature matches\n        if not any(hmac.compare_digest(expected_signature, sig) for sig in signatures):\n            raise InvalidWebhookSignatureError(\"The given webhook signature does not match the expected signature\")",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 166,
        "end": 210,
        "startLoc": {
          "line": 166,
          "column": 9,
          "position": 1079
        },
        "endLoc": {
          "line": 210,
          "column": 2,
          "position": 1458
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/webhooks.py",
        "start": 69,
        "end": 115,
        "startLoc": {
          "line": 69,
          "column": 9,
          "position": 390
        },
        "endLoc": {
          "line": 115,
          "column": 2,
          "position": 773
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ",\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncConversationCursorPage[Video",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 229,
        "end": 244,
        "startLoc": {
          "line": 229,
          "column": 6,
          "position": 1564
        },
        "endLoc": {
          "line": 244,
          "column": 6,
          "position": 1719
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/containers.py",
        "start": 134,
        "end": 191,
        "startLoc": {
          "line": 134,
          "column": 26,
          "position": 707
        },
        "endLoc": {
          "line": 191,
          "column": 5,
          "position": 1255
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "Create a video\n\n        Args:\n          prompt: Text prompt that describes the video to generate.\n\n          input_reference: Optional image reference that guides generation.\n\n          model: The video generation model to use. Defaults to `sora-2`.\n\n          seconds: Clip duration in seconds. Defaults to 4 seconds.\n\n          size: Output resolution formatted as width x height. Defaults to 720x1280.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        body = deepcopy_minimal(\n            {\n                \"prompt\": prompt,\n                \"input_reference\": input_reference,\n                \"model\": model,\n                \"seconds\": seconds,\n                \"size\": size,\n            }\n        )\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"input_reference\"]])\n        if files:\n            # It should be noted that the actual Content-Type header that will be\n            # sent to the server will contain a `boundary` parameter, e.g.\n            # multipart/form-data; boundary=---abc--\n            extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 433,
        "end": 469,
        "startLoc": {
          "line": 433,
          "column": 9,
          "position": 2588
        },
        "endLoc": {
          "line": 469,
          "column": 6,
          "position": 2921
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 80,
        "end": 116,
        "startLoc": {
          "line": 80,
          "column": 9,
          "position": 428
        },
        "endLoc": {
          "line": 116,
          "column": 5,
          "position": 761
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "def create_and_poll(\n        self,\n        *,\n        prompt: str,\n        input_reference: FileTypes | Omit = omit,\n        model: VideoModel | Omit = omit,\n        seconds: VideoSeconds | Omit = omit,\n        size: VideoSize | Omit = omit,\n        poll_interval_ms: int | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Video:\n        \"\"\"Create a video and wait for it to be processed.\"\"\"\n        video = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 479,
        "end": 496,
        "startLoc": {
          "line": 479,
          "column": 2,
          "position": 2997
        },
        "endLoc": {
          "line": 496,
          "column": 6,
          "position": 3185
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 126,
        "end": 143,
        "startLoc": {
          "line": 126,
          "column": 5,
          "position": 831
        },
        "endLoc": {
          "line": 143,
          "column": 5,
          "position": 1019
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "self.with_raw_response.retrieve(\n                video_id,\n                extra_headers=headers,\n            )\n\n            video = response.parse()\n            if video.status == \"in_progress\" or video.status == \"queued\":\n                if not is_given(poll_interval_ms):\n                    from_header = response.headers.get(\"openai-poll-after-ms\")\n                    if from_header is not None:\n                        poll_interval_ms = int(from_header)\n                    else:\n                        poll_interval_ms = 1000\n\n                await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 529,
        "end": 543,
        "startLoc": {
          "line": 529,
          "column": 2,
          "position": 3383
        },
        "endLoc": {
          "line": 543,
          "column": 6,
          "position": 3497
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 176,
        "end": 190,
        "startLoc": {
          "line": 176,
          "column": 2,
          "position": 1209
        },
        "endLoc": {
          "line": 190,
          "column": 5,
          "position": 1323
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve(\n        self,\n        video_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Video:\n        \"\"\"\n        Retrieve a video\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not video_id:\n            raise ValueError(f\"Expected a non-empty value for `video_id` but received {video_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 552,
        "end": 577,
        "startLoc": {
          "line": 552,
          "column": 2,
          "position": 3570
        },
        "endLoc": {
          "line": 577,
          "column": 6,
          "position": 3698
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 199,
        "end": 224,
        "startLoc": {
          "line": 199,
          "column": 5,
          "position": 1392
        },
        "endLoc": {
          "line": 224,
          "column": 5,
          "position": 1520
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._get(\n            f\"/videos/{video_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=Video,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[Video",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 577,
        "end": 597,
        "startLoc": {
          "line": 577,
          "column": 2,
          "position": 3700
        },
        "endLoc": {
          "line": 597,
          "column": 6,
          "position": 3899
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 224,
        "end": 273,
        "startLoc": {
          "line": 224,
          "column": 2,
          "position": 1520
        },
        "endLoc": {
          "line": 273,
          "column": 8,
          "position": 1803
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def delete(\n        self,\n        video_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> VideoDeleteResponse:\n        \"\"\"\n        Delete a video\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not video_id:\n            raise ValueError(f\"Expected a non-empty value for `video_id` but received {video_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 637,
        "end": 662,
        "startLoc": {
          "line": 637,
          "column": 2,
          "position": 4024
        },
        "endLoc": {
          "line": 662,
          "column": 6,
          "position": 4152
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 284,
        "end": 309,
        "startLoc": {
          "line": 284,
          "column": 5,
          "position": 1836
        },
        "endLoc": {
          "line": 309,
          "column": 5,
          "position": 1964
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "def download_content(\n        self,\n        video_id: str,\n        *,\n        variant: Literal[\"video\", \"thumbnail\", \"spritesheet\"] | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> _legacy_response.HttpxBinaryResponseContent:\n        \"\"\"Download video content\n\n        Args:\n          variant: Which downloadable asset to return.\n\n        Defaults to the MP4 video.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not video_id:\n            raise ValueError(f\"Expected a non-empty value for `video_id` but received {video_id!r}\")\n        extra_headers = {\"Accept\": \"application/binary\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 670,
        "end": 700,
        "startLoc": {
          "line": 670,
          "column": 2,
          "position": 4207
        },
        "endLoc": {
          "line": 700,
          "column": 6,
          "position": 4384
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 317,
        "end": 347,
        "startLoc": {
          "line": 317,
          "column": 5,
          "position": 2015
        },
        "endLoc": {
          "line": 347,
          "column": 5,
          "position": 2192
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def remix(\n        self,\n        video_id: str,\n        *,\n        prompt: str,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Video:\n        \"\"\"\n        Create a video remix\n\n        Args:\n          prompt: Updated text prompt that directs the remix generation.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not video_id:\n            raise ValueError(f\"Expected a non-empty value for `video_id` but received {video_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 714,
        "end": 742,
        "startLoc": {
          "line": 714,
          "column": 2,
          "position": 4470
        },
        "endLoc": {
          "line": 742,
          "column": 6,
          "position": 4605
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 359,
        "end": 387,
        "startLoc": {
          "line": 359,
          "column": 5,
          "position": 2268
        },
        "endLoc": {
          "line": 387,
          "column": 5,
          "position": 2403
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "Classifies if text and/or image inputs are potentially harmful.\n\n        Learn more in\n        the [moderation guide](https://platform.openai.com/docs/guides/moderation).\n\n        Args:\n          input: Input (or inputs) to classify. Can be a single string, an array of strings, or\n              an array of multi-modal input objects similar to other models.\n\n          model: The content moderation model you would like to use. Learn more in\n              [the moderation guide](https://platform.openai.com/docs/guides/moderation), and\n              learn about available models\n              [here](https://platform.openai.com/docs/models#moderation).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/moderations.py",
        "start": 126,
        "end": 148,
        "startLoc": {
          "line": 126,
          "column": 12,
          "position": 794
        },
        "endLoc": {
          "line": 148,
          "column": 6,
          "position": 1087
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/moderations.py",
        "start": 56,
        "end": 78,
        "startLoc": {
          "line": 56,
          "column": 12,
          "position": 301
        },
        "endLoc": {
          "line": 78,
          "column": 5,
          "position": 594
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "Retrieves a model instance, providing basic information about the model such as\n        the owner and permissioning.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not model:\n            raise ValueError(f\"Expected a non-empty value for `model` but received {model!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 168,
        "end": 182,
        "startLoc": {
          "line": 168,
          "column": 9,
          "position": 921
        },
        "endLoc": {
          "line": 182,
          "column": 6,
          "position": 1061
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 55,
        "end": 69,
        "startLoc": {
          "line": 55,
          "column": 9,
          "position": 270
        },
        "endLoc": {
          "line": 69,
          "column": 5,
          "position": 410
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "self._get(\n            f\"/models/{model}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=Model,\n        )\n\n    def list(\n        self,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 182,
        "end": 199,
        "startLoc": {
          "line": 182,
          "column": 2,
          "position": 1063
        },
        "endLoc": {
          "line": 199,
          "column": 15,
          "position": 1209
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 69,
        "end": 86,
        "startLoc": {
          "line": 69,
          "column": 2,
          "position": 410
        },
        "endLoc": {
          "line": 86,
          "column": 9,
          "position": 556
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "def delete(\n        self,\n        model: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> ModelDeleted:\n        \"\"\"Delete a fine-tuned model.\n\n        You must have the Owner role in your organization to\n        delete a model.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not model:\n            raise ValueError(f\"Expected a non-empty value for `model` but received {model!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 213,
        "end": 240,
        "startLoc": {
          "line": 213,
          "column": 2,
          "position": 1288
        },
        "endLoc": {
          "line": 240,
          "column": 6,
          "position": 1416
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/models.py",
        "start": 100,
        "end": 127,
        "startLoc": {
          "line": 100,
          "column": 5,
          "position": 627
        },
        "endLoc": {
          "line": 127,
          "column": 5,
          "position": 755
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "from .._types import Body, Omit, Query, Headers, NotGiven, FileTypes, omit, not_given\nfrom .._utils import extract_files, maybe_transform, deepcopy_minimal, async_maybe_transform\nfrom .._compat import cached_property\nfrom .._resource import SyncAPIResource, AsyncAPIResource\nfrom .._response import (\n    StreamedBinaryAPIResponse,\n    AsyncStreamedBinaryAPIResponse,\n    to_streamed_response_wrapper,\n    async_to_streamed_response_wrapper,\n    to_custom_streamed_response_wrapper,\n    async_to_custom_streamed_response_wrapper,\n)\nfrom ..pagination import SyncCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 14,
        "end": 26,
        "startLoc": {
          "line": 14,
          "column": 1,
          "position": 70
        },
        "endLoc": {
          "line": 26,
          "column": 15,
          "position": 187
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/videos.py",
        "start": 20,
        "end": 32,
        "startLoc": {
          "line": 20,
          "column": 1,
          "position": 92
        },
        "endLoc": {
          "line": 32,
          "column": 27,
          "position": 209
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "__all__ = [\"Files\", \"AsyncFiles\"]\n\n\nclass Files(SyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> FilesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return FilesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> FilesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return FilesWithStreamingResponse(self)\n\n    def create(\n        self,\n        *,\n        file: FileTypes,\n        purpose: FilePurpose,\n        expires_after: file_create_params.ExpiresAfter | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FileObject:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 32,
        "end": 68,
        "startLoc": {
          "line": 32,
          "column": 1,
          "position": 242
        },
        "endLoc": {
          "line": 68,
          "column": 12,
          "position": 367
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 25,
        "end": 71,
        "startLoc": {
          "line": 25,
          "column": 1,
          "position": 267
        },
        "endLoc": {
          "line": 71,
          "column": 12,
          "position": 431
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "expires_after: The expiration policy for a file. By default, files with `purpose=batch` expire\n              after 30 days and all other files are persisted until they are manually deleted.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        body",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 99,
        "end": 110,
        "startLoc": {
          "line": 99,
          "column": 11,
          "position": 890
        },
        "endLoc": {
          "line": 110,
          "column": 5,
          "position": 1033
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/uploads/uploads.py",
        "start": 217,
        "end": 228,
        "startLoc": {
          "line": 217,
          "column": 11,
          "position": 1078
        },
        "endLoc": {
          "line": 228,
          "column": 7,
          "position": 1221
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "class AsyncFiles(AsyncAPIResource):\n    @cached_property\n    def with_raw_response(self) -> AsyncFilesWithRawResponse:\n        \"\"\"\n        This property can be used as a prefix for any HTTP method call to return\n        the raw response object instead of the parsed content.\n\n        For more information, see https://www.github.com/openai/openai-python#accessing-raw-response-data-eg-headers\n        \"\"\"\n        return AsyncFilesWithRawResponse(self)\n\n    @cached_property\n    def with_streaming_response(self) -> AsyncFilesWithStreamingResponse:\n        \"\"\"\n        An alternative to `.with_raw_response` that doesn't eagerly read the response body.\n\n        For more information, see https://www.github.com/openai/openai-python#with_streaming_response\n        \"\"\"\n        return AsyncFilesWithStreamingResponse(self)\n\n    async def create(\n        self,\n        *,\n        file: FileTypes,\n        purpose: FilePurpose,\n        expires_after: file_create_params.ExpiresAfter | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FileObject:\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 351,
        "end": 384,
        "startLoc": {
          "line": 351,
          "column": 1,
          "position": 2415
        },
        "endLoc": {
          "line": 384,
          "column": 12,
          "position": 2527
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/vector_stores/files.py",
        "start": 436,
        "end": 284,
        "startLoc": {
          "line": 436,
          "column": 1,
          "position": 3012
        },
        "endLoc": {
          "line": 284,
          "column": 12,
          "position": 1664
        }
      }
    },
    {
      "format": "python",
      "lines": 55,
      "fragment": "Upload a file that can be used across various endpoints.\n\n        Individual files can be\n        up to 512 MB, and the size of all files uploaded by one organization can be up\n        to 1 TB.\n\n        - The Assistants API supports files up to 2 million tokens and of specific file\n          types. See the\n          [Assistants Tools guide](https://platform.openai.com/docs/assistants/tools)\n          for details.\n        - The Fine-tuning API only supports `.jsonl` files. The input also has certain\n          required formats for fine-tuning\n          [chat](https://platform.openai.com/docs/api-reference/fine-tuning/chat-input)\n          or\n          [completions](https://platform.openai.com/docs/api-reference/fine-tuning/completions-input)\n          models.\n        - The Batch API only supports `.jsonl` files up to 200 MB in size. The input\n          also has a specific required\n          [format](https://platform.openai.com/docs/api-reference/batch/request-input).\n\n        Please [contact us](https://help.openai.com/) if you need to increase these\n        storage limits.\n\n        Args:\n          file: The File object (not file name) to be uploaded.\n\n          purpose: The intended purpose of the uploaded file. One of: - `assistants`: Used in the\n              Assistants API - `batch`: Used in the Batch API - `fine-tune`: Used for\n              fine-tuning - `vision`: Images used for vision fine-tuning - `user_data`:\n              Flexible file type for any purpose - `evals`: Used for eval data sets\n\n          expires_after: The expiration policy for a file. By default, files with `purpose=batch` expire\n              after 30 days and all other files are persisted until they are manually deleted.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        body = deepcopy_minimal(\n            {\n                \"file\": file,\n                \"purpose\": purpose,\n                \"expires_after\": expires_after,\n            }\n        )\n        files = extract_files(cast(Mapping[str, object], body), paths=[[\"file\"]])\n        # It should be noted that the actual Content-Type header that will be\n        # sent to the server will contain a `boundary` parameter, e.g.\n        # multipart/form-data; boundary=---abc--\n        extra_headers = {\"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 384,
        "end": 438,
        "startLoc": {
          "line": 384,
          "column": 12,
          "position": 2528
        },
        "endLoc": {
          "line": 438,
          "column": 6,
          "position": 3296
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 68,
        "end": 122,
        "startLoc": {
          "line": 68,
          "column": 12,
          "position": 368
        },
        "endLoc": {
          "line": 122,
          "column": 5,
          "position": 1136
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve(\n        self,\n        file_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FileObject:\n        \"\"\"\n        Returns information about a specific file.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 448,
        "end": 473,
        "startLoc": {
          "line": 448,
          "column": 2,
          "position": 3372
        },
        "endLoc": {
          "line": 473,
          "column": 6,
          "position": 3500
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 132,
        "end": 157,
        "startLoc": {
          "line": 132,
          "column": 5,
          "position": 1206
        },
        "endLoc": {
          "line": 157,
          "column": 5,
          "position": 1334
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "self._get(\n            f\"/files/{file_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=FileObject,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        order: Literal[\"asc\", \"desc\"] | Omit = omit,\n        purpose: str | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 473,
        "end": 494,
        "startLoc": {
          "line": 473,
          "column": 2,
          "position": 3502
        },
        "endLoc": {
          "line": 494,
          "column": 15,
          "position": 3714
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 157,
        "end": 178,
        "startLoc": {
          "line": 157,
          "column": 2,
          "position": 1334
        },
        "endLoc": {
          "line": 178,
          "column": 15,
          "position": 1546
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[FileObject],\n            options=make_request_options(\n                extra_headers=extra_headers,\n                extra_query=extra_query,\n                extra_body=extra_body,\n                timeout=timeout,\n                query=maybe_transform(\n                    {\n                        \"after\": after,\n                        \"limit\": limit,\n                        \"order\": order,\n                        \"purpose\": purpose,\n                    },\n                    file_list_params.FileListParams,\n                ),\n            ),\n            model=FileObject,\n        )\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 523,
        "end": 542,
        "startLoc": {
          "line": 523,
          "column": 16,
          "position": 3745
        },
        "endLoc": {
          "line": 542,
          "column": 6,
          "position": 3846
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 207,
        "end": 226,
        "startLoc": {
          "line": 207,
          "column": 15,
          "position": 1571
        },
        "endLoc": {
          "line": 226,
          "column": 4,
          "position": 1672
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def delete(\n        self,\n        file_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> FileDeleted:\n        \"\"\"\n        Delete a file and remove it from all vector stores.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 542,
        "end": 567,
        "startLoc": {
          "line": 542,
          "column": 2,
          "position": 3848
        },
        "endLoc": {
          "line": 567,
          "column": 6,
          "position": 3976
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 226,
        "end": 251,
        "startLoc": {
          "line": 226,
          "column": 5,
          "position": 1672
        },
        "endLoc": {
          "line": 251,
          "column": 5,
          "position": 1800
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "def content(\n        self,\n        file_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> _legacy_response.HttpxBinaryResponseContent:\n        \"\"\"\n        Returns the contents of the specified file.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        extra_headers = {\"Accept\": \"application/binary\", **(extra_headers or {})}\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 575,
        "end": 601,
        "startLoc": {
          "line": 575,
          "column": 2,
          "position": 4031
        },
        "endLoc": {
          "line": 601,
          "column": 6,
          "position": 4184
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 259,
        "end": 285,
        "startLoc": {
          "line": 259,
          "column": 5,
          "position": 1851
        },
        "endLoc": {
          "line": 285,
          "column": 5,
          "position": 2004
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve_content(\n        self,\n        file_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> str:\n        \"\"\"\n        Returns the contents of the specified file.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not file_id:\n            raise ValueError(f\"Expected a non-empty value for `file_id` but received {file_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 610,
        "end": 635,
        "startLoc": {
          "line": 610,
          "column": 2,
          "position": 4249
        },
        "endLoc": {
          "line": 635,
          "column": 6,
          "position": 4377
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 294,
        "end": 319,
        "startLoc": {
          "line": 294,
          "column": 5,
          "position": 2065
        },
        "endLoc": {
          "line": 319,
          "column": 5,
          "position": 2193
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "class FilesWithRawResponse:\n    def __init__(self, files: Files) -> None:\n        self._files = files\n\n        self.create = _legacy_response.to_raw_response_wrapper(\n            files.create,\n        )\n        self.retrieve = _legacy_response.to_raw_response_wrapper(\n            files.retrieve,\n        )\n        self.list = _legacy_response.to_raw_response_wrapper(\n            files.list,\n        )\n        self.delete = _legacy_response.to_raw_response_wrapper(\n            files.delete,\n        )\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 667,
        "end": 683,
        "startLoc": {
          "line": 667,
          "column": 1,
          "position": 4609
        },
        "endLoc": {
          "line": 683,
          "column": 5,
          "position": 4729
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 460,
        "end": 477,
        "startLoc": {
          "line": 460,
          "column": 1,
          "position": 2775
        },
        "endLoc": {
          "line": 477,
          "column": 17,
          "position": 2896
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n\n\nclass AsyncFilesWithRawResponse:\n    def __init__(self, files: AsyncFiles) -> None:\n        self._files = files\n\n        self.create = _legacy_response.async_to_raw_response_wrapper(\n            files.create,\n        )\n        self.retrieve = _legacy_response.async_to_raw_response_wrapper(\n            files.retrieve,\n        )\n        self.list = _legacy_response.async_to_raw_response_wrapper(\n            files.list,\n        )\n        self.delete = _legacy_response.async_to_raw_response_wrapper(\n            files.delete,\n        )\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 690,
        "end": 709,
        "startLoc": {
          "line": 690,
          "column": 9,
          "position": 4778
        },
        "endLoc": {
          "line": 709,
          "column": 5,
          "position": 4902
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 479,
        "end": 499,
        "startLoc": {
          "line": 479,
          "column": 8,
          "position": 2922
        },
        "endLoc": {
          "line": 499,
          "column": 17,
          "position": 3047
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n\n\nclass FilesWithStreamingResponse:\n    def __init__(self, files: Files) -> None:\n        self._files = files\n\n        self.create = to_streamed_response_wrapper(\n            files.create,\n        )\n        self.retrieve = to_streamed_response_wrapper(\n            files.retrieve,\n        )\n        self.list = to_streamed_response_wrapper(\n            files.list,\n        )\n        self.delete = to_streamed_response_wrapper(\n            files.delete,\n        )\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 716,
        "end": 735,
        "startLoc": {
          "line": 716,
          "column": 9,
          "position": 4951
        },
        "endLoc": {
          "line": 735,
          "column": 5,
          "position": 5067
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 501,
        "end": 521,
        "startLoc": {
          "line": 501,
          "column": 8,
          "position": 3073
        },
        "endLoc": {
          "line": 521,
          "column": 17,
          "position": 3190
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n\n\nclass AsyncFilesWithStreamingResponse:\n    def __init__(self, files: AsyncFiles) -> None:\n        self._files = files\n\n        self.create = async_to_streamed_response_wrapper(\n            files.create,\n        )\n        self.retrieve = async_to_streamed_response_wrapper(\n            files.retrieve,\n        )\n        self.list = async_to_streamed_response_wrapper(\n            files.list,\n        )\n        self.delete = async_to_streamed_response_wrapper(\n            files.delete,\n        )\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/files.py",
        "start": 743,
        "end": 762,
        "startLoc": {
          "line": 743,
          "column": 9,
          "position": 5116
        },
        "endLoc": {
          "line": 762,
          "column": 5,
          "position": 5232
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/containers/files/files.py",
        "start": 523,
        "end": 543,
        "startLoc": {
          "line": 523,
          "column": 8,
          "position": 3216
        },
        "endLoc": {
          "line": 543,
          "column": 17,
          "position": 3333
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "Creates an embedding vector representing the input text.\n\n        Args:\n          input: Input text to embed, encoded as a string or array of tokens. To embed multiple\n              inputs in a single request, pass an array of strings or array of token arrays.\n              The input must not exceed the max input tokens for the model (8192 tokens for\n              all embedding models), cannot be an empty string, and any array must be 2048\n              dimensions or less.\n              [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)\n              for counting tokens. In addition to the per-input token limit, all embedding\n              models enforce a maximum of 300,000 tokens summed across all inputs in a single\n              request.\n\n          model: ID of the model to use. You can use the\n              [List models](https://platform.openai.com/docs/api-reference/models/list) API to\n              see all of your available models, or see our\n              [Model overview](https://platform.openai.com/docs/models) for descriptions of\n              them.\n\n          dimensions: The number of dimensions the resulting output embeddings should have. Only\n              supported in `text-embedding-3` and later models.\n\n          encoding_format: The format to return the embeddings in. Can be either `float` or\n              [`base64`](https://pypi.org/project/pybase64/).\n\n          user: A unique identifier representing your end-user, which can help OpenAI to monitor\n              and detect abuse.\n              [Learn more](https://platform.openai.com/docs/guides/safety-best-practices#end-user-ids).\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        params = {\n            \"input\": input,\n            \"model\": model,\n            \"user\": user,\n            \"dimensions\": dimensions,\n            \"encoding_format\": encoding_format,\n        }\n        if not is_given(encoding_format):\n            params[\"encoding_format\"] = \"base64\"\n\n        def parser(obj: CreateEmbeddingResponse) -> CreateEmbeddingResponse:\n            if is_given(encoding_format):\n                # don't modify the response object if a user explicitly asked for a format\n                return obj\n\n            if not obj.data:\n                raise ValueError(\"No embedding data received\")\n\n            for embedding in obj.data:\n                data = cast(object, embedding.embedding)\n                if not isinstance(data, str):\n                    continue\n                if not has_numpy():\n                    # use array for base64 optimisation\n                    embedding.embedding = array.array(\"f\", base64.b64decode(data)).tolist()\n                else:\n                    embedding.embedding = np.frombuffer(  # type: ignore[no-untyped-call]\n                        base64.b64decode(data), dtype=\"float32\"\n                    ).tolist()\n\n            return obj\n\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/embeddings.py",
        "start": 182,
        "end": 251,
        "startLoc": {
          "line": 182,
          "column": 9,
          "position": 1372
        },
        "endLoc": {
          "line": 251,
          "column": 6,
          "position": 2228
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/embeddings.py",
        "start": 63,
        "end": 132,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 327
        },
        "endLoc": {
          "line": 132,
          "column": 5,
          "position": 1183
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ".\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          output_expires_after",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 80,
        "end": 89,
        "startLoc": {
          "line": 80,
          "column": 5,
          "position": 673
        },
        "endLoc": {
          "line": 89,
          "column": 21,
          "position": 806
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 115,
        "end": 96,
        "startLoc": {
          "line": 115,
          "column": 4,
          "position": 1001
        },
        "endLoc": {
          "line": 96,
          "column": 8,
          "position": 781
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> SyncCursorPage[Batch",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 152,
        "end": 162,
        "startLoc": {
          "line": 152,
          "column": 5,
          "position": 1221
        },
        "endLoc": {
          "line": 162,
          "column": 6,
          "position": 1341
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/fine_tuning/jobs/jobs.py",
        "start": 302,
        "end": 312,
        "startLoc": {
          "line": 302,
          "column": 4,
          "position": 2274
        },
        "endLoc": {
          "line": 312,
          "column": 19,
          "position": 2394
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": "Creates and executes a batch from an uploaded file of requests\n\n        Args:\n          completion_window: The time frame within which the batch should be processed. Currently only `24h`\n              is supported.\n\n          endpoint: The endpoint to be used for all requests in the batch. Currently\n              `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions`\n              are supported. Note that `/v1/embeddings` batches are also restricted to a\n              maximum of 50,000 embedding inputs across all requests in the batch.\n\n          input_file_id: The ID of an uploaded file that contains requests for the new batch.\n\n              See [upload file](https://platform.openai.com/docs/api-reference/files/create)\n              for how to upload a file.\n\n              Your input file must be formatted as a\n              [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\n              and must be uploaded with the purpose `batch`. The file can contain up to 50,000\n              requests, and can be up to 200 MB in size.\n\n          metadata: Set of 16 key-value pairs that can be attached to an object. This can be useful\n              for storing additional information about the object in a structured format, and\n              querying for objects via API or the dashboard.\n\n              Keys are strings with a maximum length of 64 characters. Values are strings with\n              a maximum length of 512 characters.\n\n          output_expires_after: The expiration policy for the output and/or error file that are generated for a\n              batch.\n\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 276,
        "end": 315,
        "startLoc": {
          "line": 276,
          "column": 9,
          "position": 1745
        },
        "endLoc": {
          "line": 315,
          "column": 6,
          "position": 2358
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 61,
        "end": 100,
        "startLoc": {
          "line": 61,
          "column": 9,
          "position": 314
        },
        "endLoc": {
          "line": 100,
          "column": 5,
          "position": 927
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "def retrieve(\n        self,\n        batch_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Batch:\n        \"\"\"\n        Retrieves a batch.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not batch_id:\n            raise ValueError(f\"Expected a non-empty value for `batch_id` but received {batch_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 333,
        "end": 358,
        "startLoc": {
          "line": 333,
          "column": 2,
          "position": 2472
        },
        "endLoc": {
          "line": 358,
          "column": 6,
          "position": 2600
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 118,
        "end": 143,
        "startLoc": {
          "line": 118,
          "column": 5,
          "position": 1035
        },
        "endLoc": {
          "line": 143,
          "column": 5,
          "position": 1163
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "self._get(\n            f\"/batches/{batch_id}\",\n            options=make_request_options(\n                extra_headers=extra_headers, extra_query=extra_query, extra_body=extra_body, timeout=timeout\n            ),\n            cast_to=Batch,\n        )\n\n    def list(\n        self,\n        *,\n        after: str | Omit = omit,\n        limit: int | Omit = omit,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> AsyncPaginator[Batch",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 358,
        "end": 377,
        "startLoc": {
          "line": 358,
          "column": 2,
          "position": 2602
        },
        "endLoc": {
          "line": 377,
          "column": 6,
          "position": 2780
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 143,
        "end": 692,
        "startLoc": {
          "line": 143,
          "column": 2,
          "position": 1163
        },
        "endLoc": {
          "line": 692,
          "column": 19,
          "position": 4991
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "def cancel(\n        self,\n        batch_id: str,\n        *,\n        # Use the following arguments if you need to pass additional parameters to the API that aren't available via kwargs.\n        # The extra values given here take precedence over values defined on the client or passed to this method.\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> Batch:\n        \"\"\"Cancels an in-progress batch.\n\n        The batch will be in status `cancelling` for up to\n        10 minutes, before changing to `cancelled`, where it will have partial results\n        (if any) available in the output file.\n\n        Args:\n          extra_headers: Send extra headers\n\n          extra_query: Add additional query parameters to the request\n\n          extra_body: Add additional JSON properties to the request\n\n          timeout: Override the client-level default timeout for this request, in seconds\n        \"\"\"\n        if not batch_id:\n            raise ValueError(f\"Expected a non-empty value for `batch_id` but received {batch_id!r}\")\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 418,
        "end": 446,
        "startLoc": {
          "line": 418,
          "column": 2,
          "position": 2898
        },
        "endLoc": {
          "line": 446,
          "column": 6,
          "position": 3026
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/resources/batches.py",
        "start": 203,
        "end": 231,
        "startLoc": {
          "line": 203,
          "column": 5,
          "position": 1451
        },
        "endLoc": {
          "line": 231,
          "column": 5,
          "position": 1579
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ",\n        azure_deployment: str | None = None,\n        api_version: str | None = None,\n        api_key: str | Callable[[], str] | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AzureADTokenProvider | None = None,\n        organization: str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.Client | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None: ...\n\n    @overload\n    def __init__(\n        self,\n        *,\n        base_url",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 114,
        "end": 135,
        "startLoc": {
          "line": 114,
          "column": 2,
          "position": 999
        },
        "endLoc": {
          "line": 135,
          "column": 9,
          "position": 1274
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 94,
        "end": 115,
        "startLoc": {
          "line": 94,
          "column": 4,
          "position": 727
        },
        "endLoc": {
          "line": 115,
          "column": 17,
          "position": 1002
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ",\n        api_version: str | None = None,\n        api_key: str | Callable[[], str] | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AzureADTokenProvider | None = None,\n        organization: str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.Client | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None: ...\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 135,
        "end": 151,
        "startLoc": {
          "line": 135,
          "column": 4,
          "position": 1278
        },
        "endLoc": {
          "line": 151,
          "column": 4,
          "position": 1521
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 95,
        "end": 111,
        "startLoc": {
          "line": 95,
          "column": 5,
          "position": 742
        },
        "endLoc": {
          "line": 111,
          "column": 10,
          "position": 985
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "| None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.Client | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None:\n        \"\"\"Construct a new synchronous azure openai client instance.\n\n        This automatically infers the following arguments from their corresponding environment variables if they are not provided:\n        - `api_key` from `AZURE_OPENAI_API_KEY`\n        - `organization` from `OPENAI_ORG_ID`\n        - `project` from `OPENAI_PROJECT_ID`\n        - `azure_ad_token` from `AZURE_OPENAI_AD_TOKEN`\n        - `api_version` from `OPENAI_API_VERSION`\n        - `azure_endpoint` from `AZURE_OPENAI_ENDPOINT`\n\n        Args:\n            azure_endpoint: Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n\n            azure_ad_token: Your Azure Active Directory token, https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id\n\n            azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.\n\n            azure_deployment: A model deployment, if given with `azure_endpoint`, sets the base client URL to include `/deployments/{azure_deployment}`.\n                Not supported with Assistants APIs.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 164,
        "end": 191,
        "startLoc": {
          "line": 164,
          "column": 2,
          "position": 1707
        },
        "endLoc": {
          "line": 191,
          "column": 12,
          "position": 1830
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 102,
        "end": 109,
        "startLoc": {
          "line": 102,
          "column": 2,
          "position": 857
        },
        "endLoc": {
          "line": 109,
          "column": 2,
          "position": 979
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ": str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.AsyncClient",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 379,
        "end": 386,
        "startLoc": {
          "line": 379,
          "column": 8,
          "position": 3532
        },
        "endLoc": {
          "line": 386,
          "column": 12,
          "position": 3663
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 100,
        "end": 107,
        "startLoc": {
          "line": 100,
          "column": 13,
          "position": 817
        },
        "endLoc": {
          "line": 107,
          "column": 7,
          "position": 948
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": ",\n        azure_deployment: str | None = None,\n        api_version: str | None = None,\n        api_key: str | Callable[[], Awaitable[str]] | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AsyncAzureADTokenProvider | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.AsyncClient | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None: ...\n\n    @overload\n    def __init__(\n        self,\n        *,\n        base_url",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 393,
        "end": 415,
        "startLoc": {
          "line": 393,
          "column": 2,
          "position": 3714
        },
        "endLoc": {
          "line": 415,
          "column": 9,
          "position": 4007
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 372,
        "end": 394,
        "startLoc": {
          "line": 372,
          "column": 4,
          "position": 3424
        },
        "endLoc": {
          "line": 394,
          "column": 17,
          "position": 3717
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ",\n        api_version: str | None = None,\n        api_key: str | Callable[[], Awaitable[str]] | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AsyncAzureADTokenProvider | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.AsyncClient | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None: ...\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 415,
        "end": 432,
        "startLoc": {
          "line": 415,
          "column": 4,
          "position": 4011
        },
        "endLoc": {
          "line": 432,
          "column": 4,
          "position": 4272
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 373,
        "end": 390,
        "startLoc": {
          "line": 373,
          "column": 5,
          "position": 3439
        },
        "endLoc": {
          "line": 390,
          "column": 10,
          "position": 3700
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ",\n        azure_deployment: str | None = None,\n        api_version: str | None = None,\n        api_key: str | Callable[[], Awaitable[str]] | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AsyncAzureADTokenProvider | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        webhook_secret: str | None = None,\n        base_url",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 435,
        "end": 444,
        "startLoc": {
          "line": 435,
          "column": 5,
          "position": 4298
        },
        "endLoc": {
          "line": 444,
          "column": 9,
          "position": 4435
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 372,
        "end": 381,
        "startLoc": {
          "line": 372,
          "column": 4,
          "position": 3424
        },
        "endLoc": {
          "line": 381,
          "column": 19,
          "position": 3561
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": ": str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        timeout: float | Timeout | None | NotGiven = NOT_GIVEN,\n        max_retries: int = DEFAULT_MAX_RETRIES,\n        default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        http_client: httpx.AsyncClient | None = None,\n        _strict_response_validation: bool = False,\n    ) -> None:\n        \"\"\"Construct a new asynchronous azure openai client instance.\n\n        This automatically infers the following arguments from their corresponding environment variables if they are not provided:\n        - `api_key` from `AZURE_OPENAI_API_KEY`\n        - `organization` from `OPENAI_ORG_ID`\n        - `project` from `OPENAI_PROJECT_ID`\n        - `azure_ad_token` from `AZURE_OPENAI_AD_TOKEN`\n        - `api_version` from `OPENAI_API_VERSION`\n        - `azure_endpoint` from `AZURE_OPENAI_ENDPOINT`\n\n        Args:\n            azure_endpoint: Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\n\n            azure_ad_token: Your Azure Active Directory token, https://www.microsoft.com/en-us/security/business/identity-access/microsoft-entra-id\n\n            azure_ad_token_provider: A function that returns an Azure Active Directory token, will be invoked on every request.\n\n            azure_deployment: A model deployment, if given with `azure_endpoint`, sets the base client URL to include `/deployments/{azure_deployment}`.\n                Not supported with Assistants APIs.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 444,
        "end": 472,
        "startLoc": {
          "line": 444,
          "column": 9,
          "position": 4436
        },
        "endLoc": {
          "line": 472,
          "column": 12,
          "position": 4584
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 101,
        "end": 388,
        "startLoc": {
          "line": 101,
          "column": 15,
          "position": 832
        },
        "endLoc": {
          "line": 388,
          "column": 2,
          "position": 3694
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "if api_key is None:\n            api_key = os.environ.get(\"AZURE_OPENAI_API_KEY\")\n\n        if azure_ad_token is None:\n            azure_ad_token = os.environ.get(\"AZURE_OPENAI_AD_TOKEN\")\n\n        if api_key is None and azure_ad_token is None and azure_ad_token_provider is None:\n            raise OpenAIError(\n                \"Missing credentials. Please pass one of `api_key`, `azure_ad_token`, `azure_ad_token_provider`, or the `AZURE_OPENAI_API_KEY` or `AZURE_OPENAI_AD_TOKEN` environment variables.\"\n            )\n\n        if api_version is None:\n            api_version = os.environ.get(\"OPENAI_API_VERSION\")\n\n        if api_version is None:\n            raise ValueError(\n                \"Must provide either the `api_version` argument or the `OPENAI_API_VERSION` environment variable\"\n            )\n\n        if default_query is None:\n            default_query = {\"api-version\": api_version}\n        else:\n            default_query = {**default_query, \"api-version\": api_version}\n\n        if base_url is None:\n            if azure_endpoint is None:\n                azure_endpoint = os.environ.get(\"AZURE_OPENAI_ENDPOINT\")\n\n            if azure_endpoint is None:\n                raise ValueError(\n                    \"Must provide one of the `base_url` or `azure_endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable\"\n                )\n\n            if azure_deployment is not None:\n                base_url = f\"{azure_endpoint.rstrip('/')}/openai/deployments/{azure_deployment}\"\n            else:\n                base_url = f\"{azure_endpoint.rstrip('/')}/openai\"\n        else:\n            if azure_endpoint is not None:\n                raise ValueError(\"base_url and azure_endpoint are mutually exclusive\")\n\n        if api_key is None:\n            # define a sentinel value to avoid any typing issues\n            api_key = API_KEY_SENTINEL\n\n        super().__init__(\n            api_key=api_key,\n            organization=organization,\n            project=project,\n            webhook_secret=webhook_secret,\n            base_url=base_url,\n            timeout=timeout,\n            max_retries=max_retries,\n            default_headers=default_headers,\n            default_query=default_query,\n            http_client=http_client,\n            websocket_base_url=websocket_base_url,\n            _strict_response_validation=_strict_response_validation,\n        )\n        self._api_version = api_version\n        self._azure_ad_token = azure_ad_token\n        self._azure_ad_token_provider = azure_ad_token_provider\n        self._azure_deployment = azure_deployment if azure_endpoint else None\n        self._azure_endpoint = httpx.URL(azure_endpoint) if azure_endpoint else None\n\n    @override\n    def copy(\n        self,\n        *,\n        api_key: str | Callable[[], Awaitable",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 473,
        "end": 542,
        "startLoc": {
          "line": 473,
          "column": 9,
          "position": 4587
        },
        "endLoc": {
          "line": 542,
          "column": 10,
          "position": 5083
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 192,
        "end": 261,
        "startLoc": {
          "line": 192,
          "column": 9,
          "position": 1833
        },
        "endLoc": {
          "line": 261,
          "column": 4,
          "position": 2329
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "] | None = None,\n        organization: str | None = None,\n        project: str | None = None,\n        webhook_secret: str | None = None,\n        websocket_base_url: str | httpx.URL | None = None,\n        api_version: str | None = None,\n        azure_ad_token: str | None = None,\n        azure_ad_token_provider: AsyncAzureADTokenProvider",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 542,
        "end": 549,
        "startLoc": {
          "line": 542,
          "column": 2,
          "position": 5087
        },
        "endLoc": {
          "line": 549,
          "column": 26,
          "position": 5198
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 261,
        "end": 268,
        "startLoc": {
          "line": 261,
          "column": 4,
          "position": 2330
        },
        "endLoc": {
          "line": 268,
          "column": 21,
          "position": 2441
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": "| None = None,\n        max_retries: int | NotGiven = NOT_GIVEN,\n        default_headers: Mapping[str, str] | None = None,\n        set_default_headers: Mapping[str, str] | None = None,\n        default_query: Mapping[str, object] | None = None,\n        set_default_query: Mapping[str, object] | None = None,\n        _extra_kwargs: Mapping[str, Any] = {},\n    ) -> Self:\n        \"\"\"\n        Create a new client instance re-using the same options given to the current client with optional overriding.\n        \"\"\"\n        return super().copy(\n            api_key=api_key,\n            organization=organization,\n            project=project,\n            webhook_secret=webhook_secret,\n            websocket_base_url=websocket_base_url,\n            base_url=base_url,\n            timeout=timeout,\n            http_client=http_client,\n            max_retries=max_retries,\n            default_headers=default_headers,\n            set_default_headers=set_default_headers,\n            default_query=default_query,\n            set_default_query=set_default_query,\n            _extra_kwargs={\n                \"api_version\": api_version or self._api_version,\n                \"azure_ad_token\": azure_ad_token or self._azure_ad_token,\n                \"azure_ad_token_provider\": azure_ad_token_provider or self._azure_ad_token_provider,\n                **_extra_kwargs,\n            },\n        )\n\n    with_options = copy\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 552,
        "end": 587,
        "startLoc": {
          "line": 552,
          "column": 2,
          "position": 5261
        },
        "endLoc": {
          "line": 587,
          "column": 6,
          "position": 5553
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 271,
        "end": 306,
        "startLoc": {
          "line": 271,
          "column": 2,
          "position": 2504
        },
        "endLoc": {
          "line": 306,
          "column": 4,
          "position": 2796
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "self._get_azure_ad_token()\n        if azure_ad_token is not None:\n            if headers.get(\"Authorization\") is None:\n                headers[\"Authorization\"] = f\"Bearer {azure_ad_token}\"\n        elif self.api_key is not API_KEY_SENTINEL:\n            if headers.get(\"api-key\") is None:\n                headers[\"api-key\"] = self.api_key\n        else:\n            # should never be hit\n            raise ValueError(\"Unable to handle auth\")\n\n        return options\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 611,
        "end": 624,
        "startLoc": {
          "line": 611,
          "column": 2,
          "position": 5791
        },
        "endLoc": {
          "line": 624,
          "column": 6,
          "position": 5899
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 328,
        "end": 341,
        "startLoc": {
          "line": 328,
          "column": 2,
          "position": 3001
        },
        "endLoc": {
          "line": 341,
          "column": 4,
          "position": 3109
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def _configure_realtime(self, model: str, extra_query: Query) -> tuple[httpx.URL, dict[str, str]]:\n        auth_headers = {}\n        query = {\n            **extra_query,\n            \"api-version\": self._api_version,\n            \"deployment\": self._azure_deployment or model,\n        }\n        if self.api_key and self.api_key != \"<missing API key>\":\n            auth_headers = {\"api-key\": self.api_key}\n        else:\n            token = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 624,
        "end": 634,
        "startLoc": {
          "line": 624,
          "column": 2,
          "position": 5901
        },
        "endLoc": {
          "line": 634,
          "column": 6,
          "position": 6026
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 341,
        "end": 351,
        "startLoc": {
          "line": 341,
          "column": 5,
          "position": 3109
        },
        "endLoc": {
          "line": 351,
          "column": 5,
          "position": 3234
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "self._get_azure_ad_token()\n            if token:\n                auth_headers = {\"Authorization\": f\"Bearer {token}\"}\n\n        if self.websocket_base_url is not None:\n            base_url = httpx.URL(self.websocket_base_url)\n            merge_raw_path = base_url.raw_path.rstrip(b\"/\") + b\"/realtime\"\n            realtime_url = base_url.copy_with(raw_path=merge_raw_path)\n        else:\n            base_url = self._prepare_url(\"/realtime\")\n            realtime_url = base_url.copy_with(scheme=\"wss\")\n\n        url = realtime_url.copy_with(params={**query})\n        return url, auth_headers",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 634,
        "end": 647,
        "startLoc": {
          "line": 634,
          "column": 2,
          "position": 6028
        },
        "endLoc": {
          "line": 647,
          "column": 13,
          "position": 6170
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/azure.py",
        "start": 351,
        "end": 364,
        "startLoc": {
          "line": 351,
          "column": 2,
          "position": 3234
        },
        "endLoc": {
          "line": 364,
          "column": 13,
          "position": 3376
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "def create(\n        self,\n        *,\n        sdp: str,\n        session: RealtimeSessionCreateRequestParam | Omit = omit,\n        extra_headers: Headers | None = None,\n        extra_query: Query | None = None,\n        extra_body: Body | None = None,\n        timeout: float | httpx.Timeout | None | NotGiven = not_given,\n    ) -> _legacy_response.HttpxBinaryResponseContent:\n        if session is omit:\n            extra_headers = {\"Accept\": \"application/sdp\", \"Content-Type\": \"application/sdp\", **(extra_headers or {})}\n            return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/_realtime.py",
        "start": 60,
        "end": 72,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 536
        },
        "endLoc": {
          "line": 72,
          "column": 6,
          "position": 694
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/_realtime.py",
        "start": 23,
        "end": 35,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 149
        },
        "endLoc": {
          "line": 35,
          "column": 5,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self._post(\n                \"/realtime/calls\",\n                body=sdp.encode(\"utf-8\"),\n                options=make_request_options(extra_headers=extra_headers, extra_query=extra_query, timeout=timeout),\n                cast_to=_legacy_response.HttpxBinaryResponseContent,\n            )\n\n        extra_headers = {\"Accept\": \"application/sdp\", \"Content-Type\": \"multipart/form-data\", **(extra_headers or {})}\n        session_payload = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/_realtime.py",
        "start": 72,
        "end": 80,
        "startLoc": {
          "line": 72,
          "column": 2,
          "position": 696
        },
        "endLoc": {
          "line": 80,
          "column": 6,
          "position": 783
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/_realtime.py",
        "start": 35,
        "end": 43,
        "startLoc": {
          "line": 35,
          "column": 2,
          "position": 307
        },
        "endLoc": {
          "line": 43,
          "column": 16,
          "position": 394
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "(data, stripped_type)\n\n    if origin == dict and is_mapping(data):\n        items_type = get_args(stripped_type)[1]\n        return {key: _transform_recursive(value, annotation=items_type) for key, value in data.items()}\n\n    if (\n        # List[T]\n        (is_list_type(stripped_type) and is_list(data))\n        # Iterable[T]\n        or (is_iterable_type(stripped_type) and is_iterable(data) and not isinstance(data, str))\n        # Sequence[T]\n        or (is_sequence_type(stripped_type) and is_sequence(data) and not isinstance(data, str))\n    ):\n        # dicts are technically iterable, but it is an iterable on the keys of the dict and is not usually\n        # intended as an iterable, so we don't transform it.\n        if isinstance(data, dict):\n            return cast(object, data)\n\n        inner_type = extract_type_arg(stripped_type, 0)\n        if _no_transform_needed(inner_type):\n            # for some types there is no need to transform anything, so we can get a small\n            # perf boost from skipping that work.\n            #\n            # but we still need to convert to a list to ensure the data is json-serializable\n            if is_list(data):\n                return data\n            return list(data)\n\n        return [await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 346,
        "end": 375,
        "startLoc": {
          "line": 346,
          "column": 27,
          "position": 2375
        },
        "endLoc": {
          "line": 375,
          "column": 6,
          "position": 2629
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 180,
        "end": 209,
        "startLoc": {
          "line": 180,
          "column": 21,
          "position": 951
        },
        "endLoc": {
          "line": 209,
          "column": 21,
          "position": 1205
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(data: object, format_: PropertyFormat, format_template: str | None) -> object:\n    if isinstance(data, (date, datetime)):\n        if format_ == \"iso8601\":\n            return data.isoformat()\n\n        if format_ == \"custom\" and format_template is not None:\n            return data.strftime(format_template)\n\n    if format_ == \"base64\" and is_base64_file_input(data):\n        binary: str | bytes | None = None\n\n        if isinstance(data, pathlib.Path):\n            binary = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 402,
        "end": 414,
        "startLoc": {
          "line": 402,
          "column": 19,
          "position": 2861
        },
        "endLoc": {
          "line": 414,
          "column": 6,
          "position": 3013
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 236,
        "end": 248,
        "startLoc": {
          "line": 236,
          "column": 13,
          "position": 1443
        },
        "endLoc": {
          "line": 248,
          "column": 5,
          "position": 1595
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ".read_bytes()\n        elif isinstance(data, io.IOBase):\n            binary = data.read()\n\n            if isinstance(binary, str):  # type: ignore[unreachable]\n                binary = binary.encode()\n\n        if not isinstance(binary, bytes):\n            raise RuntimeError(f\"Could not read bytes from {data}; Received {type(binary)}\")\n\n        return base64.b64encode(binary).decode(\"ascii\")\n\n    return data\n\n\nasync",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 414,
        "end": 429,
        "startLoc": {
          "line": 414,
          "column": 2,
          "position": 3021
        },
        "endLoc": {
          "line": 429,
          "column": 6,
          "position": 3125
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 248,
        "end": 263,
        "startLoc": {
          "line": 248,
          "column": 5,
          "position": 1596
        },
        "endLoc": {
          "line": 263,
          "column": 4,
          "position": 1700
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(\n    data: Mapping[str, object],\n    expected_type: type,\n) -> Mapping[str, object]:\n    result: dict[str, object] = {}\n    annotations = get_type_hints(expected_type, include_extras=True)\n    for key, value in data.items():\n        if not is_given(value):\n            # we don't need to include omitted values here as they'll\n            # be stripped out before the request is sent anyway\n            continue\n\n        type_ = annotations.get(key)\n        if type_ is None:\n            # we do not have a type annotation for this field, leave it as is\n            result[key] = value\n        else:\n            result[_maybe_transform_key(key, type_)] = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 429,
        "end": 446,
        "startLoc": {
          "line": 429,
          "column": 27,
          "position": 3130
        },
        "endLoc": {
          "line": 446,
          "column": 6,
          "position": 3289
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_transform.py",
        "start": 263,
        "end": 280,
        "startLoc": {
          "line": 263,
          "column": 21,
          "position": 1703
        },
        "endLoc": {
          "line": 280,
          "column": 21,
          "position": 1862
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(seconds: Union[int, float]) -> datetime:\n    if seconds > MAX_NUMBER:\n        return datetime.max\n    elif seconds < -MAX_NUMBER:\n        return datetime.min\n\n    while abs(seconds) > MS_WATERSHED:\n        seconds /= 1000\n    dt = EPOCH + timedelta(seconds=seconds)\n    return dt.replace(tzinfo=timezone.utc)\n\n\ndef _parse_timezone(value: Optional[str])",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_utils/_datetime_parse.py",
        "start": 44,
        "end": 56,
        "startLoc": {
          "line": 44,
          "column": 19,
          "position": 254
        },
        "endLoc": {
          "line": 56,
          "column": 2,
          "position": 372
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/datetime_parse.py",
        "start": 77,
        "end": 89,
        "startLoc": {
          "line": 77,
          "column": 18,
          "position": 364
        },
        "endLoc": {
          "line": 89,
          "column": 2,
          "position": 482
        }
      }
    },
    {
      "format": "markdown",
      "lines": 29,
      "fragment": "Kim Davies and contributors.\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n1. Redistributions of source code must retain the above copyright\n   notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright\n   notice, this list of conditions and the following disclaimer in the\n   documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its\n   contributors may be used to endorse or promote products derived from\n   this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nHOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED\nTO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\nNEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna-3.11.dist-info/licenses/LICENSE.md",
        "start": 3,
        "end": 31,
        "startLoc": {
          "line": 3,
          "column": 2,
          "position": 13
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 467
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip-25.3.dist-info/licenses/src/pip/_vendor/idna/LICENSE.md",
        "start": 3,
        "end": 31,
        "startLoc": {
          "line": 3,
          "column": 2,
          "position": 13
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 467
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "]:\n    if not byte_payload.startswith(b\"data:\"):\n        return None  # empty line\n\n    if byte_payload.strip() == b\"data: [DONE]\":\n        raise StopIteration(\"[DONE] signal received.\")\n\n    # Decode payload\n    payload = byte_payload.decode(\"utf-8\")\n    json_payload = json.loads(payload.lstrip(\"data:\").rstrip(\"/n\"))\n\n    # Either an error as being returned\n    if json_payload.get(\"error\") is not None:\n        raise _parse_text_generation_error(json_payload[\"error\"], json_payload.get(\"error_type\"))\n\n    # Or parse token payload\n    return",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_common.py",
        "start": 359,
        "end": 375,
        "startLoc": {
          "line": 359,
          "column": 27,
          "position": 2184
        },
        "endLoc": {
          "line": 375,
          "column": 7,
          "position": 2315
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/inference/_common.py",
        "start": 311,
        "end": 327,
        "startLoc": {
          "line": 311,
          "column": 2,
          "position": 1835
        },
        "endLoc": {
          "line": 327,
          "column": 7,
          "position": 1966
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "if verbosity == 0:\n        return tabulate(\n            rows=[\n                [\n                    repo.repo_id,\n                    repo.repo_type,\n                    \"{:>12}\".format(repo.size_on_disk_str),\n                    repo.nb_files,\n                    repo.last_accessed_str,\n                    repo.last_modified_str,\n                    \", \".join(sorted(repo.refs)),\n                    str(repo.repo_path),\n                ]\n                for repo in sorted(hf_cache_info",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/scan_cache.py",
        "start": 131,
        "end": 144,
        "startLoc": {
          "line": 131,
          "column": 5,
          "position": 541
        },
        "endLoc": {
          "line": 144,
          "column": 14,
          "position": 640
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/utils/_cache_manager.py",
        "start": 501,
        "end": 514,
        "startLoc": {
          "line": 501,
          "column": 9,
          "position": 2959
        },
        "endLoc": {
          "line": 514,
          "column": 5,
          "position": 3058
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": ".repos, key=lambda repo: repo.repo_path)\n            ],\n            headers=[\n                \"REPO ID\",\n                \"REPO TYPE\",\n                \"SIZE ON DISK\",\n                \"NB FILES\",\n                \"LAST_ACCESSED\",\n                \"LAST_MODIFIED\",\n                \"REFS\",\n                \"LOCAL PATH\",\n            ],\n        )\n    else:\n        return tabulate(\n            rows=[\n                [\n                    repo.repo_id,\n                    repo.repo_type,\n                    revision.commit_hash,\n                    \"{:>12}\".format(revision.size_on_disk_str),\n                    revision.nb_files,\n                    revision.last_modified_str,\n                    \", \".join(sorted(revision.refs)),\n                    str(revision.snapshot_path),\n                ]\n                for repo in sorted(hf_cache_info",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/scan_cache.py",
        "start": 144,
        "end": 170,
        "startLoc": {
          "line": 144,
          "column": 14,
          "position": 641
        },
        "endLoc": {
          "line": 170,
          "column": 14,
          "position": 799
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/utils/_cache_manager.py",
        "start": 514,
        "end": 540,
        "startLoc": {
          "line": 514,
          "column": 5,
          "position": 3059
        },
        "endLoc": {
          "line": 540,
          "column": 5,
          "position": 3217
        }
      }
    },
    {
      "format": "python",
      "lines": 55,
      "fragment": ")\n        subparser.add_argument(\n            \"repo_id\", type=str, help=\"The ID of the repo to upload to (e.g. `username/repo-name`).\"\n        )\n        subparser.add_argument(\"local_path\", type=str, help=\"Local path to the file or folder to upload.\")\n        subparser.add_argument(\n            \"--repo-type\",\n            choices=[\"model\", \"dataset\", \"space\"],\n            help=\"Type of the repo to upload to (e.g. `dataset`).\",\n        )\n        subparser.add_argument(\n            \"--revision\",\n            type=str,\n            help=(\"An optional Git revision to push to. It can be a branch name or a PR reference.\"),\n        )\n        subparser.add_argument(\n            \"--private\",\n            action=\"store_true\",\n            help=(\n                \"Whether to create a private repo if repo doesn't exist on the Hub. Ignored if the repo already exists.\"\n            ),\n        )\n        subparser.add_argument(\"--include\", nargs=\"*\", type=str, help=\"Glob patterns to match files to upload.\")\n        subparser.add_argument(\"--exclude\", nargs=\"*\", type=str, help=\"Glob patterns to exclude from files to upload.\")\n        subparser.add_argument(\n            \"--token\", type=str, help=\"A User Access Token generated from https://huggingface.co/settings/tokens\"\n        )\n        subparser.add_argument(\n            \"--num-workers\", type=int, help=\"Number of workers to use to hash, upload and commit files.\"\n        )\n        subparser.add_argument(\"--no-report\", action=\"store_true\", help=\"Whether to disable regular status report.\")\n        subparser.add_argument(\"--no-bars\", action=\"store_true\", help=\"Whether to disable progress bars.\")\n        subparser.set_defaults(func=UploadLargeFolderCommand)\n\n    def __init__(self, args: Namespace) -> None:\n        self.repo_id: str = args.repo_id\n        self.local_path: str = args.local_path\n        self.repo_type: str = args.repo_type\n        self.revision: Optional[str] = args.revision\n        self.private: bool = args.private\n\n        self.include: Optional[List[str]] = args.include\n        self.exclude: Optional[List[str]] = args.exclude\n\n        self.api: HfApi = HfApi(token=args.token, library_name=\"huggingface-cli\")\n\n        self.num_workers: Optional[int] = args.num_workers\n        self.no_report: bool = args.no_report\n        self.no_bars: bool = args.no_bars\n\n        if not os.path.isdir(self.local_path):\n            raise ValueError(\"Large upload is only supported for folders.\")\n\n    def run(self) -> None:\n        logging",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload_large_folder.py",
        "start": 38,
        "end": 92,
        "startLoc": {
          "line": 38,
          "column": 9,
          "position": 166
        },
        "endLoc": {
          "line": 92,
          "column": 8,
          "position": 683
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload_large_folder.py",
        "start": 35,
        "end": 89,
        "startLoc": {
          "line": 35,
          "column": 45,
          "position": 163
        },
        "endLoc": {
          "line": 89,
          "column": 25,
          "position": 680
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "\"https://huggingface.co/docs/huggingface_hub/guides/upload#upload-a-large-folder.\"\n            )\n        )\n\n        if self.no_bars:\n            disable_progress_bars()\n\n        self.api.upload_large_folder(\n            repo_id=self.repo_id,\n            folder_path=self.local_path,\n            repo_type=self.repo_type,\n            revision=self.revision,\n            private=self.private,\n            allow_patterns=self.include,\n            ignore_patterns=self.exclude,\n            num_workers=self.num_workers,\n            print_report=not self.no_report,\n        )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload_large_folder.py",
        "start": 115,
        "end": 132,
        "startLoc": {
          "line": 115,
          "column": 17,
          "position": 759
        },
        "endLoc": {
          "line": 132,
          "column": 2,
          "position": 865
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload_large_folder.py",
        "start": 114,
        "end": 131,
        "startLoc": {
          "line": 114,
          "column": 17,
          "position": 766
        },
        "endLoc": {
          "line": 131,
          "column": 2,
          "position": 872
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "import os\nimport time\nimport warnings\nfrom argparse import Namespace, _SubParsersAction\nfrom typing import List, Optional\n\nfrom huggingface_hub import logging\nfrom huggingface_hub._commit_scheduler import CommitScheduler\nfrom huggingface_hub.commands import BaseHuggingfaceCLICommand\nfrom huggingface_hub.constants import HF_HUB_ENABLE_HF_TRANSFER\nfrom huggingface_hub.errors import RevisionNotFoundError\nfrom huggingface_hub.hf_api import HfApi\nfrom huggingface_hub.utils import disable_progress_bars, enable_progress_bars\nfrom huggingface_hub.utils._runtime import is_xet_available\n\n\nlogger",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload.py",
        "start": 49,
        "end": 65,
        "startLoc": {
          "line": 49,
          "column": 1,
          "position": 31
        },
        "endLoc": {
          "line": 65,
          "column": 7,
          "position": 151
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload.py",
        "start": 49,
        "end": 64,
        "startLoc": {
          "line": 49,
          "column": 1,
          "position": 31
        },
        "endLoc": {
          "line": 64,
          "column": 5,
          "position": 150
        }
      }
    },
    {
      "format": "python",
      "lines": 129,
      "fragment": ")\n        upload_parser.add_argument(\n            \"repo_id\", type=str, help=\"The ID of the repo to upload to (e.g. `username/repo-name`).\"\n        )\n        upload_parser.add_argument(\n            \"local_path\",\n            nargs=\"?\",\n            help=\"Local path to the file or folder to upload. Wildcard patterns are supported. Defaults to current directory.\",\n        )\n        upload_parser.add_argument(\n            \"path_in_repo\",\n            nargs=\"?\",\n            help=\"Path of the file or folder in the repo. Defaults to the relative path of the file or folder.\",\n        )\n        upload_parser.add_argument(\n            \"--repo-type\",\n            choices=[\"model\", \"dataset\", \"space\"],\n            default=\"model\",\n            help=\"Type of the repo to upload to (e.g. `dataset`).\",\n        )\n        upload_parser.add_argument(\n            \"--revision\",\n            type=str,\n            help=(\n                \"An optional Git revision to push to. It can be a branch name or a PR reference. If revision does not\"\n                \" exist and `--create-pr` is not set, a branch will be automatically created.\"\n            ),\n        )\n        upload_parser.add_argument(\n            \"--private\",\n            action=\"store_true\",\n            help=(\n                \"Whether to create a private repo if repo doesn't exist on the Hub. Ignored if the repo already\"\n                \" exists.\"\n            ),\n        )\n        upload_parser.add_argument(\"--include\", nargs=\"*\", type=str, help=\"Glob patterns to match files to upload.\")\n        upload_parser.add_argument(\n            \"--exclude\", nargs=\"*\", type=str, help=\"Glob patterns to exclude from files to upload.\"\n        )\n        upload_parser.add_argument(\n            \"--delete\",\n            nargs=\"*\",\n            type=str,\n            help=\"Glob patterns for file to be deleted from the repo while committing.\",\n        )\n        upload_parser.add_argument(\n            \"--commit-message\", type=str, help=\"The summary / title / first line of the generated commit.\"\n        )\n        upload_parser.add_argument(\"--commit-description\", type=str, help=\"The description of the generated commit.\")\n        upload_parser.add_argument(\n            \"--create-pr\", action=\"store_true\", help=\"Whether to upload content as a new Pull Request.\"\n        )\n        upload_parser.add_argument(\n            \"--every\",\n            type=float,\n            help=\"If set, a background job is scheduled to create commits every `every` minutes.\",\n        )\n        upload_parser.add_argument(\n            \"--token\", type=str, help=\"A User Access Token generated from https://huggingface.co/settings/tokens\"\n        )\n        upload_parser.add_argument(\n            \"--quiet\",\n            action=\"store_true\",\n            help=\"If True, progress bars are disabled and only the path to the uploaded files is printed.\",\n        )\n        upload_parser.set_defaults(func=UploadCommand)\n\n    def __init__(self, args: Namespace) -> None:\n        self.repo_id: str = args.repo_id\n        self.repo_type: Optional[str] = args.repo_type\n        self.revision: Optional[str] = args.revision\n        self.private: bool = args.private\n\n        self.include: Optional[List[str]] = args.include\n        self.exclude: Optional[List[str]] = args.exclude\n        self.delete: Optional[List[str]] = args.delete\n\n        self.commit_message: Optional[str] = args.commit_message\n        self.commit_description: Optional[str] = args.commit_description\n        self.create_pr: bool = args.create_pr\n        self.api: HfApi = HfApi(token=args.token, library_name=\"huggingface-cli\")\n        self.quiet: bool = args.quiet  # disable warnings and progress bars\n\n        # Check `--every` is valid\n        if args.every is not None and args.every <= 0:\n            raise ValueError(f\"`every` must be a positive value (got '{args.every}')\")\n        self.every: Optional[float] = args.every\n\n        # Resolve `local_path` and `path_in_repo`\n        repo_name: str = args.repo_id.split(\"/\")[-1]  # e.g. \"Wauplin/my-cool-model\" => \"my-cool-model\"\n        self.local_path: str\n        self.path_in_repo: str\n\n        if args.local_path is not None and any(c in args.local_path for c in [\"*\", \"?\", \"[\"]):\n            if args.include is not None:\n                raise ValueError(\"Cannot set `--include` when passing a `local_path` containing a wildcard.\")\n            if args.path_in_repo is not None and args.path_in_repo != \".\":\n                raise ValueError(\"Cannot set `path_in_repo` when passing a `local_path` containing a wildcard.\")\n            self.local_path = \".\"\n            self.include = args.local_path\n            self.path_in_repo = \".\"\n        elif args.local_path is None and os.path.isfile(repo_name):\n            # Implicit case 1: user provided only a repo_id which happen to be a local file as well => upload it with same name\n            self.local_path = repo_name\n            self.path_in_repo = repo_name\n        elif args.local_path is None and os.path.isdir(repo_name):\n            # Implicit case 2: user provided only a repo_id which happen to be a local folder as well => upload it at root\n            self.local_path = repo_name\n            self.path_in_repo = \".\"\n        elif args.local_path is None:\n            # Implicit case 3: user provided only a repo_id that does not match a local file or folder\n            # => the user must explicitly provide a local_path => raise exception\n            raise ValueError(f\"'{repo_name}' is not a local file or folder. Please set `local_path` explicitly.\")\n        elif args.path_in_repo is None and os.path.isfile(args.local_path):\n            # Explicit local path to file, no path in repo => upload it at root with same name\n            self.local_path = args.local_path\n            self.path_in_repo = os.path.basename(args.local_path)\n        elif args.path_in_repo is None:\n            # Explicit local path to folder, no path in repo => upload at root\n            self.local_path = args.local_path\n            self.path_in_repo = \".\"\n        else:\n            # Finally, if both paths are explicit\n            self.local_path = args.local_path\n            self.path_in_repo = args.path_in_repo\n\n    def run(self) -> None:\n        if",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload.py",
        "start": 73,
        "end": 201,
        "startLoc": {
          "line": 73,
          "column": 9,
          "position": 207
        },
        "endLoc": {
          "line": 201,
          "column": 3,
          "position": 1322
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload.py",
        "start": 73,
        "end": 201,
        "startLoc": {
          "line": 73,
          "column": 49,
          "position": 213
        },
        "endLoc": {
          "line": 201,
          "column": 25,
          "position": 1328
        }
      }
    },
    {
      "format": "python",
      "lines": 77,
      "fragment": "if self.quiet:\n            disable_progress_bars()\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                print(self._upload())\n            enable_progress_bars()\n        else:\n            logging.set_verbosity_info()\n            print(self._upload())\n            logging.set_verbosity_warning()\n\n    def _upload(self) -> str:\n        if os.path.isfile(self.local_path):\n            if self.include is not None and len(self.include) > 0:\n                warnings.warn(\"Ignoring `--include` since a single file is uploaded.\")\n            if self.exclude is not None and len(self.exclude) > 0:\n                warnings.warn(\"Ignoring `--exclude` since a single file is uploaded.\")\n            if self.delete is not None and len(self.delete) > 0:\n                warnings.warn(\"Ignoring `--delete` since a single file is uploaded.\")\n\n        if not is_xet_available() and not HF_HUB_ENABLE_HF_TRANSFER:\n            logger.info(\n                \"Consider using `hf_transfer` for faster uploads. This solution comes with some limitations. See\"\n                \" https://huggingface.co/docs/huggingface_hub/hf_transfer for more details.\"\n            )\n\n        # Schedule commits if `every` is set\n        if self.every is not None:\n            if os.path.isfile(self.local_path):\n                # If file => watch entire folder + use allow_patterns\n                folder_path = os.path.dirname(self.local_path)\n                path_in_repo = (\n                    self.path_in_repo[: -len(self.local_path)]  # remove filename from path_in_repo\n                    if self.path_in_repo.endswith(self.local_path)\n                    else self.path_in_repo\n                )\n                allow_patterns = [self.local_path]\n                ignore_patterns = []\n            else:\n                folder_path = self.local_path\n                path_in_repo = self.path_in_repo\n                allow_patterns = self.include or []\n                ignore_patterns = self.exclude or []\n                if self.delete is not None and len(self.delete) > 0:\n                    warnings.warn(\"Ignoring `--delete` when uploading with scheduled commits.\")\n\n            scheduler = CommitScheduler(\n                folder_path=folder_path,\n                repo_id=self.repo_id,\n                repo_type=self.repo_type,\n                revision=self.revision,\n                allow_patterns=allow_patterns,\n                ignore_patterns=ignore_patterns,\n                path_in_repo=path_in_repo,\n                private=self.private,\n                every=self.every,\n                hf_api=self.api,\n            )\n            print(f\"Scheduling commits every {self.every} minutes to {scheduler.repo_id}.\")\n            try:  # Block main thread until KeyboardInterrupt\n                while True:\n                    time.sleep(100)\n            except KeyboardInterrupt:\n                scheduler.stop()\n                return \"Stopped scheduled commits.\"\n\n        # Otherwise, create repo and proceed with the upload\n        if not os.path.isfile(self.local_path) and not os.path.isdir(self.local_path):\n            raise FileNotFoundError(f\"No such file or directory: '{self.local_path}'.\")\n        repo_id = self.api.create_repo(\n            repo_id=self.repo_id,\n            repo_type=self.repo_type,\n            exist_ok=True,\n            private=self.private,\n            space_sdk=\"gradio\" if self.repo_type == \"space\" else None,\n            # ^ We don't want it to fail when uploading to a Space => let's set Gradio by default.\n            # ^ I'd rather not add CLI args to set it explicitly as we already have `hf repo create` for that.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload.py",
        "start": 201,
        "end": 277,
        "startLoc": {
          "line": 201,
          "column": 9,
          "position": 1322
        },
        "endLoc": {
          "line": 277,
          "column": 99,
          "position": 2007
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload.py",
        "start": 203,
        "end": 279,
        "startLoc": {
          "line": 203,
          "column": 9,
          "position": 1338
        },
        "endLoc": {
          "line": 279,
          "column": 112,
          "position": 2023
        }
      }
    },
    {
      "format": "python",
      "lines": 39,
      "fragment": ").repo_id\n\n        # Check if branch already exists and if not, create it\n        if self.revision is not None and not self.create_pr:\n            try:\n                self.api.repo_info(repo_id=repo_id, repo_type=self.repo_type, revision=self.revision)\n            except RevisionNotFoundError:\n                logger.info(f\"Branch '{self.revision}' not found. Creating it...\")\n                self.api.create_branch(repo_id=repo_id, repo_type=self.repo_type, branch=self.revision, exist_ok=True)\n                # ^ `exist_ok=True` to avoid race concurrency issues\n\n        # File-based upload\n        if os.path.isfile(self.local_path):\n            return self.api.upload_file(\n                path_or_fileobj=self.local_path,\n                path_in_repo=self.path_in_repo,\n                repo_id=repo_id,\n                repo_type=self.repo_type,\n                revision=self.revision,\n                commit_message=self.commit_message,\n                commit_description=self.commit_description,\n                create_pr=self.create_pr,\n            )\n\n        # Folder-based upload\n        else:\n            return self.api.upload_folder(\n                folder_path=self.local_path,\n                path_in_repo=self.path_in_repo,\n                repo_id=repo_id,\n                repo_type=self.repo_type,\n                revision=self.revision,\n                commit_message=self.commit_message,\n                commit_description=self.commit_description,\n                create_pr=self.create_pr,\n                allow_patterns=self.include,\n                ignore_patterns=self.exclude,\n                delete_patterns=self.delete,\n            )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/upload.py",
        "start": 278,
        "end": 316,
        "startLoc": {
          "line": 278,
          "column": 9,
          "position": 2010
        },
        "endLoc": {
          "line": 316,
          "column": 2,
          "position": 2318
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/upload.py",
        "start": 280,
        "end": 318,
        "startLoc": {
          "line": 280,
          "column": 9,
          "position": 2026
        },
        "endLoc": {
          "line": 318,
          "column": 2,
          "position": 2334
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "logger = logging.get_logger(__name__)\n\n\nclass DeleteFilesSubCommand:\n    def __init__(self, args) -> None:\n        self.args = args\n        self.repo_id: str = args.repo_id\n        self.repo_type: Optional[str] = args.repo_type\n        self.revision: Optional[str] = args.revision\n        self.api: HfApi = HfApi(token=args.token, library_name=\"huggingface-cli\")\n        self.patterns: List[str] = args.patterns\n        self.commit_message: Optional[str] = args.commit_message\n        self.commit_description: Optional[str] = args.commit_description\n        self.create_pr: bool = args.create_pr\n        self.token: Optional[str] = args.token\n\n    def run(self) -> None:\n        logging",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo_files.py",
        "start": 45,
        "end": 62,
        "startLoc": {
          "line": 45,
          "column": 1,
          "position": 81
        },
        "endLoc": {
          "line": 62,
          "column": 8,
          "position": 295
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/repo_files.py",
        "start": 47,
        "end": 64,
        "startLoc": {
          "line": 47,
          "column": 1,
          "position": 91
        },
        "endLoc": {
          "line": 64,
          "column": 25,
          "position": 305
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "logging.set_verbosity_info()\n        url = self.api.delete_files(\n            delete_patterns=self.patterns,\n            repo_id=self.repo_id,\n            repo_type=self.repo_type,\n            revision=self.revision,\n            commit_message=self.commit_message,\n            commit_description=self.commit_description,\n            create_pr=self.create_pr,\n        )\n        print(f\"Files correctly deleted from repo. Commit: {url}.\")\n        logging.set_verbosity_warning()\n\n\nclass RepoFilesCommand(BaseHuggingfaceCLICommand):\n    @staticmethod\n    def register_subcommand(parser: _SubParsersAction):\n        repo_files_parser = parser.add_parser(\"repo-files\", help=\"Manage files in a repo on the Hub.\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo_files.py",
        "start": 62,
        "end": 79,
        "startLoc": {
          "line": 62,
          "column": 9,
          "position": 295
        },
        "endLoc": {
          "line": 79,
          "column": 37,
          "position": 426
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/repo_files.py",
        "start": 66,
        "end": 83,
        "startLoc": {
          "line": 66,
          "column": 9,
          "position": 315
        },
        "endLoc": {
          "line": 83,
          "column": 36,
          "position": 446
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": ")\n        delete_subparser.add_argument(\n            \"patterns\",\n            nargs=\"+\",\n            type=str,\n            help=\"Glob patterns to match files to delete.\",\n        )\n        delete_subparser.add_argument(\n            \"--repo-type\",\n            choices=[\"model\", \"dataset\", \"space\"],\n            default=\"model\",\n            help=\"Type of the repo to upload to (e.g. `dataset`).\",\n        )\n        delete_subparser.add_argument(\n            \"--revision\",\n            type=str,\n            help=(\n                \"An optional Git revision to push to. It can be a branch name \"\n                \"or a PR reference. If revision does not\"\n                \" exist and `--create-pr` is not set, a branch will be automatically created.\"\n            ),\n        )\n        delete_subparser.add_argument(\n            \"--commit-message\", type=str, help=\"The summary / title / first line of the generated commit.\"\n        )\n        delete_subparser.add_argument(\n            \"--commit-description\", type=str, help=\"The description of the generated commit.\"\n        )\n        delete_subparser.add_argument(\n            \"--create-pr\", action=\"store_true\", help=\"Whether to create a new Pull Request for these changes.\"\n        )\n        delete_subparser",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo_files.py",
        "start": 91,
        "end": 122,
        "startLoc": {
          "line": 91,
          "column": 9,
          "position": 515
        },
        "endLoc": {
          "line": 122,
          "column": 17,
          "position": 691
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/repo_files.py",
        "start": 95,
        "end": 126,
        "startLoc": {
          "line": 95,
          "column": 2,
          "position": 535
        },
        "endLoc": {
          "line": 126,
          "column": 18,
          "position": 711
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "repo_create_parser = repo_subparsers.add_parser(\"create\", help=\"Create a new repo on huggingface.co\")\n        repo_create_parser.add_argument(\n            \"repo_id\",\n            type=str,\n            help=\"The ID of the repo to create to (e.g. `username/repo-name`). The username is optional and will be set to your username if not provided.\",\n        )\n        repo_create_parser.add_argument(\n            \"--repo-type\",\n            type=str,\n            help='Optional: set to \"dataset\" or \"space\" if creating a dataset or space, default is model.',\n        )\n        repo_create_parser.add_argument(\n            \"--space_sdk\",\n            type=str,\n            help='Optional: Hugging Face Spaces SDK type. Required when --type is set to \"space\".',\n            choices=SPACES_SDK_TYPES,\n        )\n        repo_create_parser.add_argument(\n            \"--private\",\n            action=\"store_true\",\n            help=\"Whether to create a private repository. Defaults to public unless the organization's default is private.\",\n        )\n        repo_create_parser.add_argument(\n            \"--token\",\n            type=str,\n            help=\"Hugging Face token. Will default to the locally saved token if not provided.\",\n        )\n        repo_create_parser.add_argument(\n            \"--exist-ok\",\n            action=\"store_true\",\n            help=\"Do not raise an error if repo already exists.\",\n        )\n        repo_create_parser.add_argument(\n            \"--resource-group-id\",\n            type=str,\n            help=\"Resource group in which to create the repo. Resource groups is only available for Enterprise Hub organizations.\",\n        )\n        repo_create_parser.set_defaults",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo.py",
        "start": 51,
        "end": 88,
        "startLoc": {
          "line": 51,
          "column": 9,
          "position": 230
        },
        "endLoc": {
          "line": 88,
          "column": 13,
          "position": 430
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/repo.py",
        "start": 45,
        "end": 82,
        "startLoc": {
          "line": 45,
          "column": 9,
          "position": 183
        },
        "endLoc": {
          "line": 82,
          "column": 13,
          "position": 383
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "repo_url = self._api.create_repo(\n            repo_id=self.repo_id,\n            repo_type=self.repo_type,\n            private=self.private,\n            token=self.token,\n            exist_ok=self.exist_ok,\n            resource_group_id=self.resource_group_id,\n            space_sdk=self.space_sdk,\n        )\n        print(f\"Successfully created {ANSI.bold(repo_url.repo_id)} on the Hub.\")\n        print(f\"Your repo is now available at {ANSI.bold(repo_url)}\")",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo.py",
        "start": 160,
        "end": 170,
        "startLoc": {
          "line": 160,
          "column": 9,
          "position": 1108
        },
        "endLoc": {
          "line": 170,
          "column": 2,
          "position": 1190
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/repo.py",
        "start": 141,
        "end": 151,
        "startLoc": {
          "line": 141,
          "column": 9,
          "position": 826
        },
        "endLoc": {
          "line": 151,
          "column": 2,
          "position": 908
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "):\n    def run(self):\n        try:\n            refs = self.api.list_repo_refs(\n                repo_id=self.repo_id,\n                repo_type=self.repo_type,\n            )\n        except RepositoryNotFoundError:\n            print(f\"{self.repo_type.capitalize()} {ANSI.bold(self.repo_id)} not found.\")\n            exit(1)\n        except HTTPError as e:\n            print(e)\n            print(ANSI.red(e.response.text))\n            exit(1)\n        if len(refs.tags) == 0:\n            print(\"No tags found\")\n            exit(0)\n        print(f\"Tags for {self.repo_type} {ANSI.bold(self.repo_id)}:\")\n        for tag in refs.tags:\n            print(tag.name)\n\n\nclass RepoTagDeleteCommand",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo.py",
        "start": 211,
        "end": 233,
        "startLoc": {
          "line": 211,
          "column": 15,
          "position": 1497
        },
        "endLoc": {
          "line": 233,
          "column": 21,
          "position": 1658
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/tag.py",
        "start": 122,
        "end": 144,
        "startLoc": {
          "line": 122,
          "column": 11,
          "position": 739
        },
        "endLoc": {
          "line": 144,
          "column": 17,
          "position": 900
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ":\n            choice = input(\"Proceed? [Y/n] \").lower()\n            if choice not in (\"\", \"y\", \"yes\"):\n                print(\"Abort\")\n                exit()\n        try:\n            self.api.delete_tag(repo_id=self.repo_id, tag=self.args.tag, repo_type=self.repo_type)\n        except RepositoryNotFoundError:\n            print(f\"{self.repo_type.capitalize()} {ANSI.bold(self.repo_id)} not found.\")\n            exit(1)\n        except RevisionNotFoundError:\n            print(f\"Tag {ANSI.bold(self.args.tag)} not found on {ANSI.bold(self.repo_id)}\")\n            exit(1)\n        print(f\"Tag {ANSI.bold(self.args.tag)} deleted on {ANSI.bold(self.repo_id)}\")",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/repo.py",
        "start": 236,
        "end": 249,
        "startLoc": {
          "line": 236,
          "column": 2,
          "position": 1697
        },
        "endLoc": {
          "line": 249,
          "column": 2,
          "position": 1821
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/tag.py",
        "start": 148,
        "end": 161,
        "startLoc": {
          "line": 148,
          "column": 4,
          "position": 933
        },
        "endLoc": {
          "line": 161,
          "column": 2,
          "position": 1057
        }
      }
    },
    {
      "format": "python",
      "lines": 55,
      "fragment": "\"\"\"\nImplementation of a custom transfer agent for the transfer type \"multipart\" for\ngit-lfs.\n\nInspired by:\ngithub.com/cbartz/git-lfs-swift-transfer-agent/blob/master/git_lfs_swift_transfer.py\n\nSpec is: github.com/git-lfs/git-lfs/blob/master/docs/custom-transfers.md\n\n\nTo launch debugger while developing:\n\n``` [lfs \"customtransfer.multipart\"]\npath = /path/to/huggingface_hub/.env/bin/python args = -m debugpy --listen 5678\n--wait-for-client\n/path/to/huggingface_hub/src/huggingface_hub/commands/huggingface_cli.py\nlfs-multipart-upload ```\"\"\"\n\nimport json\nimport os\nimport subprocess\nimport sys\nfrom argparse import _SubParsersAction\nfrom typing import Dict, List, Optional\n\nfrom huggingface_hub.commands import BaseHuggingfaceCLICommand\nfrom huggingface_hub.lfs import LFS_MULTIPART_UPLOAD_COMMAND\n\nfrom ..utils import get_session, hf_raise_for_status, logging\nfrom ..utils._lfs import SliceFileObj\n\n\nlogger = logging.get_logger(__name__)\n\n\nclass LfsCommands(BaseHuggingfaceCLICommand):\n    \"\"\"\n    Implementation of a custom transfer agent for the transfer type \"multipart\"\n    for git-lfs. This lets users upload large files >5GB 🔥. Spec for LFS custom\n    transfer agent is:\n    https://github.com/git-lfs/git-lfs/blob/master/docs/custom-transfers.md\n\n    This introduces two commands to the CLI:\n\n    1. $ hf lfs-enable-largefiles\n\n    This should be executed once for each model repo that contains a model file\n    >5GB. It's documented in the error message you get if you just try to git\n    push a 5GB file without having enabled it before.\n\n    2. $ hf lfs-multipart-upload\n\n    This command is called by lfs directly and is not meant to be called by the\n    user.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/lfs.py",
        "start": 1,
        "end": 55,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 115
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/lfs.py",
        "start": 1,
        "end": 55,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 55,
          "column": 8,
          "position": 115
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ")\n        enable_parser.add_argument(\"path\", type=str, help=\"Local path to repository you want to configure.\")\n        enable_parser.set_defaults(func=lambda args: LfsEnableCommand(args))\n\n        # Command will get called by git-lfs, do not call it directly.\n        upload_parser = parser.add_parser(LFS_MULTIPART_UPLOAD_COMMAND, add_help=False)\n        upload_parser.set_defaults(func=lambda args: LfsUploadCommand(args))\n\n\nclass LfsEnableCommand:\n    def __init__(self, args):\n        self.args = args\n\n    def run(self):\n        local_path = os.path.abspath(self.args.path)\n        if not os.path.isdir(local_path):\n            print(\"This does not look like a valid git repo.\")\n            exit(1)\n        subprocess.run(\n            \"git config lfs.customtransfer.multipart.path hf\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/lfs.py",
        "start": 59,
        "end": 78,
        "startLoc": {
          "line": 59,
          "column": 6,
          "position": 149
        },
        "endLoc": {
          "line": 78,
          "column": 50,
          "position": 316
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/lfs.py",
        "start": 61,
        "end": 80,
        "startLoc": {
          "line": 61,
          "column": 9,
          "position": 153
        },
        "endLoc": {
          "line": 80,
          "column": 63,
          "position": 320
        }
      }
    },
    {
      "format": "python",
      "lines": 121,
      "fragment": ".split(),\n            check=True,\n            cwd=local_path,\n        )\n        subprocess.run(\n            f\"git config lfs.customtransfer.multipart.args {LFS_MULTIPART_UPLOAD_COMMAND}\".split(),\n            check=True,\n            cwd=local_path,\n        )\n        print(\"Local repo set up for largefiles\")\n\n\ndef write_msg(msg: Dict):\n    \"\"\"Write out the message in Line delimited JSON.\"\"\"\n    msg_str = json.dumps(msg) + \"\\n\"\n    sys.stdout.write(msg_str)\n    sys.stdout.flush()\n\n\ndef read_msg() -> Optional[Dict]:\n    \"\"\"Read Line delimited JSON from stdin.\"\"\"\n    msg = json.loads(sys.stdin.readline().strip())\n\n    if \"terminate\" in (msg.get(\"type\"), msg.get(\"event\")):\n        # terminate message received\n        return None\n\n    if msg.get(\"event\") not in (\"download\", \"upload\"):\n        logger.critical(\"Received unexpected message\")\n        sys.exit(1)\n\n    return msg\n\n\nclass LfsUploadCommand:\n    def __init__(self, args) -> None:\n        self.args = args\n\n    def run(self) -> None:\n        # Immediately after invoking a custom transfer process, git-lfs\n        # sends initiation data to the process over stdin.\n        # This tells the process useful information about the configuration.\n        init_msg = json.loads(sys.stdin.readline().strip())\n        if not (init_msg.get(\"event\") == \"init\" and init_msg.get(\"operation\") == \"upload\"):\n            write_msg({\"error\": {\"code\": 32, \"message\": \"Wrong lfs init operation\"}})\n            sys.exit(1)\n\n        # The transfer process should use the information it needs from the\n        # initiation structure, and also perform any one-off setup tasks it\n        # needs to do. It should then respond on stdout with a simple empty\n        # confirmation structure, as follows:\n        write_msg({})\n\n        # After the initiation exchange, git-lfs will send any number of\n        # transfer requests to the stdin of the transfer process, in a serial sequence.\n        while True:\n            msg = read_msg()\n            if msg is None:\n                # When all transfers have been processed, git-lfs will send\n                # a terminate event to the stdin of the transfer process.\n                # On receiving this message the transfer process should\n                # clean up and terminate. No response is expected.\n                sys.exit(0)\n\n            oid = msg[\"oid\"]\n            filepath = msg[\"path\"]\n            completion_url = msg[\"action\"][\"href\"]\n            header = msg[\"action\"][\"header\"]\n            chunk_size = int(header.pop(\"chunk_size\"))\n            presigned_urls: List[str] = list(header.values())\n\n            # Send a \"started\" progress event to allow other workers to start.\n            # Otherwise they're delayed until first \"progress\" event is reported,\n            # i.e. after the first 5GB by default (!)\n            write_msg(\n                {\n                    \"event\": \"progress\",\n                    \"oid\": oid,\n                    \"bytesSoFar\": 1,\n                    \"bytesSinceLast\": 0,\n                }\n            )\n\n            parts = []\n            with open(filepath, \"rb\") as file:\n                for i, presigned_url in enumerate(presigned_urls):\n                    with SliceFileObj(\n                        file,\n                        seek_from=i * chunk_size,\n                        read_limit=chunk_size,\n                    ) as data:\n                        r = get_session().put(presigned_url, data=data)\n                        hf_raise_for_status(r)\n                        parts.append(\n                            {\n                                \"etag\": r.headers.get(\"etag\"),\n                                \"partNumber\": i + 1,\n                            }\n                        )\n                        # In order to support progress reporting while data is uploading / downloading,\n                        # the transfer process should post messages to stdout\n                        write_msg(\n                            {\n                                \"event\": \"progress\",\n                                \"oid\": oid,\n                                \"bytesSoFar\": (i + 1) * chunk_size,\n                                \"bytesSinceLast\": chunk_size,\n                            }\n                        )\n                        # Not precise but that's ok.\n\n            r = get_session().post(\n                completion_url,\n                json={\n                    \"oid\": oid,\n                    \"parts\": parts,\n                },\n            )\n            hf_raise_for_status(r)\n\n            write_msg({\"event\": \"complete\", \"oid\": oid})",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/lfs.py",
        "start": 78,
        "end": 198,
        "startLoc": {
          "line": 78,
          "column": 50,
          "position": 317
        },
        "endLoc": {
          "line": 198,
          "column": 2,
          "position": 1157
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/lfs.py",
        "start": 80,
        "end": 200,
        "startLoc": {
          "line": 80,
          "column": 63,
          "position": 321
        },
        "endLoc": {
          "line": 200,
          "column": 2,
          "position": 1161
        }
      }
    },
    {
      "format": "python",
      "lines": 44,
      "fragment": "logger = logging.get_logger(__name__)\n\n\nclass DownloadCommand(BaseHuggingfaceCLICommand):\n    @staticmethod\n    def register_subcommand(parser: _SubParsersAction):\n        download_parser = parser.add_parser(\"download\", help=\"Download files from the Hub\")\n        download_parser.add_argument(\n            \"repo_id\", type=str, help=\"ID of the repo to download from (e.g. `username/repo-name`).\"\n        )\n        download_parser.add_argument(\n            \"filenames\", type=str, nargs=\"*\", help=\"Files to download (e.g. `config.json`, `data/metadata.jsonl`).\"\n        )\n        download_parser.add_argument(\n            \"--repo-type\",\n            choices=[\"model\", \"dataset\", \"space\"],\n            default=\"model\",\n            help=\"Type of repo to download from (defaults to 'model').\",\n        )\n        download_parser.add_argument(\n            \"--revision\",\n            type=str,\n            help=\"An optional Git revision id which can be a branch name, a tag, or a commit hash.\",\n        )\n        download_parser.add_argument(\n            \"--include\", nargs=\"*\", type=str, help=\"Glob patterns to match files to download.\"\n        )\n        download_parser.add_argument(\n            \"--exclude\", nargs=\"*\", type=str, help=\"Glob patterns to exclude from files to download.\"\n        )\n        download_parser.add_argument(\n            \"--cache-dir\", type=str, help=\"Path to the directory where to save the downloaded files.\"\n        )\n        download_parser.add_argument(\n            \"--local-dir\",\n            type=str,\n            help=(\n                \"If set, the downloaded file will be placed under this directory. Check out\"\n                \" https://huggingface.co/docs/huggingface_hub/guides/download#download-files-to-local-folder for more\"\n                \" details.\"\n            ),\n        )\n        download_parser.add_argument(\n            \"--force-download\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/download.py",
        "start": 50,
        "end": 93,
        "startLoc": {
          "line": 50,
          "column": 1,
          "position": 111
        },
        "endLoc": {
          "line": 93,
          "column": 19,
          "position": 398
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/download.py",
        "start": 52,
        "end": 95,
        "startLoc": {
          "line": 52,
          "column": 1,
          "position": 121
        },
        "endLoc": {
          "line": 95,
          "column": 27,
          "position": 408
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ",\n        )\n        download_parser.add_argument(\n            \"--token\", type=str, help=\"A User Access Token generated from https://huggingface.co/settings/tokens\"\n        )\n        download_parser.add_argument(\n            \"--quiet\",\n            action=\"store_true\",\n            help=\"If True, progress bars are disabled and only the path to the download files is printed.\",\n        )\n        download_parser.add_argument(\n            \"--max-workers\",\n            type=int,\n            default=8,\n            help=\"Maximum number of workers to use for downloading files. Default is 8.\",\n        )\n        download_parser.set_defaults(func=DownloadCommand)\n\n    def __init__(self, args: Namespace) -> None:\n        self.token = args.token\n        self.repo_id: str = args.repo_id\n        self.filenames: List[str] = args.filenames\n        self.repo_type: str = args.repo_type\n        self.revision: Optional[str] = args.revision\n        self.include: Optional[List[str]] = args.include\n        self.exclude: Optional[List[str]] = args.exclude\n        self.cache_dir: Optional[str] = args.cache_dir\n        self.local_dir: Optional[str] = args.local_dir\n        self.force_download: bool = args.force_download\n        self.quiet",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/download.py",
        "start": 95,
        "end": 124,
        "startLoc": {
          "line": 95,
          "column": 73,
          "position": 411
        },
        "endLoc": {
          "line": 124,
          "column": 6,
          "position": 689
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/download.py",
        "start": 107,
        "end": 136,
        "startLoc": {
          "line": 107,
          "column": 150,
          "position": 481
        },
        "endLoc": {
          "line": 136,
          "column": 16,
          "position": 759
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "if self.quiet:\n            disable_progress_bars()\n            with warnings.catch_warnings():\n                warnings.simplefilter(\"ignore\")\n                print(self._download())  # Print path to downloaded files\n            enable_progress_bars()\n        else:\n            logging.set_verbosity_info()\n            print(self._download())  # Print path to downloaded files\n            logging.set_verbosity_warning()\n\n    def _download(self) -> str:\n        # Warn user if patterns are ignored\n        if len(self.filenames) > 0:\n            if self.include is not None and len(self.include) > 0:\n                warnings.warn(\"Ignoring `--include` since filenames have being explicitly set.\")\n            if self.exclude is not None and len(self.exclude) > 0:\n                warnings.warn(\"Ignoring `--exclude` since filenames have being explicitly set.\")\n\n        # Single file to download: use `hf_hub_download`\n        if len(self.filenames) == 1:\n            return hf_hub_download(\n                repo_id=self.repo_id,\n                repo_type=self.repo_type,\n                revision=self.revision,\n                filename=self.filenames[0],\n                cache_dir=self.cache_dir,\n                force_download",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/download.py",
        "start": 128,
        "end": 155,
        "startLoc": {
          "line": 128,
          "column": 9,
          "position": 730
        },
        "endLoc": {
          "line": 155,
          "column": 15,
          "position": 979
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/download.py",
        "start": 149,
        "end": 176,
        "startLoc": {
          "line": 149,
          "column": 9,
          "position": 863
        },
        "endLoc": {
          "line": 176,
          "column": 16,
          "position": 1112
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": ",\n                force_download=self.force_download,\n                token=self.token,\n                local_dir=self.local_dir,\n                library_name=\"huggingface-cli\",\n            )\n\n        # Otherwise: use `snapshot_download` to ensure all files comes from same revision\n        elif len(self.filenames) == 0:\n            allow_patterns = self.include\n            ignore_patterns = self.exclude\n        else:\n            allow_patterns = self.filenames\n            ignore_patterns = None\n\n        return snapshot_download(\n            repo_id=self.repo_id,\n            repo_type=self.repo_type,\n            revision=self.revision,\n            allow_patterns=allow_patterns,\n            ignore_patterns=ignore_patterns,\n            force_download",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/download.py",
        "start": 154,
        "end": 175,
        "startLoc": {
          "line": 154,
          "column": 10,
          "position": 976
        },
        "endLoc": {
          "line": 175,
          "column": 15,
          "position": 1112
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/download.py",
        "start": 176,
        "end": 197,
        "startLoc": {
          "line": 176,
          "column": 16,
          "position": 1117
        },
        "endLoc": {
          "line": 197,
          "column": 16,
          "position": 1253
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n        print(\n            f\"\\nDone in {round(t1 - t0, 1)}s. Scanned {len(hf_cache_info.repos)} repo(s)\"\n            f\" for a total of {ANSI.red(hf_cache_info.size_on_disk_str)}.\"\n        )\n        if len(hf_cache_info.warnings) > 0:\n            message = f\"Got {len(hf_cache_info.warnings)} warning(s) while scanning.\"\n            if self.verbosity >= 3:\n                print(ANSI.gray(message))\n                for warning in hf_cache_info.warnings:\n                    print(ANSI.gray(str(warning)))\n            else:\n                print(ANSI.gray(message + \" Use -vvv to print details.\"))\n\n    def _run_delete",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/cache.py",
        "start": 136,
        "end": 150,
        "startLoc": {
          "line": 136,
          "column": 2,
          "position": 940
        },
        "endLoc": {
          "line": 150,
          "column": 12,
          "position": 1052
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/scan_cache.py",
        "start": 69,
        "end": 84,
        "startLoc": {
          "line": 69,
          "column": 14,
          "position": 360
        },
        "endLoc": {
          "line": 84,
          "column": 30,
          "position": 473
        }
      }
    },
    {
      "format": "python",
      "lines": 53,
      "fragment": "if verbosity == 0:\n        return tabulate(\n            rows=[\n                [\n                    repo.repo_id,\n                    repo.repo_type,\n                    \"{:>12}\".format(repo.size_on_disk_str),\n                    repo.nb_files,\n                    repo.last_accessed_str,\n                    repo.last_modified_str,\n                    \", \".join(sorted(repo.refs)),\n                    str(repo.repo_path),\n                ]\n                for repo in sorted(hf_cache_info.repos, key=lambda repo: repo.repo_path)\n            ],\n            headers=[\n                \"REPO ID\",\n                \"REPO TYPE\",\n                \"SIZE ON DISK\",\n                \"NB FILES\",\n                \"LAST_ACCESSED\",\n                \"LAST_MODIFIED\",\n                \"REFS\",\n                \"LOCAL PATH\",\n            ],\n        )\n    else:\n        return tabulate(\n            rows=[\n                [\n                    repo.repo_id,\n                    repo.repo_type,\n                    revision.commit_hash,\n                    \"{:>12}\".format(revision.size_on_disk_str),\n                    revision.nb_files,\n                    revision.last_modified_str,\n                    \", \".join(sorted(revision.refs)),\n                    str(revision.snapshot_path),\n                ]\n                for repo in sorted(hf_cache_info.repos, key=lambda repo: repo.repo_path)\n                for revision in sorted(repo.revisions, key=lambda revision: revision.commit_hash)\n            ],\n            headers=[\n                \"REPO ID\",\n                \"REPO TYPE\",\n                \"REVISION\",\n                \"SIZE ON DISK\",\n                \"NB FILES\",\n                \"LAST_MODIFIED\",\n                \"REFS\",\n                \"LOCAL PATH\",\n            ],\n        )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/cache.py",
        "start": 176,
        "end": 228,
        "startLoc": {
          "line": 176,
          "column": 5,
          "position": 1292
        },
        "endLoc": {
          "line": 228,
          "column": 2,
          "position": 1639
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/utils/_cache_manager.py",
        "start": 501,
        "end": 183,
        "startLoc": {
          "line": 501,
          "column": 9,
          "position": 2959
        },
        "endLoc": {
          "line": 183,
          "column": 2,
          "position": 888
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "YES = (\"y\", \"yes\", \"1\")\n    NO = (\"n\", \"no\", \"0\")\n    DEFAULT = \"\"\n    ALL = YES + NO + (DEFAULT,)\n    full_message = message + (\" (Y/n) \" if default else \" (y/N) \")\n    while True:\n        answer = input(full_message).lower()\n        if answer == DEFAULT:\n            return default\n        if answer in YES:\n            return True\n        if answer in NO:\n            return False\n        print(f\"Invalid input. Must be one of {ALL}\")\n\n\ndef _get_expectations_str(hf_cache_info: HFCacheInfo, selected_hashes: List[str]) -> str:\n    if",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/cache.py",
        "start": 345,
        "end": 362,
        "startLoc": {
          "line": 345,
          "column": 5,
          "position": 2656
        },
        "endLoc": {
          "line": 362,
          "column": 3,
          "position": 2831
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/delete_cache.py",
        "start": 377,
        "end": 401,
        "startLoc": {
          "line": 377,
          "column": 5,
          "position": 1991
        },
        "endLoc": {
          "line": 401,
          "column": 8,
          "position": 2166
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "from argparse import _SubParsersAction\nfrom typing import List, Optional\n\nfrom requests.exceptions import HTTPError\n\nfrom huggingface_hub.commands import BaseHuggingfaceCLICommand\nfrom huggingface_hub.constants import ENDPOINT\nfrom huggingface_hub.hf_api import HfApi\n\nfrom .._login import auth_list, auth_switch, login, logout\nfrom ..utils import get_stored_tokens, get_token, logging\nfrom ._cli_utils import ANSI\n\n\nlogger",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/auth.py",
        "start": 33,
        "end": 47,
        "startLoc": {
          "line": 33,
          "column": 1,
          "position": 29
        },
        "endLoc": {
          "line": 47,
          "column": 7,
          "position": 137
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/user.py",
        "start": 33,
        "end": 44,
        "startLoc": {
          "line": 33,
          "column": 1,
          "position": 29
        },
        "endLoc": {
          "line": 44,
          "column": 2,
          "position": 134
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "logging.set_verbosity_info()\n        token_name = self.args.token_name\n        if token_name is None:\n            token_name = self._select_token_name()\n\n        if token_name is None:\n            print(\"No token name provided. Aborting.\")\n            exit()\n        auth_switch(token_name, add_to_git_credential=self.args.add_to_git_credential)\n\n    def _select_token_name(self) -> Optional[str]:\n        token_names = list(get_stored_tokens().keys())\n\n        if not token_names:\n            logger.error(\"No stored tokens found. Please login first.\")\n            return None\n\n        if _inquirer_py_available:\n            return self._select_token_name_tui(token_names)\n        # if inquirer is not available, use a simpler terminal UI\n        print(\"Available stored tokens:\")\n        for i, token_name in enumerate(token_names, 1):\n            print(f\"{i}. {token_name}\")\n        while True:\n            try:\n                choice = input(\"Enter the number of the token to switch to (or 'q' to quit): \")\n                if choice.lower() == \"q\":\n                    return None\n                index = int(choice) - 1\n                if 0 <= index < len(token_names):\n                    return token_names[index]\n                else:\n                    print(\"Invalid selection. Please try again.\")\n            except ValueError:\n                print(\"Invalid input. Please enter a number or 'q' to quit.\")\n\n    def _select_token_name_tui(self, token_names: List[str]) -> Optional[str]:\n        choices = [Choice(token_name, name=token_name) for token_name in token_names]\n        try:\n            return inquirer.select(\n                message=\"Select a token to switch to:\",\n                choices=choices,\n                default=None,\n            ).execute()\n        except KeyboardInterrupt:\n            logger.info(\"Token selection cancelled.\")\n            return None\n\n\nclass AuthList",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/auth.py",
        "start": 140,
        "end": 189,
        "startLoc": {
          "line": 140,
          "column": 9,
          "position": 752
        },
        "endLoc": {
          "line": 189,
          "column": 9,
          "position": 1147
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/user.py",
        "start": 131,
        "end": 180,
        "startLoc": {
          "line": 131,
          "column": 9,
          "position": 736
        },
        "endLoc": {
          "line": 180,
          "column": 16,
          "position": 1131
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "info[\"name\"])\n            orgs = [org[\"name\"] for org in info[\"orgs\"]]\n            if orgs:\n                print(ANSI.bold(\"orgs: \"), \",\".join(orgs))\n\n            if ENDPOINT != \"https://huggingface.co\":\n                print(f\"Authenticated through private endpoint: {ENDPOINT}\")\n        except HTTPError as e:\n            print(e)\n            print(ANSI.red(e.response.text))\n            exit(1)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/auth.py",
        "start": 203,
        "end": 213,
        "startLoc": {
          "line": 203,
          "column": 2,
          "position": 1252
        },
        "endLoc": {
          "line": 213,
          "column": 2,
          "position": 1359
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/user.py",
        "start": 198,
        "end": 208,
        "startLoc": {
          "line": 198,
          "column": 2,
          "position": 1248
        },
        "endLoc": {
          "line": 208,
          "column": 2,
          "position": 1355
        }
      }
    },
    {
      "format": "python",
      "lines": 69,
      "fragment": "# Copyright 2022 The HuggingFace Team. All rights reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Contains a utility for good-looking prints.\"\"\"\n\nimport os\nfrom typing import List, Union\n\n\nclass ANSI:\n    \"\"\"\n    Helper for en.wikipedia.org/wiki/ANSI_escape_code\n    \"\"\"\n\n    _bold = \"\\u001b[1m\"\n    _gray = \"\\u001b[90m\"\n    _red = \"\\u001b[31m\"\n    _reset = \"\\u001b[0m\"\n    _yellow = \"\\u001b[33m\"\n\n    @classmethod\n    def bold(cls, s: str) -> str:\n        return cls._format(s, cls._bold)\n\n    @classmethod\n    def gray(cls, s: str) -> str:\n        return cls._format(s, cls._gray)\n\n    @classmethod\n    def red(cls, s: str) -> str:\n        return cls._format(s, cls._bold + cls._red)\n\n    @classmethod\n    def yellow(cls, s: str) -> str:\n        return cls._format(s, cls._yellow)\n\n    @classmethod\n    def _format(cls, s: str, code: str) -> str:\n        if os.environ.get(\"NO_COLOR\"):\n            # See https://no-color.org/\n            return s\n        return f\"{code}{s}{cls._reset}\"\n\n\ndef tabulate(rows: List[List[Union[str, int]]], headers: List[str]) -> str:\n    \"\"\"\n    Inspired by:\n\n    - stackoverflow.com/a/8356620/593036\n    - stackoverflow.com/questions/9535954/printing-lists-as-tabular-data\n    \"\"\"\n    col_widths = [max(len(str(x)) for x in col) for col in zip(*rows, headers)]\n    row_format = (\"{{:{}}} \" * len(headers)).format(*col_widths)\n    lines = []\n    lines.append(row_format.format(*headers))\n    lines.append(row_format.format(*[\"-\" * w for w in col_widths]))\n    for row in rows:\n        lines.append(row_format.format(*row))\n    return \"\\n\".join(lines)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/cli/_cli_utils.py",
        "start": 1,
        "end": 69,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 69,
          "column": 2,
          "position": 501
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/commands/_cli_utils.py",
        "start": 1,
        "end": 69,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 69,
          "column": 2,
          "position": 501
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "):\n    def __init__(\n        self,\n        verify: ssl.SSLContext | str | bool = True,\n        cert: CertTypes | None = None,\n        trust_env: bool = True,\n        http1: bool = True,\n        http2: bool = False,\n        limits: Limits = DEFAULT_LIMITS,\n        proxy: ProxyTypes | None = None,\n        uds: str | None = None,\n        local_address: str | None = None,\n        retries: int = 0,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        import httpcore\n\n        proxy = Proxy(url=proxy) if isinstance(proxy, (str, URL)) else proxy\n        ssl_context = create_ssl_context(verify=verify, cert=cert, trust_env=trust_env)\n\n        if proxy is None:\n            self._pool = httpcore.AsyncConnectionPool",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 279,
        "end": 300,
        "startLoc": {
          "line": 279,
          "column": 19,
          "position": 2023
        },
        "endLoc": {
          "line": 300,
          "column": 20,
          "position": 2280
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 135,
        "end": 156,
        "startLoc": {
          "line": 135,
          "column": 14,
          "position": 817
        },
        "endLoc": {
          "line": 156,
          "column": 15,
          "position": 1074
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "(\n                ssl_context=ssl_context,\n                max_connections=limits.max_connections,\n                max_keepalive_connections=limits.max_keepalive_connections,\n                keepalive_expiry=limits.keepalive_expiry,\n                http1=http1,\n                http2=http2,\n                uds=uds,\n                local_address=local_address,\n                retries=retries,\n                socket_options=socket_options,\n            )\n        elif proxy.url.scheme in (\"http\", \"https\"):\n            self._pool = httpcore.AsyncHTTPProxy",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 300,
        "end": 313,
        "startLoc": {
          "line": 300,
          "column": 20,
          "position": 2281
        },
        "endLoc": {
          "line": 313,
          "column": 15,
          "position": 2380
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 156,
        "end": 169,
        "startLoc": {
          "line": 156,
          "column": 15,
          "position": 1075
        },
        "endLoc": {
          "line": 169,
          "column": 10,
          "position": 1174
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "ssl_context,\n                max_connections=limits.max_connections,\n                max_keepalive_connections=limits.max_keepalive_connections,\n                keepalive_expiry=limits.keepalive_expiry,\n                http1=http1,\n                http2=http2,\n                socket_options=socket_options,\n            )\n        elif proxy.url.scheme in (\"socks5\", \"socks5h\"):\n            try:\n                import socksio  # noqa\n            except ImportError:  # pragma: no cover\n                raise ImportError(\n                    \"Using SOCKS proxy, but the 'socksio' package is not installed. \"\n                    \"Make sure to install httpx using `pip install httpx[socks]`.\"\n                ) from None\n\n            self._pool = httpcore.AsyncSOCKSProxy",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 323,
        "end": 340,
        "startLoc": {
          "line": 323,
          "column": 2,
          "position": 2464
        },
        "endLoc": {
          "line": 340,
          "column": 16,
          "position": 2579
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 179,
        "end": 196,
        "startLoc": {
          "line": 179,
          "column": 2,
          "position": 1258
        },
        "endLoc": {
          "line": 196,
          "column": 11,
          "position": 1373
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "(\n                proxy_url=httpcore.URL(\n                    scheme=proxy.url.raw_scheme,\n                    host=proxy.url.raw_host,\n                    port=proxy.url.port,\n                    target=proxy.url.raw_path,\n                ),\n                proxy_auth=proxy.raw_auth,\n                ssl_context=ssl_context,\n                max_connections=limits.max_connections,\n                max_keepalive_connections=limits.max_keepalive_connections,\n                keepalive_expiry=limits.keepalive_expiry,\n                http1=http1,\n                http2=http2,\n            )\n        else:  # pragma: no cover\n            raise ValueError(\n                \"Proxy protocol must be either 'http', 'https', 'socks5', or 'socks5h',\"\n                \" but got {proxy.url.scheme!r}.\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 340,
        "end": 358,
        "startLoc": {
          "line": 340,
          "column": 16,
          "position": 2580
        },
        "endLoc": {
          "line": 358,
          "column": 33,
          "position": 2703
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 196,
        "end": 214,
        "startLoc": {
          "line": 196,
          "column": 11,
          "position": 1374
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1497
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n        import httpcore\n\n        req = httpcore.Request(\n            method=request.method,\n            url=httpcore.URL(\n                scheme=request.url.raw_scheme,\n                host=request.url.raw_host,\n                port=request.url.port,\n                target=request.url.raw_path,\n            ),\n            headers=request.headers.raw,\n            content=request.stream,\n            extensions=request.extensions,\n        )\n        with map_httpcore_exceptions():\n            resp = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 378,
        "end": 394,
        "startLoc": {
          "line": 378,
          "column": 16,
          "position": 2882
        },
        "endLoc": {
          "line": 394,
          "column": 6,
          "position": 3002
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_transports/default.py",
        "start": 234,
        "end": 250,
        "startLoc": {
          "line": 234,
          "column": 15,
          "position": 1667
        },
        "endLoc": {
          "line": 250,
          "column": 5,
          "position": 1787
        }
      }
    },
    {
      "format": "markdown",
      "lines": 27,
      "fragment": "[Encode OSS Ltd](https://www.encode.io/).\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\n* Neither the name of the copyright holder nor the names of its\n  contributors may be used to endorse or promote products derived from\n  this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore-1.0.9.dist-info/licenses/LICENSE.md",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 27,
          "column": 8,
          "position": 455
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx-0.28.1.dist-info/licenses/LICENSE.md",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 2,
          "position": 6
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 467
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ":\n        # Strict type checking on our parameters.\n        method = enforce_bytes(method, name=\"method\")\n        url = enforce_url(url, name=\"url\")\n        headers = enforce_headers(headers, name=\"headers\")\n\n        # Include Host header, and optionally Content-Length or Transfer-Encoding.\n        headers = include_request_headers(headers, url=url, content=content)\n\n        request = Request(\n            method=method,\n            url=url,\n            headers=headers,\n            content=content,\n            extensions=extensions,\n        )\n        response = self.handle_request(request)\n        try:\n            yield",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py",
        "start": 61,
        "end": 79,
        "startLoc": {
          "line": 61,
          "column": 2,
          "position": 437
        },
        "endLoc": {
          "line": 79,
          "column": 6,
          "position": 570
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py",
        "start": 29,
        "end": 47,
        "startLoc": {
          "line": 29,
          "column": 9,
          "position": 174
        },
        "endLoc": {
          "line": 47,
          "column": 9,
          "position": 307
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "self._remote_origin.host.decode(\"ascii\"),\n                    \"timeout\": timeout,\n                }\n                with Trace(\"start_tls\", logger, request, kwargs) as trace:\n                    stream = stream.start_tls(**kwargs)\n                    trace.return_value = stream\n\n                # Determine if we should be using HTTP/1.1 or HTTP/2\n                ssl_object = stream.get_extra_info(\"ssl_object\")\n                http2_negotiated = (\n                    ssl_object is not None\n                    and ssl_object.selected_alpn_protocol() == \"h2\"\n                )\n\n                # Create the HTTP/1.1 or HTTP/2 connection\n                if http2_negotiated or (self._http2 and not self._http1):\n                    from",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 312,
        "end": 328,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 2473
        },
        "endLoc": {
          "line": 328,
          "column": 5,
          "position": 2614
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 262,
        "end": 279,
        "startLoc": {
          "line": 262,
          "column": 2,
          "position": 1965
        },
        "endLoc": {
          "line": 279,
          "column": 18,
          "position": 2109
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ")\n\n    def can_handle_request(self, origin: Origin) -> bool:\n        return origin == self._remote_origin\n\n    def close(self) -> None:\n        self._connection.close()\n\n    def info(self) -> str:\n        return self._connection.info()\n\n    def is_available(self) -> bool:\n        return self._connection.is_available()\n\n    def has_expired(self) -> bool:\n        return self._connection.has_expired()\n\n    def is_idle(self) -> bool:\n        return self._connection.is_idle()\n\n    def is_closed(self) -> bool:\n        return self._connection.is_closed()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} [{self.info()}]>\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 343,
        "end": 367,
        "startLoc": {
          "line": 343,
          "column": 8,
          "position": 2718
        },
        "endLoc": {
          "line": 367,
          "column": 46,
          "position": 2925
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 206,
        "end": 230,
        "startLoc": {
          "line": 206,
          "column": 14,
          "position": 1510
        },
        "endLoc": {
          "line": 230,
          "column": 46,
          "position": 1717
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": "| None = None,\n        max_connections: int | None = 10,\n        max_keepalive_connections: int | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: NetworkBackend | None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        \"\"\"\n        A connection pool for making HTTP requests.\n\n        Parameters:\n            ssl_context: An SSL context to use for verifying connections.\n                If not specified, the default `httpcore.default_ssl_context()`\n                will be used.\n            max_connections: The maximum number of concurrent HTTP connections that\n                the pool should allow. Any attempt to send a request on a pool that\n                would exceed this amount will block until a connection is available.\n            max_keepalive_connections: The maximum number of idle HTTP connections\n                that will be maintained in the pool.\n            keepalive_expiry: The duration in seconds that an idle HTTP connection\n                may be maintained for before being expired from the pool.\n            http1: A boolean indicating if HTTP/1.1 requests should be supported\n                by the connection pool. Defaults to True.\n            http2: A boolean indicating if HTTP/2 requests should be supported by\n                the connection pool. Defaults to False.\n            retries: The maximum number of retries when trying to establish a\n                connection.\n            local_address: Local address to connect from. Can also be used to connect\n                using a particular address family. Using `local_address=\"0.0.0.0\"`\n                will connect using an `AF_INET` address (IPv4), while using\n                `local_address=\"::\"` will connect using an `AF_INET6` address (IPv6).\n            uds: Path to a Unix Domain Socket to use instead of TCP sockets.\n            network_backend: A backend instance to use for handling network I/O.\n            socket_options: Socket options that have to be included\n             in the TCP socket when the connection was established.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 51,
        "end": 91,
        "startLoc": {
          "line": 51,
          "column": 2,
          "position": 413
        },
        "endLoc": {
          "line": 91,
          "column": 12,
          "position": 575
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 65,
        "end": 111,
        "startLoc": {
          "line": 65,
          "column": 2,
          "position": 536
        },
        "endLoc": {
          "line": 111,
          "column": 12,
          "position": 698
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "| None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: NetworkBackend | None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 42,
        "end": 52,
        "startLoc": {
          "line": 42,
          "column": 2,
          "position": 250
        },
        "endLoc": {
          "line": 52,
          "column": 5,
          "position": 382
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 67,
        "end": 111,
        "startLoc": {
          "line": 67,
          "column": 2,
          "position": 566
        },
        "endLoc": {
          "line": 111,
          "column": 12,
          "position": 698
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "| None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> AsyncNetworkStream:  # pragma: nocover\n        if socket_options is None:\n            socket_options = []\n        exc_map = {\n            TimeoutError: ConnectTimeout,\n            OSError: ConnectError,\n            anyio.BrokenResourceError: ConnectError,\n        }\n        with map_exceptions(exc_map):\n            with anyio.fail_after(timeout):\n                stream: anyio.abc.ByteStream = await anyio.connect_unix",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_backends/anyio.py",
        "start": 128,
        "end": 140,
        "startLoc": {
          "line": 128,
          "column": 2,
          "position": 1091
        },
        "endLoc": {
          "line": 140,
          "column": 13,
          "position": 1218
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_backends/anyio.py",
        "start": 103,
        "end": 115,
        "startLoc": {
          "line": 103,
          "column": 2,
          "position": 880
        },
        "endLoc": {
          "line": 115,
          "column": 12,
          "position": 1007
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "logger = logging.getLogger(\"httpcore.socks\")\n\n\nAUTH_METHODS = {\n    b\"\\x00\": \"NO AUTHENTICATION REQUIRED\",\n    b\"\\x01\": \"GSSAPI\",\n    b\"\\x02\": \"USERNAME/PASSWORD\",\n    b\"\\xff\": \"NO ACCEPTABLE METHODS\",\n}\n\nREPLY_CODES = {\n    b\"\\x00\": \"Succeeded\",\n    b\"\\x01\": \"General SOCKS server failure\",\n    b\"\\x02\": \"Connection not allowed by ruleset\",\n    b\"\\x03\": \"Network unreachable\",\n    b\"\\x04\": \"Host unreachable\",\n    b\"\\x05\": \"Connection refused\",\n    b\"\\x06\": \"TTL expired\",\n    b\"\\x07\": \"Command not supported\",\n    b\"\\x08\": \"Address type not supported\",\n}\n\n\nasync",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 19,
        "end": 42,
        "startLoc": {
          "line": 19,
          "column": 1,
          "position": 146
        },
        "endLoc": {
          "line": 42,
          "column": 6,
          "position": 282
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 19,
        "end": 42,
        "startLoc": {
          "line": 19,
          "column": 1,
          "position": 146
        },
        "endLoc": {
          "line": 42,
          "column": 4,
          "position": 282
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ",\n    *,\n    host: bytes,\n    port: int,\n    auth: tuple[bytes, bytes] | None = None,\n) -> None:\n    conn = socksio.socks5.SOCKS5Connection()\n\n    # Auth method request\n    auth_method = (\n        socksio.socks5.SOCKS5AuthMethod.NO_AUTH_REQUIRED\n        if auth is None\n        else socksio.socks5.SOCKS5AuthMethod.USERNAME_PASSWORD\n    )\n    conn.send(socksio.socks5.SOCKS5AuthMethodsRequest([auth_method]))\n    outgoing_bytes = conn.data_to_send()\n    await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 43,
        "end": 59,
        "startLoc": {
          "line": 43,
          "column": 19,
          "position": 294
        },
        "endLoc": {
          "line": 59,
          "column": 6,
          "position": 428
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 43,
        "end": 59,
        "startLoc": {
          "line": 43,
          "column": 14,
          "position": 292
        },
        "endLoc": {
          "line": 59,
          "column": 7,
          "position": 426
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "stream.read(max_bytes=4096)\n    response = conn.receive_data(incoming_bytes)\n    assert isinstance(response, socksio.socks5.SOCKS5AuthReply)\n    if response.method != auth_method:\n        requested = AUTH_METHODS.get(auth_method, \"UNKNOWN\")\n        responded = AUTH_METHODS.get(response.method, \"UNKNOWN\")\n        raise ProxyError(\n            f\"Requested {requested} from proxy server, but got {responded}.\"\n        )\n\n    if response.method == socksio.socks5.SOCKS5AuthMethod.USERNAME_PASSWORD:\n        # Username/password request\n        assert auth is not None\n        username, password = auth\n        conn.send(socksio.socks5.SOCKS5UsernamePasswordRequest(username, password))\n        outgoing_bytes = conn.data_to_send()\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 62,
        "end": 78,
        "startLoc": {
          "line": 62,
          "column": 2,
          "position": 448
        },
        "endLoc": {
          "line": 78,
          "column": 6,
          "position": 614
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 62,
        "end": 78,
        "startLoc": {
          "line": 62,
          "column": 2,
          "position": 442
        },
        "endLoc": {
          "line": 78,
          "column": 7,
          "position": 608
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "stream.read(max_bytes=4096)\n        response = conn.receive_data(incoming_bytes)\n        assert isinstance(response, socksio.socks5.SOCKS5UsernamePasswordReply)\n        if not response.success:\n            raise ProxyError(\"Invalid username/password\")\n\n    # Connect request\n    conn.send(\n        socksio.socks5.SOCKS5CommandRequest.from_address(\n            socksio.socks5.SOCKS5Command.CONNECT, (host, port)\n        )\n    )\n    outgoing_bytes = conn.data_to_send()\n    await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 81,
        "end": 94,
        "startLoc": {
          "line": 81,
          "column": 2,
          "position": 634
        },
        "endLoc": {
          "line": 94,
          "column": 6,
          "position": 743
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 81,
        "end": 94,
        "startLoc": {
          "line": 81,
          "column": 2,
          "position": 624
        },
        "endLoc": {
          "line": 94,
          "column": 7,
          "position": 733
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "):  # pragma: nocover\n    \"\"\"\n    A connection pool that sends requests via an HTTP proxy.\n    \"\"\"\n\n    def __init__(\n        self,\n        proxy_url: URL | bytes | str,\n        proxy_auth: tuple[bytes | str, bytes | str] | None = None,\n        ssl_context: ssl.SSLContext | None = None,\n        max_connections: int | None = 10,\n        max_keepalive_connections: int | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 105,
        "end": 121,
        "startLoc": {
          "line": 105,
          "column": 20,
          "position": 850
        },
        "endLoc": {
          "line": 121,
          "column": 20,
          "position": 1012
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 105,
        "end": 121,
        "startLoc": {
          "line": 105,
          "column": 15,
          "position": 836
        },
        "endLoc": {
          "line": 121,
          "column": 15,
          "position": 998
        }
      }
    },
    {
      "format": "python",
      "lines": 56,
      "fragment": "| None = None,\n    ) -> None:\n        \"\"\"\n        A connection pool for making HTTP requests.\n\n        Parameters:\n            proxy_url: The URL to use when connecting to the proxy server.\n                For example `\"http://127.0.0.1:8080/\"`.\n            ssl_context: An SSL context to use for verifying connections.\n                If not specified, the default `httpcore.default_ssl_context()`\n                will be used.\n            max_connections: The maximum number of concurrent HTTP connections that\n                the pool should allow. Any attempt to send a request on a pool that\n                would exceed this amount will block until a connection is available.\n            max_keepalive_connections: The maximum number of idle HTTP connections\n                that will be maintained in the pool.\n            keepalive_expiry: The duration in seconds that an idle HTTP connection\n                may be maintained for before being expired from the pool.\n            http1: A boolean indicating if HTTP/1.1 requests should be supported\n                by the connection pool. Defaults to True.\n            http2: A boolean indicating if HTTP/2 requests should be supported by\n                the connection pool. Defaults to False.\n            retries: The maximum number of retries when trying to establish\n                a connection.\n            local_address: Local address to connect from. Can also be used to\n                connect using a particular address family. Using\n                `local_address=\"0.0.0.0\"` will connect using an `AF_INET` address\n                (IPv4), while using `local_address=\"::\"` will connect using an\n                `AF_INET6` address (IPv6).\n            uds: Path to a Unix Domain Socket to use instead of TCP sockets.\n            network_backend: A backend instance to use for handling network I/O.\n        \"\"\"\n        super().__init__(\n            ssl_context=ssl_context,\n            max_connections=max_connections,\n            max_keepalive_connections=max_keepalive_connections,\n            keepalive_expiry=keepalive_expiry,\n            http1=http1,\n            http2=http2,\n            network_backend=network_backend,\n            retries=retries,\n        )\n        self._ssl_context = ssl_context\n        self._proxy_url = enforce_url(proxy_url, name=\"proxy_url\")\n        if proxy_auth is not None:\n            username, password = proxy_auth\n            username_bytes = enforce_bytes(username, name=\"proxy_auth\")\n            password_bytes = enforce_bytes(password, name=\"proxy_auth\")\n            self._proxy_auth: tuple[bytes, bytes] | None = (\n                username_bytes,\n                password_bytes,\n            )\n        else:\n            self._proxy_auth = None\n\n    def create_connection(self, origin: Origin) -> AsyncConnectionInterface",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 121,
        "end": 176,
        "startLoc": {
          "line": 121,
          "column": 2,
          "position": 1014
        },
        "endLoc": {
          "line": 176,
          "column": 25,
          "position": 1236
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 121,
        "end": 176,
        "startLoc": {
          "line": 121,
          "column": 2,
          "position": 1000
        },
        "endLoc": {
          "line": 176,
          "column": 20,
          "position": 1222
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "):\n    def __init__(\n        self,\n        proxy_origin: Origin,\n        remote_origin: Origin,\n        proxy_auth: tuple[bytes, bytes] | None = None,\n        ssl_context: ssl.SSLContext | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 189,
        "end": 199,
        "startLoc": {
          "line": 189,
          "column": 25,
          "position": 1319
        },
        "endLoc": {
          "line": 199,
          "column": 20,
          "position": 1425
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 189,
        "end": 199,
        "startLoc": {
          "line": 189,
          "column": 20,
          "position": 1305
        },
        "endLoc": {
          "line": 199,
          "column": 15,
          "position": 1411
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "_init_socks5_connection(**kwargs)\n                        trace.return_value = stream\n\n                    # Upgrade the stream to SSL\n                    if self._remote_origin.scheme == b\"https\":\n                        ssl_context = (\n                            default_ssl_context()\n                            if self._ssl_context is None\n                            else self._ssl_context\n                        )\n                        alpn_protocols = (\n                            [\"http/1.1\", \"h2\"] if self._http2 else [\"http/1.1\"]\n                        )\n                        ssl_context.set_alpn_protocols(alpn_protocols)\n\n                        kwargs = {\n                            \"ssl_context\": ssl_context,\n                            \"server_hostname\": sni_hostname\n                            or self._remote_origin.host.decode(\"ascii\"),\n                            \"timeout\": timeout,\n                        }\n                        async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 244,
        "end": 265,
        "startLoc": {
          "line": 244,
          "column": 2,
          "position": 1862
        },
        "endLoc": {
          "line": 265,
          "column": 6,
          "position": 2014
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 244,
        "end": 265,
        "startLoc": {
          "line": 244,
          "column": 25,
          "position": 1836
        },
        "endLoc": {
          "line": 265,
          "column": 5,
          "position": 1988
        }
      }
    },
    {
      "format": "python",
      "lines": 36,
      "fragment": "()\n\n    def is_available(self) -> bool:\n        if self._connection is None:  # pragma: nocover\n            # If HTTP/2 support is enabled, and the resulting connection could\n            # end up as HTTP/2 then we should indicate the connection as being\n            # available to service multiple requests.\n            return (\n                self._http2\n                and (self._remote_origin.scheme == b\"https\" or not self._http1)\n                and not self._connect_failed\n            )\n        return self._connection.is_available()\n\n    def has_expired(self) -> bool:\n        if self._connection is None:  # pragma: nocover\n            return self._connect_failed\n        return self._connection.has_expired()\n\n    def is_idle(self) -> bool:\n        if self._connection is None:  # pragma: nocover\n            return self._connect_failed\n        return self._connection.is_idle()\n\n    def is_closed(self) -> bool:\n        if self._connection is None:  # pragma: nocover\n            return self._connect_failed\n        return self._connection.is_closed()\n\n    def info(self) -> str:\n        if self._connection is None:  # pragma: nocover\n            return \"CONNECTION FAILED\" if self._connect_failed else \"CONNECTING\"\n        return self._connection.info()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} [{self.info()}]>\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 306,
        "end": 341,
        "startLoc": {
          "line": 306,
          "column": 7,
          "position": 2359
        },
        "endLoc": {
          "line": 341,
          "column": 46,
          "position": 2672
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/socks_proxy.py",
        "start": 306,
        "end": 341,
        "startLoc": {
          "line": 306,
          "column": 6,
          "position": 2323
        },
        "endLoc": {
          "line": 341,
          "column": 46,
          "position": 2636
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "[bytes] | None = None,\n        extensions: Extensions | None = None,\n    ) -> Response:\n        # Strict type checking on our parameters.\n        method = enforce_bytes(method, name=\"method\")\n        url = enforce_url(url, name=\"url\")\n        headers = enforce_headers(headers, name=\"headers\")\n\n        # Include Host header, and optionally Content-Length or Transfer-Encoding.\n        headers = include_request_headers(headers, url=url, content=content)\n\n        request = Request(\n            method=method,\n            url=url,\n            headers=headers,\n            content=content,\n            extensions=extensions,\n        )\n        response = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/interfaces.py",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 14,
          "position": 141
        },
        "endLoc": {
          "line": 45,
          "column": 6,
          "position": 297
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py",
        "start": 27,
        "end": 45,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 139
        },
        "endLoc": {
          "line": 45,
          "column": 5,
          "position": 295
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "[Response]:\n        # Strict type checking on our parameters.\n        method = enforce_bytes(method, name=\"method\")\n        url = enforce_url(url, name=\"url\")\n        headers = enforce_headers(headers, name=\"headers\")\n\n        # Include Host header, and optionally Content-Length or Transfer-Encoding.\n        headers = include_request_headers(headers, url=url, content=content)\n\n        request = Request(\n            method=method,\n            url=url,\n            headers=headers,\n            content=content,\n            extensions=extensions,\n        )\n        response = await self.handle_async_request(request)\n        try:\n            yield",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/interfaces.py",
        "start": 61,
        "end": 79,
        "startLoc": {
          "line": 61,
          "column": 14,
          "position": 444
        },
        "endLoc": {
          "line": 79,
          "column": 6,
          "position": 582
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py",
        "start": 61,
        "end": 47,
        "startLoc": {
          "line": 61,
          "column": 9,
          "position": 434
        },
        "endLoc": {
          "line": 47,
          "column": 6,
          "position": 311
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "(self) -> None:\n        raise NotImplementedError()  # pragma: nocover\n\n    def info(self) -> str:\n        raise NotImplementedError()  # pragma: nocover\n\n    def can_handle_request(self, origin: Origin) -> bool:\n        raise NotImplementedError()  # pragma: nocover\n\n    def is_available(self) -> bool:\n        \"\"\"\n        Return `True` if the connection is currently able to accept an\n        outgoing request.\n\n        An HTTP/1.1 connection will only be available if it is currently idle.\n\n        An HTTP/2 connection will be available so long as the stream ID space is\n        not yet exhausted, and the connection is not in an error state.\n\n        While the connection is being established we may not yet know if it is going\n        to result in an HTTP/1.1 or HTTP/2 connection. The connection should be\n        treated as being available, but might ultimately raise `NewConnectionRequired`\n        required exceptions if multiple requests are attempted over a connection\n        that ends up being established as HTTP/1.1.\n        \"\"\"\n        raise NotImplementedError()  # pragma: nocover\n\n    def has_expired(self) -> bool:\n        \"\"\"\n        Return `True` if the connection is in a state where it should be closed.\n\n        This either means that the connection is idle and it has passed the\n        expiry time on its keep-alive, or that server has sent an EOF.\n        \"\"\"\n        raise NotImplementedError()  # pragma: nocover\n\n    def is_idle(self) -> bool:\n        \"\"\"\n        Return `True` if the connection is currently idle.\n        \"\"\"\n        raise NotImplementedError()  # pragma: nocover\n\n    def is_closed(self) -> bool:\n        \"\"\"\n        Return `True` if the connection has been closed.\n\n        Used when a response is closed to determine if the connection may be\n        returned to the connection pool or not.\n        \"\"\"\n        raise NotImplementedError()  # pragma: nocover",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/interfaces.py",
        "start": 88,
        "end": 137,
        "startLoc": {
          "line": 88,
          "column": 7,
          "position": 647
        },
        "endLoc": {
          "line": 137,
          "column": 18,
          "position": 826
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/interfaces.py",
        "start": 88,
        "end": 137,
        "startLoc": {
          "line": 88,
          "column": 6,
          "position": 629
        },
        "endLoc": {
          "line": 137,
          "column": 18,
          "position": 808
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": "ByteOrStr = typing.Union[bytes, str]\nHeadersAsSequence = typing.Sequence[typing.Tuple[ByteOrStr, ByteOrStr]]\nHeadersAsMapping = typing.Mapping[ByteOrStr, ByteOrStr]\n\n\nlogger = logging.getLogger(\"httpcore.proxy\")\n\n\ndef merge_headers(\n    default_headers: typing.Sequence[tuple[bytes, bytes]] | None = None,\n    override_headers: typing.Sequence[tuple[bytes, bytes]] | None = None,\n) -> list[tuple[bytes, bytes]]:\n    \"\"\"\n    Append default_headers and override_headers, de-duplicating if a key exists\n    in both cases.\n    \"\"\"\n    default_headers = [] if default_headers is None else list(default_headers)\n    override_headers = [] if override_headers is None else list(override_headers)\n    has_override = set(key.lower() for key, value in override_headers)\n    default_headers = [\n        (key, value)\n        for key, value in default_headers\n        if key.lower() not in has_override\n    ]\n    return default_headers + override_headers\n\n\nclass AsyncHTTPProxy",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 27,
        "end": 54,
        "startLoc": {
          "line": 27,
          "column": 1,
          "position": 158
        },
        "endLoc": {
          "line": 54,
          "column": 15,
          "position": 426
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 27,
        "end": 54,
        "startLoc": {
          "line": 27,
          "column": 1,
          "position": 158
        },
        "endLoc": {
          "line": 54,
          "column": 10,
          "position": 426
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "):  # pragma: nocover\n    \"\"\"\n    A connection pool that sends requests via an HTTP proxy.\n    \"\"\"\n\n    def __init__(\n        self,\n        proxy_url: URL | bytes | str,\n        proxy_auth: tuple[bytes | str, bytes | str] | None = None,\n        proxy_headers: HeadersAsMapping | HeadersAsSequence | None = None,\n        ssl_context: ssl.SSLContext | None = None,\n        proxy_ssl_context: ssl.SSLContext | None = None,\n        max_connections: int | None = 10,\n        max_keepalive_connections: int | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 54,
        "end": 74,
        "startLoc": {
          "line": 54,
          "column": 20,
          "position": 429
        },
        "endLoc": {
          "line": 74,
          "column": 20,
          "position": 657
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 54,
        "end": 74,
        "startLoc": {
          "line": 54,
          "column": 15,
          "position": 429
        },
        "endLoc": {
          "line": 74,
          "column": 15,
          "position": 657
        }
      }
    },
    {
      "format": "python",
      "lines": 73,
      "fragment": "| None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        \"\"\"\n        A connection pool for making HTTP requests.\n\n        Parameters:\n            proxy_url: The URL to use when connecting to the proxy server.\n                For example `\"http://127.0.0.1:8080/\"`.\n            proxy_auth: Any proxy authentication as a two-tuple of\n                (username, password). May be either bytes or ascii-only str.\n            proxy_headers: Any HTTP headers to use for the proxy requests.\n                For example `{\"Proxy-Authorization\": \"Basic <username>:<password>\"}`.\n            ssl_context: An SSL context to use for verifying connections.\n                If not specified, the default `httpcore.default_ssl_context()`\n                will be used.\n            proxy_ssl_context: The same as `ssl_context`, but for a proxy server rather than a remote origin.\n            max_connections: The maximum number of concurrent HTTP connections that\n                the pool should allow. Any attempt to send a request on a pool that\n                would exceed this amount will block until a connection is available.\n            max_keepalive_connections: The maximum number of idle HTTP connections\n                that will be maintained in the pool.\n            keepalive_expiry: The duration in seconds that an idle HTTP connection\n                may be maintained for before being expired from the pool.\n            http1: A boolean indicating if HTTP/1.1 requests should be supported\n                by the connection pool. Defaults to True.\n            http2: A boolean indicating if HTTP/2 requests should be supported by\n                the connection pool. Defaults to False.\n            retries: The maximum number of retries when trying to establish\n                a connection.\n            local_address: Local address to connect from. Can also be used to\n                connect using a particular address family. Using\n                `local_address=\"0.0.0.0\"` will connect using an `AF_INET` address\n                (IPv4), while using `local_address=\"::\"` will connect using an\n                `AF_INET6` address (IPv6).\n            uds: Path to a Unix Domain Socket to use instead of TCP sockets.\n            network_backend: A backend instance to use for handling network I/O.\n        \"\"\"\n        super().__init__(\n            ssl_context=ssl_context,\n            max_connections=max_connections,\n            max_keepalive_connections=max_keepalive_connections,\n            keepalive_expiry=keepalive_expiry,\n            http1=http1,\n            http2=http2,\n            network_backend=network_backend,\n            retries=retries,\n            local_address=local_address,\n            uds=uds,\n            socket_options=socket_options,\n        )\n\n        self._proxy_url = enforce_url(proxy_url, name=\"proxy_url\")\n        if (\n            self._proxy_url.scheme == b\"http\" and proxy_ssl_context is not None\n        ):  # pragma: no cover\n            raise RuntimeError(\n                \"The `proxy_ssl_context` argument is not allowed for the http scheme\"\n            )\n\n        self._ssl_context = ssl_context\n        self._proxy_ssl_context = proxy_ssl_context\n        self._proxy_headers = enforce_headers(proxy_headers, name=\"proxy_headers\")\n        if proxy_auth is not None:\n            username = enforce_bytes(proxy_auth[0], name=\"proxy_auth\")\n            password = enforce_bytes(proxy_auth[1], name=\"proxy_auth\")\n            userpass = username + b\":\" + password\n            authorization = b\"Basic \" + base64.b64encode(userpass)\n            self._proxy_headers = [\n                (b\"Proxy-Authorization\", authorization)\n            ] + self._proxy_headers\n\n    def create_connection(self, origin: Origin) -> AsyncConnectionInterface",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 74,
        "end": 146,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 659
        },
        "endLoc": {
          "line": 146,
          "column": 25,
          "position": 1002
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 74,
        "end": 146,
        "startLoc": {
          "line": 74,
          "column": 2,
          "position": 659
        },
        "endLoc": {
          "line": 146,
          "column": 20,
          "position": 1002
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "(self, request: Request) -> Response:\n        headers = merge_headers(self._proxy_headers, request.headers)\n        url = URL(\n            scheme=self._proxy_origin.scheme,\n            host=self._proxy_origin.host,\n            port=self._proxy_origin.port,\n            target=bytes(request.url),\n        )\n        proxy_request = Request(\n            method=request.method,\n            url=url,\n            headers=headers,\n            content=request.stream,\n            extensions=request.extensions,\n        )\n        return await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 191,
        "end": 206,
        "startLoc": {
          "line": 191,
          "column": 21,
          "position": 1370
        },
        "endLoc": {
          "line": 206,
          "column": 6,
          "position": 1505
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 191,
        "end": 206,
        "startLoc": {
          "line": 191,
          "column": 15,
          "position": 1368
        },
        "endLoc": {
          "line": 206,
          "column": 5,
          "position": 1503
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "()\n\n    def info(self) -> str:\n        return self._connection.info()\n\n    def is_available(self) -> bool:\n        return self._connection.is_available()\n\n    def has_expired(self) -> bool:\n        return self._connection.has_expired()\n\n    def is_idle(self) -> bool:\n        return self._connection.is_idle()\n\n    def is_closed(self) -> bool:\n        return self._connection.is_closed()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} [{self.info()}]>\"\n\n\nclass AsyncTunnelHTTPConnection",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 212,
        "end": 233,
        "startLoc": {
          "line": 212,
          "column": 7,
          "position": 1573
        },
        "endLoc": {
          "line": 233,
          "column": 26,
          "position": 1731
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 212,
        "end": 233,
        "startLoc": {
          "line": 212,
          "column": 6,
          "position": 1565
        },
        "endLoc": {
          "line": 233,
          "column": 21,
          "position": 1723
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n    def __init__(\n        self,\n        proxy_origin: Origin,\n        remote_origin: Origin,\n        ssl_context: ssl.SSLContext | None = None,\n        proxy_ssl_context: ssl.SSLContext | None = None,\n        proxy_headers: typing.Sequence[tuple[bytes, bytes]] | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 233,
        "end": 244,
        "startLoc": {
          "line": 233,
          "column": 25,
          "position": 1734
        },
        "endLoc": {
          "line": 244,
          "column": 20,
          "position": 1862
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 233,
        "end": 244,
        "startLoc": {
          "line": 233,
          "column": 20,
          "position": 1726
        },
        "endLoc": {
          "line": 244,
          "column": 15,
          "position": 1854
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "(\n            origin=proxy_origin,\n            keepalive_expiry=keepalive_expiry,\n            network_backend=network_backend,\n            socket_options=socket_options,\n            ssl_context=proxy_ssl_context,\n        )\n        self._proxy_origin = proxy_origin\n        self._remote_origin = remote_origin\n        self._ssl_context = ssl_context\n        self._proxy_ssl_context = proxy_ssl_context\n        self._proxy_headers = enforce_headers(proxy_headers, name=\"proxy_headers\")\n        self._keepalive_expiry = keepalive_expiry\n        self._http1 = http1\n        self._http2 = http2\n        self._connect_lock = AsyncLock",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 247,
        "end": 262,
        "startLoc": {
          "line": 247,
          "column": 20,
          "position": 1913
        },
        "endLoc": {
          "line": 262,
          "column": 10,
          "position": 2035
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 247,
        "end": 262,
        "startLoc": {
          "line": 247,
          "column": 15,
          "position": 1905
        },
        "endLoc": {
          "line": 262,
          "column": 5,
          "position": 2027
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "with self._connect_lock:\n            if not self._connected:\n                target = b\"%b:%d\" % (self._remote_origin.host, self._remote_origin.port)\n\n                connect_url = URL(\n                    scheme=self._proxy_origin.scheme,\n                    host=self._proxy_origin.host,\n                    port=self._proxy_origin.port,\n                    target=target,\n                )\n                connect_headers = merge_headers(\n                    [(b\"Host\", target), (b\"Accept\", b\"*/*\")], self._proxy_headers\n                )\n                connect_request = Request(\n                    method=b\"CONNECT\",\n                    url=connect_url,\n                    headers=connect_headers,\n                    extensions=request.extensions,\n                )\n                connect_response = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 269,
        "end": 288,
        "startLoc": {
          "line": 269,
          "column": 2,
          "position": 2108
        },
        "endLoc": {
          "line": 288,
          "column": 6,
          "position": 2278
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 269,
        "end": 288,
        "startLoc": {
          "line": 269,
          "column": 9,
          "position": 2096
        },
        "endLoc": {
          "line": 288,
          "column": 5,
          "position": 2266
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "()\n                    raise ProxyError(msg)\n\n                stream = connect_response.extensions[\"network_stream\"]\n\n                # Upgrade the stream to SSL\n                ssl_context = (\n                    default_ssl_context()\n                    if self._ssl_context is None\n                    else self._ssl_context\n                )\n                alpn_protocols = [\"http/1.1\", \"h2\"] if self._http2 else [\"http/1.1\"]\n                ssl_context.set_alpn_protocols(alpn_protocols)\n\n                kwargs = {\n                    \"ssl_context\": ssl_context,\n                    \"server_hostname\": self._remote_origin.host.decode(\"ascii\"),\n                    \"timeout\": timeout,\n                }\n                async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 296,
        "end": 315,
        "startLoc": {
          "line": 296,
          "column": 7,
          "position": 2377
        },
        "endLoc": {
          "line": 315,
          "column": 6,
          "position": 2512
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http_proxy.py",
        "start": 296,
        "end": 315,
        "startLoc": {
          "line": 296,
          "column": 6,
          "position": 2361
        },
        "endLoc": {
          "line": 315,
          "column": 5,
          "position": 2496
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "self._remote_origin.host.decode(\"ascii\"),\n                    \"timeout\": timeout,\n                }\n                async with Trace(\"start_tls\", logger, request, kwargs) as trace:\n                    stream = await stream.start_tls(**kwargs)\n                    trace.return_value = stream\n\n                # Determine if we should be using HTTP/1.1 or HTTP/2\n                ssl_object = stream.get_extra_info(\"ssl_object\")\n                http2_negotiated = (\n                    ssl_object is not None\n                    and ssl_object.selected_alpn_protocol() == \"h2\"\n                )\n\n                # Create the HTTP/1.1 or HTTP/2 connection\n                if http2_negotiated or (self._http2 and not self._http1):\n                    from",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 312,
        "end": 328,
        "startLoc": {
          "line": 312,
          "column": 2,
          "position": 2489
        },
        "endLoc": {
          "line": 328,
          "column": 5,
          "position": 2634
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/socks_proxy.py",
        "start": 262,
        "end": 279,
        "startLoc": {
          "line": 262,
          "column": 2,
          "position": 1991
        },
        "endLoc": {
          "line": 279,
          "column": 18,
          "position": 2139
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ")\n\n    def can_handle_request(self, origin: Origin) -> bool:\n        return origin == self._remote_origin\n\n    async def aclose(self) -> None:\n        await self._connection.aclose()\n\n    def info(self) -> str:\n        return self._connection.info()\n\n    def is_available(self) -> bool:\n        return self._connection.is_available()\n\n    def has_expired(self) -> bool:\n        return self._connection.has_expired()\n\n    def is_idle(self) -> bool:\n        return self._connection.is_idle()\n\n    def is_closed(self) -> bool:\n        return self._connection.is_closed()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} [{self.info()}]>\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 343,
        "end": 367,
        "startLoc": {
          "line": 343,
          "column": 8,
          "position": 2740
        },
        "endLoc": {
          "line": 367,
          "column": 46,
          "position": 2951
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 206,
        "end": 230,
        "startLoc": {
          "line": 206,
          "column": 14,
          "position": 1514
        },
        "endLoc": {
          "line": 230,
          "column": 46,
          "position": 1717
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "logger = logging.getLogger(\"httpcore.http2\")\n\n\ndef has_body_headers(request: Request) -> bool:\n    return any(\n        k.lower() == b\"content-length\" or k.lower() == b\"transfer-encoding\"\n        for k, v in request.headers\n    )\n\n\nclass HTTPConnectionState(enum.IntEnum):\n    ACTIVE = 1\n    IDLE = 2\n    CLOSED = 3\n\n\nclass AsyncHTTP2Connection",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 26,
        "end": 42,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 149
        },
        "endLoc": {
          "line": 42,
          "column": 21,
          "position": 263
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 26,
        "end": 42,
        "startLoc": {
          "line": 26,
          "column": 1,
          "position": 149
        },
        "endLoc": {
          "line": 42,
          "column": 16,
          "position": 263
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n        keepalive_expiry: float | None = None,\n    ):\n        self._origin = origin\n        self._network_stream = stream\n        self._keepalive_expiry: float | None = keepalive_expiry\n        self._h2_state = h2.connection.H2Connection(config=self.CONFIG)\n        self._state = HTTPConnectionState.IDLE\n        self._expire_at: float | None = None\n        self._request_count = 0\n        self._init_lock = AsyncLock",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 49,
        "end": 59,
        "startLoc": {
          "line": 49,
          "column": 19,
          "position": 319
        },
        "endLoc": {
          "line": 59,
          "column": 10,
          "position": 437
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 49,
        "end": 59,
        "startLoc": {
          "line": 49,
          "column": 14,
          "position": 319
        },
        "endLoc": {
          "line": 59,
          "column": 5,
          "position": 437
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "()\n        self._sent_connection_init = False\n        self._used_all_stream_ids = False\n        self._connection_error = False\n\n        # Mapping from stream ID to response stream events.\n        self._events: dict[\n            int,\n            list[\n                h2.events.ResponseReceived\n                | h2.events.DataReceived\n                | h2.events.StreamEnded\n                | h2.events.StreamReset,\n            ],\n        ] = {}\n\n        # Connection terminated events are stored as state since\n        # we need to handle them for all streams.\n        self._connection_terminated: h2.events.ConnectionTerminated | None = None\n\n        self._read_exception: Exception | None = None\n        self._write_exception: Exception | None = None\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 62,
        "end": 85,
        "startLoc": {
          "line": 62,
          "column": 10,
          "position": 471
        },
        "endLoc": {
          "line": 85,
          "column": 6,
          "position": 631
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 62,
        "end": 85,
        "startLoc": {
          "line": 62,
          "column": 5,
          "position": 471
        },
        "endLoc": {
          "line": 85,
          "column": 4,
          "position": 631
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "self._max_streams_semaphore.acquire()\n\n        try:\n            stream_id = self._h2_state.get_next_available_stream_id()\n            self._events[stream_id] = []\n        except h2.exceptions.NoAvailableStreamIDError:  # pragma: nocover\n            self._used_all_stream_ids = True\n            self._request_count -= 1\n            raise ConnectionNotAvailable()\n\n        try:\n            kwargs = {\"request\": request, \"stream_id\": stream_id}\n            async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 131,
        "end": 143,
        "startLoc": {
          "line": 131,
          "column": 2,
          "position": 967
        },
        "endLoc": {
          "line": 143,
          "column": 6,
          "position": 1067
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 131,
        "end": 143,
        "startLoc": {
          "line": 131,
          "column": 9,
          "position": 951
        },
        "endLoc": {
          "line": 143,
          "column": 5,
          "position": 1051
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "self._receive_response(\n                    request=request, stream_id=stream_id\n                )\n                trace.return_value = (status, headers)\n\n            return Response(\n                status=status,\n                headers=headers,\n                content=HTTP2ConnectionByteStream(self, request, stream_id=stream_id),\n                extensions={\n                    \"http_version\": b\"HTTP/2\",\n                    \"network_stream\": self._network_stream,\n                    \"stream_id\": stream_id,\n                },\n            )\n        except BaseException as exc:  # noqa: PIE786\n            with AsyncShieldCancellation",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 150,
        "end": 166,
        "startLoc": {
          "line": 150,
          "column": 2,
          "position": 1178
        },
        "endLoc": {
          "line": 166,
          "column": 24,
          "position": 1297
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 150,
        "end": 166,
        "startLoc": {
          "line": 150,
          "column": 2,
          "position": 1150
        },
        "endLoc": {
          "line": 166,
          "column": 19,
          "position": 1269
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def _send_connection_init(self, request: Request) -> None:\n        \"\"\"\n        The HTTP/2 connection requires some initial setup before we can start\n        using individual request/response streams on it.\n        \"\"\"\n        # Need to set these manually here instead of manipulating via\n        # __setitem__() otherwise the H2Connection will emit SettingsUpdate\n        # frames in addition to sending the undesired defaults.\n        self._h2_state.local_settings = h2.settings.Settings(\n            client=True,\n            initial_values={\n                # Disable PUSH_PROMISE frames from the server since we don't do anything\n                # with them for now.  Maybe when we support caching?\n                h2.settings.SettingCodes.ENABLE_PUSH: 0,\n                # These two are taken from h2 for safe defaults\n                h2.settings.SettingCodes.MAX_CONCURRENT_STREAMS: 100,\n                h2.settings.SettingCodes.MAX_HEADER_LIST_SIZE: 65536,\n            },\n        )\n\n        # Some websites (*cough* Yahoo *cough*) balk at this setting being\n        # present in the initial handshake since it's not defined in the original\n        # RFC despite the RFC mandating ignoring settings you don't know about.\n        del self._h2_state.local_settings[\n            h2.settings.SettingCodes.ENABLE_CONNECT_PROTOCOL\n        ]\n\n        self._h2_state.initiate_connection()\n        self._h2_state.increment_flow_control_window(2**24)\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 189,
        "end": 218,
        "startLoc": {
          "line": 189,
          "column": 2,
          "position": 1436
        },
        "endLoc": {
          "line": 218,
          "column": 6,
          "position": 1604
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 189,
        "end": 218,
        "startLoc": {
          "line": 189,
          "column": 5,
          "position": 1402
        },
        "endLoc": {
          "line": 218,
          "column": 5,
          "position": 1570
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": "def _send_request_headers(self, request: Request, stream_id: int) -> None:\n        \"\"\"\n        Send the request headers to a given stream ID.\n        \"\"\"\n        end_stream = not has_body_headers(request)\n\n        # In HTTP/2 the ':authority' pseudo-header is used instead of 'Host'.\n        # In order to gracefully handle HTTP/1.1 and HTTP/2 we always require\n        # HTTP/1.1 style headers, and map them appropriately if we end up on\n        # an HTTP/2 connection.\n        authority = [v for k, v in request.headers if k.lower() == b\"host\"][0]\n\n        headers = [\n            (b\":method\", request.method),\n            (b\":authority\", authority),\n            (b\":scheme\", request.url.scheme),\n            (b\":path\", request.url.target),\n        ] + [\n            (k.lower(), v)\n            for k, v in request.headers\n            if k.lower()\n            not in (\n                b\"host\",\n                b\"transfer-encoding\",\n            )\n        ]\n\n        self._h2_state.send_headers(stream_id, headers, end_stream=end_stream)\n        self._h2_state.increment_flow_control_window(2**24, stream_id=stream_id)\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 222,
        "end": 251,
        "startLoc": {
          "line": 222,
          "column": 2,
          "position": 1621
        },
        "endLoc": {
          "line": 251,
          "column": 6,
          "position": 1872
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 222,
        "end": 251,
        "startLoc": {
          "line": 222,
          "column": 5,
          "position": 1583
        },
        "endLoc": {
          "line": 251,
          "column": 5,
          "position": 1834
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "self._receive_stream_event(request, stream_id)\n            if isinstance(event, h2.events.ResponseReceived):\n                break\n\n        status_code = 200\n        headers = []\n        assert event.headers is not None\n        for k, v in event.headers:\n            if k == b\":status\":\n                status_code = int(v.decode(\"ascii\", errors=\"ignore\"))\n            elif not k.startswith(b\":\"):\n                headers.append((k, v))\n\n        return (status_code, headers)\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 294,
        "end": 309,
        "startLoc": {
          "line": 294,
          "column": 2,
          "position": 2231
        },
        "endLoc": {
          "line": 309,
          "column": 6,
          "position": 2375
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 294,
        "end": 309,
        "startLoc": {
          "line": 294,
          "column": 2,
          "position": 2169
        },
        "endLoc": {
          "line": 309,
          "column": 4,
          "position": 2313
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "with self._read_lock:\n            if self._connection_terminated is not None:\n                last_stream_id = self._connection_terminated.last_stream_id\n                if stream_id and last_stream_id and stream_id > last_stream_id:\n                    self._request_count -= 1\n                    raise ConnectionNotAvailable()\n                raise RemoteProtocolError(self._connection_terminated)\n\n            # This conditional is a bit icky. We don't want to block reading if we've\n            # actually got an event to return for a given stream. We need to do that\n            # check *within* the atomic read lock. Though it also need to be optional,\n            # because when we call it from `_wait_for_outgoing_flow` we *do* want to\n            # block until we've available flow control, event when we have events\n            # pending for the stream ID we're attempting to send on.\n            if stream_id is None or not self._events.get(stream_id):\n                events = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 349,
        "end": 364,
        "startLoc": {
          "line": 349,
          "column": 2,
          "position": 2714
        },
        "endLoc": {
          "line": 364,
          "column": 6,
          "position": 2837
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 349,
        "end": 364,
        "startLoc": {
          "line": 349,
          "column": 9,
          "position": 2638
        },
        "endLoc": {
          "line": 364,
          "column": 5,
          "position": 2761
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "self._receive_remote_settings_change(event)\n                            trace.return_value = event\n\n                    elif isinstance(\n                        event,\n                        (\n                            h2.events.ResponseReceived,\n                            h2.events.DataReceived,\n                            h2.events.StreamEnded,\n                            h2.events.StreamReset,\n                        ),\n                    ):\n                        if event.stream_id in self._events:\n                            self._events[event.stream_id].append(event)\n\n                    elif isinstance(event, h2.events.ConnectionTerminated):\n                        self._connection_terminated = event\n\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 370,
        "end": 388,
        "startLoc": {
          "line": 370,
          "column": 2,
          "position": 2900
        },
        "endLoc": {
          "line": 388,
          "column": 6,
          "position": 3027
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 370,
        "end": 388,
        "startLoc": {
          "line": 370,
          "column": 29,
          "position": 2818
        },
        "endLoc": {
          "line": 388,
          "column": 5,
          "position": 2945
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "def _receive_remote_settings_change(\n        self, event: h2.events.RemoteSettingsChanged\n    ) -> None:\n        max_concurrent_streams = event.changed_settings.get(\n            h2.settings.SettingCodes.MAX_CONCURRENT_STREAMS\n        )\n        if max_concurrent_streams:\n            new_max_streams = min(\n                max_concurrent_streams.new_value,\n                self._h2_state.local_settings.max_concurrent_streams,\n            )\n            if new_max_streams and new_max_streams != self._max_streams:\n                while new_max_streams > self._max_streams:\n                    await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 390,
        "end": 403,
        "startLoc": {
          "line": 390,
          "column": 2,
          "position": 3040
        },
        "endLoc": {
          "line": 403,
          "column": 6,
          "position": 3153
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 390,
        "end": 403,
        "startLoc": {
          "line": 390,
          "column": 5,
          "position": 2954
        },
        "endLoc": {
          "line": 403,
          "column": 5,
          "position": 3067
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "def _read_incoming_data(self, request: Request) -> list[h2.events.Event]:\n        timeouts = request.extensions.get(\"timeout\", {})\n        timeout = timeouts.get(\"read\", None)\n\n        if self._read_exception is not None:\n            raise self._read_exception  # pragma: nocover\n\n        try:\n            data = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 433,
        "end": 441,
        "startLoc": {
          "line": 433,
          "column": 2,
          "position": 3438
        },
        "endLoc": {
          "line": 441,
          "column": 6,
          "position": 3531
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 433,
        "end": 441,
        "startLoc": {
          "line": 433,
          "column": 5,
          "position": 3332
        },
        "endLoc": {
          "line": 441,
          "column": 5,
          "position": 3425
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._network_stream.read(self.READ_NUM_BYTES, timeout)\n            if data == b\"\":\n                raise RemoteProtocolError(\"Server disconnected\")\n        except Exception as exc:\n            # If we get a network error we should:\n            #\n            # 1. Save the exception and just raise it immediately on any future reads.\n            #    (For example, this means that a single read timeout or disconnect will\n            #    immediately close all pending streams. Without requiring multiple\n            #    sequential timeouts.)\n            # 2. Mark the connection as errored, so that we don't accept any other\n            #    incoming requests.\n            self._read_exception = exc\n            self._connection_error = True\n            raise exc\n\n        events: list[h2.events.Event] = self._h2_state.receive_data(data)\n\n        return events\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 441,
        "end": 461,
        "startLoc": {
          "line": 441,
          "column": 2,
          "position": 3533
        },
        "endLoc": {
          "line": 461,
          "column": 6,
          "position": 3656
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 441,
        "end": 461,
        "startLoc": {
          "line": 441,
          "column": 2,
          "position": 3425
        },
        "endLoc": {
          "line": 461,
          "column": 4,
          "position": 3548
        }
      }
    },
    {
      "format": "python",
      "lines": 51,
      "fragment": "self._receive_events(request)\n            local_flow = self._h2_state.local_flow_control_window(stream_id)\n            max_frame_size = self._h2_state.max_outbound_frame_size\n            flow = min(local_flow, max_frame_size)\n        return flow\n\n    # Interface for connection pooling...\n\n    def can_handle_request(self, origin: Origin) -> bool:\n        return origin == self._origin\n\n    def is_available(self) -> bool:\n        return (\n            self._state != HTTPConnectionState.CLOSED\n            and not self._connection_error\n            and not self._used_all_stream_ids\n            and not (\n                self._h2_state.state_machine.state\n                == h2.connection.ConnectionState.CLOSED\n            )\n        )\n\n    def has_expired(self) -> bool:\n        now = time.monotonic()\n        return self._expire_at is not None and now > self._expire_at\n\n    def is_idle(self) -> bool:\n        return self._state == HTTPConnectionState.IDLE\n\n    def is_closed(self) -> bool:\n        return self._state == HTTPConnectionState.CLOSED\n\n    def info(self) -> str:\n        origin = str(self._origin)\n        return (\n            f\"{origin!r}, HTTP/2, {self._state.name}, \"\n            f\"Request Count: {self._request_count}\"\n        )\n\n    def __repr__(self) -> str:\n        class_name = self.__class__.__name__\n        origin = str(self._origin)\n        return (\n            f\"<{class_name} [{origin!r}, {self._state.name}, \"\n            f\"Request Count: {self._request_count}]>\"\n        )\n\n    # These context managers are not used in the standard flow, but are\n    # useful for testing or working with connection instances directly.\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http2.py",
        "start": 500,
        "end": 550,
        "startLoc": {
          "line": 500,
          "column": 2,
          "position": 3930
        },
        "endLoc": {
          "line": 550,
          "column": 6,
          "position": 4309
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http2.py",
        "start": 500,
        "end": 550,
        "startLoc": {
          "line": 500,
          "column": 13,
          "position": 3812
        },
        "endLoc": {
          "line": 550,
          "column": 4,
          "position": 4191
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "def _send_request_headers(self, request: Request) -> None:\n        timeouts = request.extensions.get(\"timeout\", {})\n        timeout = timeouts.get(\"write\", None)\n\n        with map_exceptions({h11.LocalProtocolError: LocalProtocolError}):\n            event = h11.Request(\n                method=request.method,\n                target=request.url.target,\n                headers=request.headers,\n            )\n        await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 140,
        "end": 150,
        "startLoc": {
          "line": 140,
          "column": 2,
          "position": 949
        },
        "endLoc": {
          "line": 150,
          "column": 6,
          "position": 1058
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 140,
        "end": 150,
        "startLoc": {
          "line": 140,
          "column": 5,
          "position": 927
        },
        "endLoc": {
          "line": 150,
          "column": 5,
          "position": 1036
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "def _receive_response_headers(\n        self, request: Request\n    ) -> tuple[bytes, int, bytes, list[tuple[bytes, bytes]], bytes]:\n        timeouts = request.extensions.get(\"timeout\", {})\n        timeout = timeouts.get(\"read\", None)\n\n        while True:\n            event = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 170,
        "end": 177,
        "startLoc": {
          "line": 170,
          "column": 2,
          "position": 1297
        },
        "endLoc": {
          "line": 177,
          "column": 6,
          "position": 1389
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 170,
        "end": 177,
        "startLoc": {
          "line": 170,
          "column": 5,
          "position": 1259
        },
        "endLoc": {
          "line": 177,
          "column": 5,
          "position": 1351
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "self._receive_event(timeout=timeout)\n            if isinstance(event, h11.Response):\n                break\n            if (\n                isinstance(event, h11.InformationalResponse)\n                and event.status_code == 101\n            ):\n                break\n\n        http_version = b\"HTTP/\" + event.http_version\n\n        # h11 version 0.11+ supports a `raw_items` interface to get the\n        # raw header casing, rather than the enforced lowercase headers.\n        headers = event.headers.raw_items()\n\n        trailing_data, _ = self._h11_state.trailing_data\n\n        return http_version, event.status_code, event.reason, headers, trailing_data\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 177,
        "end": 196,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1391
        },
        "endLoc": {
          "line": 196,
          "column": 6,
          "position": 1525
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 177,
        "end": 196,
        "startLoc": {
          "line": 177,
          "column": 2,
          "position": 1351
        },
        "endLoc": {
          "line": 196,
          "column": 4,
          "position": 1485
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "self._network_stream.read(\n                    self.READ_NUM_BYTES, timeout=timeout\n                )\n\n                # If we feed this case through h11 we'll raise an exception like:\n                #\n                #     httpcore.RemoteProtocolError: can't handle event type\n                #     ConnectionClosed when role=SERVER and state=SEND_RESPONSE\n                #\n                # Which is accurate, but not very informative from an end-user\n                # perspective. Instead we handle this case distinctly and treat\n                # it as a ConnectError.\n                if data == b\"\" and self._h11_state.their_state == h11.SEND_RESPONSE:\n                    msg = \"Server disconnected without sending a response.\"\n                    raise RemoteProtocolError(msg)\n\n                self._h11_state.receive_data(data)\n            else:\n                # mypy fails to narrow the type in the above if statement above\n                return event  # type: ignore[return-value]\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 217,
        "end": 238,
        "startLoc": {
          "line": 217,
          "column": 2,
          "position": 1760
        },
        "endLoc": {
          "line": 238,
          "column": 6,
          "position": 1872
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 217,
        "end": 238,
        "startLoc": {
          "line": 217,
          "column": 2,
          "position": 1712
        },
        "endLoc": {
          "line": 238,
          "column": 4,
          "position": 1824
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "with self._state_lock:\n            if (\n                self._h11_state.our_state is h11.DONE\n                and self._h11_state.their_state is h11.DONE\n            ):\n                self._state = HTTPConnectionState.IDLE\n                self._h11_state.start_next_cycle()\n                if self._keepalive_expiry is not None:\n                    now = time.monotonic()\n                    self._expire_at = now + self._keepalive_expiry\n            else:\n                await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 239,
        "end": 250,
        "startLoc": {
          "line": 239,
          "column": 2,
          "position": 1890
        },
        "endLoc": {
          "line": 250,
          "column": 6,
          "position": 1999
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 239,
        "end": 250,
        "startLoc": {
          "line": 239,
          "column": 9,
          "position": 1838
        },
        "endLoc": {
          "line": 250,
          "column": 5,
          "position": 1947
        }
      }
    },
    {
      "format": "python",
      "lines": 52,
      "fragment": "# the connection, allowing for a connection pooling implementation to\n    # determine when to reuse and when to close the connection...\n\n    def can_handle_request(self, origin: Origin) -> bool:\n        return origin == self._origin\n\n    def is_available(self) -> bool:\n        # Note that HTTP/1.1 connections in the \"NEW\" state are not treated as\n        # being \"available\". The control flow which created the connection will\n        # be able to send an outgoing request, but the connection will not be\n        # acquired from the connection pool for any other request.\n        return self._state == HTTPConnectionState.IDLE\n\n    def has_expired(self) -> bool:\n        now = time.monotonic()\n        keepalive_expired = self._expire_at is not None and now > self._expire_at\n\n        # If the HTTP connection is idle but the socket is readable, then the\n        # only valid state is that the socket is about to return b\"\", indicating\n        # a server-initiated disconnect.\n        server_disconnected = (\n            self._state == HTTPConnectionState.IDLE\n            and self._network_stream.get_extra_info(\"is_readable\")\n        )\n\n        return keepalive_expired or server_disconnected\n\n    def is_idle(self) -> bool:\n        return self._state == HTTPConnectionState.IDLE\n\n    def is_closed(self) -> bool:\n        return self._state == HTTPConnectionState.CLOSED\n\n    def info(self) -> str:\n        origin = str(self._origin)\n        return (\n            f\"{origin!r}, HTTP/1.1, {self._state.name}, \"\n            f\"Request Count: {self._request_count}\"\n        )\n\n    def __repr__(self) -> str:\n        class_name = self.__class__.__name__\n        origin = str(self._origin)\n        return (\n            f\"<{class_name} [{origin!r}, {self._state.name}, \"\n            f\"Request Count: {self._request_count}]>\"\n        )\n\n    # These context managers are not used in the standard flow, but are\n    # useful for testing or working with connection instances directly.\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http11.py",
        "start": 261,
        "end": 312,
        "startLoc": {
          "line": 261,
          "column": 5,
          "position": 2061
        },
        "endLoc": {
          "line": 312,
          "column": 6,
          "position": 2404
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/http11.py",
        "start": 261,
        "end": 312,
        "startLoc": {
          "line": 261,
          "column": 5,
          "position": 2003
        },
        "endLoc": {
          "line": 312,
          "column": 4,
          "position": 2346
        }
      }
    },
    {
      "format": "python",
      "lines": 49,
      "fragment": "):\n    \"\"\"\n    A connection pool for making HTTP requests.\n    \"\"\"\n\n    def __init__(\n        self,\n        ssl_context: ssl.SSLContext | None = None,\n        proxy: Proxy | None = None,\n        max_connections: int | None = 10,\n        max_keepalive_connections: int | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: AsyncNetworkBackend | None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        \"\"\"\n        A connection pool for making HTTP requests.\n\n        Parameters:\n            ssl_context: An SSL context to use for verifying connections.\n                If not specified, the default `httpcore.default_ssl_context()`\n                will be used.\n            max_connections: The maximum number of concurrent HTTP connections that\n                the pool should allow. Any attempt to send a request on a pool that\n                would exceed this amount will block until a connection is available.\n            max_keepalive_connections: The maximum number of idle HTTP connections\n                that will be maintained in the pool.\n            keepalive_expiry: The duration in seconds that an idle HTTP connection\n                may be maintained for before being expired from the pool.\n            http1: A boolean indicating if HTTP/1.1 requests should be supported\n                by the connection pool. Defaults to True.\n            http2: A boolean indicating if HTTP/2 requests should be supported by\n                the connection pool. Defaults to False.\n            retries: The maximum number of retries when trying to establish a\n                connection.\n            local_address: Local address to connect from. Can also be used to connect\n                using a particular address family. Using `local_address=\"0.0.0.0\"`\n                will connect using an `AF_INET` address (IPv4), while using\n                `local_address=\"::\"` will connect using an `AF_INET6` address (IPv6).\n            uds: Path to a Unix Domain Socket to use instead of TCP sockets.\n            network_backend: A backend instance to use for handling network I/O.\n            socket_options: Socket options that have to be included\n             in the TCP socket when the connection was established.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 43,
        "end": 91,
        "startLoc": {
          "line": 43,
          "column": 22,
          "position": 377
        },
        "endLoc": {
          "line": 91,
          "column": 12,
          "position": 579
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 43,
        "end": 111,
        "startLoc": {
          "line": 43,
          "column": 17,
          "position": 373
        },
        "endLoc": {
          "line": 111,
          "column": 12,
          "position": 698
        }
      }
    },
    {
      "format": "python",
      "lines": 55,
      "fragment": "| None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        \"\"\"\n        A connection pool for making HTTP requests.\n\n        Parameters:\n            ssl_context: An SSL context to use for verifying connections.\n                If not specified, the default `httpcore.default_ssl_context()`\n                will be used.\n            max_connections: The maximum number of concurrent HTTP connections that\n                the pool should allow. Any attempt to send a request on a pool that\n                would exceed this amount will block until a connection is available.\n            max_keepalive_connections: The maximum number of idle HTTP connections\n                that will be maintained in the pool.\n            keepalive_expiry: The duration in seconds that an idle HTTP connection\n                may be maintained for before being expired from the pool.\n            http1: A boolean indicating if HTTP/1.1 requests should be supported\n                by the connection pool. Defaults to True.\n            http2: A boolean indicating if HTTP/2 requests should be supported by\n                the connection pool. Defaults to False.\n            retries: The maximum number of retries when trying to establish a\n                connection.\n            local_address: Local address to connect from. Can also be used to connect\n                using a particular address family. Using `local_address=\"0.0.0.0\"`\n                will connect using an `AF_INET` address (IPv4), while using\n                `local_address=\"::\"` will connect using an `AF_INET6` address (IPv6).\n            uds: Path to a Unix Domain Socket to use instead of TCP sockets.\n            network_backend: A backend instance to use for handling network I/O.\n            socket_options: Socket options that have to be included\n             in the TCP socket when the connection was established.\n        \"\"\"\n        self._ssl_context = ssl_context\n        self._proxy = proxy\n        self._max_connections = (\n            sys.maxsize if max_connections is None else max_connections\n        )\n        self._max_keepalive_connections = (\n            sys.maxsize\n            if max_keepalive_connections is None\n            else max_keepalive_connections\n        )\n        self._max_keepalive_connections = min(\n            self._max_connections, self._max_keepalive_connections\n        )\n\n        self._keepalive_expiry = keepalive_expiry\n        self._http1 = http1\n        self._http2 = http2\n        self._retries = retries\n        self._local_address = local_address\n        self._uds = uds\n\n        self._network_backend = (\n            AutoBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 60,
        "end": 114,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 540
        },
        "endLoc": {
          "line": 114,
          "column": 12,
          "position": 748
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 60,
        "end": 114,
        "startLoc": {
          "line": 60,
          "column": 2,
          "position": 536
        },
        "endLoc": {
          "line": 114,
          "column": 12,
          "position": 744
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "(\n                    proxy_origin=self._proxy.url.origin,\n                    proxy_auth=self._proxy.auth,\n                    remote_origin=origin,\n                    ssl_context=self._ssl_context,\n                    keepalive_expiry=self._keepalive_expiry,\n                    http1=self._http1,\n                    http2=self._http2,\n                    network_backend=self._network_backend,\n                )\n            elif origin.scheme == b\"http\":\n                from .http_proxy import AsyncForwardHTTPConnection",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 133,
        "end": 144,
        "startLoc": {
          "line": 133,
          "column": 22,
          "position": 909
        },
        "endLoc": {
          "line": 144,
          "column": 27,
          "position": 1003
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 133,
        "end": 144,
        "startLoc": {
          "line": 133,
          "column": 17,
          "position": 905
        },
        "endLoc": {
          "line": 144,
          "column": 22,
          "position": 999
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "(\n                proxy_origin=self._proxy.url.origin,\n                proxy_headers=self._proxy.headers,\n                proxy_ssl_context=self._proxy.ssl_context,\n                remote_origin=origin,\n                ssl_context=self._ssl_context,\n                keepalive_expiry=self._keepalive_expiry,\n                http1=self._http1,\n                http2=self._http2,\n                network_backend=self._network_backend,\n            )\n\n        return AsyncHTTPConnection",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 156,
        "end": 168,
        "startLoc": {
          "line": 156,
          "column": 26,
          "position": 1084
        },
        "endLoc": {
          "line": 168,
          "column": 20,
          "position": 1171
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 156,
        "end": 168,
        "startLoc": {
          "line": 156,
          "column": 21,
          "position": 1080
        },
        "endLoc": {
          "line": 168,
          "column": 15,
          "position": 1167
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "(\n            origin=origin,\n            ssl_context=self._ssl_context,\n            keepalive_expiry=self._keepalive_expiry,\n            http1=self._http1,\n            http2=self._http2,\n            retries=self._retries,\n            local_address=self._local_address,\n            uds=self._uds,\n            network_backend=self._network_backend,\n            socket_options=self._socket_options,\n        )\n\n    @property\n    def connections(self) -> list[AsyncConnectionInterface",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 168,
        "end": 182,
        "startLoc": {
          "line": 168,
          "column": 20,
          "position": 1172
        },
        "endLoc": {
          "line": 182,
          "column": 25,
          "position": 1273
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 168,
        "end": 182,
        "startLoc": {
          "line": 168,
          "column": 15,
          "position": 1168
        },
        "endLoc": {
          "line": 182,
          "column": 20,
          "position": 1269
        }
      }
    },
    {
      "format": "python",
      "lines": 22,
      "fragment": "(self, request: Request) -> Response:\n        \"\"\"\n        Send an HTTP request, and return an HTTP response.\n\n        This is the core implementation that is called into by `.request()` or `.stream()`.\n        \"\"\"\n        scheme = request.url.scheme.decode()\n        if scheme == \"\":\n            raise UnsupportedProtocol(\n                \"Request URL is missing an 'http://' or 'https://' protocol.\"\n            )\n        if scheme not in (\"http\", \"https\", \"ws\", \"wss\"):\n            raise UnsupportedProtocol(\n                f\"Request URL has an unsupported protocol '{scheme}://'.\"\n            )\n\n        timeouts = request.extensions.get(\"timeout\", {})\n        timeout = timeouts.get(\"pool\", None)\n\n        with self._optional_thread_lock:\n            # Add the incoming request to our request queue.\n            pool_request = AsyncPoolRequest",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 199,
        "end": 220,
        "startLoc": {
          "line": 199,
          "column": 21,
          "position": 1297
        },
        "endLoc": {
          "line": 220,
          "column": 17,
          "position": 1440
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 199,
        "end": 220,
        "startLoc": {
          "line": 199,
          "column": 15,
          "position": 1291
        },
        "endLoc": {
          "line": 220,
          "column": 12,
          "position": 1434
        }
      }
    },
    {
      "format": "python",
      "lines": 72,
      "fragment": "]:\n        \"\"\"\n        Manage the state of the connection pool, assigning incoming\n        requests to connections as available.\n\n        Called whenever a new request is added or removed from the pool.\n\n        Any closing connections are returned, allowing the I/O for closing\n        those connections to be handled seperately.\n        \"\"\"\n        closing_connections = []\n\n        # First we handle cleaning up any connections that are closed,\n        # have expired their keep-alive, or surplus idle connections.\n        for connection in list(self._connections):\n            if connection.is_closed():\n                # log: \"removing closed connection\"\n                self._connections.remove(connection)\n            elif connection.has_expired():\n                # log: \"closing expired connection\"\n                self._connections.remove(connection)\n                closing_connections.append(connection)\n            elif (\n                connection.is_idle()\n                and len([connection.is_idle() for connection in self._connections])\n                > self._max_keepalive_connections\n            ):\n                # log: \"closing idle connection\"\n                self._connections.remove(connection)\n                closing_connections.append(connection)\n\n        # Assign queued requests to connections.\n        queued_requests = [request for request in self._requests if request.is_queued()]\n        for pool_request in queued_requests:\n            origin = pool_request.request.url.origin\n            available_connections = [\n                connection\n                for connection in self._connections\n                if connection.can_handle_request(origin) and connection.is_available()\n            ]\n            idle_connections = [\n                connection for connection in self._connections if connection.is_idle()\n            ]\n\n            # There are three cases for how we may be able to handle the request:\n            #\n            # 1. There is an existing connection that can handle the request.\n            # 2. We can create a new connection to handle the request.\n            # 3. We can close an idle connection and then create a new connection\n            #    to handle the request.\n            if available_connections:\n                # log: \"reusing existing connection\"\n                connection = available_connections[0]\n                pool_request.assign_to_connection(connection)\n            elif len(self._connections) < self._max_connections:\n                # log: \"creating new connection\"\n                connection = self.create_connection(origin)\n                self._connections.append(connection)\n                pool_request.assign_to_connection(connection)\n            elif idle_connections:\n                # log: \"closing idle connection\"\n                connection = idle_connections[0]\n                self._connections.remove(connection)\n                closing_connections.append(connection)\n                # log: \"creating new connection\"\n                connection = self.create_connection(origin)\n                self._connections.append(connection)\n                pool_request.assign_to_connection(connection)\n\n        return closing_connections\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 270,
        "end": 341,
        "startLoc": {
          "line": 270,
          "column": 25,
          "position": 1746
        },
        "endLoc": {
          "line": 341,
          "column": 6,
          "position": 2205
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 270,
        "end": 341,
        "startLoc": {
          "line": 270,
          "column": 20,
          "position": 1732
        },
        "endLoc": {
          "line": 341,
          "column": 4,
          "position": 2191
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "()\n\n    def __repr__(self) -> str:\n        class_name = self.__class__.__name__\n        with self._optional_thread_lock:\n            request_is_queued = [request.is_queued() for request in self._requests]\n            connection_is_idle = [\n                connection.is_idle() for connection in self._connections\n            ]\n\n            num_active_requests = request_is_queued.count(False)\n            num_queued_requests = request_is_queued.count(True)\n            num_active_connections = connection_is_idle.count(False)\n            num_idle_connections = connection_is_idle.count(True)\n\n        requests_info = (\n            f\"Requests: {num_active_requests} active, {num_queued_requests} queued\"\n        )\n        connection_info = (\n            f\"Connections: {num_active_connections} active, {num_idle_connections} idle\"\n        )\n\n        return f\"<{class_name} [{requests_info} | {connection_info}]>\"\n\n\nclass PoolByteStream:\n    def __init__(\n        self,\n        stream: typing.AsyncIterable",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection_pool.py",
        "start": 364,
        "end": 392,
        "startLoc": {
          "line": 364,
          "column": 7,
          "position": 2422
        },
        "endLoc": {
          "line": 392,
          "column": 14,
          "position": 2617
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection_pool.py",
        "start": 364,
        "end": 392,
        "startLoc": {
          "line": 364,
          "column": 6,
          "position": 2394
        },
        "endLoc": {
          "line": 392,
          "column": 9,
          "position": 2589
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "):\n    def __init__(\n        self,\n        origin: Origin,\n        ssl_context: ssl.SSLContext | None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 38,
        "end": 49,
        "startLoc": {
          "line": 38,
          "column": 25,
          "position": 222
        },
        "endLoc": {
          "line": 49,
          "column": 20,
          "position": 341
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 38,
        "end": 49,
        "startLoc": {
          "line": 38,
          "column": 20,
          "position": 222
        },
        "endLoc": {
          "line": 49,
          "column": 15,
          "position": 341
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "| None = None,\n        keepalive_expiry: float | None = None,\n        http1: bool = True,\n        http2: bool = False,\n        retries: int = 0,\n        local_address: str | None = None,\n        uds: str | None = None,\n        network_backend: AsyncNetworkBackend | None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 42,
        "end": 52,
        "startLoc": {
          "line": 42,
          "column": 2,
          "position": 250
        },
        "endLoc": {
          "line": 52,
          "column": 5,
          "position": 382
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/http_proxy.py",
        "start": 67,
        "end": 111,
        "startLoc": {
          "line": 67,
          "column": 2,
          "position": 566
        },
        "endLoc": {
          "line": 111,
          "column": 12,
          "position": 698
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "| None = None,\n        socket_options: typing.Iterable[SOCKET_OPTION] | None = None,\n    ) -> None:\n        self._origin = origin\n        self._ssl_context = ssl_context\n        self._keepalive_expiry = keepalive_expiry\n        self._http1 = http1\n        self._http2 = http2\n        self._retries = retries\n        self._local_address = local_address\n        self._uds = uds\n\n        self._network_backend: AsyncNetworkBackend",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 49,
        "end": 61,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 343
        },
        "endLoc": {
          "line": 61,
          "column": 20,
          "position": 460
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 49,
        "end": 61,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 343
        },
        "endLoc": {
          "line": 61,
          "column": 15,
          "position": 460
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": ":\n        timeouts = request.extensions.get(\"timeout\", {})\n        sni_hostname = request.extensions.get(\"sni_hostname\", None)\n        timeout = timeouts.get(\"connect\", None)\n\n        retries_left = self._retries\n        delays = exponential_backoff(factor=RETRIES_BACKOFF_FACTOR)\n\n        while True:\n            try:\n                if self._uds is None:\n                    kwargs = {\n                        \"host\": self._origin.host.decode(\"ascii\"),\n                        \"port\": self._origin.port,\n                        \"local_address\": self._local_address,\n                        \"timeout\": timeout,\n                        \"socket_options\": self._socket_options,\n                    }\n                    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 105,
        "end": 123,
        "startLoc": {
          "line": 105,
          "column": 19,
          "position": 840
        },
        "endLoc": {
          "line": 123,
          "column": 6,
          "position": 1000
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 105,
        "end": 123,
        "startLoc": {
          "line": 105,
          "column": 14,
          "position": 830
        },
        "endLoc": {
          "line": 123,
          "column": 5,
          "position": 990
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": "self._network_backend.connect_unix_socket(\n                            **kwargs\n                        )\n                        trace.return_value = stream\n\n                if self._origin.scheme in (b\"https\", b\"wss\"):\n                    ssl_context = (\n                        default_ssl_context()\n                        if self._ssl_context is None\n                        else self._ssl_context\n                    )\n                    alpn_protocols = [\"http/1.1\", \"h2\"] if self._http2 else [\"http/1.1\"]\n                    ssl_context.set_alpn_protocols(alpn_protocols)\n\n                    kwargs = {\n                        \"ssl_context\": ssl_context,\n                        \"server_hostname\": sni_hostname\n                        or self._origin.host.decode(\"ascii\"),\n                        \"timeout\": timeout,\n                    }\n                    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 135,
        "end": 155,
        "startLoc": {
          "line": 135,
          "column": 2,
          "position": 1123
        },
        "endLoc": {
          "line": 155,
          "column": 6,
          "position": 1280
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 135,
        "end": 155,
        "startLoc": {
          "line": 135,
          "column": 2,
          "position": 1105
        },
        "endLoc": {
          "line": 155,
          "column": 5,
          "position": 1262
        }
      }
    },
    {
      "format": "python",
      "lines": 41,
      "fragment": "()\n\n    def is_available(self) -> bool:\n        if self._connection is None:\n            # If HTTP/2 support is enabled, and the resulting connection could\n            # end up as HTTP/2 then we should indicate the connection as being\n            # available to service multiple requests.\n            return (\n                self._http2\n                and (self._origin.scheme == b\"https\" or not self._http1)\n                and not self._connect_failed\n            )\n        return self._connection.is_available()\n\n    def has_expired(self) -> bool:\n        if self._connection is None:\n            return self._connect_failed\n        return self._connection.has_expired()\n\n    def is_idle(self) -> bool:\n        if self._connection is None:\n            return self._connect_failed\n        return self._connection.is_idle()\n\n    def is_closed(self) -> bool:\n        if self._connection is None:\n            return self._connect_failed\n        return self._connection.is_closed()\n\n    def info(self) -> str:\n        if self._connection is None:\n            return \"CONNECTION FAILED\" if self._connect_failed else \"CONNECTING\"\n        return self._connection.info()\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__} [{self.info()}]>\"\n\n    # These context managers are not used in the standard flow, but are\n    # useful for testing or working with connection instances directly.\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_async/connection.py",
        "start": 173,
        "end": 213,
        "startLoc": {
          "line": 173,
          "column": 7,
          "position": 1501
        },
        "endLoc": {
          "line": 213,
          "column": 6,
          "position": 1815
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_sync/connection.py",
        "start": 173,
        "end": 213,
        "startLoc": {
          "line": 173,
          "column": 6,
          "position": 1469
        },
        "endLoc": {
          "line": 213,
          "column": 4,
          "position": 1783
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "if l.startswith(\"http\"):\n                if self.same_schema and l.startswith(url.rstrip(\"/\") + \"/\"):\n                    out.add(l)\n                elif l.replace(\"https\", \"http\").startswith(\n                    url.replace(\"https\", \"http\").rstrip(\"/\") + \"/\"\n                ):\n                    # allowed to cross http <-> https\n                    out.add(l)\n            else:\n                if l not in [\"..\", \"../\"]:\n                    # Ignore FTP-like \"parent\"\n                    out.add(\"/\".join([url.rstrip(\"/\"), l.lstrip(\"/\")]))\n        if not out and url.endswith(\"/\"):\n            out = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 187,
        "end": 200,
        "startLoc": {
          "line": 187,
          "column": 13,
          "position": 1238
        },
        "endLoc": {
          "line": 200,
          "column": 6,
          "position": 1407
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 314,
        "end": 327,
        "startLoc": {
          "line": 314,
          "column": 13,
          "position": 2269
        },
        "endLoc": {
          "line": 327,
          "column": 5,
          "position": 2438
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "(self, url, start=None, end=None, **kwargs):\n        kw = self.kwargs.copy()\n        kw.update(kwargs)\n        logger.debug(url)\n\n        if start is not None or end is not None:\n            if start == end:\n                return b\"\"\n            headers = kw.pop(\"headers\", {}).copy()\n\n            headers[\"Range\"] = await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 231,
        "end": 241,
        "startLoc": {
          "line": 231,
          "column": 10,
          "position": 1663
        },
        "endLoc": {
          "line": 241,
          "column": 6,
          "position": 1782
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 356,
        "end": 366,
        "startLoc": {
          "line": 356,
          "column": 9,
          "position": 2675
        },
        "endLoc": {
          "line": 366,
          "column": 5,
          "position": 2794
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "use_seek = True\n\n            with context as f:\n                if use_seek:\n                    callback.set_size(f.seek(0, 2))\n                    f.seek(0)\n                else:\n                    callback.set_size(getattr(f, \"size\", None))\n\n                chunk = f.read(chunk_size)\n                while chunk:\n                    yield chunk\n                    callback.relative_update(len(chunk))\n                    chunk = f.read(chunk_size)\n\n        kw = self.kwargs.copy()\n        kw.update(kwargs)\n        session",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 300,
        "end": 317,
        "startLoc": {
          "line": 300,
          "column": 17,
          "position": 2300
        },
        "endLoc": {
          "line": 317,
          "column": 8,
          "position": 2438
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 412,
        "end": 430,
        "startLoc": {
          "line": 412,
          "column": 17,
          "position": 3214
        },
        "endLoc": {
          "line": 430,
          "column": 7,
          "position": 3353
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "(path, **kwargs)\n\n    def _open(\n        self,\n        path,\n        mode=\"rb\",\n        block_size=None,\n        autocommit=None,  # XXX: This differs from the base class.\n        cache_type=None,\n        cache_options=None,\n        size=None,\n        **kwargs,\n    ):\n        \"\"\"Make a file-like object\n\n        Parameters\n        ----------\n        path: str\n            Full URL with protocol\n        mode: string\n            must be \"rb\"\n        block_size: int or None\n            Bytes to download in one request; use instance value if None. If\n            zero, will return a streaming Requests file-like instance.\n        kwargs: key-value\n            Any other parameters, passed to requests calls\n        \"\"\"\n        if mode != \"rb\":\n            raise NotImplementedError\n        block_size = block_size if block_size is not None else self.block_size\n        kw = self.kwargs.copy()\n        kw[",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 342,
        "end": 373,
        "startLoc": {
          "line": 342,
          "column": 8,
          "position": 2695
        },
        "endLoc": {
          "line": 373,
          "column": 2,
          "position": 2821
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 477,
        "end": 508,
        "startLoc": {
          "line": 477,
          "column": 7,
          "position": 3815
        },
        "endLoc": {
          "line": 508,
          "column": 2,
          "position": 3941
        }
      }
    },
    {
      "format": "python",
      "lines": 37,
      "fragment": "self.url = url\n        self.session = session\n        self.details = {\"name\": url, \"size\": size, \"type\": \"file\"}\n        super().__init__(\n            fs=fs,\n            path=url,\n            mode=mode,\n            block_size=block_size,\n            cache_type=cache_type,\n            cache_options=cache_options,\n            **kwargs,\n        )\n\n    def read(self, length=-1):\n        \"\"\"Read bytes from file\n\n        Parameters\n        ----------\n        length: int\n            Read up to this many bytes. If negative, read all content to end of\n            file. If the server has not supplied the filesize, attempting to\n            read only part of the data will raise a ValueError.\n        \"\"\"\n        if (\n            (length < 0 and self.loc == 0)  # explicit read all\n            # but not when the size is known and fits into a block anyways\n            and not (self.size is not None and self.size <= self.blocksize)\n        ):\n            self._fetch_all()\n        if self.size is None:\n            if length < 0:\n                self._fetch_all()\n        else:\n            length = min(self.size - self.loc, length)\n        return super().read(length)\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 603,
        "end": 639,
        "startLoc": {
          "line": 603,
          "column": 9,
          "position": 4405
        },
        "endLoc": {
          "line": 639,
          "column": 6,
          "position": 4656
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 694,
        "end": 730,
        "startLoc": {
          "line": 694,
          "column": 9,
          "position": 5195
        },
        "endLoc": {
          "line": 730,
          "column": 4,
          "position": 5446
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ")\n\n    def _parse_content_range(self, headers):\n        \"\"\"Parse the Content-Range header\"\"\"\n        s = headers.get(\"Content-Range\", \"\")\n        m = re.match(r\"bytes (\\d+-\\d+|\\*)/(\\d+|\\*)\", s)\n        if not m:\n            return None, None, None\n\n        if m[1] == \"*\":\n            start = end = None\n        else:\n            start, end = [int(x) for x in m[1].split(\"-\")]\n        total = None if m[2] == \"*\" else int(m[2])\n        return start, end, total\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http.py",
        "start": 656,
        "end": 672,
        "startLoc": {
          "line": 656,
          "column": 16,
          "position": 4810
        },
        "endLoc": {
          "line": 672,
          "column": 6,
          "position": 4979
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/http_sync.py",
        "start": 742,
        "end": 758,
        "startLoc": {
          "line": 742,
          "column": 4,
          "position": 5569
        },
        "endLoc": {
          "line": 758,
          "column": 4,
          "position": 5738
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "if self.compression:\n            with self.fs._open(path, **kwargs) as f, open(fn, \"wb\") as f2:\n                if isinstance(f, AbstractBufferedFile):\n                    # want no type of caching if just downloading whole thing\n                    f.cache = BaseCache(0, f.cache.fetcher, f.size)\n                comp = (\n                    infer_compression(path)\n                    if self.compression == \"infer\"\n                    else self.compression\n                )\n                f = compr[comp](f, mode=\"rb\")\n                data = True\n                while data:\n                    block = getattr(f, \"blocksize\", 5 * 2**20)\n                    data = f.read(block)\n                    f2.write(data)\n        else:\n            self.fs.get_file(path, fn)\n        return",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/cached.py",
        "start": 923,
        "end": 941,
        "startLoc": {
          "line": 923,
          "column": 9,
          "position": 7162
        },
        "endLoc": {
          "line": 941,
          "column": 7,
          "position": 7367
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/implementations/cached.py",
        "start": 716,
        "end": 734,
        "startLoc": {
          "line": 716,
          "column": 9,
          "position": 4974
        },
        "endLoc": {
          "line": 734,
          "column": 5,
          "position": 5179
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ") -> None:\n        await self.send_stream.send(item)\n\n    async def send_eof(self) -> None:\n        await self.send_stream.aclose()\n\n    async def aclose(self) -> None:\n        await self.send_stream.aclose()\n        await self.receive_stream.aclose()\n\n    @property\n    def extra_attributes(self) -> Mapping[Any, Callable[[], Any]]:\n        return {\n            **self.send_stream.extra_attributes,\n            **self.receive_stream.extra_attributes,\n        }\n\n\n@dataclass(eq=False)\nclass MultiListener",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/streams/stapled.py",
        "start": 76,
        "end": 95,
        "startLoc": {
          "line": 76,
          "column": 7,
          "position": 438
        },
        "endLoc": {
          "line": 95,
          "column": 14,
          "position": 594
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/streams/stapled.py",
        "start": 40,
        "end": 59,
        "startLoc": {
          "line": 40,
          "column": 6,
          "position": 200
        },
        "endLoc": {
          "line": 59,
          "column": 20,
          "position": 356
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "]:\n        return self\n\n    def __exit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc_val: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        self.close()\n\n    def __del__(self) -> None:\n        if not self._closed:\n            warnings.warn(\n                f\"Unclosed <{self.__class__.__name__} at {id(self):x}>\",\n                ResourceWarning,\n                stacklevel=1,\n                source=self,\n            )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/streams/memory.py",
        "start": 301,
        "end": 319,
        "startLoc": {
          "line": 301,
          "column": 9,
          "position": 1858
        },
        "endLoc": {
          "line": 319,
          "column": 2,
          "position": 1982
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/streams/memory.py",
        "start": 170,
        "end": 188,
        "startLoc": {
          "line": 170,
          "column": 5,
          "position": 1116
        },
        "endLoc": {
          "line": 188,
          "column": 2,
          "position": 1240
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n        buffering: int = ...,\n        encoding: str | None = ...,\n        newline: str | None = ...,\n        suffix: str | None = ...,\n        prefix: str | None = ...,\n        dir: str | None = ...,\n        *,\n        errors: str | None = ...,\n    ): ...\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 63,
        "end": 74,
        "startLoc": {
          "line": 63,
          "column": 13,
          "position": 346
        },
        "endLoc": {
          "line": 74,
          "column": 4,
          "position": 477
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 50,
        "end": 60,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 193
        },
        "endLoc": {
          "line": 60,
          "column": 10,
          "position": 323
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "[bytes],\n        mode: OpenBinaryMode = ...,\n        buffering: int = ...,\n        encoding: str | None = ...,\n        newline: str | None = ...,\n        suffix: str | None = ...,\n        prefix: str | None = ...,\n        dir: str | None = ...,\n        delete",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 147,
        "end": 155,
        "startLoc": {
          "line": 147,
          "column": 19,
          "position": 935
        },
        "endLoc": {
          "line": 155,
          "column": 7,
          "position": 1052
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 49,
        "end": 57,
        "startLoc": {
          "line": 49,
          "column": 14,
          "position": 177
        },
        "endLoc": {
          "line": 57,
          "column": 2,
          "position": 294
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "[str],\n        mode: OpenTextMode,\n        buffering: int = ...,\n        encoding: str | None = ...,\n        newline: str | None = ...,\n        suffix: str | None = ...,\n        prefix: str | None = ...,\n        dir: str | None = ...,\n        delete: bool = ...,\n        *,\n        errors: str | None = ...,\n        delete_on_close: bool = ...,\n    ): ...\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 162,
        "end": 176,
        "startLoc": {
          "line": 162,
          "column": 19,
          "position": 1120
        },
        "endLoc": {
          "line": 176,
          "column": 4,
          "position": 1287
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 62,
        "end": 160,
        "startLoc": {
          "line": 62,
          "column": 14,
          "position": 336
        },
        "endLoc": {
          "line": 160,
          "column": 10,
          "position": 1107
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ",\n        mode: OpenBinaryMode = ...,\n        buffering: int = ...,\n        encoding: str | None = ...,\n        newline: str | None = ...,\n        suffix: str | None = ...,\n        prefix: str | None = ...,\n        dir: str | None = ...,\n        *,\n        errors: str | None = ...,\n    ): ...\n    @overload\n    def __init__(\n        self: SpooledTemporaryFile",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 244,
        "end": 257,
        "startLoc": {
          "line": 244,
          "column": 2,
          "position": 1756
        },
        "endLoc": {
          "line": 257,
          "column": 21,
          "position": 1911
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 49,
        "end": 62,
        "startLoc": {
          "line": 49,
          "column": 2,
          "position": 180
        },
        "endLoc": {
          "line": 62,
          "column": 14,
          "position": 335
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "= ...,\n        buffering: int = ...,\n        encoding: str | None = ...,\n        newline: str | None = ...,\n        suffix: str | None = ...,\n        prefix: str | None = ...,\n        dir: str | None = ...,\n        *,\n        errors: str | None = ...,\n    ): ...\n\n    def __init__(\n        self,\n        max_size",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 259,
        "end": 272,
        "startLoc": {
          "line": 259,
          "column": 2,
          "position": 1936
        },
        "endLoc": {
          "line": 272,
          "column": 9,
          "position": 2082
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 50,
        "end": 76,
        "startLoc": {
          "line": 50,
          "column": 2,
          "position": 188
        },
        "endLoc": {
          "line": 76,
          "column": 5,
          "position": 487
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "= \"w+b\",\n        buffering: int = -1,\n        encoding: str | None = None,\n        newline: str | None = None,\n        suffix: str | None = None,\n        prefix: str | None = None,\n        dir: str | None = None,\n        *,\n        errors: str | None = None,\n    ) -> None:\n        self._tempfile_params",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 273,
        "end": 283,
        "startLoc": {
          "line": 273,
          "column": 2,
          "position": 2102
        },
        "endLoc": {
          "line": 283,
          "column": 17,
          "position": 2225
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_tempfile.py",
        "start": 76,
        "end": 86,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 496
        },
        "endLoc": {
          "line": 86,
          "column": 5,
          "position": 619
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n    cwd: StrOrBytesPath | None = None,\n    env: Mapping[str, str] | None = None,\n    startupinfo: Any = None,\n    creationflags: int = 0,\n    start_new_session: bool = False,\n    pass_fds: Sequence[int] = (),\n    user: str | int | None = None,\n    group: str | int | None = None,\n    extra_groups: Iterable[str | int] | None = None,\n    umask: int = -1,\n) -> Process",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_subprocesses.py",
        "start": 133,
        "end": 144,
        "startLoc": {
          "line": 133,
          "column": 5,
          "position": 970
        },
        "endLoc": {
          "line": 144,
          "column": 8,
          "position": 1133
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_subprocesses.py",
        "start": 29,
        "end": 40,
        "startLoc": {
          "line": 29,
          "column": 5,
          "position": 285
        },
        "endLoc": {
          "line": 40,
          "column": 17,
          "position": 448
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "if local_host:\n        gai_res = await getaddrinfo(\n            str(local_host),\n            local_port,\n            family=family,\n            type=socket.SOCK_DGRAM,\n            flags=socket.AI_PASSIVE | socket.AI_ADDRCONFIG,\n        )\n        family = cast(AnyIPAddressFamily, gai_res[0][0])\n        local_address = gai_res[0][-1]\n\n    gai_res",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_sockets.py",
        "start": 525,
        "end": 536,
        "startLoc": {
          "line": 525,
          "column": 5,
          "position": 3450
        },
        "endLoc": {
          "line": 536,
          "column": 8,
          "position": 3542
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_sockets.py",
        "start": 477,
        "end": 487,
        "startLoc": {
          "line": 477,
          "column": 5,
          "position": 3183
        },
        "endLoc": {
          "line": 487,
          "column": 5,
          "position": 3274
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ",\n    buffering: int = ...,\n    encoding: str | None = ...,\n    errors: str | None = ...,\n    newline: str | None = ...,\n    closefd: bool = ...,\n    opener: Callable[[str, int], int] | None = ...,\n) -> AsyncFile[str",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_fileio.py",
        "start": 159,
        "end": 166,
        "startLoc": {
          "line": 159,
          "column": 2,
          "position": 1296
        },
        "endLoc": {
          "line": 166,
          "column": 4,
          "position": 1410
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/anyio/_core/_fileio.py",
        "start": 146,
        "end": 153,
        "startLoc": {
          "line": 146,
          "column": 15,
          "position": 1134
        },
        "endLoc": {
          "line": 153,
          "column": 6,
          "position": 1248
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(\n        self,\n        items: list[tuple[Any, Any]],\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        if not items:\n            return\n\n        write = stream.write\n        item_indent = indent + self._indent_per_level\n        delimnl = \"\\n\" + \" \" * item_indent\n        for key, ent in items:\n            write(delimnl)\n            write(key",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 413,
        "end": 430,
        "startLoc": {
          "line": 413,
          "column": 24,
          "position": 3265
        },
        "endLoc": {
          "line": 430,
          "column": 4,
          "position": 3408
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 389,
        "end": 406,
        "startLoc": {
          "line": 389,
          "column": 19,
          "position": 3053
        },
        "endLoc": {
          "line": 406,
          "column": 5,
          "position": 3196
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        self._format(object.data, stream, indent, allowance, context, level - 1)\n\n    _dispatch[_collections.UserList",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 564,
        "end": 575,
        "startLoc": {
          "line": 564,
          "column": 18,
          "position": 4534
        },
        "endLoc": {
          "line": 575,
          "column": 9,
          "position": 4632
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 551,
        "end": 562,
        "startLoc": {
          "line": 551,
          "column": 18,
          "position": 4422
        },
        "endLoc": {
          "line": 562,
          "column": 9,
          "position": 4520
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": "(\n        self,\n        object: Any,\n        stream: IO[str],\n        indent: int,\n        allowance: int,\n        context: set[int],\n        level: int,\n    ) -> None:\n        self._format(object.data, stream, indent, allowance, context, level - 1)\n\n    _dispatch[_collections.UserString",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 577,
        "end": 588,
        "startLoc": {
          "line": 577,
          "column": 20,
          "position": 4646
        },
        "endLoc": {
          "line": 588,
          "column": 11,
          "position": 4744
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_io/pprint.py",
        "start": 551,
        "end": 562,
        "startLoc": {
          "line": 551,
          "column": 18,
          "position": 4422
        },
        "endLoc": {
          "line": 562,
          "column": 9,
          "position": 4520
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "):\n\n    def __init__(self, stream,\n            default_style=None, default_flow_style=False,\n            canonical=None, indent=None, width=None,\n            allow_unicode=None, line_break=None,\n            encoding=None, explicit_start=None, explicit_end=None,\n            version=None, tags=None, sort_keys=True):\n        Emitter.__init__(self, stream, canonical=canonical,\n                indent=indent, width=width,\n                allow_unicode=allow_unicode, line_break=line_break)\n        Serializer.__init__(self, encoding=encoding,\n                explicit_start=explicit_start, explicit_end=explicit_end,\n                version=version, tags=tags)\n        SafeRepresenter",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 27,
        "end": 41,
        "startLoc": {
          "line": 27,
          "column": 9,
          "position": 273
        },
        "endLoc": {
          "line": 41,
          "column": 16,
          "position": 433
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 9,
        "end": 23,
        "startLoc": {
          "line": 9,
          "column": 13,
          "position": 67
        },
        "endLoc": {
          "line": 23,
          "column": 12,
          "position": 227
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": ", Resolver):\n\n    def __init__(self, stream,\n            default_style=None, default_flow_style=False,\n            canonical=None, indent=None, width=None,\n            allow_unicode=None, line_break=None,\n            encoding=None, explicit_start=None, explicit_end=None,\n            version=None, tags=None, sort_keys=True):\n        Emitter.__init__(self, stream, canonical=canonical,\n                indent=indent, width=width,\n                allow_unicode=allow_unicode, line_break=line_break)\n        Serializer.__init__(self, encoding=encoding,\n                explicit_start=explicit_start, explicit_end=explicit_end,\n                version=version, tags=tags)\n        Representer.__init__(self, default_style=default_style,\n                default_flow_style=default_flow_style, sort_keys=sort_keys)\n        Resolver.__init__(self)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 45,
        "end": 61,
        "startLoc": {
          "line": 45,
          "column": 12,
          "position": 476
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 668
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 27,
        "end": 25,
        "startLoc": {
          "line": 27,
          "column": 16,
          "position": 270
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 256
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": ", BaseRepresenter, BaseResolver):\n\n    def __init__(self, stream,\n            default_style=None, default_flow_style=False,\n            canonical=None, indent=None, width=None,\n            allow_unicode=None, line_break=None,\n            encoding=None, explicit_start=None, explicit_end=None,\n            version=None, tags=None, sort_keys=True):\n        CEmitter",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/cyaml.py",
        "start": 51,
        "end": 59,
        "startLoc": {
          "line": 51,
          "column": 9,
          "position": 368
        },
        "endLoc": {
          "line": 59,
          "column": 9,
          "position": 461
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 9,
        "end": 17,
        "startLoc": {
          "line": 9,
          "column": 11,
          "position": 61
        },
        "endLoc": {
          "line": 17,
          "column": 8,
          "position": 154
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ", SafeRepresenter, Resolver):\n\n    def __init__(self, stream,\n            default_style=None, default_flow_style=False,\n            canonical=None, indent=None, width=None,\n            allow_unicode=None, line_break=None,\n            encoding=None, explicit_start=None, explicit_end=None,\n            version=None, tags=None, sort_keys=True):\n        CEmitter.__init__(self, stream, canonical=canonical,\n                indent=indent, width=width, encoding=encoding,\n                allow_unicode=allow_unicode, line_break=line_break,\n                explicit_start=explicit_start, explicit_end=explicit_end,\n                version=version, tags=tags)\n        SafeRepresenter",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/cyaml.py",
        "start": 68,
        "end": 81,
        "startLoc": {
          "line": 68,
          "column": 9,
          "position": 563
        },
        "endLoc": {
          "line": 81,
          "column": 16,
          "position": 721
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 27,
        "end": 64,
        "startLoc": {
          "line": 27,
          "column": 11,
          "position": 267
        },
        "endLoc": {
          "line": 64,
          "column": 12,
          "position": 526
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": ", Serializer, Representer, Resolver):\n\n    def __init__(self, stream,\n            default_style=None, default_flow_style=False,\n            canonical=None, indent=None, width=None,\n            allow_unicode=None, line_break=None,\n            encoding=None, explicit_start=None, explicit_end=None,\n            version=None, tags=None, sort_keys=True):\n        CEmitter.__init__(self, stream, canonical=canonical,\n                indent=indent, width=width, encoding=encoding,\n                allow_unicode=allow_unicode, line_break=line_break,\n                explicit_start=explicit_start, explicit_end=explicit_end,\n                version=version, tags=tags)\n        Representer.__init__(self, default_style=default_style,\n                default_flow_style=default_flow_style, sort_keys=sort_keys)\n        Resolver.__init__(self)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/cyaml.py",
        "start": 85,
        "end": 100,
        "startLoc": {
          "line": 85,
          "column": 9,
          "position": 758
        },
        "endLoc": {
          "line": 100,
          "column": 2,
          "position": 948
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/dumper.py",
        "start": 45,
        "end": 66,
        "startLoc": {
          "line": 45,
          "column": 8,
          "position": 470
        },
        "endLoc": {
          "line": 66,
          "column": 2,
          "position": 555
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "(self, node):\n        try:\n            value = self.construct_scalar(node).encode('ascii')\n        except UnicodeEncodeError as exc:\n            raise ConstructorError(None, None,\n                    \"failed to convert base64 data into ascii: %s\" % exc,\n                    node.start_mark)\n        try:\n            if hasattr(base64, 'decodebytes'):\n                return base64.decodebytes(value)\n            else:\n                return base64.decodestring(value)\n        except binascii.Error as exc:\n            raise ConstructorError(None, None,\n                    \"failed to decode base64 data: %s\" % exc, node.start_mark)\n\n    def",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/constructor.py",
        "start": 500,
        "end": 516,
        "startLoc": {
          "line": 500,
          "column": 23,
          "position": 4292
        },
        "endLoc": {
          "line": 516,
          "column": 4,
          "position": 4434
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/yaml/constructor.py",
        "start": 294,
        "end": 310,
        "startLoc": {
          "line": 294,
          "column": 22,
          "position": 2662
        },
        "endLoc": {
          "line": 310,
          "column": 17,
          "position": 2804
        }
      }
    },
    {
      "format": "python",
      "lines": 47,
      "fragment": ":\n    \"\"\"\n    Create a pool key out of a request context dictionary.\n\n    According to RFC 3986, both the scheme and host are case-insensitive.\n    Therefore, this function normalizes both before constructing the pool\n    key for an HTTPS request. If you wish to change this behaviour, provide\n    alternate callables to ``key_fn_by_scheme``.\n\n    :param key_class:\n        The class to use when constructing the key. This should be a namedtuple\n        with the ``scheme`` and ``host`` keys at a minimum.\n    :type  key_class: namedtuple\n    :param request_context:\n        A dictionary-like object that contain the context for a request.\n    :type  request_context: dict\n\n    :return: A namedtuple that can be used as a connection pool key.\n    :rtype:  PoolKey\n    \"\"\"\n    # Since we mutate the dictionary, make a copy first\n    context = request_context.copy()\n    context[\"scheme\"] = context[\"scheme\"].lower()\n    context[\"host\"] = context[\"host\"].lower()\n\n    # These are both dictionaries and need to be transformed into frozensets\n    for key in (\"headers\", \"_proxy_headers\", \"_socks_options\"):\n        if key in context and context[key] is not None:\n            context[key] = frozenset(context[key].items())\n\n    # The socket_options key may be a list and needs to be transformed into a\n    # tuple.\n    socket_opts = context.get(\"socket_options\")\n    if socket_opts is not None:\n        context[\"socket_options\"] = tuple(socket_opts)\n\n    # Map the kwargs to the names in the namedtuple - this is necessary since\n    # namedtuples can't have fields starting with '_'.\n    for key in list(context.keys()):\n        context[\"key_\" + key] = context.pop(key)\n\n    # Default to ``None`` for keys missing from the context\n    for field in key_class._fields:\n        if field not in context:\n            context[field] = None\n\n    # Default key_blocksize to _DEFAULT_BLOCKSIZE if missing from the context",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 97,
        "end": 143,
        "startLoc": {
          "line": 97,
          "column": 8,
          "position": 702
        },
        "endLoc": {
          "line": 143,
          "column": 74,
          "position": 947
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 79,
        "end": 125,
        "startLoc": {
          "line": 79,
          "column": 2,
          "position": 446
        },
        "endLoc": {
          "line": 125,
          "column": 7,
          "position": 691
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": ":\n        \"\"\"\n        Get a :class:`urllib3.connectionpool.ConnectionPool` based on the host, port, and scheme.\n\n        If ``port`` isn't given, it will be derived from the ``scheme`` using\n        ``urllib3.connectionpool.port_by_scheme``. If ``pool_kwargs`` is\n        provided, it is merged with the instance's ``connection_pool_kw``\n        variable and used to create the new connection pool, if one is\n        needed.\n        \"\"\"\n\n        if not host:\n            raise LocationValueError(\"No host specified.\")\n\n        request_context = self._merge_pool_kwargs(pool_kwargs)\n        request_context[\"scheme\"] = scheme or \"http\"\n        if not port:\n            port = port_by_scheme.get(request_context[\"scheme\"].lower(), 80)\n        request_context[\"port\"] = port\n        request_context[\"host\"] = host\n\n        return self.connection_from_context(request_context)\n\n    def connection_from_context(\n        self, request_context:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 298,
        "end": 322,
        "startLoc": {
          "line": 298,
          "column": 19,
          "position": 1783
        },
        "endLoc": {
          "line": 322,
          "column": 2,
          "position": 1905
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 225,
        "end": 248,
        "startLoc": {
          "line": 225,
          "column": 2,
          "position": 1127
        },
        "endLoc": {
          "line": 248,
          "column": 2,
          "position": 1247
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": ":\n        \"\"\"\n        Get a :class:`urllib3.connectionpool.ConnectionPool` based on the provided pool key.\n\n        ``pool_key`` should be a namedtuple that only contains immutable\n        objects. At a minimum it must have the ``scheme``, ``host``, and\n        ``port`` fields.\n        \"\"\"\n        with self.pools.lock:\n            # If the scheme, host, or port doesn't match existing open\n            # connections, open a new ConnectionPool.\n            pool = self.pools.get(pool_key)\n            if pool:\n                return pool\n\n            # Make a fresh ConnectionPool of the desired type\n            scheme = request_context[\"scheme\"]\n            host = request_context[\"host\"]\n            port = request_context[\"port\"]\n            pool = self._new_pool(scheme, host, port, request_context=request_context)\n            self.pools[pool_key] = pool\n\n        return pool\n\n    def connection_from_url(\n        self, url:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 348,
        "end": 373,
        "startLoc": {
          "line": 348,
          "column": 19,
          "position": 2075
        },
        "endLoc": {
          "line": 373,
          "column": 2,
          "position": 2208
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 263,
        "end": 287,
        "startLoc": {
          "line": 263,
          "column": 2,
          "position": 1339
        },
        "endLoc": {
          "line": 287,
          "column": 2,
          "position": 1470
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "if self._proxy_requires_url_absolute_form(u):\n            response = conn.urlopen(method, url, **kw)\n        else:\n            response = conn.urlopen(method, u.request_uri, **kw)\n\n        redirect_location = redirect and response.get_redirect_location()\n        if not redirect_location:\n            return response\n\n        # Support relative URLs for redirecting.\n        redirect_location = urljoin(url, redirect_location)\n\n        if response.status == 303:\n            # Change the method according to RFC 9110, Section 15.4.4.\n            method = \"GET\"\n            # And lose the body not to transfer anything sensitive.\n            kw[\"body\"] = None\n            kw[\"headers\"] = HTTPHeaderDict(kw[\"headers\"])._prepare_for_method_change()\n\n        retries = kw.get(\"retries\",",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 456,
        "end": 475,
        "startLoc": {
          "line": 456,
          "column": 9,
          "position": 2682
        },
        "endLoc": {
          "line": 475,
          "column": 2,
          "position": 2849
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 373,
        "end": 392,
        "startLoc": {
          "line": 373,
          "column": 9,
          "position": 1908
        },
        "endLoc": {
          "line": 392,
          "column": 2,
          "position": 2075
        }
      }
    },
    {
      "format": "python",
      "lines": 71,
      "fragment": "try:\n            retries = retries.increment(method, url, response=response, _pool=conn)\n        except MaxRetryError:\n            if retries.raise_on_redirect:\n                response.drain_conn()\n                raise\n            return response\n\n        kw[\"retries\"] = retries\n        kw[\"redirect\"] = redirect\n\n        log.info(\"Redirecting %s -> %s\", url, redirect_location)\n\n        response.drain_conn()\n        return self.urlopen(method, redirect_location, **kw)\n\n\nclass ProxyManager(PoolManager):\n    \"\"\"\n    Behaves just like :class:`PoolManager`, but sends all requests through\n    the defined proxy, using the CONNECT method for HTTPS URLs.\n\n    :param proxy_url:\n        The URL of the proxy to be used.\n\n    :param proxy_headers:\n        A dictionary containing headers that will be sent to the proxy. In case\n        of HTTP they are being sent with each request, while in the\n        HTTPS/CONNECT case they are sent only once. Could be used for proxy\n        authentication.\n\n    :param proxy_ssl_context:\n        The proxy SSL context is used to establish the TLS connection to the\n        proxy when using HTTPS proxies.\n\n    :param use_forwarding_for_https:\n        (Defaults to False) If set to True will forward requests to the HTTPS\n        proxy to be made on behalf of the client instead of creating a TLS\n        tunnel via the CONNECT method. **Enabling this flag means that request\n        and response headers and content will be visible from the HTTPS proxy**\n        whereas tunneling keeps request and response headers and content\n        private.  IP address, target hostname, SNI, and port are always visible\n        to an HTTPS proxy even when this flag is disabled.\n\n    :param proxy_assert_hostname:\n        The hostname of the certificate to verify against.\n\n    :param proxy_assert_fingerprint:\n        The fingerprint of the certificate to verify against.\n\n    Example:\n\n    .. code-block:: python\n\n        import urllib3\n\n        proxy = urllib3.ProxyManager(\"https://localhost:3128/\")\n\n        resp1 = proxy.request(\"GET\", \"https://google.com/\")\n        resp2 = proxy.request(\"GET\", \"https://httpbin.org/\")\n\n        print(len(proxy.pools))\n        # 1\n\n        resp3 = proxy.request(\"GET\", \"https://httpbin.org/\")\n        resp4 = proxy.request(\"GET\", \"https://twitter.com/\")\n\n        print(len(proxy.pools))\n        # 3\n\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 491,
        "end": 561,
        "startLoc": {
          "line": 491,
          "column": 9,
          "position": 2986
        },
        "endLoc": {
          "line": 561,
          "column": 8,
          "position": 3115
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 407,
        "end": 462,
        "startLoc": {
          "line": 407,
          "column": 9,
          "position": 2201
        },
        "endLoc": {
          "line": 462,
          "column": 8,
          "position": 2330
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": ")\n\n        if proxy.scheme not in (\"http\", \"https\"):\n            raise ProxySchemeUnknown(proxy.scheme)\n\n        if not proxy.port:\n            port = port_by_scheme.get(proxy.scheme, 80)\n            proxy = proxy._replace(port=port)\n\n        self.proxy = proxy\n        self.proxy_headers = proxy_headers or {}\n        self.proxy_ssl_context = proxy_ssl_context\n        self.proxy_config = ProxyConfig(\n            proxy_ssl_context,\n            use_forwarding_for_https,",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/poolmanager.py",
        "start": 579,
        "end": 593,
        "startLoc": {
          "line": 579,
          "column": 14,
          "position": 3316
        },
        "endLoc": {
          "line": 593,
          "column": 2,
          "position": 3439
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/poolmanager.py",
        "start": 481,
        "end": 493,
        "startLoc": {
          "line": 481,
          "column": 10,
          "position": 2438
        },
        "endLoc": {
          "line": 493,
          "column": 2,
          "position": 2558
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "if isinstance(value, tuple):\n            if len(value) == 3:\n                filename, data, content_type = value\n            else:\n                filename, data = value\n                content_type = guess_content_type(filename)\n        else:\n            filename = None\n            content_type = None\n            data = value\n\n        request_param = cls(\n            fieldname, data, filename=filename, header_formatter=header_formatter\n        )\n        request_param.make_multipart(content_type=content_type)\n\n        return request_param\n\n    def _render_part(self, name:",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/fields.py",
        "start": 226,
        "end": 244,
        "startLoc": {
          "line": 226,
          "column": 9,
          "position": 901
        },
        "endLoc": {
          "line": 244,
          "column": 2,
          "position": 1041
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/fields.py",
        "start": 177,
        "end": 195,
        "startLoc": {
          "line": 177,
          "column": 9,
          "position": 714
        },
        "endLoc": {
          "line": 195,
          "column": 2,
          "position": 854
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "def request(\n            self,\n            method: str,\n            url: str,\n            body: _TYPE_BODY | None = None,\n            headers: typing.Mapping[str, str] | None = None,\n            # We know *at least* botocore is depending on the order of the\n            # first 3 parameters so to be safe we only mark the later ones\n            # as keyword-only to ensure we have space to extend.\n            *,\n            chunked: bool = False,\n            preload_content: bool = True,\n            decode_content: bool = True,\n            enforce_content_length: bool = True,\n        ) -> None: .",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/_base_connection.py",
        "start": 77,
        "end": 91,
        "startLoc": {
          "line": 77,
          "column": 9,
          "position": 598
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 725
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/connection.py",
        "start": 84,
        "end": 99,
        "startLoc": {
          "line": 84,
          "column": 5,
          "position": 709
        },
        "endLoc": {
          "line": 99,
          "column": 5,
          "position": 837
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": ",\n            proxy: Url | None = None,\n            proxy_config: ProxyConfig | None = None,\n            cert_reqs: int | str | None = None,\n            assert_hostname: None | str | typing.Literal[False] = None,\n            assert_fingerprint: str | None = None,\n            server_hostname: str | None = None,\n            ssl_context: ssl",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/_base_connection.py",
        "start": 148,
        "end": 155,
        "startLoc": {
          "line": 148,
          "column": 2,
          "position": 1134
        },
        "endLoc": {
          "line": 155,
          "column": 4,
          "position": 1243
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/connection.py",
        "start": 187,
        "end": 194,
        "startLoc": {
          "line": 187,
          "column": 23,
          "position": 1561
        },
        "endLoc": {
          "line": 194,
          "column": 7,
          "position": 1670
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "| None = None,\n            ca_certs: str | None = None,\n            ca_cert_dir: str | None = None,\n            ca_cert_data: None | str | bytes = None,\n            ssl_minimum_version: int | None = None,\n            ssl_maximum_version: int | None = None,\n            ssl_version: int | str | None = None,  # Deprecated\n            cert_file: str | None = None,\n            key_file: str | None = None,\n            key_password: str | None = None,\n        ) -> None: .",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/_base_connection.py",
        "start": 155,
        "end": 165,
        "startLoc": {
          "line": 155,
          "column": 2,
          "position": 1247
        },
        "endLoc": {
          "line": 165,
          "column": 2,
          "position": 1410
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/contrib/emscripten/connection.py",
        "start": 194,
        "end": 205,
        "startLoc": {
          "line": 194,
          "column": 2,
          "position": 1674
        },
        "endLoc": {
          "line": 205,
          "column": 6,
          "position": 1838
        }
      }
    },
    {
      "format": "python",
      "lines": 28,
      "fragment": ":\n    \"\"\"\n    Helper for quickly adding a StreamHandler to the logger. Useful for\n    debugging.\n\n    Returns the handler after adding it.\n    \"\"\"\n    # This method needs to be in this __init__.py to get the __name__ correct\n    # even if urllib3 is vendored within another package.\n    logger = logging.getLogger(__name__)\n    handler = logging.StreamHandler()\n    handler.setFormatter(logging.Formatter(\"%(asctime)s %(levelname)s %(message)s\"))\n    logger.addHandler(handler)\n    logger.setLevel(level)\n    logger.debug(\"Added a stderr logging handler to logger: %s\", __name__)\n    return handler\n\n\n# ... Clean up.\ndel NullHandler\n\n\n# All warning filters *must* be appended unless you're really certain that they\n# shouldn't be: otherwise, it's very hard for users to use most Python\n# mechanisms to silence them.\n# SecurityWarning's always go off by default.\nwarnings.simplefilter(\"always\", exceptions.SecurityWarning, append=True)\n# InsecurePlatformWarning's don't vary between requests, so we keep it default.",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/__init__.py",
        "start": 76,
        "end": 103,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 411
        },
        "endLoc": {
          "line": 103,
          "column": 80,
          "position": 525
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/urllib3/__init__.py",
        "start": 63,
        "end": 90,
        "startLoc": {
          "line": 63,
          "column": 2,
          "position": 311
        },
        "endLoc": {
          "line": 90,
          "column": 54,
          "position": 425
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ")\n\n        d = self.format_dict\n        # remove {bar}\n        d['bar_format'] = (d['bar_format'] or \"{l_bar}<bar/>{r_bar}\").replace(\n            \"{bar}\", \"<bar/>\")\n        msg = self.format_meter(**d)\n        if '<bar/>' in msg:\n            msg = \"\".join(re.split(r'\\|?<bar/>\\|?', msg, maxsplit=1))\n        ax",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/gui.py",
        "start": 159,
        "end": 168,
        "startLoc": {
          "line": 159,
          "column": 6,
          "position": 1359
        },
        "endLoc": {
          "line": 168,
          "column": 3,
          "position": 1453
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/tqdm/tk.py",
        "start": 131,
        "end": 139,
        "startLoc": {
          "line": 131,
          "column": 2,
          "position": 929
        },
        "endLoc": {
          "line": 139,
          "column": 5,
          "position": 1022
        }
      }
    },
    {
      "format": "python",
      "lines": 99,
      "fragment": "\"\"\"\nrequests.structures\n~~~~~~~~~~~~~~~~~~~\n\nData structures that power Requests.\n\"\"\"\n\nfrom collections import OrderedDict\n\nfrom .compat import Mapping, MutableMapping\n\n\nclass CaseInsensitiveDict(MutableMapping):\n    \"\"\"A case-insensitive ``dict``-like object.\n\n    Implements all methods and operations of\n    ``MutableMapping`` as well as dict's ``copy``. Also\n    provides ``lower_items``.\n\n    All keys are expected to be strings. The structure remembers the\n    case of the last key to be set, and ``iter(instance)``,\n    ``keys()``, ``items()``, ``iterkeys()``, and ``iteritems()``\n    will contain case-sensitive keys. However, querying and contains\n    testing is case insensitive::\n\n        cid = CaseInsensitiveDict()\n        cid['Accept'] = 'application/json'\n        cid['aCCEPT'] == 'application/json'  # True\n        list(cid) == ['Accept']  # True\n\n    For example, ``headers['content-encoding']`` will return the\n    value of a ``'Content-Encoding'`` response header, regardless\n    of how the header name was originally stored.\n\n    If the constructor, ``.update``, or equality comparison\n    operations are given keys that have equal ``.lower()``s, the\n    behavior is undefined.\n    \"\"\"\n\n    def __init__(self, data=None, **kwargs):\n        self._store = OrderedDict()\n        if data is None:\n            data = {}\n        self.update(data, **kwargs)\n\n    def __setitem__(self, key, value):\n        # Use the lowercased key for lookups, but store the actual\n        # key alongside the value.\n        self._store[key.lower()] = (key, value)\n\n    def __getitem__(self, key):\n        return self._store[key.lower()][1]\n\n    def __delitem__(self, key):\n        del self._store[key.lower()]\n\n    def __iter__(self):\n        return (casedkey for casedkey, mappedvalue in self._store.values())\n\n    def __len__(self):\n        return len(self._store)\n\n    def lower_items(self):\n        \"\"\"Like iteritems(), but with all lowercase keys.\"\"\"\n        return ((lowerkey, keyval[1]) for (lowerkey, keyval) in self._store.items())\n\n    def __eq__(self, other):\n        if isinstance(other, Mapping):\n            other = CaseInsensitiveDict(other)\n        else:\n            return NotImplemented\n        # Compare insensitively\n        return dict(self.lower_items()) == dict(other.lower_items())\n\n    # Copy is required\n    def copy(self):\n        return CaseInsensitiveDict(self._store.values())\n\n    def __repr__(self):\n        return str(dict(self.items()))\n\n\nclass LookupDict(dict):\n    \"\"\"Dictionary lookup object.\"\"\"\n\n    def __init__(self, name=None):\n        self.name = name\n        super().__init__()\n\n    def __repr__(self):\n        return f\"<lookup '{self.name}'>\"\n\n    def __getitem__(self, key):\n        # We allow fall-through here, so values default to None\n\n        return self.__dict__.get(key, None)\n\n    def get(self, key, default=None):\n        return self.__dict__.get(key, default)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/structures.py",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 551
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/structures.py",
        "start": 1,
        "end": 99,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 99,
          "column": 2,
          "position": 551
        }
      }
    },
    {
      "format": "python",
      "lines": 128,
      "fragment": "r\"\"\"\nThe ``codes`` object defines a mapping from common names for HTTP statuses\nto their numerical codes, accessible either as attributes or as dictionary\nitems.\n\nExample::\n\n    >>> import requests\n    >>> requests.codes['temporary_redirect']\n    307\n    >>> requests.codes.teapot\n    418\n    >>> requests.codes['\\o/']\n    200\n\nSome codes have multiple names, and both upper- and lower-case versions of\nthe names are allowed. For example, ``codes.ok``, ``codes.OK``, and\n``codes.okay`` all correspond to the HTTP status code 200.\n\"\"\"\n\nfrom .structures import LookupDict\n\n_codes = {\n    # Informational.\n    100: (\"continue\",),\n    101: (\"switching_protocols\",),\n    102: (\"processing\", \"early-hints\"),\n    103: (\"checkpoint\",),\n    122: (\"uri_too_long\", \"request_uri_too_long\"),\n    200: (\"ok\", \"okay\", \"all_ok\", \"all_okay\", \"all_good\", \"\\\\o/\", \"✓\"),\n    201: (\"created\",),\n    202: (\"accepted\",),\n    203: (\"non_authoritative_info\", \"non_authoritative_information\"),\n    204: (\"no_content\",),\n    205: (\"reset_content\", \"reset\"),\n    206: (\"partial_content\", \"partial\"),\n    207: (\"multi_status\", \"multiple_status\", \"multi_stati\", \"multiple_stati\"),\n    208: (\"already_reported\",),\n    226: (\"im_used\",),\n    # Redirection.\n    300: (\"multiple_choices\",),\n    301: (\"moved_permanently\", \"moved\", \"\\\\o-\"),\n    302: (\"found\",),\n    303: (\"see_other\", \"other\"),\n    304: (\"not_modified\",),\n    305: (\"use_proxy\",),\n    306: (\"switch_proxy\",),\n    307: (\"temporary_redirect\", \"temporary_moved\", \"temporary\"),\n    308: (\n        \"permanent_redirect\",\n        \"resume_incomplete\",\n        \"resume\",\n    ),  # \"resume\" and \"resume_incomplete\" to be removed in 3.0\n    # Client Error.\n    400: (\"bad_request\", \"bad\"),\n    401: (\"unauthorized\",),\n    402: (\"payment_required\", \"payment\"),\n    403: (\"forbidden\",),\n    404: (\"not_found\", \"-o-\"),\n    405: (\"method_not_allowed\", \"not_allowed\"),\n    406: (\"not_acceptable\",),\n    407: (\"proxy_authentication_required\", \"proxy_auth\", \"proxy_authentication\"),\n    408: (\"request_timeout\", \"timeout\"),\n    409: (\"conflict\",),\n    410: (\"gone\",),\n    411: (\"length_required\",),\n    412: (\"precondition_failed\", \"precondition\"),\n    413: (\"request_entity_too_large\", \"content_too_large\"),\n    414: (\"request_uri_too_large\", \"uri_too_long\"),\n    415: (\"unsupported_media_type\", \"unsupported_media\", \"media_type\"),\n    416: (\n        \"requested_range_not_satisfiable\",\n        \"requested_range\",\n        \"range_not_satisfiable\",\n    ),\n    417: (\"expectation_failed\",),\n    418: (\"im_a_teapot\", \"teapot\", \"i_am_a_teapot\"),\n    421: (\"misdirected_request\",),\n    422: (\"unprocessable_entity\", \"unprocessable\", \"unprocessable_content\"),\n    423: (\"locked\",),\n    424: (\"failed_dependency\", \"dependency\"),\n    425: (\"unordered_collection\", \"unordered\", \"too_early\"),\n    426: (\"upgrade_required\", \"upgrade\"),\n    428: (\"precondition_required\", \"precondition\"),\n    429: (\"too_many_requests\", \"too_many\"),\n    431: (\"header_fields_too_large\", \"fields_too_large\"),\n    444: (\"no_response\", \"none\"),\n    449: (\"retry_with\", \"retry\"),\n    450: (\"blocked_by_windows_parental_controls\", \"parental_controls\"),\n    451: (\"unavailable_for_legal_reasons\", \"legal_reasons\"),\n    499: (\"client_closed_request\",),\n    # Server Error.\n    500: (\"internal_server_error\", \"server_error\", \"/o\\\\\", \"✗\"),\n    501: (\"not_implemented\",),\n    502: (\"bad_gateway\",),\n    503: (\"service_unavailable\", \"unavailable\"),\n    504: (\"gateway_timeout\",),\n    505: (\"http_version_not_supported\", \"http_version\"),\n    506: (\"variant_also_negotiates\",),\n    507: (\"insufficient_storage\",),\n    509: (\"bandwidth_limit_exceeded\", \"bandwidth\"),\n    510: (\"not_extended\",),\n    511: (\"network_authentication_required\", \"network_auth\", \"network_authentication\"),\n}\n\ncodes = LookupDict(name=\"status_codes\")\n\n\ndef _init():\n    for code, titles in _codes.items():\n        for title in titles:\n            setattr(codes, title, code)\n            if not title.startswith((\"\\\\\", \"/\")):\n                setattr(codes, title.upper(), code)\n\n    def doc(code):\n        names = \", \".join(f\"``{n}``\" for n in _codes[code])\n        return \"* %d: %s\" % (code, names)\n\n    global __doc__\n    __doc__ = (\n        __doc__ + \"\\n\" + \"\\n\".join(doc(code) for code in sorted(_codes))\n        if __doc__ is not None\n        else None\n    )\n\n\n_init()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/status_codes.py",
        "start": 1,
        "end": 128,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1073
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/status_codes.py",
        "start": 1,
        "end": 128,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 128,
          "column": 2,
          "position": 1073
        }
      }
    },
    {
      "format": "python",
      "lines": 831,
      "fragment": "\"\"\"\nrequests.sessions\n~~~~~~~~~~~~~~~~~\n\nThis module provides a Session object to manage and persist settings across\nrequests (cookies, auth, proxies).\n\"\"\"\nimport os\nimport sys\nimport time\nfrom collections import OrderedDict\nfrom datetime import timedelta\n\nfrom ._internal_utils import to_native_string\nfrom .adapters import HTTPAdapter\nfrom .auth import _basic_auth_str\nfrom .compat import Mapping, cookielib, urljoin, urlparse\nfrom .cookies import (\n    RequestsCookieJar,\n    cookiejar_from_dict,\n    extract_cookies_to_jar,\n    merge_cookies,\n)\nfrom .exceptions import (\n    ChunkedEncodingError,\n    ContentDecodingError,\n    InvalidSchema,\n    TooManyRedirects,\n)\nfrom .hooks import default_hooks, dispatch_hook\n\n# formerly defined here, reexposed here for backward compatibility\nfrom .models import (  # noqa: F401\n    DEFAULT_REDIRECT_LIMIT,\n    REDIRECT_STATI,\n    PreparedRequest,\n    Request,\n)\nfrom .status_codes import codes\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (  # noqa: F401\n    DEFAULT_PORTS,\n    default_headers,\n    get_auth_from_url,\n    get_environ_proxies,\n    get_netrc_auth,\n    requote_uri,\n    resolve_proxies,\n    rewind_body,\n    should_bypass_proxies,\n    to_key_val_list,\n)\n\n# Preferred clock, based on which one is more accurate on a given system.\nif sys.platform == \"win32\":\n    preferred_clock = time.perf_counter\nelse:\n    preferred_clock = time.time\n\n\ndef merge_setting(request_setting, session_setting, dict_class=OrderedDict):\n    \"\"\"Determines appropriate setting for a given request, taking into account\n    the explicit setting on that request, and the setting in the session. If a\n    setting is a dictionary, they will be merged together using `dict_class`\n    \"\"\"\n\n    if session_setting is None:\n        return request_setting\n\n    if request_setting is None:\n        return session_setting\n\n    # Bypass if not a dictionary (e.g. verify)\n    if not (\n        isinstance(session_setting, Mapping) and isinstance(request_setting, Mapping)\n    ):\n        return request_setting\n\n    merged_setting = dict_class(to_key_val_list(session_setting))\n    merged_setting.update(to_key_val_list(request_setting))\n\n    # Remove keys that are set to None. Extract keys first to avoid altering\n    # the dictionary during iteration.\n    none_keys = [k for (k, v) in merged_setting.items() if v is None]\n    for key in none_keys:\n        del merged_setting[key]\n\n    return merged_setting\n\n\ndef merge_hooks(request_hooks, session_hooks, dict_class=OrderedDict):\n    \"\"\"Properly merges both requests and session hooks.\n\n    This is necessary because when request_hooks == {'response': []}, the\n    merge breaks Session hooks entirely.\n    \"\"\"\n    if session_hooks is None or session_hooks.get(\"response\") == []:\n        return request_hooks\n\n    if request_hooks is None or request_hooks.get(\"response\") == []:\n        return session_hooks\n\n    return merge_setting(request_hooks, session_hooks, dict_class)\n\n\nclass SessionRedirectMixin:\n    def get_redirect_target(self, resp):\n        \"\"\"Receives a Response. Returns a redirect URI or ``None``\"\"\"\n        # Due to the nature of how requests processes redirects this method will\n        # be called at least once upon the original response and at least twice\n        # on each subsequent redirect response (if any).\n        # If a custom mixin is used to handle this logic, it may be advantageous\n        # to cache the redirect location onto the response object as a private\n        # attribute.\n        if resp.is_redirect:\n            location = resp.headers[\"location\"]\n            # Currently the underlying http module on py3 decode headers\n            # in latin1, but empirical evidence suggests that latin1 is very\n            # rarely used with non-ASCII characters in HTTP headers.\n            # It is more likely to get UTF8 header rather than latin1.\n            # This causes incorrect handling of UTF8 encoded location headers.\n            # To solve this, we re-encode the location in latin1.\n            location = location.encode(\"latin1\")\n            return to_native_string(location, \"utf8\")\n        return None\n\n    def should_strip_auth(self, old_url, new_url):\n        \"\"\"Decide whether Authorization header should be removed when redirecting\"\"\"\n        old_parsed = urlparse(old_url)\n        new_parsed = urlparse(new_url)\n        if old_parsed.hostname != new_parsed.hostname:\n            return True\n        # Special case: allow http -> https redirect when using the standard\n        # ports. This isn't specified by RFC 7235, but is kept to avoid\n        # breaking backwards compatibility with older versions of requests\n        # that allowed any redirects on the same host.\n        if (\n            old_parsed.scheme == \"http\"\n            and old_parsed.port in (80, None)\n            and new_parsed.scheme == \"https\"\n            and new_parsed.port in (443, None)\n        ):\n            return False\n\n        # Handle default port usage corresponding to scheme.\n        changed_port = old_parsed.port != new_parsed.port\n        changed_scheme = old_parsed.scheme != new_parsed.scheme\n        default_port = (DEFAULT_PORTS.get(old_parsed.scheme, None), None)\n        if (\n            not changed_scheme\n            and old_parsed.port in default_port\n            and new_parsed.port in default_port\n        ):\n            return False\n\n        # Standard case: root URI must match\n        return changed_port or changed_scheme\n\n    def resolve_redirects(\n        self,\n        resp,\n        req,\n        stream=False,\n        timeout=None,\n        verify=True,\n        cert=None,\n        proxies=None,\n        yield_requests=False,\n        **adapter_kwargs,\n    ):\n        \"\"\"Receives a Response. Returns a generator of Responses or Requests.\"\"\"\n\n        hist = []  # keep track of history\n\n        url = self.get_redirect_target(resp)\n        previous_fragment = urlparse(req.url).fragment\n        while url:\n            prepared_request = req.copy()\n\n            # Update history and keep track of redirects.\n            # resp.history must ignore the original request in this loop\n            hist.append(resp)\n            resp.history = hist[1:]\n\n            try:\n                resp.content  # Consume socket so it can be released\n            except (ChunkedEncodingError, ContentDecodingError, RuntimeError):\n                resp.raw.read(decode_content=False)\n\n            if len(resp.history) >= self.max_redirects:\n                raise TooManyRedirects(\n                    f\"Exceeded {self.max_redirects} redirects.\", response=resp\n                )\n\n            # Release the connection back into the pool.\n            resp.close()\n\n            # Handle redirection without scheme (see: RFC 1808 Section 4)\n            if url.startswith(\"//\"):\n                parsed_rurl = urlparse(resp.url)\n                url = \":\".join([to_native_string(parsed_rurl.scheme), url])\n\n            # Normalize url case and attach previous fragment if needed (RFC 7231 7.1.2)\n            parsed = urlparse(url)\n            if parsed.fragment == \"\" and previous_fragment:\n                parsed = parsed._replace(fragment=previous_fragment)\n            elif parsed.fragment:\n                previous_fragment = parsed.fragment\n            url = parsed.geturl()\n\n            # Facilitate relative 'location' headers, as allowed by RFC 7231.\n            # (e.g. '/path/to/resource' instead of 'http://domain.tld/path/to/resource')\n            # Compliant with RFC3986, we percent encode the url.\n            if not parsed.netloc:\n                url = urljoin(resp.url, requote_uri(url))\n            else:\n                url = requote_uri(url)\n\n            prepared_request.url = to_native_string(url)\n\n            self.rebuild_method(prepared_request, resp)\n\n            # https://github.com/psf/requests/issues/1084\n            if resp.status_code not in (\n                codes.temporary_redirect,\n                codes.permanent_redirect,\n            ):\n                # https://github.com/psf/requests/issues/3490\n                purged_headers = (\"Content-Length\", \"Content-Type\", \"Transfer-Encoding\")\n                for header in purged_headers:\n                    prepared_request.headers.pop(header, None)\n                prepared_request.body = None\n\n            headers = prepared_request.headers\n            headers.pop(\"Cookie\", None)\n\n            # Extract any cookies sent on the response to the cookiejar\n            # in the new request. Because we've mutated our copied prepared\n            # request, use the old one that we haven't yet touched.\n            extract_cookies_to_jar(prepared_request._cookies, req, resp.raw)\n            merge_cookies(prepared_request._cookies, self.cookies)\n            prepared_request.prepare_cookies(prepared_request._cookies)\n\n            # Rebuild auth and proxy information.\n            proxies = self.rebuild_proxies(prepared_request, proxies)\n            self.rebuild_auth(prepared_request, resp)\n\n            # A failed tell() sets `_body_position` to `object()`. This non-None\n            # value ensures `rewindable` will be True, allowing us to raise an\n            # UnrewindableBodyError, instead of hanging the connection.\n            rewindable = prepared_request._body_position is not None and (\n                \"Content-Length\" in headers or \"Transfer-Encoding\" in headers\n            )\n\n            # Attempt to rewind consumed file-like object.\n            if rewindable:\n                rewind_body(prepared_request)\n\n            # Override the original request.\n            req = prepared_request\n\n            if yield_requests:\n                yield req\n            else:\n                resp = self.send(\n                    req,\n                    stream=stream,\n                    timeout=timeout,\n                    verify=verify,\n                    cert=cert,\n                    proxies=proxies,\n                    allow_redirects=False,\n                    **adapter_kwargs,\n                )\n\n                extract_cookies_to_jar(self.cookies, prepared_request, resp.raw)\n\n                # extract redirect url, if any, for the next loop\n                url = self.get_redirect_target(resp)\n                yield resp\n\n    def rebuild_auth(self, prepared_request, response):\n        \"\"\"When being redirected we may want to strip authentication from the\n        request to avoid leaking credentials. This method intelligently removes\n        and reapplies authentication where possible to avoid credential loss.\n        \"\"\"\n        headers = prepared_request.headers\n        url = prepared_request.url\n\n        if \"Authorization\" in headers and self.should_strip_auth(\n            response.request.url, url\n        ):\n            # If we get redirected to a new host, we should strip out any\n            # authentication headers.\n            del headers[\"Authorization\"]\n\n        # .netrc might have more auth for us on our new host.\n        new_auth = get_netrc_auth(url) if self.trust_env else None\n        if new_auth is not None:\n            prepared_request.prepare_auth(new_auth)\n\n    def rebuild_proxies(self, prepared_request, proxies):\n        \"\"\"This method re-evaluates the proxy configuration by considering the\n        environment variables. If we are redirected to a URL covered by\n        NO_PROXY, we strip the proxy configuration. Otherwise, we set missing\n        proxy keys for this URL (in case they were stripped by a previous\n        redirect).\n\n        This method also replaces the Proxy-Authorization header where\n        necessary.\n\n        :rtype: dict\n        \"\"\"\n        headers = prepared_request.headers\n        scheme = urlparse(prepared_request.url).scheme\n        new_proxies = resolve_proxies(prepared_request, proxies, self.trust_env)\n\n        if \"Proxy-Authorization\" in headers:\n            del headers[\"Proxy-Authorization\"]\n\n        try:\n            username, password = get_auth_from_url(new_proxies[scheme])\n        except KeyError:\n            username, password = None, None\n\n        # urllib3 handles proxy authorization for us in the standard adapter.\n        # Avoid appending this to TLS tunneled requests where it may be leaked.\n        if not scheme.startswith(\"https\") and username and password:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n\n        return new_proxies\n\n    def rebuild_method(self, prepared_request, response):\n        \"\"\"When being redirected we may want to change the method of the request\n        based on certain specs or browser behavior.\n        \"\"\"\n        method = prepared_request.method\n\n        # https://tools.ietf.org/html/rfc7231#section-6.4.4\n        if response.status_code == codes.see_other and method != \"HEAD\":\n            method = \"GET\"\n\n        # Do what the browsers do, despite standards...\n        # First, turn 302s into GETs.\n        if response.status_code == codes.found and method != \"HEAD\":\n            method = \"GET\"\n\n        # Second, if a POST is responded to with a 301, turn it into a GET.\n        # This bizarre behaviour is explained in Issue 1704.\n        if response.status_code == codes.moved and method == \"POST\":\n            method = \"GET\"\n\n        prepared_request.method = method\n\n\nclass Session(SessionRedirectMixin):\n    \"\"\"A Requests session.\n\n    Provides cookie persistence, connection-pooling, and configuration.\n\n    Basic Usage::\n\n      >>> import requests\n      >>> s = requests.Session()\n      >>> s.get('https://httpbin.org/get')\n      <Response [200]>\n\n    Or as a context manager::\n\n      >>> with requests.Session() as s:\n      ...     s.get('https://httpbin.org/get')\n      <Response [200]>\n    \"\"\"\n\n    __attrs__ = [\n        \"headers\",\n        \"cookies\",\n        \"auth\",\n        \"proxies\",\n        \"hooks\",\n        \"params\",\n        \"verify\",\n        \"cert\",\n        \"adapters\",\n        \"stream\",\n        \"trust_env\",\n        \"max_redirects\",\n    ]\n\n    def __init__(self):\n        #: A case-insensitive dictionary of headers to be sent on each\n        #: :class:`Request <Request>` sent from this\n        #: :class:`Session <Session>`.\n        self.headers = default_headers()\n\n        #: Default Authentication tuple or object to attach to\n        #: :class:`Request <Request>`.\n        self.auth = None\n\n        #: Dictionary mapping protocol or protocol and host to the URL of the proxy\n        #: (e.g. {'http': 'foo.bar:3128', 'http://host.name': 'foo.bar:4012'}) to\n        #: be used on each :class:`Request <Request>`.\n        self.proxies = {}\n\n        #: Event-handling hooks.\n        self.hooks = default_hooks()\n\n        #: Dictionary of querystring data to attach to each\n        #: :class:`Request <Request>`. The dictionary values may be lists for\n        #: representing multivalued query parameters.\n        self.params = {}\n\n        #: Stream response content default.\n        self.stream = False\n\n        #: SSL Verification default.\n        #: Defaults to `True`, requiring requests to verify the TLS certificate at the\n        #: remote end.\n        #: If verify is set to `False`, requests will accept any TLS certificate\n        #: presented by the server, and will ignore hostname mismatches and/or\n        #: expired certificates, which will make your application vulnerable to\n        #: man-in-the-middle (MitM) attacks.\n        #: Only set this to `False` for testing.\n        self.verify = True\n\n        #: SSL client certificate default, if String, path to ssl client\n        #: cert file (.pem). If Tuple, ('cert', 'key') pair.\n        self.cert = None\n\n        #: Maximum number of redirects allowed. If the request exceeds this\n        #: limit, a :class:`TooManyRedirects` exception is raised.\n        #: This defaults to requests.models.DEFAULT_REDIRECT_LIMIT, which is\n        #: 30.\n        self.max_redirects = DEFAULT_REDIRECT_LIMIT\n\n        #: Trust environment settings for proxy configuration, default\n        #: authentication and similar.\n        self.trust_env = True\n\n        #: A CookieJar containing all currently outstanding cookies set on this\n        #: session. By default it is a\n        #: :class:`RequestsCookieJar <requests.cookies.RequestsCookieJar>`, but\n        #: may be any other ``cookielib.CookieJar`` compatible object.\n        self.cookies = cookiejar_from_dict({})\n\n        # Default connection adapters.\n        self.adapters = OrderedDict()\n        self.mount(\"https://\", HTTPAdapter())\n        self.mount(\"http://\", HTTPAdapter())\n\n    def __enter__(self):\n        return self\n\n    def __exit__(self, *args):\n        self.close()\n\n    def prepare_request(self, request):\n        \"\"\"Constructs a :class:`PreparedRequest <PreparedRequest>` for\n        transmission and returns it. The :class:`PreparedRequest` has settings\n        merged from the :class:`Request <Request>` instance and those of the\n        :class:`Session`.\n\n        :param request: :class:`Request` instance to prepare with this\n            session's settings.\n        :rtype: requests.PreparedRequest\n        \"\"\"\n        cookies = request.cookies or {}\n\n        # Bootstrap CookieJar.\n        if not isinstance(cookies, cookielib.CookieJar):\n            cookies = cookiejar_from_dict(cookies)\n\n        # Merge with session cookies\n        merged_cookies = merge_cookies(\n            merge_cookies(RequestsCookieJar(), self.cookies), cookies\n        )\n\n        # Set environment's basic authentication if not explicitly set.\n        auth = request.auth\n        if self.trust_env and not auth and not self.auth:\n            auth = get_netrc_auth(request.url)\n\n        p = PreparedRequest()\n        p.prepare(\n            method=request.method.upper(),\n            url=request.url,\n            files=request.files,\n            data=request.data,\n            json=request.json,\n            headers=merge_setting(\n                request.headers, self.headers, dict_class=CaseInsensitiveDict\n            ),\n            params=merge_setting(request.params, self.params),\n            auth=merge_setting(auth, self.auth),\n            cookies=merged_cookies,\n            hooks=merge_hooks(request.hooks, self.hooks),\n        )\n        return p\n\n    def request(\n        self,\n        method,\n        url,\n        params=None,\n        data=None,\n        headers=None,\n        cookies=None,\n        files=None,\n        auth=None,\n        timeout=None,\n        allow_redirects=True,\n        proxies=None,\n        hooks=None,\n        stream=None,\n        verify=None,\n        cert=None,\n        json=None,\n    ):\n        \"\"\"Constructs a :class:`Request <Request>`, prepares it and sends it.\n        Returns :class:`Response <Response>` object.\n\n        :param method: method for the new :class:`Request` object.\n        :param url: URL for the new :class:`Request` object.\n        :param params: (optional) Dictionary or bytes to be sent in the query\n            string for the :class:`Request`.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json to send in the body of the\n            :class:`Request`.\n        :param headers: (optional) Dictionary of HTTP Headers to send with the\n            :class:`Request`.\n        :param cookies: (optional) Dict or CookieJar object to send with the\n            :class:`Request`.\n        :param files: (optional) Dictionary of ``'filename': file-like-objects``\n            for multipart encoding upload.\n        :param auth: (optional) Auth tuple or callable to enable\n            Basic/Digest/Custom HTTP Auth.\n        :param timeout: (optional) How many seconds to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param allow_redirects: (optional) Set to True by default.\n        :type allow_redirects: bool\n        :param proxies: (optional) Dictionary mapping protocol or protocol and\n            hostname to the URL of the proxy.\n        :param hooks: (optional) Dictionary mapping hook name to one event or\n            list of events, event must be callable.\n        :param stream: (optional) whether to immediately download the response\n            content. Defaults to ``False``.\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``. When set to\n            ``False``, requests will accept any TLS certificate presented by\n            the server, and will ignore hostname mismatches and/or expired\n            certificates, which will make your application vulnerable to\n            man-in-the-middle (MitM) attacks. Setting verify to ``False``\n            may be useful during local development or testing.\n        :param cert: (optional) if String, path to ssl client cert file (.pem).\n            If Tuple, ('cert', 'key') pair.\n        :rtype: requests.Response\n        \"\"\"\n        # Create the Request.\n        req = Request(\n            method=method.upper(),\n            url=url,\n            headers=headers,\n            files=files,\n            data=data or {},\n            json=json,\n            params=params or {},\n            auth=auth,\n            cookies=cookies,\n            hooks=hooks,\n        )\n        prep = self.prepare_request(req)\n\n        proxies = proxies or {}\n\n        settings = self.merge_environment_settings(\n            prep.url, proxies, stream, verify, cert\n        )\n\n        # Send the request.\n        send_kwargs = {\n            \"timeout\": timeout,\n            \"allow_redirects\": allow_redirects,\n        }\n        send_kwargs.update(settings)\n        resp = self.send(prep, **send_kwargs)\n\n        return resp\n\n    def get(self, url, **kwargs):\n        r\"\"\"Sends a GET request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        kwargs.setdefault(\"allow_redirects\", True)\n        return self.request(\"GET\", url, **kwargs)\n\n    def options(self, url, **kwargs):\n        r\"\"\"Sends a OPTIONS request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        kwargs.setdefault(\"allow_redirects\", True)\n        return self.request(\"OPTIONS\", url, **kwargs)\n\n    def head(self, url, **kwargs):\n        r\"\"\"Sends a HEAD request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        kwargs.setdefault(\"allow_redirects\", False)\n        return self.request(\"HEAD\", url, **kwargs)\n\n    def post(self, url, data=None, json=None, **kwargs):\n        r\"\"\"Sends a POST request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param json: (optional) json to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"POST\", url, data=data, json=json, **kwargs)\n\n    def put(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PUT request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PUT\", url, data=data, **kwargs)\n\n    def patch(self, url, data=None, **kwargs):\n        r\"\"\"Sends a PATCH request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n            object to send in the body of the :class:`Request`.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"PATCH\", url, data=data, **kwargs)\n\n    def delete(self, url, **kwargs):\n        r\"\"\"Sends a DELETE request. Returns :class:`Response` object.\n\n        :param url: URL for the new :class:`Request` object.\n        :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n        :rtype: requests.Response\n        \"\"\"\n\n        return self.request(\"DELETE\", url, **kwargs)\n\n    def send(self, request, **kwargs):\n        \"\"\"Send a given PreparedRequest.\n\n        :rtype: requests.Response\n        \"\"\"\n        # Set defaults that the hooks can utilize to ensure they always have\n        # the correct parameters to reproduce the previous request.\n        kwargs.setdefault(\"stream\", self.stream)\n        kwargs.setdefault(\"verify\", self.verify)\n        kwargs.setdefault(\"cert\", self.cert)\n        if \"proxies\" not in kwargs:\n            kwargs[\"proxies\"] = resolve_proxies(request, self.proxies, self.trust_env)\n\n        # It's possible that users might accidentally send a Request object.\n        # Guard against that specific failure case.\n        if isinstance(request, Request):\n            raise ValueError(\"You can only send PreparedRequests.\")\n\n        # Set up variables needed for resolve_redirects and dispatching of hooks\n        allow_redirects = kwargs.pop(\"allow_redirects\", True)\n        stream = kwargs.get(\"stream\")\n        hooks = request.hooks\n\n        # Get the appropriate adapter to use\n        adapter = self.get_adapter(url=request.url)\n\n        # Start time (approximately) of the request\n        start = preferred_clock()\n\n        # Send the request\n        r = adapter.send(request, **kwargs)\n\n        # Total elapsed time of the request (approximately)\n        elapsed = preferred_clock() - start\n        r.elapsed = timedelta(seconds=elapsed)\n\n        # Response manipulation hooks\n        r = dispatch_hook(\"response\", hooks, r, **kwargs)\n\n        # Persist cookies\n        if r.history:\n            # If the hooks create history then we want those cookies too\n            for resp in r.history:\n                extract_cookies_to_jar(self.cookies, resp.request, resp.raw)\n\n        extract_cookies_to_jar(self.cookies, request, r.raw)\n\n        # Resolve redirects if allowed.\n        if allow_redirects:\n            # Redirect resolving generator.\n            gen = self.resolve_redirects(r, request, **kwargs)\n            history = [resp for resp in gen]\n        else:\n            history = []\n\n        # Shuffle things around if there's history.\n        if history:\n            # Insert the first (original) request at the start\n            history.insert(0, r)\n            # Get the last request made\n            r = history.pop()\n            r.history = history\n\n        # If redirects aren't being followed, store the response on the Request for Response.next().\n        if not allow_redirects:\n            try:\n                r._next = next(\n                    self.resolve_redirects(r, request, yield_requests=True, **kwargs)\n                )\n            except StopIteration:\n                pass\n\n        if not stream:\n            r.content\n\n        return r\n\n    def merge_environment_settings(self, url, proxies, stream, verify, cert):\n        \"\"\"\n        Check the environment and merge it with some settings.\n\n        :rtype: dict\n        \"\"\"\n        # Gather clues from the surrounding environment.\n        if self.trust_env:\n            # Set environment's proxies.\n            no_proxy = proxies.get(\"no_proxy\") if proxies is not None else None\n            env_proxies = get_environ_proxies(url, no_proxy=no_proxy)\n            for k, v in env_proxies.items():\n                proxies.setdefault(k, v)\n\n            # Look for requests environment configuration\n            # and be compatible with cURL.\n            if verify is True or verify is None:\n                verify = (\n                    os.environ.get(\"REQUESTS_CA_BUNDLE\")\n                    or os.environ.get(\"CURL_CA_BUNDLE\")\n                    or verify\n                )\n\n        # Merge all the kwargs.\n        proxies = merge_setting(proxies, self.proxies)\n        stream = merge_setting(stream, self.stream)\n        verify = merge_setting(verify, self.verify)\n        cert = merge_setting(cert, self.cert)\n\n        return {\"proxies\": proxies, \"stream\": stream, \"verify\": verify, \"cert\": cert}\n\n    def get_adapter(self, url):\n        \"\"\"\n        Returns the appropriate connection adapter for the given URL.\n\n        :rtype: requests.adapters.BaseAdapter\n        \"\"\"\n        for prefix, adapter in self.adapters.items():\n            if url.lower().startswith(prefix.lower()):\n                return adapter\n\n        # Nothing matches :-/\n        raise InvalidSchema(f\"No connection adapters were found for {url!r}\")\n\n    def close(self):\n        \"\"\"Closes all adapters and as such the session\"\"\"\n        for v in self.adapters.values():\n            v.close()\n\n    def mount(self, prefix, adapter):\n        \"\"\"Registers a connection adapter to a prefix.\n\n        Adapters are sorted in descending order by prefix length.\n        \"\"\"\n        self.adapters[prefix] = adapter\n        keys_to_move = [k for k in self.adapters if len(k) < len(prefix)]\n\n        for key in keys_to_move:\n            self.adapters[key] = self.adapters.pop(key)\n\n    def __getstate__(self):\n        state = {attr: getattr(self, attr, None) for attr in self.__attrs__}\n        return state\n\n    def __setstate__(self, state):\n        for attr, value in state.items():\n            setattr(self, attr, value)\n\n\ndef session():\n    \"\"\"\n    Returns a :class:`Session` for context-management.\n\n    .. deprecated:: 1.0.0\n\n        This method has been deprecated since version 1.0.0 and is only kept for\n        backwards compatibility. New code should use :class:`~requests.sessions.Session`\n        to create a session. This may be removed at a future date.\n\n    :rtype: Session\n    \"\"\"\n    return Session()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/sessions.py",
        "start": 1,
        "end": 831,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 831,
          "column": 2,
          "position": 4563
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/sessions.py",
        "start": 1,
        "end": 831,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 831,
          "column": 2,
          "position": 4563
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "] = sys.modules[mod]\n\nif chardet is not None:\n    target = chardet.__name__\n    for mod in list(sys.modules):\n        if mod == target or mod.startswith(f\"{target}.\"):\n            imported_mod = sys.modules[mod]\n            sys.modules[f\"requests.packages.{mod}\"] = imported_mod\n            mod = mod.replace(target, \"chardet\")\n            sys.modules[f\"requests.packages.{mod}\"] = imported_mod",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/packages.py",
        "start": 14,
        "end": 23,
        "startLoc": {
          "line": 14,
          "column": 26,
          "position": 97
        },
        "endLoc": {
          "line": 23,
          "column": 13,
          "position": 215
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/packages.py",
        "start": 16,
        "end": 25,
        "startLoc": {
          "line": 16,
          "column": 15,
          "position": 128
        },
        "endLoc": {
          "line": 25,
          "column": 13,
          "position": 246
        }
      }
    },
    {
      "format": "python",
      "lines": 33,
      "fragment": "\"\"\"\nrequests.hooks\n~~~~~~~~~~~~~~\n\nThis module provides the capabilities for the Requests hooks system.\n\nAvailable hooks:\n\n``response``:\n    The response generated from a Request.\n\"\"\"\nHOOKS = [\"response\"]\n\n\ndef default_hooks():\n    return {event: [] for event in HOOKS}\n\n\n# TODO: response is the only one\n\n\ndef dispatch_hook(key, hooks, hook_data, **kwargs):\n    \"\"\"Dispatches a hook dictionary on a given piece of data.\"\"\"\n    hooks = hooks or {}\n    hooks = hooks.get(key)\n    if hooks:\n        if hasattr(hooks, \"__call__\"):\n            hooks = [hooks]\n        for hook in hooks:\n            _hook_data = hook(hook_data, **kwargs)\n            if _hook_data is not None:\n                hook_data = _hook_data\n    return hook_data",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/hooks.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 10,
          "position": 162
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/hooks.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 10,
          "position": 162
        }
      }
    },
    {
      "format": "python",
      "lines": 111,
      "fragment": "urllib3.contrib import pyopenssl\nexcept ImportError:\n    pyopenssl = None\n    OpenSSL = None\n    cryptography = None\nelse:\n    import cryptography\n    import OpenSSL\n\n\ndef _implementation():\n    \"\"\"Return a dict with the Python implementation and version.\n\n    Provide both the name and the version of the Python implementation\n    currently running. For example, on CPython 3.10.3 it will return\n    {'name': 'CPython', 'version': '3.10.3'}.\n\n    This function works best on CPython and PyPy: in particular, it probably\n    doesn't work for Jython or IronPython. Future investigation should be done\n    to work out the correct shape of the code for those platforms.\n    \"\"\"\n    implementation = platform.python_implementation()\n\n    if implementation == \"CPython\":\n        implementation_version = platform.python_version()\n    elif implementation == \"PyPy\":\n        implementation_version = \"{}.{}.{}\".format(\n            sys.pypy_version_info.major,\n            sys.pypy_version_info.minor,\n            sys.pypy_version_info.micro,\n        )\n        if sys.pypy_version_info.releaselevel != \"final\":\n            implementation_version = \"\".join(\n                [implementation_version, sys.pypy_version_info.releaselevel]\n            )\n    elif implementation == \"Jython\":\n        implementation_version = platform.python_version()  # Complete Guess\n    elif implementation == \"IronPython\":\n        implementation_version = platform.python_version()  # Complete Guess\n    else:\n        implementation_version = \"Unknown\"\n\n    return {\"name\": implementation, \"version\": implementation_version}\n\n\ndef info():\n    \"\"\"Generate information for a bug report.\"\"\"\n    try:\n        platform_info = {\n            \"system\": platform.system(),\n            \"release\": platform.release(),\n        }\n    except OSError:\n        platform_info = {\n            \"system\": \"Unknown\",\n            \"release\": \"Unknown\",\n        }\n\n    implementation_info = _implementation()\n    urllib3_info = {\"version\": urllib3.__version__}\n    charset_normalizer_info = {\"version\": None}\n    chardet_info = {\"version\": None}\n    if charset_normalizer:\n        charset_normalizer_info = {\"version\": charset_normalizer.__version__}\n    if chardet:\n        chardet_info = {\"version\": chardet.__version__}\n\n    pyopenssl_info = {\n        \"version\": None,\n        \"openssl_version\": \"\",\n    }\n    if OpenSSL:\n        pyopenssl_info = {\n            \"version\": OpenSSL.__version__,\n            \"openssl_version\": f\"{OpenSSL.SSL.OPENSSL_VERSION_NUMBER:x}\",\n        }\n    cryptography_info = {\n        \"version\": getattr(cryptography, \"__version__\", \"\"),\n    }\n    idna_info = {\n        \"version\": getattr(idna, \"__version__\", \"\"),\n    }\n\n    system_ssl = ssl.OPENSSL_VERSION_NUMBER\n    system_ssl_info = {\"version\": f\"{system_ssl:x}\" if system_ssl is not None else \"\"}\n\n    return {\n        \"platform\": platform_info,\n        \"implementation\": implementation_info,\n        \"system_ssl\": system_ssl_info,\n        \"using_pyopenssl\": pyopenssl is not None,\n        \"using_charset_normalizer\": chardet is None,\n        \"pyOpenSSL\": pyopenssl_info,\n        \"urllib3\": urllib3_info,\n        \"chardet\": chardet_info,\n        \"charset_normalizer\": charset_normalizer_info,\n        \"cryptography\": cryptography_info,\n        \"idna\": idna_info,\n        \"requests\": {\n            \"version\": requests_version,\n        },\n    }\n\n\ndef main():\n    \"\"\"Pretty-print the bug information as JSON.\"\"\"\n    print(json.dumps(info(), sort_keys=True, indent=2))\n\n\nif __name__ == \"__main__\":\n    main()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/help.py",
        "start": 24,
        "end": 134,
        "startLoc": {
          "line": 24,
          "column": 2,
          "position": 90
        },
        "endLoc": {
          "line": 134,
          "column": 2,
          "position": 817
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/help.py",
        "start": 17,
        "end": 127,
        "startLoc": {
          "line": 17,
          "column": 2,
          "position": 77
        },
        "endLoc": {
          "line": 127,
          "column": 2,
          "position": 804
        }
      }
    },
    {
      "format": "python",
      "lines": 145,
      "fragment": "urllib3.exceptions import HTTPError as BaseHTTPError\n\nfrom .compat import JSONDecodeError as CompatJSONDecodeError\n\n\nclass RequestException(IOError):\n    \"\"\"There was an ambiguous exception that occurred while handling your\n    request.\n    \"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"Initialize RequestException with `request` and `response` objects.\"\"\"\n        response = kwargs.pop(\"response\", None)\n        self.response = response\n        self.request = kwargs.pop(\"request\", None)\n        if response is not None and not self.request and hasattr(response, \"request\"):\n            self.request = self.response.request\n        super().__init__(*args, **kwargs)\n\n\nclass InvalidJSONError(RequestException):\n    \"\"\"A JSON error occurred.\"\"\"\n\n\nclass JSONDecodeError(InvalidJSONError, CompatJSONDecodeError):\n    \"\"\"Couldn't decode the text into json\"\"\"\n\n    def __init__(self, *args, **kwargs):\n        \"\"\"\n        Construct the JSONDecodeError instance first with all\n        args. Then use it's args to construct the IOError so that\n        the json specific args aren't used as IOError specific args\n        and the error message from JSONDecodeError is preserved.\n        \"\"\"\n        CompatJSONDecodeError.__init__(self, *args)\n        InvalidJSONError.__init__(self, *self.args, **kwargs)\n\n    def __reduce__(self):\n        \"\"\"\n        The __reduce__ method called when pickling the object must\n        be the one from the JSONDecodeError (be it json/simplejson)\n        as it expects all the arguments for instantiation, not just\n        one like the IOError, and the MRO would by default call the\n        __reduce__ method from the IOError due to the inheritance order.\n        \"\"\"\n        return CompatJSONDecodeError.__reduce__(self)\n\n\nclass HTTPError(RequestException):\n    \"\"\"An HTTP error occurred.\"\"\"\n\n\nclass ConnectionError(RequestException):\n    \"\"\"A Connection error occurred.\"\"\"\n\n\nclass ProxyError(ConnectionError):\n    \"\"\"A proxy error occurred.\"\"\"\n\n\nclass SSLError(ConnectionError):\n    \"\"\"An SSL error occurred.\"\"\"\n\n\nclass Timeout(RequestException):\n    \"\"\"The request timed out.\n\n    Catching this error will catch both\n    :exc:`~requests.exceptions.ConnectTimeout` and\n    :exc:`~requests.exceptions.ReadTimeout` errors.\n    \"\"\"\n\n\nclass ConnectTimeout(ConnectionError, Timeout):\n    \"\"\"The request timed out while trying to connect to the remote server.\n\n    Requests that produced this error are safe to retry.\n    \"\"\"\n\n\nclass ReadTimeout(Timeout):\n    \"\"\"The server did not send any data in the allotted amount of time.\"\"\"\n\n\nclass URLRequired(RequestException):\n    \"\"\"A valid URL is required to make a request.\"\"\"\n\n\nclass TooManyRedirects(RequestException):\n    \"\"\"Too many redirects.\"\"\"\n\n\nclass MissingSchema(RequestException, ValueError):\n    \"\"\"The URL scheme (e.g. http or https) is missing.\"\"\"\n\n\nclass InvalidSchema(RequestException, ValueError):\n    \"\"\"The URL scheme provided is either invalid or unsupported.\"\"\"\n\n\nclass InvalidURL(RequestException, ValueError):\n    \"\"\"The URL provided was somehow invalid.\"\"\"\n\n\nclass InvalidHeader(RequestException, ValueError):\n    \"\"\"The header value provided was somehow invalid.\"\"\"\n\n\nclass InvalidProxyURL(InvalidURL):\n    \"\"\"The proxy URL provided is invalid.\"\"\"\n\n\nclass ChunkedEncodingError(RequestException):\n    \"\"\"The server declared chunked encoding but sent an invalid chunk.\"\"\"\n\n\nclass ContentDecodingError(RequestException, BaseHTTPError):\n    \"\"\"Failed to decode response content.\"\"\"\n\n\nclass StreamConsumedError(RequestException, TypeError):\n    \"\"\"The content for this response was already consumed.\"\"\"\n\n\nclass RetryError(RequestException):\n    \"\"\"Custom retries logic failed\"\"\"\n\n\nclass UnrewindableBodyError(RequestException):\n    \"\"\"Requests encountered an error when trying to rewind a body.\"\"\"\n\n\n# Warnings\n\n\nclass RequestsWarning(Warning):\n    \"\"\"Base warning for Requests.\"\"\"\n\n\nclass FileModeWarning(RequestsWarning, DeprecationWarning):\n    \"\"\"A file was opened in text mode, but Requests determined its binary length.\"\"\"\n\n\nclass RequestsDependencyWarning(RequestsWarning):\n    \"\"\"An imported dependency doesn't match the expected version range.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/exceptions.py",
        "start": 7,
        "end": 151,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 4
        },
        "endLoc": {
          "line": 151,
          "column": 71,
          "position": 578
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/exceptions.py",
        "start": 7,
        "end": 151,
        "startLoc": {
          "line": 7,
          "column": 2,
          "position": 8
        },
        "endLoc": {
          "line": 151,
          "column": 71,
          "position": 582
        }
      }
    },
    {
      "format": "python",
      "lines": 561,
      "fragment": "\"\"\"\nrequests.cookies\n~~~~~~~~~~~~~~~~\n\nCompatibility code to be able to use `http.cookiejar.CookieJar` with requests.\n\nrequests.utils imports from here, so be careful with imports.\n\"\"\"\n\nimport calendar\nimport copy\nimport time\n\nfrom ._internal_utils import to_native_string\nfrom .compat import Morsel, MutableMapping, cookielib, urlparse, urlunparse\n\ntry:\n    import threading\nexcept ImportError:\n    import dummy_threading as threading\n\n\nclass MockRequest:\n    \"\"\"Wraps a `requests.Request` to mimic a `urllib2.Request`.\n\n    The code in `http.cookiejar.CookieJar` expects this interface in order to correctly\n    manage cookie policies, i.e., determine whether a cookie can be set, given the\n    domains of the request and the cookie.\n\n    The original request object is read-only. The client is responsible for collecting\n    the new headers via `get_new_headers()` and interpreting them appropriately. You\n    probably want `get_cookie_header`, defined below.\n    \"\"\"\n\n    def __init__(self, request):\n        self._r = request\n        self._new_headers = {}\n        self.type = urlparse(self._r.url).scheme\n\n    def get_type(self):\n        return self.type\n\n    def get_host(self):\n        return urlparse(self._r.url).netloc\n\n    def get_origin_req_host(self):\n        return self.get_host()\n\n    def get_full_url(self):\n        # Only return the response's URL if the user hadn't set the Host\n        # header\n        if not self._r.headers.get(\"Host\"):\n            return self._r.url\n        # If they did set it, retrieve it and reconstruct the expected domain\n        host = to_native_string(self._r.headers[\"Host\"], encoding=\"utf-8\")\n        parsed = urlparse(self._r.url)\n        # Reconstruct the URL as we expect it\n        return urlunparse(\n            [\n                parsed.scheme,\n                host,\n                parsed.path,\n                parsed.params,\n                parsed.query,\n                parsed.fragment,\n            ]\n        )\n\n    def is_unverifiable(self):\n        return True\n\n    def has_header(self, name):\n        return name in self._r.headers or name in self._new_headers\n\n    def get_header(self, name, default=None):\n        return self._r.headers.get(name, self._new_headers.get(name, default))\n\n    def add_header(self, key, val):\n        \"\"\"cookiejar has no legitimate use for this method; add it back if you find one.\"\"\"\n        raise NotImplementedError(\n            \"Cookie headers should be added with add_unredirected_header()\"\n        )\n\n    def add_unredirected_header(self, name, value):\n        self._new_headers[name] = value\n\n    def get_new_headers(self):\n        return self._new_headers\n\n    @property\n    def unverifiable(self):\n        return self.is_unverifiable()\n\n    @property\n    def origin_req_host(self):\n        return self.get_origin_req_host()\n\n    @property\n    def host(self):\n        return self.get_host()\n\n\nclass MockResponse:\n    \"\"\"Wraps a `httplib.HTTPMessage` to mimic a `urllib.addinfourl`.\n\n    ...what? Basically, expose the parsed HTTP headers from the server response\n    the way `http.cookiejar` expects to see them.\n    \"\"\"\n\n    def __init__(self, headers):\n        \"\"\"Make a MockResponse for `cookiejar` to read.\n\n        :param headers: a httplib.HTTPMessage or analogous carrying the headers\n        \"\"\"\n        self._headers = headers\n\n    def info(self):\n        return self._headers\n\n    def getheaders(self, name):\n        self._headers.getheaders(name)\n\n\ndef extract_cookies_to_jar(jar, request, response):\n    \"\"\"Extract the cookies from the response into a CookieJar.\n\n    :param jar: http.cookiejar.CookieJar (not necessarily a RequestsCookieJar)\n    :param request: our own requests.Request object\n    :param response: urllib3.HTTPResponse object\n    \"\"\"\n    if not (hasattr(response, \"_original_response\") and response._original_response):\n        return\n    # the _original_response field is the wrapped httplib.HTTPResponse object,\n    req = MockRequest(request)\n    # pull out the HTTPMessage with the headers and put it in the mock:\n    res = MockResponse(response._original_response.msg)\n    jar.extract_cookies(res, req)\n\n\ndef get_cookie_header(jar, request):\n    \"\"\"\n    Produce an appropriate Cookie header string to be sent with `request`, or None.\n\n    :rtype: str\n    \"\"\"\n    r = MockRequest(request)\n    jar.add_cookie_header(r)\n    return r.get_new_headers().get(\"Cookie\")\n\n\ndef remove_cookie_by_name(cookiejar, name, domain=None, path=None):\n    \"\"\"Unsets a cookie by name, by default over all domains and paths.\n\n    Wraps CookieJar.clear(), is O(n).\n    \"\"\"\n    clearables = []\n    for cookie in cookiejar:\n        if cookie.name != name:\n            continue\n        if domain is not None and domain != cookie.domain:\n            continue\n        if path is not None and path != cookie.path:\n            continue\n        clearables.append((cookie.domain, cookie.path, cookie.name))\n\n    for domain, path, name in clearables:\n        cookiejar.clear(domain, path, name)\n\n\nclass CookieConflictError(RuntimeError):\n    \"\"\"There are two cookies that meet the criteria specified in the cookie jar.\n    Use .get and .set and include domain and path args in order to be more specific.\n    \"\"\"\n\n\nclass RequestsCookieJar(cookielib.CookieJar, MutableMapping):\n    \"\"\"Compatibility class; is a http.cookiejar.CookieJar, but exposes a dict\n    interface.\n\n    This is the CookieJar we create by default for requests and sessions that\n    don't specify one, since some clients may expect response.cookies and\n    session.cookies to support dict operations.\n\n    Requests does not use the dict interface internally; it's just for\n    compatibility with external client code. All requests code should work\n    out of the box with externally provided instances of ``CookieJar``, e.g.\n    ``LWPCookieJar`` and ``FileCookieJar``.\n\n    Unlike a regular CookieJar, this class is pickleable.\n\n    .. warning:: dictionary operations that are normally O(1) may be O(n).\n    \"\"\"\n\n    def get(self, name, default=None, domain=None, path=None):\n        \"\"\"Dict-like get() that also supports optional domain and path args in\n        order to resolve naming collisions from using one cookie jar over\n        multiple domains.\n\n        .. warning:: operation is O(n), not O(1).\n        \"\"\"\n        try:\n            return self._find_no_duplicates(name, domain, path)\n        except KeyError:\n            return default\n\n    def set(self, name, value, **kwargs):\n        \"\"\"Dict-like set() that also supports optional domain and path args in\n        order to resolve naming collisions from using one cookie jar over\n        multiple domains.\n        \"\"\"\n        # support client code that unsets cookies by assignment of a None value:\n        if value is None:\n            remove_cookie_by_name(\n                self, name, domain=kwargs.get(\"domain\"), path=kwargs.get(\"path\")\n            )\n            return\n\n        if isinstance(value, Morsel):\n            c = morsel_to_cookie(value)\n        else:\n            c = create_cookie(name, value, **kwargs)\n        self.set_cookie(c)\n        return c\n\n    def iterkeys(self):\n        \"\"\"Dict-like iterkeys() that returns an iterator of names of cookies\n        from the jar.\n\n        .. seealso:: itervalues() and iteritems().\n        \"\"\"\n        for cookie in iter(self):\n            yield cookie.name\n\n    def keys(self):\n        \"\"\"Dict-like keys() that returns a list of names of cookies from the\n        jar.\n\n        .. seealso:: values() and items().\n        \"\"\"\n        return list(self.iterkeys())\n\n    def itervalues(self):\n        \"\"\"Dict-like itervalues() that returns an iterator of values of cookies\n        from the jar.\n\n        .. seealso:: iterkeys() and iteritems().\n        \"\"\"\n        for cookie in iter(self):\n            yield cookie.value\n\n    def values(self):\n        \"\"\"Dict-like values() that returns a list of values of cookies from the\n        jar.\n\n        .. seealso:: keys() and items().\n        \"\"\"\n        return list(self.itervalues())\n\n    def iteritems(self):\n        \"\"\"Dict-like iteritems() that returns an iterator of name-value tuples\n        from the jar.\n\n        .. seealso:: iterkeys() and itervalues().\n        \"\"\"\n        for cookie in iter(self):\n            yield cookie.name, cookie.value\n\n    def items(self):\n        \"\"\"Dict-like items() that returns a list of name-value tuples from the\n        jar. Allows client-code to call ``dict(RequestsCookieJar)`` and get a\n        vanilla python dict of key value pairs.\n\n        .. seealso:: keys() and values().\n        \"\"\"\n        return list(self.iteritems())\n\n    def list_domains(self):\n        \"\"\"Utility method to list all the domains in the jar.\"\"\"\n        domains = []\n        for cookie in iter(self):\n            if cookie.domain not in domains:\n                domains.append(cookie.domain)\n        return domains\n\n    def list_paths(self):\n        \"\"\"Utility method to list all the paths in the jar.\"\"\"\n        paths = []\n        for cookie in iter(self):\n            if cookie.path not in paths:\n                paths.append(cookie.path)\n        return paths\n\n    def multiple_domains(self):\n        \"\"\"Returns True if there are multiple domains in the jar.\n        Returns False otherwise.\n\n        :rtype: bool\n        \"\"\"\n        domains = []\n        for cookie in iter(self):\n            if cookie.domain is not None and cookie.domain in domains:\n                return True\n            domains.append(cookie.domain)\n        return False  # there is only one domain in jar\n\n    def get_dict(self, domain=None, path=None):\n        \"\"\"Takes as an argument an optional domain and path and returns a plain\n        old Python dict of name-value pairs of cookies that meet the\n        requirements.\n\n        :rtype: dict\n        \"\"\"\n        dictionary = {}\n        for cookie in iter(self):\n            if (domain is None or cookie.domain == domain) and (\n                path is None or cookie.path == path\n            ):\n                dictionary[cookie.name] = cookie.value\n        return dictionary\n\n    def __contains__(self, name):\n        try:\n            return super().__contains__(name)\n        except CookieConflictError:\n            return True\n\n    def __getitem__(self, name):\n        \"\"\"Dict-like __getitem__() for compatibility with client code. Throws\n        exception if there are more than one cookie with name. In that case,\n        use the more explicit get() method instead.\n\n        .. warning:: operation is O(n), not O(1).\n        \"\"\"\n        return self._find_no_duplicates(name)\n\n    def __setitem__(self, name, value):\n        \"\"\"Dict-like __setitem__ for compatibility with client code. Throws\n        exception if there is already a cookie of that name in the jar. In that\n        case, use the more explicit set() method instead.\n        \"\"\"\n        self.set(name, value)\n\n    def __delitem__(self, name):\n        \"\"\"Deletes a cookie given a name. Wraps ``http.cookiejar.CookieJar``'s\n        ``remove_cookie_by_name()``.\n        \"\"\"\n        remove_cookie_by_name(self, name)\n\n    def set_cookie(self, cookie, *args, **kwargs):\n        if (\n            hasattr(cookie.value, \"startswith\")\n            and cookie.value.startswith('\"')\n            and cookie.value.endswith('\"')\n        ):\n            cookie.value = cookie.value.replace('\\\\\"', \"\")\n        return super().set_cookie(cookie, *args, **kwargs)\n\n    def update(self, other):\n        \"\"\"Updates this jar with cookies from another CookieJar or dict-like\"\"\"\n        if isinstance(other, cookielib.CookieJar):\n            for cookie in other:\n                self.set_cookie(copy.copy(cookie))\n        else:\n            super().update(other)\n\n    def _find(self, name, domain=None, path=None):\n        \"\"\"Requests uses this method internally to get cookie values.\n\n        If there are conflicting cookies, _find arbitrarily chooses one.\n        See _find_no_duplicates if you want an exception thrown if there are\n        conflicting cookies.\n\n        :param name: a string containing name of cookie\n        :param domain: (optional) string containing domain of cookie\n        :param path: (optional) string containing path of cookie\n        :return: cookie.value\n        \"\"\"\n        for cookie in iter(self):\n            if cookie.name == name:\n                if domain is None or cookie.domain == domain:\n                    if path is None or cookie.path == path:\n                        return cookie.value\n\n        raise KeyError(f\"name={name!r}, domain={domain!r}, path={path!r}\")\n\n    def _find_no_duplicates(self, name, domain=None, path=None):\n        \"\"\"Both ``__get_item__`` and ``get`` call this function: it's never\n        used elsewhere in Requests.\n\n        :param name: a string containing name of cookie\n        :param domain: (optional) string containing domain of cookie\n        :param path: (optional) string containing path of cookie\n        :raises KeyError: if cookie is not found\n        :raises CookieConflictError: if there are multiple cookies\n            that match name and optionally domain and path\n        :return: cookie.value\n        \"\"\"\n        toReturn = None\n        for cookie in iter(self):\n            if cookie.name == name:\n                if domain is None or cookie.domain == domain:\n                    if path is None or cookie.path == path:\n                        if toReturn is not None:\n                            # if there are multiple cookies that meet passed in criteria\n                            raise CookieConflictError(\n                                f\"There are multiple cookies with name, {name!r}\"\n                            )\n                        # we will eventually return this as long as no cookie conflict\n                        toReturn = cookie.value\n\n        if toReturn:\n            return toReturn\n        raise KeyError(f\"name={name!r}, domain={domain!r}, path={path!r}\")\n\n    def __getstate__(self):\n        \"\"\"Unlike a normal CookieJar, this class is pickleable.\"\"\"\n        state = self.__dict__.copy()\n        # remove the unpickleable RLock object\n        state.pop(\"_cookies_lock\")\n        return state\n\n    def __setstate__(self, state):\n        \"\"\"Unlike a normal CookieJar, this class is pickleable.\"\"\"\n        self.__dict__.update(state)\n        if \"_cookies_lock\" not in self.__dict__:\n            self._cookies_lock = threading.RLock()\n\n    def copy(self):\n        \"\"\"Return a copy of this RequestsCookieJar.\"\"\"\n        new_cj = RequestsCookieJar()\n        new_cj.set_policy(self.get_policy())\n        new_cj.update(self)\n        return new_cj\n\n    def get_policy(self):\n        \"\"\"Return the CookiePolicy instance used.\"\"\"\n        return self._policy\n\n\ndef _copy_cookie_jar(jar):\n    if jar is None:\n        return None\n\n    if hasattr(jar, \"copy\"):\n        # We're dealing with an instance of RequestsCookieJar\n        return jar.copy()\n    # We're dealing with a generic CookieJar instance\n    new_jar = copy.copy(jar)\n    new_jar.clear()\n    for cookie in jar:\n        new_jar.set_cookie(copy.copy(cookie))\n    return new_jar\n\n\ndef create_cookie(name, value, **kwargs):\n    \"\"\"Make a cookie from underspecified parameters.\n\n    By default, the pair of `name` and `value` will be set for the domain ''\n    and sent on every request (this is sometimes called a \"supercookie\").\n    \"\"\"\n    result = {\n        \"version\": 0,\n        \"name\": name,\n        \"value\": value,\n        \"port\": None,\n        \"domain\": \"\",\n        \"path\": \"/\",\n        \"secure\": False,\n        \"expires\": None,\n        \"discard\": True,\n        \"comment\": None,\n        \"comment_url\": None,\n        \"rest\": {\"HttpOnly\": None},\n        \"rfc2109\": False,\n    }\n\n    badargs = set(kwargs) - set(result)\n    if badargs:\n        raise TypeError(\n            f\"create_cookie() got unexpected keyword arguments: {list(badargs)}\"\n        )\n\n    result.update(kwargs)\n    result[\"port_specified\"] = bool(result[\"port\"])\n    result[\"domain_specified\"] = bool(result[\"domain\"])\n    result[\"domain_initial_dot\"] = result[\"domain\"].startswith(\".\")\n    result[\"path_specified\"] = bool(result[\"path\"])\n\n    return cookielib.Cookie(**result)\n\n\ndef morsel_to_cookie(morsel):\n    \"\"\"Convert a Morsel object into a Cookie containing the one k/v pair.\"\"\"\n\n    expires = None\n    if morsel[\"max-age\"]:\n        try:\n            expires = int(time.time() + int(morsel[\"max-age\"]))\n        except ValueError:\n            raise TypeError(f\"max-age: {morsel['max-age']} must be integer\")\n    elif morsel[\"expires\"]:\n        time_template = \"%a, %d-%b-%Y %H:%M:%S GMT\"\n        expires = calendar.timegm(time.strptime(morsel[\"expires\"], time_template))\n    return create_cookie(\n        comment=morsel[\"comment\"],\n        comment_url=bool(morsel[\"comment\"]),\n        discard=False,\n        domain=morsel[\"domain\"],\n        expires=expires,\n        name=morsel.key,\n        path=morsel[\"path\"],\n        port=None,\n        rest={\"HttpOnly\": morsel[\"httponly\"]},\n        rfc2109=False,\n        secure=bool(morsel[\"secure\"]),\n        value=morsel.value,\n        version=morsel[\"version\"] or 0,\n    )\n\n\ndef cookiejar_from_dict(cookie_dict, cookiejar=None, overwrite=True):\n    \"\"\"Returns a CookieJar from a key/value dictionary.\n\n    :param cookie_dict: Dict of key/values to insert into CookieJar.\n    :param cookiejar: (optional) A cookiejar to add the cookies to.\n    :param overwrite: (optional) If False, will not replace cookies\n        already in the jar with new ones.\n    :rtype: CookieJar\n    \"\"\"\n    if cookiejar is None:\n        cookiejar = RequestsCookieJar()\n\n    if cookie_dict is not None:\n        names_from_jar = [cookie.name for cookie in cookiejar]\n        for name in cookie_dict:\n            if overwrite or (name not in names_from_jar):\n                cookiejar.set_cookie(create_cookie(name, cookie_dict[name]))\n\n    return cookiejar\n\n\ndef merge_cookies(cookiejar, cookies):\n    \"\"\"Add cookies to cookiejar and returns a merged CookieJar.\n\n    :param cookiejar: CookieJar object to add the cookies to.\n    :param cookies: Dictionary or CookieJar object to be added.\n    :rtype: CookieJar\n    \"\"\"\n    if not isinstance(cookiejar, cookielib.CookieJar):\n        raise ValueError(\"You can only merge into CookieJar\")\n\n    if isinstance(cookies, dict):\n        cookiejar = cookiejar_from_dict(cookies, cookiejar=cookiejar, overwrite=False)\n    elif isinstance(cookies, cookielib.CookieJar):\n        try:\n            cookiejar.update(cookies)\n        except AttributeError:\n            for cookie_in_jar in cookies:\n                cookiejar.set_cookie(cookie_in_jar)\n\n    return cookiejar",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/cookies.py",
        "start": 1,
        "end": 561,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 561,
          "column": 10,
          "position": 3211
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/cookies.py",
        "start": 1,
        "end": 561,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 561,
          "column": 10,
          "position": 3211
        }
      }
    },
    {
      "format": "python",
      "lines": 38,
      "fragment": "from json import JSONDecodeError\n\n# Keep OrderedDict for backwards compatibility.\nfrom collections import OrderedDict\nfrom collections.abc import Callable, Mapping, MutableMapping\nfrom http import cookiejar as cookielib\nfrom http.cookies import Morsel\nfrom io import StringIO\n\n# --------------\n# Legacy Imports\n# --------------\nfrom urllib.parse import (\n    quote,\n    quote_plus,\n    unquote,\n    unquote_plus,\n    urldefrag,\n    urlencode,\n    urljoin,\n    urlparse,\n    urlsplit,\n    urlunparse,\n)\nfrom urllib.request import (\n    getproxies,\n    getproxies_environment,\n    parse_http_list,\n    proxy_bypass,\n    proxy_bypass_environment,\n)\n\nbuiltin_str = str\nstr = str\nbytes = bytes\nbasestring = (str, bytes)\nnumeric_types = (int, float)\ninteger_types = (int,)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/compat.py",
        "start": 69,
        "end": 106,
        "startLoc": {
          "line": 69,
          "column": 5,
          "position": 277
        },
        "endLoc": {
          "line": 106,
          "column": 2,
          "position": 481
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/compat.py",
        "start": 53,
        "end": 90,
        "startLoc": {
          "line": 53,
          "column": 1,
          "position": 178
        },
        "endLoc": {
          "line": 90,
          "column": 2,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 314,
      "fragment": "\"\"\"\nrequests.auth\n~~~~~~~~~~~~~\n\nThis module contains the authentication handlers for Requests.\n\"\"\"\n\nimport hashlib\nimport os\nimport re\nimport threading\nimport time\nimport warnings\nfrom base64 import b64encode\n\nfrom ._internal_utils import to_native_string\nfrom .compat import basestring, str, urlparse\nfrom .cookies import extract_cookies_to_jar\nfrom .utils import parse_dict_header\n\nCONTENT_TYPE_FORM_URLENCODED = \"application/x-www-form-urlencoded\"\nCONTENT_TYPE_MULTI_PART = \"multipart/form-data\"\n\n\ndef _basic_auth_str(username, password):\n    \"\"\"Returns a Basic Auth string.\"\"\"\n\n    # \"I want us to put a big-ol' comment on top of it that\n    # says that this behaviour is dumb but we need to preserve\n    # it because people are relying on it.\"\n    #    - Lukasa\n    #\n    # These are here solely to maintain backwards compatibility\n    # for things like ints. This will be removed in 3.0.0.\n    if not isinstance(username, basestring):\n        warnings.warn(\n            \"Non-string usernames will no longer be supported in Requests \"\n            \"3.0.0. Please convert the object you've passed in ({!r}) to \"\n            \"a string or bytes object in the near future to avoid \"\n            \"problems.\".format(username),\n            category=DeprecationWarning,\n        )\n        username = str(username)\n\n    if not isinstance(password, basestring):\n        warnings.warn(\n            \"Non-string passwords will no longer be supported in Requests \"\n            \"3.0.0. Please convert the object you've passed in ({!r}) to \"\n            \"a string or bytes object in the near future to avoid \"\n            \"problems.\".format(type(password)),\n            category=DeprecationWarning,\n        )\n        password = str(password)\n    # -- End Removal --\n\n    if isinstance(username, str):\n        username = username.encode(\"latin1\")\n\n    if isinstance(password, str):\n        password = password.encode(\"latin1\")\n\n    authstr = \"Basic \" + to_native_string(\n        b64encode(b\":\".join((username, password))).strip()\n    )\n\n    return authstr\n\n\nclass AuthBase:\n    \"\"\"Base class that all auth implementations derive from\"\"\"\n\n    def __call__(self, r):\n        raise NotImplementedError(\"Auth hooks must be callable.\")\n\n\nclass HTTPBasicAuth(AuthBase):\n    \"\"\"Attaches HTTP Basic Authentication to the given Request object.\"\"\"\n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n\n    def __eq__(self, other):\n        return all(\n            [\n                self.username == getattr(other, \"username\", None),\n                self.password == getattr(other, \"password\", None),\n            ]\n        )\n\n    def __ne__(self, other):\n        return not self == other\n\n    def __call__(self, r):\n        r.headers[\"Authorization\"] = _basic_auth_str(self.username, self.password)\n        return r\n\n\nclass HTTPProxyAuth(HTTPBasicAuth):\n    \"\"\"Attaches HTTP Proxy Authentication to a given Request object.\"\"\"\n\n    def __call__(self, r):\n        r.headers[\"Proxy-Authorization\"] = _basic_auth_str(self.username, self.password)\n        return r\n\n\nclass HTTPDigestAuth(AuthBase):\n    \"\"\"Attaches HTTP Digest Authentication to the given Request object.\"\"\"\n\n    def __init__(self, username, password):\n        self.username = username\n        self.password = password\n        # Keep state in per-thread local storage\n        self._thread_local = threading.local()\n\n    def init_per_thread_state(self):\n        # Ensure state is initialized just once per-thread\n        if not hasattr(self._thread_local, \"init\"):\n            self._thread_local.init = True\n            self._thread_local.last_nonce = \"\"\n            self._thread_local.nonce_count = 0\n            self._thread_local.chal = {}\n            self._thread_local.pos = None\n            self._thread_local.num_401_calls = None\n\n    def build_digest_header(self, method, url):\n        \"\"\"\n        :rtype: str\n        \"\"\"\n\n        realm = self._thread_local.chal[\"realm\"]\n        nonce = self._thread_local.chal[\"nonce\"]\n        qop = self._thread_local.chal.get(\"qop\")\n        algorithm = self._thread_local.chal.get(\"algorithm\")\n        opaque = self._thread_local.chal.get(\"opaque\")\n        hash_utf8 = None\n\n        if algorithm is None:\n            _algorithm = \"MD5\"\n        else:\n            _algorithm = algorithm.upper()\n        # lambdas assume digest modules are imported at the top level\n        if _algorithm == \"MD5\" or _algorithm == \"MD5-SESS\":\n\n            def md5_utf8(x):\n                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.md5(x).hexdigest()\n\n            hash_utf8 = md5_utf8\n        elif _algorithm == \"SHA\":\n\n            def sha_utf8(x):\n                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha1(x).hexdigest()\n\n            hash_utf8 = sha_utf8\n        elif _algorithm == \"SHA-256\":\n\n            def sha256_utf8(x):\n                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha256(x).hexdigest()\n\n            hash_utf8 = sha256_utf8\n        elif _algorithm == \"SHA-512\":\n\n            def sha512_utf8(x):\n                if isinstance(x, str):\n                    x = x.encode(\"utf-8\")\n                return hashlib.sha512(x).hexdigest()\n\n            hash_utf8 = sha512_utf8\n\n        KD = lambda s, d: hash_utf8(f\"{s}:{d}\")  # noqa:E731\n\n        if hash_utf8 is None:\n            return None\n\n        # XXX not implemented yet\n        entdig = None\n        p_parsed = urlparse(url)\n        #: path is request-uri defined in RFC 2616 which should not be empty\n        path = p_parsed.path or \"/\"\n        if p_parsed.query:\n            path += f\"?{p_parsed.query}\"\n\n        A1 = f\"{self.username}:{realm}:{self.password}\"\n        A2 = f\"{method}:{path}\"\n\n        HA1 = hash_utf8(A1)\n        HA2 = hash_utf8(A2)\n\n        if nonce == self._thread_local.last_nonce:\n            self._thread_local.nonce_count += 1\n        else:\n            self._thread_local.nonce_count = 1\n        ncvalue = f\"{self._thread_local.nonce_count:08x}\"\n        s = str(self._thread_local.nonce_count).encode(\"utf-8\")\n        s += nonce.encode(\"utf-8\")\n        s += time.ctime().encode(\"utf-8\")\n        s += os.urandom(8)\n\n        cnonce = hashlib.sha1(s).hexdigest()[:16]\n        if _algorithm == \"MD5-SESS\":\n            HA1 = hash_utf8(f\"{HA1}:{nonce}:{cnonce}\")\n\n        if not qop:\n            respdig = KD(HA1, f\"{nonce}:{HA2}\")\n        elif qop == \"auth\" or \"auth\" in qop.split(\",\"):\n            noncebit = f\"{nonce}:{ncvalue}:{cnonce}:auth:{HA2}\"\n            respdig = KD(HA1, noncebit)\n        else:\n            # XXX handle auth-int.\n            return None\n\n        self._thread_local.last_nonce = nonce\n\n        # XXX should the partial digests be encoded too?\n        base = (\n            f'username=\"{self.username}\", realm=\"{realm}\", nonce=\"{nonce}\", '\n            f'uri=\"{path}\", response=\"{respdig}\"'\n        )\n        if opaque:\n            base += f', opaque=\"{opaque}\"'\n        if algorithm:\n            base += f', algorithm=\"{algorithm}\"'\n        if entdig:\n            base += f', digest=\"{entdig}\"'\n        if qop:\n            base += f', qop=\"auth\", nc={ncvalue}, cnonce=\"{cnonce}\"'\n\n        return f\"Digest {base}\"\n\n    def handle_redirect(self, r, **kwargs):\n        \"\"\"Reset num_401_calls counter on redirects.\"\"\"\n        if r.is_redirect:\n            self._thread_local.num_401_calls = 1\n\n    def handle_401(self, r, **kwargs):\n        \"\"\"\n        Takes the given response and tries digest-auth, if needed.\n\n        :rtype: requests.Response\n        \"\"\"\n\n        # If response is not 4xx, do not auth\n        # See https://github.com/psf/requests/issues/3772\n        if not 400 <= r.status_code < 500:\n            self._thread_local.num_401_calls = 1\n            return r\n\n        if self._thread_local.pos is not None:\n            # Rewind the file position indicator of the body to where\n            # it was to resend the request.\n            r.request.body.seek(self._thread_local.pos)\n        s_auth = r.headers.get(\"www-authenticate\", \"\")\n\n        if \"digest\" in s_auth.lower() and self._thread_local.num_401_calls < 2:\n            self._thread_local.num_401_calls += 1\n            pat = re.compile(r\"digest \", flags=re.IGNORECASE)\n            self._thread_local.chal = parse_dict_header(pat.sub(\"\", s_auth, count=1))\n\n            # Consume content and release the original connection\n            # to allow our new request to reuse the same one.\n            r.content\n            r.close()\n            prep = r.request.copy()\n            extract_cookies_to_jar(prep._cookies, r.request, r.raw)\n            prep.prepare_cookies(prep._cookies)\n\n            prep.headers[\"Authorization\"] = self.build_digest_header(\n                prep.method, prep.url\n            )\n            _r = r.connection.send(prep, **kwargs)\n            _r.history.append(r)\n            _r.request = prep\n\n            return _r\n\n        self._thread_local.num_401_calls = 1\n        return r\n\n    def __call__(self, r):\n        # Initialize per-thread state, if needed\n        self.init_per_thread_state()\n        # If we have a saved nonce, skip the 401\n        if self._thread_local.last_nonce:\n            r.headers[\"Authorization\"] = self.build_digest_header(r.method, r.url)\n        try:\n            self._thread_local.pos = r.body.tell()\n        except AttributeError:\n            # In the case of HTTPDigestAuth being reused and the body of\n            # the previous request was a file-like object, pos has the\n            # file position of the previous body. Ensure it's set to\n            # None.\n            self._thread_local.pos = None\n        r.register_hook(\"response\", self.handle_401)\n        r.register_hook(\"response\", self.handle_redirect)\n        self._thread_local.num_401_calls = 1\n\n        return r\n\n    def __eq__(self, other):\n        return all(\n            [\n                self.username == getattr(other, \"username\", None),\n                self.password == getattr(other, \"password\", None),\n            ]\n        )\n\n    def __ne__(self, other):\n        return not self == other",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/auth.py",
        "start": 1,
        "end": 314,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 314,
          "column": 6,
          "position": 2260
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/auth.py",
        "start": 1,
        "end": 314,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 314,
          "column": 6,
          "position": 2260
        }
      }
    },
    {
      "format": "python",
      "lines": 157,
      "fragment": "\"\"\"\nrequests.api\n~~~~~~~~~~~~\n\nThis module implements the Requests API.\n\n:copyright: (c) 2012 by Kenneth Reitz.\n:license: Apache2, see LICENSE for more details.\n\"\"\"\n\nfrom . import sessions\n\n\ndef request(method, url, **kwargs):\n    \"\"\"Constructs and sends a :class:`Request <Request>`.\n\n    :param method: method for the new :class:`Request` object: ``GET``, ``OPTIONS``, ``HEAD``, ``POST``, ``PUT``, ``PATCH``, or ``DELETE``.\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param headers: (optional) Dictionary of HTTP Headers to send with the :class:`Request`.\n    :param cookies: (optional) Dict or CookieJar object to send with the :class:`Request`.\n    :param files: (optional) Dictionary of ``'name': file-like-objects`` (or ``{'name': file-tuple}``) for multipart encoding upload.\n        ``file-tuple`` can be a 2-tuple ``('filename', fileobj)``, 3-tuple ``('filename', fileobj, 'content_type')``\n        or a 4-tuple ``('filename', fileobj, 'content_type', custom_headers)``, where ``'content_type'`` is a string\n        defining the content type of the given file and ``custom_headers`` a dict-like object containing additional headers\n        to add for the file.\n    :param auth: (optional) Auth tuple to enable Basic/Digest/Custom HTTP Auth.\n    :param timeout: (optional) How many seconds to wait for the server to send data\n        before giving up, as a float, or a :ref:`(connect timeout, read\n        timeout) <timeouts>` tuple.\n    :type timeout: float or tuple\n    :param allow_redirects: (optional) Boolean. Enable/disable GET/OPTIONS/POST/PUT/PATCH/DELETE/HEAD redirection. Defaults to ``True``.\n    :type allow_redirects: bool\n    :param proxies: (optional) Dictionary mapping protocol to the URL of the proxy.\n    :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use. Defaults to ``True``.\n    :param stream: (optional) if ``False``, the response content will be immediately downloaded.\n    :param cert: (optional) if String, path to ssl client cert file (.pem). If Tuple, ('cert', 'key') pair.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n\n    Usage::\n\n      >>> import requests\n      >>> req = requests.request('GET', 'https://httpbin.org/get')\n      >>> req\n      <Response [200]>\n    \"\"\"\n\n    # By using the 'with' statement we are sure the session is closed, thus we\n    # avoid leaving sockets open which can trigger a ResourceWarning in some\n    # cases, and look like a memory leak in others.\n    with sessions.Session() as session:\n        return session.request(method=method, url=url, **kwargs)\n\n\ndef get(url, params=None, **kwargs):\n    r\"\"\"Sends a GET request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param params: (optional) Dictionary, list of tuples or bytes to send\n        in the query string for the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"get\", url, params=params, **kwargs)\n\n\ndef options(url, **kwargs):\n    r\"\"\"Sends an OPTIONS request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"options\", url, **kwargs)\n\n\ndef head(url, **kwargs):\n    r\"\"\"Sends a HEAD request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes. If\n        `allow_redirects` is not provided, it will be set to `False` (as\n        opposed to the default :meth:`request` behavior).\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    kwargs.setdefault(\"allow_redirects\", False)\n    return request(\"head\", url, **kwargs)\n\n\ndef post(url, data=None, json=None, **kwargs):\n    r\"\"\"Sends a POST request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"post\", url, data=data, json=json, **kwargs)\n\n\ndef put(url, data=None, **kwargs):\n    r\"\"\"Sends a PUT request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"put\", url, data=data, **kwargs)\n\n\ndef patch(url, data=None, **kwargs):\n    r\"\"\"Sends a PATCH request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary, list of tuples, bytes, or file-like\n        object to send in the body of the :class:`Request`.\n    :param json: (optional) A JSON serializable Python object to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"patch\", url, data=data, **kwargs)\n\n\ndef delete(url, **kwargs):\n    r\"\"\"Sends a DELETE request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request(\"delete\", url, **kwargs)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/api.py",
        "start": 1,
        "end": 157,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 157,
          "column": 2,
          "position": 373
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/api.py",
        "start": 1,
        "end": 157,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 157,
          "column": 2,
          "position": 373
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "urllib3.util.retry import Retry\n\nfrom .auth import _basic_auth_str\nfrom .compat import basestring, urlparse\nfrom .cookies import extract_cookies_to_jar\nfrom .exceptions import (\n    ConnectionError,\n    ConnectTimeout,\n    InvalidHeader,\n    InvalidProxyURL,\n    InvalidSchema,\n    InvalidURL,\n    ProxyError,\n    ReadTimeout,\n    RetryError,\n    SSLError,\n)\nfrom .models import Response\nfrom .structures import CaseInsensitiveDict\nfrom .utils import (\n    DEFAULT_CA_BUNDLE_PATH,\n    extract_zipped_paths,\n    get_auth_from_url,\n    get_encoding_from_headers,\n    prepend_scheme_if_needed,\n    select_proxy,\n    urldefragauth,\n)\n\ntry:\n    from urllib3",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/adapters.py",
        "start": 29,
        "end": 59,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 173
        },
        "endLoc": {
          "line": 59,
          "column": 8,
          "position": 329
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/adapters.py",
        "start": 29,
        "end": 59,
        "startLoc": {
          "line": 29,
          "column": 2,
          "position": 217
        },
        "endLoc": {
          "line": 59,
          "column": 4,
          "position": 373
        }
      }
    },
    {
      "format": "python",
      "lines": 638,
      "fragment": "urllib3.contrib.socks import SOCKSProxyManager\nexcept ImportError:\n\n    def SOCKSProxyManager(*args, **kwargs):\n        raise InvalidSchema(\"Missing dependencies for SOCKS support.\")\n\n\nif typing.TYPE_CHECKING:\n    from .models import PreparedRequest\n\n\nDEFAULT_POOLBLOCK = False\nDEFAULT_POOLSIZE = 10\nDEFAULT_RETRIES = 0\nDEFAULT_POOL_TIMEOUT = None\n\n\ndef _urllib3_request_context(\n    request: \"PreparedRequest\",\n    verify: \"bool | str | None\",\n    client_cert: \"typing.Tuple[str, str] | str | None\",\n    poolmanager: \"PoolManager\",\n) -> \"(typing.Dict[str, typing.Any], typing.Dict[str, typing.Any])\":\n    host_params = {}\n    pool_kwargs = {}\n    parsed_request_url = urlparse(request.url)\n    scheme = parsed_request_url.scheme.lower()\n    port = parsed_request_url.port\n\n    cert_reqs = \"CERT_REQUIRED\"\n    if verify is False:\n        cert_reqs = \"CERT_NONE\"\n    elif isinstance(verify, str):\n        if not os.path.isdir(verify):\n            pool_kwargs[\"ca_certs\"] = verify\n        else:\n            pool_kwargs[\"ca_cert_dir\"] = verify\n    pool_kwargs[\"cert_reqs\"] = cert_reqs\n    if client_cert is not None:\n        if isinstance(client_cert, tuple) and len(client_cert) == 2:\n            pool_kwargs[\"cert_file\"] = client_cert[0]\n            pool_kwargs[\"key_file\"] = client_cert[1]\n        else:\n            # According to our docs, we allow users to specify just the client\n            # cert path\n            pool_kwargs[\"cert_file\"] = client_cert\n    host_params = {\n        \"scheme\": scheme,\n        \"host\": parsed_request_url.hostname,\n        \"port\": port,\n    }\n    return host_params, pool_kwargs\n\n\nclass BaseAdapter:\n    \"\"\"The Base Transport Adapter\"\"\"\n\n    def __init__(self):\n        super().__init__()\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple\n        :param verify: (optional) Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        \"\"\"\n        raise NotImplementedError\n\n    def close(self):\n        \"\"\"Cleans up adapter specific items.\"\"\"\n        raise NotImplementedError\n\n\nclass HTTPAdapter(BaseAdapter):\n    \"\"\"The built-in HTTP Adapter for urllib3.\n\n    Provides a general-case interface for Requests sessions to contact HTTP and\n    HTTPS urls by implementing the Transport Adapter interface. This class will\n    usually be created by the :class:`Session <Session>` class under the\n    covers.\n\n    :param pool_connections: The number of urllib3 connection pools to cache.\n    :param pool_maxsize: The maximum number of connections to save in the pool.\n    :param max_retries: The maximum number of retries each connection\n        should attempt. Note, this applies only to failed DNS lookups, socket\n        connections and connection timeouts, never to requests where data has\n        made it to the server. By default, Requests does not retry failed\n        connections. If you need granular control over the conditions under\n        which we retry a request, import urllib3's ``Retry`` class and pass\n        that instead.\n    :param pool_block: Whether the connection pool should block for connections.\n\n    Usage::\n\n      >>> import requests\n      >>> s = requests.Session()\n      >>> a = requests.adapters.HTTPAdapter(max_retries=3)\n      >>> s.mount('http://', a)\n    \"\"\"\n\n    __attrs__ = [\n        \"max_retries\",\n        \"config\",\n        \"_pool_connections\",\n        \"_pool_maxsize\",\n        \"_pool_block\",\n    ]\n\n    def __init__(\n        self,\n        pool_connections=DEFAULT_POOLSIZE,\n        pool_maxsize=DEFAULT_POOLSIZE,\n        max_retries=DEFAULT_RETRIES,\n        pool_block=DEFAULT_POOLBLOCK,\n    ):\n        if max_retries == DEFAULT_RETRIES:\n            self.max_retries = Retry(0, read=False)\n        else:\n            self.max_retries = Retry.from_int(max_retries)\n        self.config = {}\n        self.proxy_manager = {}\n\n        super().__init__()\n\n        self._pool_connections = pool_connections\n        self._pool_maxsize = pool_maxsize\n        self._pool_block = pool_block\n\n        self.init_poolmanager(pool_connections, pool_maxsize, block=pool_block)\n\n    def __getstate__(self):\n        return {attr: getattr(self, attr, None) for attr in self.__attrs__}\n\n    def __setstate__(self, state):\n        # Can't handle by adding 'proxy_manager' to self.__attrs__ because\n        # self.poolmanager uses a lambda function, which isn't pickleable.\n        self.proxy_manager = {}\n        self.config = {}\n\n        for attr, value in state.items():\n            setattr(self, attr, value)\n\n        self.init_poolmanager(\n            self._pool_connections, self._pool_maxsize, block=self._pool_block\n        )\n\n    def init_poolmanager(\n        self, connections, maxsize, block=DEFAULT_POOLBLOCK, **pool_kwargs\n    ):\n        \"\"\"Initializes a urllib3 PoolManager.\n\n        This method should not be called from user code, and is only\n        exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param connections: The number of urllib3 connection pools to cache.\n        :param maxsize: The maximum number of connections to save in the pool.\n        :param block: Block when no free connections are available.\n        :param pool_kwargs: Extra keyword arguments used to initialize the Pool Manager.\n        \"\"\"\n        # save these values for pickling\n        self._pool_connections = connections\n        self._pool_maxsize = maxsize\n        self._pool_block = block\n\n        self.poolmanager = PoolManager(\n            num_pools=connections,\n            maxsize=maxsize,\n            block=block,\n            **pool_kwargs,\n        )\n\n    def proxy_manager_for(self, proxy, **proxy_kwargs):\n        \"\"\"Return urllib3 ProxyManager for the given proxy.\n\n        This method should not be called from user code, and is only\n        exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param proxy: The proxy to return a urllib3 ProxyManager for.\n        :param proxy_kwargs: Extra keyword arguments used to configure the Proxy Manager.\n        :returns: ProxyManager\n        :rtype: urllib3.ProxyManager\n        \"\"\"\n        if proxy in self.proxy_manager:\n            manager = self.proxy_manager[proxy]\n        elif proxy.lower().startswith(\"socks\"):\n            username, password = get_auth_from_url(proxy)\n            manager = self.proxy_manager[proxy] = SOCKSProxyManager(\n                proxy,\n                username=username,\n                password=password,\n                num_pools=self._pool_connections,\n                maxsize=self._pool_maxsize,\n                block=self._pool_block,\n                **proxy_kwargs,\n            )\n        else:\n            proxy_headers = self.proxy_headers(proxy)\n            manager = self.proxy_manager[proxy] = proxy_from_url(\n                proxy,\n                proxy_headers=proxy_headers,\n                num_pools=self._pool_connections,\n                maxsize=self._pool_maxsize,\n                block=self._pool_block,\n                **proxy_kwargs,\n            )\n\n        return manager\n\n    def cert_verify(self, conn, url, verify, cert):\n        \"\"\"Verify a SSL certificate. This method should not be called from user\n        code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param conn: The urllib3 connection object associated with the cert.\n        :param url: The requested URL.\n        :param verify: Either a boolean, in which case it controls whether we verify\n            the server's TLS certificate, or a string, in which case it must be a path\n            to a CA bundle to use\n        :param cert: The SSL certificate to verify.\n        \"\"\"\n        if url.lower().startswith(\"https\") and verify:\n            cert_loc = None\n\n            # Allow self-specified cert location.\n            if verify is not True:\n                cert_loc = verify\n\n            if not cert_loc:\n                cert_loc = extract_zipped_paths(DEFAULT_CA_BUNDLE_PATH)\n\n            if not cert_loc or not os.path.exists(cert_loc):\n                raise OSError(\n                    f\"Could not find a suitable TLS CA certificate bundle, \"\n                    f\"invalid path: {cert_loc}\"\n                )\n\n            conn.cert_reqs = \"CERT_REQUIRED\"\n\n            if not os.path.isdir(cert_loc):\n                conn.ca_certs = cert_loc\n            else:\n                conn.ca_cert_dir = cert_loc\n        else:\n            conn.cert_reqs = \"CERT_NONE\"\n            conn.ca_certs = None\n            conn.ca_cert_dir = None\n\n        if cert:\n            if not isinstance(cert, basestring):\n                conn.cert_file = cert[0]\n                conn.key_file = cert[1]\n            else:\n                conn.cert_file = cert\n                conn.key_file = None\n            if conn.cert_file and not os.path.exists(conn.cert_file):\n                raise OSError(\n                    f\"Could not find the TLS certificate file, \"\n                    f\"invalid path: {conn.cert_file}\"\n                )\n            if conn.key_file and not os.path.exists(conn.key_file):\n                raise OSError(\n                    f\"Could not find the TLS key file, invalid path: {conn.key_file}\"\n                )\n\n    def build_response(self, req, resp):\n        \"\"\"Builds a :class:`Response <requests.Response>` object from a urllib3\n        response. This should not be called from user code, and is only exposed\n        for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`\n\n        :param req: The :class:`PreparedRequest <PreparedRequest>` used to generate the response.\n        :param resp: The urllib3 response object.\n        :rtype: requests.Response\n        \"\"\"\n        response = Response()\n\n        # Fallback to None if there's no status_code, for whatever reason.\n        response.status_code = getattr(resp, \"status\", None)\n\n        # Make headers case-insensitive.\n        response.headers = CaseInsensitiveDict(getattr(resp, \"headers\", {}))\n\n        # Set encoding.\n        response.encoding = get_encoding_from_headers(response.headers)\n        response.raw = resp\n        response.reason = response.raw.reason\n\n        if isinstance(req.url, bytes):\n            response.url = req.url.decode(\"utf-8\")\n        else:\n            response.url = req.url\n\n        # Add new cookies from the server.\n        extract_cookies_to_jar(response.cookies, req, resp)\n\n        # Give the Response some context.\n        response.request = req\n        response.connection = self\n\n        return response\n\n    def build_connection_pool_key_attributes(self, request, verify, cert=None):\n        \"\"\"Build the PoolKey attributes used by urllib3 to return a connection.\n\n        This looks at the PreparedRequest, the user-specified verify value,\n        and the value of the cert parameter to determine what PoolKey values\n        to use to select a connection from a given urllib3 Connection Pool.\n\n        The SSL related pool key arguments are not consistently set. As of\n        this writing, use the following to determine what keys may be in that\n        dictionary:\n\n        * If ``verify`` is ``True``, ``\"ssl_context\"`` will be set and will be the\n          default Requests SSL Context\n        * If ``verify`` is ``False``, ``\"ssl_context\"`` will not be set but\n          ``\"cert_reqs\"`` will be set\n        * If ``verify`` is a string, (i.e., it is a user-specified trust bundle)\n          ``\"ca_certs\"`` will be set if the string is not a directory recognized\n          by :py:func:`os.path.isdir`, otherwise ``\"ca_cert_dir\"`` will be\n          set.\n        * If ``\"cert\"`` is specified, ``\"cert_file\"`` will always be set. If\n          ``\"cert\"`` is a tuple with a second item, ``\"key_file\"`` will also\n          be present\n\n        To override these settings, one may subclass this class, call this\n        method and use the above logic to change parameters as desired. For\n        example, if one wishes to use a custom :py:class:`ssl.SSLContext` one\n        must both set ``\"ssl_context\"`` and based on what else they require,\n        alter the other keys to ensure the desired behaviour.\n\n        :param request:\n            The PreparedReqest being sent over the connection.\n        :type request:\n            :class:`~requests.models.PreparedRequest`\n        :param verify:\n            Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use.\n        :param cert:\n            (optional) Any user-provided SSL certificate for client\n            authentication (a.k.a., mTLS). This may be a string (i.e., just\n            the path to a file which holds both certificate and key) or a\n            tuple of length 2 with the certificate file path and key file\n            path.\n        :returns:\n            A tuple of two dictionaries. The first is the \"host parameters\"\n            portion of the Pool Key including scheme, hostname, and port. The\n            second is a dictionary of SSLContext related parameters.\n        \"\"\"\n        return _urllib3_request_context(request, verify, cert, self.poolmanager)\n\n    def get_connection_with_tls_context(self, request, verify, proxies=None, cert=None):\n        \"\"\"Returns a urllib3 connection for the given request and TLS settings.\n        This should not be called from user code, and is only exposed for use\n        when subclassing the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param request:\n            The :class:`PreparedRequest <PreparedRequest>` object to be sent\n            over the connection.\n        :param verify:\n            Either a boolean, in which case it controls whether we verify the\n            server's TLS certificate, or a string, in which case it must be a\n            path to a CA bundle to use.\n        :param proxies:\n            (optional) The proxies dictionary to apply to the request.\n        :param cert:\n            (optional) Any user-provided SSL certificate to be used for client\n            authentication (a.k.a., mTLS).\n        :rtype:\n            urllib3.ConnectionPool\n        \"\"\"\n        proxy = select_proxy(request.url, proxies)\n        try:\n            host_params, pool_kwargs = self.build_connection_pool_key_attributes(\n                request,\n                verify,\n                cert,\n            )\n        except ValueError as e:\n            raise InvalidURL(e, request=request)\n        if proxy:\n            proxy = prepend_scheme_if_needed(proxy, \"http\")\n            proxy_url = parse_url(proxy)\n            if not proxy_url.host:\n                raise InvalidProxyURL(\n                    \"Please check proxy URL. It is malformed \"\n                    \"and could be missing the host.\"\n                )\n            proxy_manager = self.proxy_manager_for(proxy)\n            conn = proxy_manager.connection_from_host(\n                **host_params, pool_kwargs=pool_kwargs\n            )\n        else:\n            # Only scheme should be lower case\n            conn = self.poolmanager.connection_from_host(\n                **host_params, pool_kwargs=pool_kwargs\n            )\n\n        return conn\n\n    def get_connection(self, url, proxies=None):\n        \"\"\"DEPRECATED: Users should move to `get_connection_with_tls_context`\n        for all subclasses of HTTPAdapter using Requests>=2.32.2.\n\n        Returns a urllib3 connection for the given URL. This should not be\n        called from user code, and is only exposed for use when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param url: The URL to connect to.\n        :param proxies: (optional) A Requests-style dictionary of proxies used on this request.\n        :rtype: urllib3.ConnectionPool\n        \"\"\"\n        warnings.warn(\n            (\n                \"`get_connection` has been deprecated in favor of \"\n                \"`get_connection_with_tls_context`. Custom HTTPAdapter subclasses \"\n                \"will need to migrate for Requests>=2.32.2. Please see \"\n                \"https://github.com/psf/requests/pull/6710 for more details.\"\n            ),\n            DeprecationWarning,\n        )\n        proxy = select_proxy(url, proxies)\n\n        if proxy:\n            proxy = prepend_scheme_if_needed(proxy, \"http\")\n            proxy_url = parse_url(proxy)\n            if not proxy_url.host:\n                raise InvalidProxyURL(\n                    \"Please check proxy URL. It is malformed \"\n                    \"and could be missing the host.\"\n                )\n            proxy_manager = self.proxy_manager_for(proxy)\n            conn = proxy_manager.connection_from_url(url)\n        else:\n            # Only scheme should be lower case\n            parsed = urlparse(url)\n            url = parsed.geturl()\n            conn = self.poolmanager.connection_from_url(url)\n\n        return conn\n\n    def close(self):\n        \"\"\"Disposes of any internal state.\n\n        Currently, this closes the PoolManager and any active ProxyManager,\n        which closes any pooled connections.\n        \"\"\"\n        self.poolmanager.clear()\n        for proxy in self.proxy_manager.values():\n            proxy.clear()\n\n    def request_url(self, request, proxies):\n        \"\"\"Obtain the url to use when making the final request.\n\n        If the message is being sent through a HTTP proxy, the full URL has to\n        be used. Otherwise, we should only use the path portion of the URL.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param proxies: A dictionary of schemes or schemes and hosts to proxy URLs.\n        :rtype: str\n        \"\"\"\n        proxy = select_proxy(request.url, proxies)\n        scheme = urlparse(request.url).scheme\n\n        is_proxied_http_request = proxy and scheme != \"https\"\n        using_socks_proxy = False\n        if proxy:\n            proxy_scheme = urlparse(proxy).scheme.lower()\n            using_socks_proxy = proxy_scheme.startswith(\"socks\")\n\n        url = request.path_url\n        if url.startswith(\"//\"):  # Don't confuse urllib3\n            url = f\"/{url.lstrip('/')}\"\n\n        if is_proxied_http_request and not using_socks_proxy:\n            url = urldefragauth(request.url)\n\n        return url\n\n    def add_headers(self, request, **kwargs):\n        \"\"\"Add any headers needed by the connection. As of v2.0 this does\n        nothing by default, but is left for overriding by users that subclass\n        the :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` to add headers to.\n        :param kwargs: The keyword arguments from the call to send().\n        \"\"\"\n        pass\n\n    def proxy_headers(self, proxy):\n        \"\"\"Returns a dictionary of the headers to add to any request sent\n        through a proxy. This works with urllib3 magic to ensure that they are\n        correctly sent to the proxy, rather than in a tunnelled request if\n        CONNECT is being used.\n\n        This should not be called from user code, and is only exposed for use\n        when subclassing the\n        :class:`HTTPAdapter <requests.adapters.HTTPAdapter>`.\n\n        :param proxy: The url of the proxy being used for this request.\n        :rtype: dict\n        \"\"\"\n        headers = {}\n        username, password = get_auth_from_url(proxy)\n\n        if username:\n            headers[\"Proxy-Authorization\"] = _basic_auth_str(username, password)\n\n        return headers\n\n    def send(\n        self, request, stream=False, timeout=None, verify=True, cert=None, proxies=None\n    ):\n        \"\"\"Sends PreparedRequest object. Returns Response object.\n\n        :param request: The :class:`PreparedRequest <PreparedRequest>` being sent.\n        :param stream: (optional) Whether to stream the request content.\n        :param timeout: (optional) How long to wait for the server to send\n            data before giving up, as a float, or a :ref:`(connect timeout,\n            read timeout) <timeouts>` tuple.\n        :type timeout: float or tuple or urllib3 Timeout object\n        :param verify: (optional) Either a boolean, in which case it controls whether\n            we verify the server's TLS certificate, or a string, in which case it\n            must be a path to a CA bundle to use\n        :param cert: (optional) Any user-provided SSL certificate to be trusted.\n        :param proxies: (optional) The proxies dictionary to apply to the request.\n        :rtype: requests.Response\n        \"\"\"\n\n        try:\n            conn = self.get_connection_with_tls_context(\n                request, verify, proxies=proxies, cert=cert\n            )\n        except LocationValueError as e:\n            raise InvalidURL(e, request=request)\n\n        self.cert_verify(conn, request.url, verify, cert)\n        url = self.request_url(request, proxies)\n        self.add_headers(\n            request,\n            stream=stream,\n            timeout=timeout,\n            verify=verify,\n            cert=cert,\n            proxies=proxies,\n        )\n\n        chunked = not (request.body is None or \"Content-Length\" in request.headers)\n\n        if isinstance(timeout, tuple):\n            try:\n                connect, read = timeout\n                timeout = TimeoutSauce(connect=connect, read=read)\n            except ValueError:\n                raise ValueError(\n                    f\"Invalid timeout {timeout}. Pass a (connect, read) timeout tuple, \"\n                    f\"or a single float to set both timeouts to the same value.\"\n                )\n        elif isinstance(timeout, TimeoutSauce):\n            pass\n        else:\n            timeout = TimeoutSauce(connect=timeout, read=timeout)\n\n        try:\n            resp = conn.urlopen(\n                method=request.method,\n                url=url,\n                body=request.body,\n                headers=request.headers,\n                redirect=False,\n                assert_same_host=False,\n                preload_content=False,\n                decode_content=False,\n                retries=self.max_retries,\n                timeout=timeout,\n                chunked=chunked,\n            )\n\n        except (ProtocolError, OSError) as err:\n            raise ConnectionError(err, request=request)\n\n        except MaxRetryError as e:\n            if isinstance(e.reason, ConnectTimeoutError):\n                # TODO: Remove this in 3.0.0: see #2811\n                if not isinstance(e.reason, NewConnectionError):\n                    raise ConnectTimeout(e, request=request)\n\n            if isinstance(e.reason, ResponseError):\n                raise RetryError(e, request=request)\n\n            if isinstance(e.reason, _ProxyError):\n                raise ProxyError(e, request=request)\n\n            if isinstance(e.reason, _SSLError):\n                # This branch is for urllib3 v1.22 and later.\n                raise SSLError(e, request=request)\n\n            raise ConnectionError(e, request=request)\n\n        except ClosedPoolError as e:\n            raise ConnectionError(e, request=request)\n\n        except _ProxyError as e:\n            raise ProxyError(e)\n\n        except (_SSLError, _HTTPError) as e:\n            if isinstance(e, _SSLError):\n                # This branch is for urllib3 versions earlier than v1.22\n                raise SSLError(e, request=request)\n            elif isinstance(e, ReadTimeoutError):\n                raise ReadTimeout(e, request=request)\n            elif isinstance(e, _InvalidHeader):\n                raise InvalidHeader(e, request=request)\n            else:\n                raise\n\n        return self.build_response(request, resp)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/adapters.py",
        "start": 59,
        "end": 696,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 329
        },
        "endLoc": {
          "line": 696,
          "column": 2,
          "position": 3534
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/adapters.py",
        "start": 59,
        "end": 696,
        "startLoc": {
          "line": 59,
          "column": 2,
          "position": 377
        },
        "endLoc": {
          "line": 696,
          "column": 2,
          "position": 3582
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "\"\"\"\nrequests._internal_utils\n~~~~~~~~~~~~~~\n\nProvides utility functions that are consumed internally by Requests\nwhich depend on extremely few external helpers (such as compat)\n\"\"\"\nimport re\n\nfrom .compat import builtin_str\n\n_VALID_HEADER_NAME_RE_BYTE = re.compile(rb\"^[^:\\s][^:\\r\\n]*$\")\n_VALID_HEADER_NAME_RE_STR = re.compile(r\"^[^:\\s][^:\\r\\n]*$\")\n_VALID_HEADER_VALUE_RE_BYTE = re.compile(rb\"^\\S[^\\r\\n]*$|^$\")\n_VALID_HEADER_VALUE_RE_STR = re.compile(r\"^\\S[^\\r\\n]*$|^$\")\n\n_HEADER_VALIDATORS_STR = (_VALID_HEADER_NAME_RE_STR, _VALID_HEADER_VALUE_RE_STR)\n_HEADER_VALIDATORS_BYTE = (_VALID_HEADER_NAME_RE_BYTE, _VALID_HEADER_VALUE_RE_BYTE)\nHEADER_VALIDATORS = {\n    bytes: _HEADER_VALIDATORS_BYTE,\n    str: _HEADER_VALIDATORS_STR,\n}\n\n\ndef to_native_string(string, encoding=\"ascii\"):\n    \"\"\"Given a string object, regardless of type, returns a representation of\n    that string in the native string type, encoding and decoding where\n    necessary. This assumes ASCII unless told otherwise.\n    \"\"\"\n    if isinstance(string, builtin_str):\n        out = string\n    else:\n        out = string.decode(encoding)\n\n    return out\n\n\ndef unicode_is_ascii(u_string):\n    \"\"\"Determine if unicode string only contains ASCII characters.\n\n    :param str u_string: unicode string to check. Must be unicode\n        and not Python 2 `str`.\n    :rtype: bool\n    \"\"\"\n    assert isinstance(u_string, str)\n    try:\n        u_string.encode(\"ascii\")\n        return True\n    except UnicodeEncodeError:\n        return False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/_internal_utils.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 6,
          "position": 219
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/_internal_utils.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 6,
          "position": 219
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "chardet_version = None\n\n\ndef check_compatibility(urllib3_version, chardet_version, charset_normalizer_version):\n    urllib3_version = urllib3_version.split(\".\")\n    assert urllib3_version != [\"dev\"]  # Verify urllib3 isn't installed from git.\n\n    # Sometimes, urllib3 only reports its version as 16.1.\n    if len(urllib3_version) == 2:\n        urllib3_version.append(\"0\")\n\n    # Check urllib3 for compatibility.\n    major, minor, patch = urllib3_version  # noqa: F811\n    major, minor, patch = int(major), int(minor), int(patch)\n    # urllib3 >= 1.21.1\n    assert major >= 1\n    if major == 1:\n        assert minor >= 21\n\n    # Check charset_normalizer for compatibility.\n    if chardet_version:\n        major, minor, patch = chardet_version.split(\".\")[:3]\n        major, minor, patch = int(major), int(minor), int(patch)\n        # chardet_version >= 3.0.2, < 6.0.0\n        assert (3, 0, 2) <= (major, minor, patch) < (6, 0, 0)\n    elif charset_normalizer_version:\n        major, minor, patch = charset_normalizer_version.split(\".\")[:3]\n        major, minor, patch = int(major), int(minor), int(patch)\n        # charset_normalizer >= 2.0.0 < 4.0.0\n        assert (2, 0, 0) <= (major, minor, patch) < (4, 0, 0)\n    else:\n        warnings",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/__init__.py",
        "start": 55,
        "end": 86,
        "startLoc": {
          "line": 55,
          "column": 5,
          "position": 83
        },
        "endLoc": {
          "line": 86,
          "column": 9,
          "position": 434
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/__init__.py",
        "start": 48,
        "end": 79,
        "startLoc": {
          "line": 48,
          "column": 1,
          "position": 44
        },
        "endLoc": {
          "line": 79,
          "column": 47,
          "position": 395
        }
      }
    },
    {
      "format": "python",
      "lines": 33,
      "fragment": "def _check_cryptography(cryptography_version):\n    # cryptography < 1.3.4\n    try:\n        cryptography_version = list(map(int, cryptography_version.split(\".\")))\n    except ValueError:\n        return\n\n    if cryptography_version < [1, 3, 4]:\n        warning = \"Old version of cryptography ({}) may cause slowdown.\".format(\n            cryptography_version\n        )\n        warnings.warn(warning, RequestsDependencyWarning)\n\n\n# Check imported dependencies for compatibility.\ntry:\n    check_compatibility(\n        urllib3.__version__, chardet_version, charset_normalizer_version\n    )\nexcept (AssertionError, ValueError):\n    warnings.warn(\n        \"urllib3 ({}) or chardet ({})/charset_normalizer ({}) doesn't match a supported \"\n        \"version!\".format(\n            urllib3.__version__, chardet_version, charset_normalizer_version\n        ),\n        RequestsDependencyWarning,\n    )\n\n# Attempt to enable urllib3's fallback for SNI support\n# if the standard library doesn't support SNI or the\n# 'ssl' library isn't available.\ntry:\n    try",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/__init__.py",
        "start": 93,
        "end": 125,
        "startLoc": {
          "line": 93,
          "column": 1,
          "position": 455
        },
        "endLoc": {
          "line": 125,
          "column": 4,
          "position": 629
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/__init__.py",
        "start": 83,
        "end": 115,
        "startLoc": {
          "line": 83,
          "column": 1,
          "position": 402
        },
        "endLoc": {
          "line": 115,
          "column": 75,
          "position": 576
        }
      }
    },
    {
      "format": "python",
      "lines": 42,
      "fragment": "urllib3.exceptions import DependencyWarning\n\nwarnings.simplefilter(\"ignore\", DependencyWarning)\n\n# Set default logging handler to avoid \"No handler found\" warnings.\nimport logging\nfrom logging import NullHandler\n\nfrom . import packages, utils\nfrom .__version__ import (\n    __author__,\n    __author_email__,\n    __build__,\n    __cake__,\n    __copyright__,\n    __description__,\n    __license__,\n    __title__,\n    __url__,\n    __version__,\n)\nfrom .api import delete, get, head, options, patch, post, put, request\nfrom .exceptions import (\n    ConnectionError,\n    ConnectTimeout,\n    FileModeWarning,\n    HTTPError,\n    JSONDecodeError,\n    ReadTimeout,\n    RequestException,\n    Timeout,\n    TooManyRedirects,\n    URLRequired,\n)\nfrom .models import PreparedRequest, Request, Response\nfrom .sessions import Session, session\nfrom .status_codes import codes\n\nlogging.getLogger(__name__).addHandler(NullHandler())\n\n# FileModeWarnings go off per the default.\nwarnings.simplefilter(\"default\", FileModeWarning, append=True)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/requests/__init__.py",
        "start": 143,
        "end": 184,
        "startLoc": {
          "line": 143,
          "column": 2,
          "position": 724
        },
        "endLoc": {
          "line": 184,
          "column": 2,
          "position": 969
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/requests/__init__.py",
        "start": 138,
        "end": 179,
        "startLoc": {
          "line": 138,
          "column": 2,
          "position": 716
        },
        "endLoc": {
          "line": 179,
          "column": 2,
          "position": 961
        }
      }
    },
    {
      "format": "python",
      "lines": 324,
      "fragment": "\"\"\"\n    pygments.util\n    ~~~~~~~~~~~~~\n\n    Utility functions.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport re\nfrom io import TextIOWrapper\n\n\nsplit_path_re = re.compile(r'[/\\\\ ]')\ndoctype_lookup_re = re.compile(r'''\n    <!DOCTYPE\\s+(\n     [a-zA-Z_][a-zA-Z0-9]*\n     (?: \\s+      # optional in HTML5\n     [a-zA-Z_][a-zA-Z0-9]*\\s+\n     \"[^\"]*\")?\n     )\n     [^>]*>\n''', re.DOTALL | re.MULTILINE | re.VERBOSE)\ntag_re = re.compile(r'<(.+?)(\\s.*?)?>.*?</.+?>',\n                    re.IGNORECASE | re.DOTALL | re.MULTILINE)\nxml_decl_re = re.compile(r'\\s*<\\?xml[^>]*\\?>', re.I)\n\n\nclass ClassNotFound(ValueError):\n    \"\"\"Raised if one of the lookup functions didn't find a matching class.\"\"\"\n\n\nclass OptionError(Exception):\n    \"\"\"\n    This exception will be raised by all option processing functions if\n    the type or value of the argument is not correct.\n    \"\"\"\n\ndef get_choice_opt(options, optname, allowed, default=None, normcase=False):\n    \"\"\"\n    If the key `optname` from the dictionary is not in the sequence\n    `allowed`, raise an error, otherwise return it.\n    \"\"\"\n    string = options.get(optname, default)\n    if normcase:\n        string = string.lower()\n    if string not in allowed:\n        raise OptionError('Value for option {} must be one of {}'.format(optname, ', '.join(map(str, allowed))))\n    return string\n\n\ndef get_bool_opt(options, optname, default=None):\n    \"\"\"\n    Intuitively, this is `options.get(optname, default)`, but restricted to\n    Boolean value. The Booleans can be represented as string, in order to accept\n    Boolean value from the command line arguments. If the key `optname` is\n    present in the dictionary `options` and is not associated with a Boolean,\n    raise an `OptionError`. If it is absent, `default` is returned instead.\n\n    The valid string values for ``True`` are ``1``, ``yes``, ``true`` and\n    ``on``, the ones for ``False`` are ``0``, ``no``, ``false`` and ``off``\n    (matched case-insensitively).\n    \"\"\"\n    string = options.get(optname, default)\n    if isinstance(string, bool):\n        return string\n    elif isinstance(string, int):\n        return bool(string)\n    elif not isinstance(string, str):\n        raise OptionError(f'Invalid type {string!r} for option {optname}; use '\n                          '1/0, yes/no, true/false, on/off')\n    elif string.lower() in ('1', 'yes', 'true', 'on'):\n        return True\n    elif string.lower() in ('0', 'no', 'false', 'off'):\n        return False\n    else:\n        raise OptionError(f'Invalid value {string!r} for option {optname}; use '\n                          '1/0, yes/no, true/false, on/off')\n\n\ndef get_int_opt(options, optname, default=None):\n    \"\"\"As :func:`get_bool_opt`, but interpret the value as an integer.\"\"\"\n    string = options.get(optname, default)\n    try:\n        return int(string)\n    except TypeError:\n        raise OptionError(f'Invalid type {string!r} for option {optname}; you '\n                          'must give an integer value')\n    except ValueError:\n        raise OptionError(f'Invalid value {string!r} for option {optname}; you '\n                          'must give an integer value')\n\ndef get_list_opt(options, optname, default=None):\n    \"\"\"\n    If the key `optname` from the dictionary `options` is a string,\n    split it at whitespace and return it. If it is already a list\n    or a tuple, it is returned as a list.\n    \"\"\"\n    val = options.get(optname, default)\n    if isinstance(val, str):\n        return val.split()\n    elif isinstance(val, (list, tuple)):\n        return list(val)\n    else:\n        raise OptionError(f'Invalid type {val!r} for option {optname}; you '\n                          'must give a list value')\n\n\ndef docstring_headline(obj):\n    if not obj.__doc__:\n        return ''\n    res = []\n    for line in obj.__doc__.strip().splitlines():\n        if line.strip():\n            res.append(\" \" + line.strip())\n        else:\n            break\n    return ''.join(res).lstrip()\n\n\ndef make_analysator(f):\n    \"\"\"Return a static text analyser function that returns float values.\"\"\"\n    def text_analyse(text):\n        try:\n            rv = f(text)\n        except Exception:\n            return 0.0\n        if not rv:\n            return 0.0\n        try:\n            return min(1.0, max(0.0, float(rv)))\n        except (ValueError, TypeError):\n            return 0.0\n    text_analyse.__doc__ = f.__doc__\n    return staticmethod(text_analyse)\n\n\ndef shebang_matches(text, regex):\n    r\"\"\"Check if the given regular expression matches the last part of the\n    shebang if one exists.\n\n        >>> from pygments.util import shebang_matches\n        >>> shebang_matches('#!/usr/bin/env python', r'python(2\\.\\d)?')\n        True\n        >>> shebang_matches('#!/usr/bin/python2.4', r'python(2\\.\\d)?')\n        True\n        >>> shebang_matches('#!/usr/bin/python-ruby', r'python(2\\.\\d)?')\n        False\n        >>> shebang_matches('#!/usr/bin/python/ruby', r'python(2\\.\\d)?')\n        False\n        >>> shebang_matches('#!/usr/bin/startsomethingwith python',\n        ...                 r'python(2\\.\\d)?')\n        True\n\n    It also checks for common windows executable file extensions::\n\n        >>> shebang_matches('#!C:\\\\Python2.4\\\\Python.exe', r'python(2\\.\\d)?')\n        True\n\n    Parameters (``'-f'`` or ``'--foo'`` are ignored so ``'perl'`` does\n    the same as ``'perl -e'``)\n\n    Note that this method automatically searches the whole string (eg:\n    the regular expression is wrapped in ``'^$'``)\n    \"\"\"\n    index = text.find('\\n')\n    if index >= 0:\n        first_line = text[:index].lower()\n    else:\n        first_line = text.lower()\n    if first_line.startswith('#!'):\n        try:\n            found = [x for x in split_path_re.split(first_line[2:].strip())\n                     if x and not x.startswith('-')][-1]\n        except IndexError:\n            return False\n        regex = re.compile(rf'^{regex}(\\.(exe|cmd|bat|bin))?$', re.IGNORECASE)\n        if regex.search(found) is not None:\n            return True\n    return False\n\n\ndef doctype_matches(text, regex):\n    \"\"\"Check if the doctype matches a regular expression (if present).\n\n    Note that this method only checks the first part of a DOCTYPE.\n    eg: 'html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"'\n    \"\"\"\n    m = doctype_lookup_re.search(text)\n    if m is None:\n        return False\n    doctype = m.group(1)\n    return re.compile(regex, re.I).match(doctype.strip()) is not None\n\n\ndef html_doctype_matches(text):\n    \"\"\"Check if the file looks like it has a html doctype.\"\"\"\n    return doctype_matches(text, r'html')\n\n\n_looks_like_xml_cache = {}\n\n\ndef looks_like_xml(text):\n    \"\"\"Check if a doctype exists or if we have some tags.\"\"\"\n    if xml_decl_re.match(text):\n        return True\n    key = hash(text)\n    try:\n        return _looks_like_xml_cache[key]\n    except KeyError:\n        m = doctype_lookup_re.search(text)\n        if m is not None:\n            return True\n        rv = tag_re.search(text[:1000]) is not None\n        _looks_like_xml_cache[key] = rv\n        return rv\n\n\ndef surrogatepair(c):\n    \"\"\"Given a unicode character code with length greater than 16 bits,\n    return the two 16 bit surrogate pair.\n    \"\"\"\n    # From example D28 of:\n    # http://www.unicode.org/book/ch03.pdf\n    return (0xd7c0 + (c >> 10), (0xdc00 + (c & 0x3ff)))\n\n\ndef format_lines(var_name, seq, raw=False, indent_level=0):\n    \"\"\"Formats a sequence of strings for output.\"\"\"\n    lines = []\n    base_indent = ' ' * indent_level * 4\n    inner_indent = ' ' * (indent_level + 1) * 4\n    lines.append(base_indent + var_name + ' = (')\n    if raw:\n        # These should be preformatted reprs of, say, tuples.\n        for i in seq:\n            lines.append(inner_indent + i + ',')\n    else:\n        for i in seq:\n            # Force use of single quotes\n            r = repr(i + '\"')\n            lines.append(inner_indent + r[:-2] + r[-1] + ',')\n    lines.append(base_indent + ')')\n    return '\\n'.join(lines)\n\n\ndef duplicates_removed(it, already_seen=()):\n    \"\"\"\n    Returns a list with duplicates removed from the iterable `it`.\n\n    Order is preserved.\n    \"\"\"\n    lst = []\n    seen = set()\n    for i in it:\n        if i in seen or i in already_seen:\n            continue\n        lst.append(i)\n        seen.add(i)\n    return lst\n\n\nclass Future:\n    \"\"\"Generic class to defer some work.\n\n    Handled specially in RegexLexerMeta, to support regex string construction at\n    first use.\n    \"\"\"\n    def get(self):\n        raise NotImplementedError\n\n\ndef guess_decode(text):\n    \"\"\"Decode *text* with guessed encoding.\n\n    First try UTF-8; this should fail for non-UTF-8 encodings.\n    Then try the preferred locale encoding.\n    Fall back to latin-1, which always works.\n    \"\"\"\n    try:\n        text = text.decode('utf-8')\n        return text, 'utf-8'\n    except UnicodeDecodeError:\n        try:\n            import locale\n            prefencoding = locale.getpreferredencoding()\n            text = text.decode()\n            return text, prefencoding\n        except (UnicodeDecodeError, LookupError):\n            text = text.decode('latin1')\n            return text, 'latin1'\n\n\ndef guess_decode_from_terminal(text, term):\n    \"\"\"Decode *text* coming from terminal *term*.\n\n    First try the terminal encoding, if given.\n    Then try UTF-8.  Then try the preferred locale encoding.\n    Fall back to latin-1, which always works.\n    \"\"\"\n    if getattr(term, 'encoding', None):\n        try:\n            text = text.decode(term.encoding)\n        except UnicodeDecodeError:\n            pass\n        else:\n            return text, term.encoding\n    return guess_decode(text)\n\n\ndef terminal_encoding(term):\n    \"\"\"Return our best guess of encoding for the given *term*.\"\"\"\n    if getattr(term, 'encoding', None):\n        return term.encoding\n    import locale\n    return locale.getpreferredencoding()\n\n\nclass UnclosingTextIOWrapper(TextIOWrapper):\n    # Don't close underlying buffer on destruction.\n    def close(self):\n        self.flush()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/util.py",
        "start": 1,
        "end": 324,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 324,
          "column": 2,
          "position": 1877
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/util.py",
        "start": 1,
        "end": 324,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 324,
          "column": 2,
          "position": 1877
        }
      }
    },
    {
      "format": "python",
      "lines": 153,
      "fragment": "\"\"\"\n    pygments.unistring\n    ~~~~~~~~~~~~~~~~~~\n\n    Strings of all Unicode characters of a certain category.\n    Used for matching in Unicode-aware languages. Run to regenerate.\n\n    Inspired by chartypes_create.py from the MoinMoin project.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nCc = '\\x00-\\x1f\\x7f-\\x9f'\n\nCf = '\\xad\\u0600-\\u0605\\u061c\\u06dd\\u070f\\u08e2\\u180e\\u200b-\\u200f\\u202a-\\u202e\\u2060-\\u2064\\u2066-\\u206f\\ufeff\\ufff9-\\ufffb\\U000110bd\\U000110cd\\U0001bca0-\\U0001bca3\\U0001d173-\\U0001d17a\\U000e0001\\U000e0020-\\U000e007f'\n\nCn = '\\u0378-\\u0379\\u0380-\\u0383\\u038b\\u038d\\u03a2\\u0530\\u0557-\\u0558\\u058b-\\u058c\\u0590\\u05c8-\\u05cf\\u05eb-\\u05ee\\u05f5-\\u05ff\\u061d\\u070e\\u074b-\\u074c\\u07b2-\\u07bf\\u07fb-\\u07fc\\u082e-\\u082f\\u083f\\u085c-\\u085d\\u085f\\u086b-\\u089f\\u08b5\\u08be-\\u08d2\\u0984\\u098d-\\u098e\\u0991-\\u0992\\u09a9\\u09b1\\u09b3-\\u09b5\\u09ba-\\u09bb\\u09c5-\\u09c6\\u09c9-\\u09ca\\u09cf-\\u09d6\\u09d8-\\u09db\\u09de\\u09e4-\\u09e5\\u09ff-\\u0a00\\u0a04\\u0a0b-\\u0a0e\\u0a11-\\u0a12\\u0a29\\u0a31\\u0a34\\u0a37\\u0a3a-\\u0a3b\\u0a3d\\u0a43-\\u0a46\\u0a49-\\u0a4a\\u0a4e-\\u0a50\\u0a52-\\u0a58\\u0a5d\\u0a5f-\\u0a65\\u0a77-\\u0a80\\u0a84\\u0a8e\\u0a92\\u0aa9\\u0ab1\\u0ab4\\u0aba-\\u0abb\\u0ac6\\u0aca\\u0ace-\\u0acf\\u0ad1-\\u0adf\\u0ae4-\\u0ae5\\u0af2-\\u0af8\\u0b00\\u0b04\\u0b0d-\\u0b0e\\u0b11-\\u0b12\\u0b29\\u0b31\\u0b34\\u0b3a-\\u0b3b\\u0b45-\\u0b46\\u0b49-\\u0b4a\\u0b4e-\\u0b55\\u0b58-\\u0b5b\\u0b5e\\u0b64-\\u0b65\\u0b78-\\u0b81\\u0b84\\u0b8b-\\u0b8d\\u0b91\\u0b96-\\u0b98\\u0b9b\\u0b9d\\u0ba0-\\u0ba2\\u0ba5-\\u0ba7\\u0bab-\\u0bad\\u0bba-\\u0bbd\\u0bc3-\\u0bc5\\u0bc9\\u0bce-\\u0bcf\\u0bd1-\\u0bd6\\u0bd8-\\u0be5\\u0bfb-\\u0bff\\u0c0d\\u0c11\\u0c29\\u0c3a-\\u0c3c\\u0c45\\u0c49\\u0c4e-\\u0c54\\u0c57\\u0c5b-\\u0c5f\\u0c64-\\u0c65\\u0c70-\\u0c77\\u0c8d\\u0c91\\u0ca9\\u0cb4\\u0cba-\\u0cbb\\u0cc5\\u0cc9\\u0cce-\\u0cd4\\u0cd7-\\u0cdd\\u0cdf\\u0ce4-\\u0ce5\\u0cf0\\u0cf3-\\u0cff\\u0d04\\u0d0d\\u0d11\\u0d45\\u0d49\\u0d50-\\u0d53\\u0d64-\\u0d65\\u0d80-\\u0d81\\u0d84\\u0d97-\\u0d99\\u0db2\\u0dbc\\u0dbe-\\u0dbf\\u0dc7-\\u0dc9\\u0dcb-\\u0dce\\u0dd5\\u0dd7\\u0de0-\\u0de5\\u0df0-\\u0df1\\u0df5-\\u0e00\\u0e3b-\\u0e3e\\u0e5c-\\u0e80\\u0e83\\u0e85-\\u0e86\\u0e89\\u0e8b-\\u0e8c\\u0e8e-\\u0e93\\u0e98\\u0ea0\\u0ea4\\u0ea6\\u0ea8-\\u0ea9\\u0eac\\u0eba\\u0ebe-\\u0ebf\\u0ec5\\u0ec7\\u0ece-\\u0ecf\\u0eda-\\u0edb\\u0ee0-\\u0eff\\u0f48\\u0f6d-\\u0f70\\u0f98\\u0fbd\\u0fcd\\u0fdb-\\u0fff\\u10c6\\u10c8-\\u10cc\\u10ce-\\u10cf\\u1249\\u124e-\\u124f\\u1257\\u1259\\u125e-\\u125f\\u1289\\u128e-\\u128f\\u12b1\\u12b6-\\u12b7\\u12bf\\u12c1\\u12c6-\\u12c7\\u12d7\\u1311\\u1316-\\u1317\\u135b-\\u135c\\u137d-\\u137f\\u139a-\\u139f\\u13f6-\\u13f7\\u13fe-\\u13ff\\u169d-\\u169f\\u16f9-\\u16ff\\u170d\\u1715-\\u171f\\u1737-\\u173f\\u1754-\\u175f\\u176d\\u1771\\u1774-\\u177f\\u17de-\\u17df\\u17ea-\\u17ef\\u17fa-\\u17ff\\u180f\\u181a-\\u181f\\u1879-\\u187f\\u18ab-\\u18af\\u18f6-\\u18ff\\u191f\\u192c-\\u192f\\u193c-\\u193f\\u1941-\\u1943\\u196e-\\u196f\\u1975-\\u197f\\u19ac-\\u19af\\u19ca-\\u19cf\\u19db-\\u19dd\\u1a1c-\\u1a1d\\u1a5f\\u1a7d-\\u1a7e\\u1a8a-\\u1a8f\\u1a9a-\\u1a9f\\u1aae-\\u1aaf\\u1abf-\\u1aff\\u1b4c-\\u1b4f\\u1b7d-\\u1b7f\\u1bf4-\\u1bfb\\u1c38-\\u1c3a\\u1c4a-\\u1c4c\\u1c89-\\u1c8f\\u1cbb-\\u1cbc\\u1cc8-\\u1ccf\\u1cfa-\\u1cff\\u1dfa\\u1f16-\\u1f17\\u1f1e-\\u1f1f\\u1f46-\\u1f47\\u1f4e-\\u1f4f\\u1f58\\u1f5a\\u1f5c\\u1f5e\\u1f7e-\\u1f7f\\u1fb5\\u1fc5\\u1fd4-\\u1fd5\\u1fdc\\u1ff0-\\u1ff1\\u1ff5\\u1fff\\u2065\\u2072-\\u2073\\u208f\\u209d-\\u209f\\u20c0-\\u20cf\\u20f1-\\u20ff\\u218c-\\u218f\\u2427-\\u243f\\u244b-\\u245f\\u2b74-\\u2b75\\u2b96-\\u2b97\\u2bc9\\u2bff\\u2c2f\\u2c5f\\u2cf4-\\u2cf8\\u2d26\\u2d28-\\u2d2c\\u2d2e-\\u2d2f\\u2d68-\\u2d6e\\u2d71-\\u2d7e\\u2d97-\\u2d9f\\u2da7\\u2daf\\u2db7\\u2dbf\\u2dc7\\u2dcf\\u2dd7\\u2ddf\\u2e4f-\\u2e7f\\u2e9a\\u2ef4-\\u2eff\\u2fd6-\\u2fef\\u2ffc-\\u2fff\\u3040\\u3097-\\u3098\\u3100-\\u3104\\u3130\\u318f\\u31bb-\\u31bf\\u31e4-\\u31ef\\u321f\\u32ff\\u4db6-\\u4dbf\\u9ff0-\\u9fff\\ua48d-\\ua48f\\ua4c7-\\ua4cf\\ua62c-\\ua63f\\ua6f8-\\ua6ff\\ua7ba-\\ua7f6\\ua82c-\\ua82f\\ua83a-\\ua83f\\ua878-\\ua87f\\ua8c6-\\ua8cd\\ua8da-\\ua8df\\ua954-\\ua95e\\ua97d-\\ua97f\\ua9ce\\ua9da-\\ua9dd\\ua9ff\\uaa37-\\uaa3f\\uaa4e-\\uaa4f\\uaa5a-\\uaa5b\\uaac3-\\uaada\\uaaf7-\\uab00\\uab07-\\uab08\\uab0f-\\uab10\\uab17-\\uab1f\\uab27\\uab2f\\uab66-\\uab6f\\uabee-\\uabef\\uabfa-\\uabff\\ud7a4-\\ud7af\\ud7c7-\\ud7ca\\ud7fc-\\ud7ff\\ufa6e-\\ufa6f\\ufada-\\ufaff\\ufb07-\\ufb12\\ufb18-\\ufb1c\\ufb37\\ufb3d\\ufb3f\\ufb42\\ufb45\\ufbc2-\\ufbd2\\ufd40-\\ufd4f\\ufd90-\\ufd91\\ufdc8-\\ufdef\\ufdfe-\\ufdff\\ufe1a-\\ufe1f\\ufe53\\ufe67\\ufe6c-\\ufe6f\\ufe75\\ufefd-\\ufefe\\uff00\\uffbf-\\uffc1\\uffc8-\\uffc9\\uffd0-\\uffd1\\uffd8-\\uffd9\\uffdd-\\uffdf\\uffe7\\uffef-\\ufff8\\ufffe-\\uffff\\U0001000c\\U00010027\\U0001003b\\U0001003e\\U0001004e-\\U0001004f\\U0001005e-\\U0001007f\\U000100fb-\\U000100ff\\U00010103-\\U00010106\\U00010134-\\U00010136\\U0001018f\\U0001019c-\\U0001019f\\U000101a1-\\U000101cf\\U000101fe-\\U0001027f\\U0001029d-\\U0001029f\\U000102d1-\\U000102df\\U000102fc-\\U000102ff\\U00010324-\\U0001032c\\U0001034b-\\U0001034f\\U0001037b-\\U0001037f\\U0001039e\\U000103c4-\\U000103c7\\U000103d6-\\U000103ff\\U0001049e-\\U0001049f\\U000104aa-\\U000104af\\U000104d4-\\U000104d7\\U000104fc-\\U000104ff\\U00010528-\\U0001052f\\U00010564-\\U0001056e\\U00010570-\\U000105ff\\U00010737-\\U0001073f\\U00010756-\\U0001075f\\U00010768-\\U000107ff\\U00010806-\\U00010807\\U00010809\\U00010836\\U00010839-\\U0001083b\\U0001083d-\\U0001083e\\U00010856\\U0001089f-\\U000108a6\\U000108b0-\\U000108df\\U000108f3\\U000108f6-\\U000108fa\\U0001091c-\\U0001091e\\U0001093a-\\U0001093e\\U00010940-\\U0001097f\\U000109b8-\\U000109bb\\U000109d0-\\U000109d1\\U00010a04\\U00010a07-\\U00010a0b\\U00010a14\\U00010a18\\U00010a36-\\U00010a37\\U00010a3b-\\U00010a3e\\U00010a49-\\U00010a4f\\U00010a59-\\U00010a5f\\U00010aa0-\\U00010abf\\U00010ae7-\\U00010aea\\U00010af7-\\U00010aff\\U00010b36-\\U00010b38\\U00010b56-\\U00010b57\\U00010b73-\\U00010b77\\U00010b92-\\U00010b98\\U00010b9d-\\U00010ba8\\U00010bb0-\\U00010bff\\U00010c49-\\U00010c7f\\U00010cb3-\\U00010cbf\\U00010cf3-\\U00010cf9\\U00010d28-\\U00010d2f\\U00010d3a-\\U00010e5f\\U00010e7f-\\U00010eff\\U00010f28-\\U00010f2f\\U00010f5a-\\U00010fff\\U0001104e-\\U00011051\\U00011070-\\U0001107e\\U000110c2-\\U000110cc\\U000110ce-\\U000110cf\\U000110e9-\\U000110ef\\U000110fa-\\U000110ff\\U00011135\\U00011147-\\U0001114f\\U00011177-\\U0001117f\\U000111ce-\\U000111cf\\U000111e0\\U000111f5-\\U000111ff\\U00011212\\U0001123f-\\U0001127f\\U00011287\\U00011289\\U0001128e\\U0001129e\\U000112aa-\\U000112af\\U000112eb-\\U000112ef\\U000112fa-\\U000112ff\\U00011304\\U0001130d-\\U0001130e\\U00011311-\\U00011312\\U00011329\\U00011331\\U00011334\\U0001133a\\U00011345-\\U00011346\\U00011349-\\U0001134a\\U0001134e-\\U0001134f\\U00011351-\\U00011356\\U00011358-\\U0001135c\\U00011364-\\U00011365\\U0001136d-\\U0001136f\\U00011375-\\U000113ff\\U0001145a\\U0001145c\\U0001145f-\\U0001147f\\U000114c8-\\U000114cf\\U000114da-\\U0001157f\\U000115b6-\\U000115b7\\U000115de-\\U000115ff\\U00011645-\\U0001164f\\U0001165a-\\U0001165f\\U0001166d-\\U0001167f\\U000116b8-\\U000116bf\\U000116ca-\\U000116ff\\U0001171b-\\U0001171c\\U0001172c-\\U0001172f\\U00011740-\\U000117ff\\U0001183c-\\U0001189f\\U000118f3-\\U000118fe\\U00011900-\\U000119ff\\U00011a48-\\U00011a4f\\U00011a84-\\U00011a85\\U00011aa3-\\U00011abf\\U00011af9-\\U00011bff\\U00011c09\\U00011c37\\U00011c46-\\U00011c4f\\U00011c6d-\\U00011c6f\\U00011c90-\\U00011c91\\U00011ca8\\U00011cb7-\\U00011cff\\U00011d07\\U00011d0a\\U00011d37-\\U00011d39\\U00011d3b\\U00011d3e\\U00011d48-\\U00011d4f\\U00011d5a-\\U00011d5f\\U00011d66\\U00011d69\\U00011d8f\\U00011d92\\U00011d99-\\U00011d9f\\U00011daa-\\U00011edf\\U00011ef9-\\U00011fff\\U0001239a-\\U000123ff\\U0001246f\\U00012475-\\U0001247f\\U00012544-\\U00012fff\\U0001342f-\\U000143ff\\U00014647-\\U000167ff\\U00016a39-\\U00016a3f\\U00016a5f\\U00016a6a-\\U00016a6d\\U00016a70-\\U00016acf\\U00016aee-\\U00016aef\\U00016af6-\\U00016aff\\U00016b46-\\U00016b4f\\U00016b5a\\U00016b62\\U00016b78-\\U00016b7c\\U00016b90-\\U00016e3f\\U00016e9b-\\U00016eff\\U00016f45-\\U00016f4f\\U00016f7f-\\U00016f8e\\U00016fa0-\\U00016fdf\\U00016fe2-\\U00016fff\\U000187f2-\\U000187ff\\U00018af3-\\U0001afff\\U0001b11f-\\U0001b16f\\U0001b2fc-\\U0001bbff\\U0001bc6b-\\U0001bc6f\\U0001bc7d-\\U0001bc7f\\U0001bc89-\\U0001bc8f\\U0001bc9a-\\U0001bc9b\\U0001bca4-\\U0001cfff\\U0001d0f6-\\U0001d0ff\\U0001d127-\\U0001d128\\U0001d1e9-\\U0001d1ff\\U0001d246-\\U0001d2df\\U0001d2f4-\\U0001d2ff\\U0001d357-\\U0001d35f\\U0001d379-\\U0001d3ff\\U0001d455\\U0001d49d\\U0001d4a0-\\U0001d4a1\\U0001d4a3-\\U0001d4a4\\U0001d4a7-\\U0001d4a8\\U0001d4ad\\U0001d4ba\\U0001d4bc\\U0001d4c4\\U0001d506\\U0001d50b-\\U0001d50c\\U0001d515\\U0001d51d\\U0001d53a\\U0001d53f\\U0001d545\\U0001d547-\\U0001d549\\U0001d551\\U0001d6a6-\\U0001d6a7\\U0001d7cc-\\U0001d7cd\\U0001da8c-\\U0001da9a\\U0001daa0\\U0001dab0-\\U0001dfff\\U0001e007\\U0001e019-\\U0001e01a\\U0001e022\\U0001e025\\U0001e02b-\\U0001e7ff\\U0001e8c5-\\U0001e8c6\\U0001e8d7-\\U0001e8ff\\U0001e94b-\\U0001e94f\\U0001e95a-\\U0001e95d\\U0001e960-\\U0001ec70\\U0001ecb5-\\U0001edff\\U0001ee04\\U0001ee20\\U0001ee23\\U0001ee25-\\U0001ee26\\U0001ee28\\U0001ee33\\U0001ee38\\U0001ee3a\\U0001ee3c-\\U0001ee41\\U0001ee43-\\U0001ee46\\U0001ee48\\U0001ee4a\\U0001ee4c\\U0001ee50\\U0001ee53\\U0001ee55-\\U0001ee56\\U0001ee58\\U0001ee5a\\U0001ee5c\\U0001ee5e\\U0001ee60\\U0001ee63\\U0001ee65-\\U0001ee66\\U0001ee6b\\U0001ee73\\U0001ee78\\U0001ee7d\\U0001ee7f\\U0001ee8a\\U0001ee9c-\\U0001eea0\\U0001eea4\\U0001eeaa\\U0001eebc-\\U0001eeef\\U0001eef2-\\U0001efff\\U0001f02c-\\U0001f02f\\U0001f094-\\U0001f09f\\U0001f0af-\\U0001f0b0\\U0001f0c0\\U0001f0d0\\U0001f0f6-\\U0001f0ff\\U0001f10d-\\U0001f10f\\U0001f16c-\\U0001f16f\\U0001f1ad-\\U0001f1e5\\U0001f203-\\U0001f20f\\U0001f23c-\\U0001f23f\\U0001f249-\\U0001f24f\\U0001f252-\\U0001f25f\\U0001f266-\\U0001f2ff\\U0001f6d5-\\U0001f6df\\U0001f6ed-\\U0001f6ef\\U0001f6fa-\\U0001f6ff\\U0001f774-\\U0001f77f\\U0001f7d9-\\U0001f7ff\\U0001f80c-\\U0001f80f\\U0001f848-\\U0001f84f\\U0001f85a-\\U0001f85f\\U0001f888-\\U0001f88f\\U0001f8ae-\\U0001f8ff\\U0001f90c-\\U0001f90f\\U0001f93f\\U0001f971-\\U0001f972\\U0001f977-\\U0001f979\\U0001f97b\\U0001f9a3-\\U0001f9af\\U0001f9ba-\\U0001f9bf\\U0001f9c3-\\U0001f9cf\\U0001fa00-\\U0001fa5f\\U0001fa6e-\\U0001ffff\\U0002a6d7-\\U0002a6ff\\U0002b735-\\U0002b73f\\U0002b81e-\\U0002b81f\\U0002cea2-\\U0002ceaf\\U0002ebe1-\\U0002f7ff\\U0002fa1e-\\U000e0000\\U000e0002-\\U000e001f\\U000e0080-\\U000e00ff\\U000e01f0-\\U000effff\\U000ffffe-\\U000fffff\\U0010fffe-\\U0010ffff'\n\nCo = '\\ue000-\\uf8ff\\U000f0000-\\U000ffffd\\U00100000-\\U0010fffd'\n\nCs = '\\ud800-\\udbff\\\\\\udc00\\udc01-\\udfff'\n\nLl = 'a-z\\xb5\\xdf-\\xf6\\xf8-\\xff\\u0101\\u0103\\u0105\\u0107\\u0109\\u010b\\u010d\\u010f\\u0111\\u0113\\u0115\\u0117\\u0119\\u011b\\u011d\\u011f\\u0121\\u0123\\u0125\\u0127\\u0129\\u012b\\u012d\\u012f\\u0131\\u0133\\u0135\\u0137-\\u0138\\u013a\\u013c\\u013e\\u0140\\u0142\\u0144\\u0146\\u0148-\\u0149\\u014b\\u014d\\u014f\\u0151\\u0153\\u0155\\u0157\\u0159\\u015b\\u015d\\u015f\\u0161\\u0163\\u0165\\u0167\\u0169\\u016b\\u016d\\u016f\\u0171\\u0173\\u0175\\u0177\\u017a\\u017c\\u017e-\\u0180\\u0183\\u0185\\u0188\\u018c-\\u018d\\u0192\\u0195\\u0199-\\u019b\\u019e\\u01a1\\u01a3\\u01a5\\u01a8\\u01aa-\\u01ab\\u01ad\\u01b0\\u01b4\\u01b6\\u01b9-\\u01ba\\u01bd-\\u01bf\\u01c6\\u01c9\\u01cc\\u01ce\\u01d0\\u01d2\\u01d4\\u01d6\\u01d8\\u01da\\u01dc-\\u01dd\\u01df\\u01e1\\u01e3\\u01e5\\u01e7\\u01e9\\u01eb\\u01ed\\u01ef-\\u01f0\\u01f3\\u01f5\\u01f9\\u01fb\\u01fd\\u01ff\\u0201\\u0203\\u0205\\u0207\\u0209\\u020b\\u020d\\u020f\\u0211\\u0213\\u0215\\u0217\\u0219\\u021b\\u021d\\u021f\\u0221\\u0223\\u0225\\u0227\\u0229\\u022b\\u022d\\u022f\\u0231\\u0233-\\u0239\\u023c\\u023f-\\u0240\\u0242\\u0247\\u0249\\u024b\\u024d\\u024f-\\u0293\\u0295-\\u02af\\u0371\\u0373\\u0377\\u037b-\\u037d\\u0390\\u03ac-\\u03ce\\u03d0-\\u03d1\\u03d5-\\u03d7\\u03d9\\u03db\\u03dd\\u03df\\u03e1\\u03e3\\u03e5\\u03e7\\u03e9\\u03eb\\u03ed\\u03ef-\\u03f3\\u03f5\\u03f8\\u03fb-\\u03fc\\u0430-\\u045f\\u0461\\u0463\\u0465\\u0467\\u0469\\u046b\\u046d\\u046f\\u0471\\u0473\\u0475\\u0477\\u0479\\u047b\\u047d\\u047f\\u0481\\u048b\\u048d\\u048f\\u0491\\u0493\\u0495\\u0497\\u0499\\u049b\\u049d\\u049f\\u04a1\\u04a3\\u04a5\\u04a7\\u04a9\\u04ab\\u04ad\\u04af\\u04b1\\u04b3\\u04b5\\u04b7\\u04b9\\u04bb\\u04bd\\u04bf\\u04c2\\u04c4\\u04c6\\u04c8\\u04ca\\u04cc\\u04ce-\\u04cf\\u04d1\\u04d3\\u04d5\\u04d7\\u04d9\\u04db\\u04dd\\u04df\\u04e1\\u04e3\\u04e5\\u04e7\\u04e9\\u04eb\\u04ed\\u04ef\\u04f1\\u04f3\\u04f5\\u04f7\\u04f9\\u04fb\\u04fd\\u04ff\\u0501\\u0503\\u0505\\u0507\\u0509\\u050b\\u050d\\u050f\\u0511\\u0513\\u0515\\u0517\\u0519\\u051b\\u051d\\u051f\\u0521\\u0523\\u0525\\u0527\\u0529\\u052b\\u052d\\u052f\\u0560-\\u0588\\u10d0-\\u10fa\\u10fd-\\u10ff\\u13f8-\\u13fd\\u1c80-\\u1c88\\u1d00-\\u1d2b\\u1d6b-\\u1d77\\u1d79-\\u1d9a\\u1e01\\u1e03\\u1e05\\u1e07\\u1e09\\u1e0b\\u1e0d\\u1e0f\\u1e11\\u1e13\\u1e15\\u1e17\\u1e19\\u1e1b\\u1e1d\\u1e1f\\u1e21\\u1e23\\u1e25\\u1e27\\u1e29\\u1e2b\\u1e2d\\u1e2f\\u1e31\\u1e33\\u1e35\\u1e37\\u1e39\\u1e3b\\u1e3d\\u1e3f\\u1e41\\u1e43\\u1e45\\u1e47\\u1e49\\u1e4b\\u1e4d\\u1e4f\\u1e51\\u1e53\\u1e55\\u1e57\\u1e59\\u1e5b\\u1e5d\\u1e5f\\u1e61\\u1e63\\u1e65\\u1e67\\u1e69\\u1e6b\\u1e6d\\u1e6f\\u1e71\\u1e73\\u1e75\\u1e77\\u1e79\\u1e7b\\u1e7d\\u1e7f\\u1e81\\u1e83\\u1e85\\u1e87\\u1e89\\u1e8b\\u1e8d\\u1e8f\\u1e91\\u1e93\\u1e95-\\u1e9d\\u1e9f\\u1ea1\\u1ea3\\u1ea5\\u1ea7\\u1ea9\\u1eab\\u1ead\\u1eaf\\u1eb1\\u1eb3\\u1eb5\\u1eb7\\u1eb9\\u1ebb\\u1ebd\\u1ebf\\u1ec1\\u1ec3\\u1ec5\\u1ec7\\u1ec9\\u1ecb\\u1ecd\\u1ecf\\u1ed1\\u1ed3\\u1ed5\\u1ed7\\u1ed9\\u1edb\\u1edd\\u1edf\\u1ee1\\u1ee3\\u1ee5\\u1ee7\\u1ee9\\u1eeb\\u1eed\\u1eef\\u1ef1\\u1ef3\\u1ef5\\u1ef7\\u1ef9\\u1efb\\u1efd\\u1eff-\\u1f07\\u1f10-\\u1f15\\u1f20-\\u1f27\\u1f30-\\u1f37\\u1f40-\\u1f45\\u1f50-\\u1f57\\u1f60-\\u1f67\\u1f70-\\u1f7d\\u1f80-\\u1f87\\u1f90-\\u1f97\\u1fa0-\\u1fa7\\u1fb0-\\u1fb4\\u1fb6-\\u1fb7\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fc7\\u1fd0-\\u1fd3\\u1fd6-\\u1fd7\\u1fe0-\\u1fe7\\u1ff2-\\u1ff4\\u1ff6-\\u1ff7\\u210a\\u210e-\\u210f\\u2113\\u212f\\u2134\\u2139\\u213c-\\u213d\\u2146-\\u2149\\u214e\\u2184\\u2c30-\\u2c5e\\u2c61\\u2c65-\\u2c66\\u2c68\\u2c6a\\u2c6c\\u2c71\\u2c73-\\u2c74\\u2c76-\\u2c7b\\u2c81\\u2c83\\u2c85\\u2c87\\u2c89\\u2c8b\\u2c8d\\u2c8f\\u2c91\\u2c93\\u2c95\\u2c97\\u2c99\\u2c9b\\u2c9d\\u2c9f\\u2ca1\\u2ca3\\u2ca5\\u2ca7\\u2ca9\\u2cab\\u2cad\\u2caf\\u2cb1\\u2cb3\\u2cb5\\u2cb7\\u2cb9\\u2cbb\\u2cbd\\u2cbf\\u2cc1\\u2cc3\\u2cc5\\u2cc7\\u2cc9\\u2ccb\\u2ccd\\u2ccf\\u2cd1\\u2cd3\\u2cd5\\u2cd7\\u2cd9\\u2cdb\\u2cdd\\u2cdf\\u2ce1\\u2ce3-\\u2ce4\\u2cec\\u2cee\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\ua641\\ua643\\ua645\\ua647\\ua649\\ua64b\\ua64d\\ua64f\\ua651\\ua653\\ua655\\ua657\\ua659\\ua65b\\ua65d\\ua65f\\ua661\\ua663\\ua665\\ua667\\ua669\\ua66b\\ua66d\\ua681\\ua683\\ua685\\ua687\\ua689\\ua68b\\ua68d\\ua68f\\ua691\\ua693\\ua695\\ua697\\ua699\\ua69b\\ua723\\ua725\\ua727\\ua729\\ua72b\\ua72d\\ua72f-\\ua731\\ua733\\ua735\\ua737\\ua739\\ua73b\\ua73d\\ua73f\\ua741\\ua743\\ua745\\ua747\\ua749\\ua74b\\ua74d\\ua74f\\ua751\\ua753\\ua755\\ua757\\ua759\\ua75b\\ua75d\\ua75f\\ua761\\ua763\\ua765\\ua767\\ua769\\ua76b\\ua76d\\ua76f\\ua771-\\ua778\\ua77a\\ua77c\\ua77f\\ua781\\ua783\\ua785\\ua787\\ua78c\\ua78e\\ua791\\ua793-\\ua795\\ua797\\ua799\\ua79b\\ua79d\\ua79f\\ua7a1\\ua7a3\\ua7a5\\ua7a7\\ua7a9\\ua7af\\ua7b5\\ua7b7\\ua7b9\\ua7fa\\uab30-\\uab5a\\uab60-\\uab65\\uab70-\\uabbf\\ufb00-\\ufb06\\ufb13-\\ufb17\\uff41-\\uff5a\\U00010428-\\U0001044f\\U000104d8-\\U000104fb\\U00010cc0-\\U00010cf2\\U000118c0-\\U000118df\\U00016e60-\\U00016e7f\\U0001d41a-\\U0001d433\\U0001d44e-\\U0001d454\\U0001d456-\\U0001d467\\U0001d482-\\U0001d49b\\U0001d4b6-\\U0001d4b9\\U0001d4bb\\U0001d4bd-\\U0001d4c3\\U0001d4c5-\\U0001d4cf\\U0001d4ea-\\U0001d503\\U0001d51e-\\U0001d537\\U0001d552-\\U0001d56b\\U0001d586-\\U0001d59f\\U0001d5ba-\\U0001d5d3\\U0001d5ee-\\U0001d607\\U0001d622-\\U0001d63b\\U0001d656-\\U0001d66f\\U0001d68a-\\U0001d6a5\\U0001d6c2-\\U0001d6da\\U0001d6dc-\\U0001d6e1\\U0001d6fc-\\U0001d714\\U0001d716-\\U0001d71b\\U0001d736-\\U0001d74e\\U0001d750-\\U0001d755\\U0001d770-\\U0001d788\\U0001d78a-\\U0001d78f\\U0001d7aa-\\U0001d7c2\\U0001d7c4-\\U0001d7c9\\U0001d7cb\\U0001e922-\\U0001e943'\n\nLm = '\\u02b0-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0374\\u037a\\u0559\\u0640\\u06e5-\\u06e6\\u07f4-\\u07f5\\u07fa\\u081a\\u0824\\u0828\\u0971\\u0e46\\u0ec6\\u10fc\\u17d7\\u1843\\u1aa7\\u1c78-\\u1c7d\\u1d2c-\\u1d6a\\u1d78\\u1d9b-\\u1dbf\\u2071\\u207f\\u2090-\\u209c\\u2c7c-\\u2c7d\\u2d6f\\u2e2f\\u3005\\u3031-\\u3035\\u303b\\u309d-\\u309e\\u30fc-\\u30fe\\ua015\\ua4f8-\\ua4fd\\ua60c\\ua67f\\ua69c-\\ua69d\\ua717-\\ua71f\\ua770\\ua788\\ua7f8-\\ua7f9\\ua9cf\\ua9e6\\uaa70\\uaadd\\uaaf3-\\uaaf4\\uab5c-\\uab5f\\uff70\\uff9e-\\uff9f\\U00016b40-\\U00016b43\\U00016f93-\\U00016f9f\\U00016fe0-\\U00016fe1'\n\nLo = '\\xaa\\xba\\u01bb\\u01c0-\\u01c3\\u0294\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u063f\\u0641-\\u064a\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06ee-\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u0800-\\u0815\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0972-\\u0980\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09f0-\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60-\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0cf1-\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32-\\u0e33\\u0e40-\\u0e45\\u0e81-\\u0e82\\u0e84\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb0\\u0eb2-\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u1100-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16f1-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17dc\\u1820-\\u1842\\u1844-\\u1878\\u1880-\\u1884\\u1887-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae-\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c77\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5-\\u1cf6\\u2135-\\u2138\\u2d30-\\u2d67\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3006\\u303c\\u3041-\\u3096\\u309f\\u30a1-\\u30fa\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua014\\ua016-\\ua48c\\ua4d0-\\ua4f7\\ua500-\\ua60b\\ua610-\\ua61f\\ua62a-\\ua62b\\ua66e\\ua6a0-\\ua6e5\\ua78f\\ua7f7\\ua7fb-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd-\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9e0-\\ua9e4\\ua9e7-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa6f\\uaa71-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5-\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadc\\uaae0-\\uaaea\\uaaf2\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uabc0-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff66-\\uff6f\\uff71-\\uff9d\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\\U00010000-\\U0001000b\\U0001000d-\\U00010026\\U00010028-\\U0001003a\\U0001003c-\\U0001003d\\U0001003f-\\U0001004d\\U00010050-\\U0001005d\\U00010080-\\U000100fa\\U00010280-\\U0001029c\\U000102a0-\\U000102d0\\U00010300-\\U0001031f\\U0001032d-\\U00010340\\U00010342-\\U00010349\\U00010350-\\U00010375\\U00010380-\\U0001039d\\U000103a0-\\U000103c3\\U000103c8-\\U000103cf\\U00010450-\\U0001049d\\U00010500-\\U00010527\\U00010530-\\U00010563\\U00010600-\\U00010736\\U00010740-\\U00010755\\U00010760-\\U00010767\\U00010800-\\U00010805\\U00010808\\U0001080a-\\U00010835\\U00010837-\\U00010838\\U0001083c\\U0001083f-\\U00010855\\U00010860-\\U00010876\\U00010880-\\U0001089e\\U000108e0-\\U000108f2\\U000108f4-\\U000108f5\\U00010900-\\U00010915\\U00010920-\\U00010939\\U00010980-\\U000109b7\\U000109be-\\U000109bf\\U00010a00\\U00010a10-\\U00010a13\\U00010a15-\\U00010a17\\U00010a19-\\U00010a35\\U00010a60-\\U00010a7c\\U00010a80-\\U00010a9c\\U00010ac0-\\U00010ac7\\U00010ac9-\\U00010ae4\\U00010b00-\\U00010b35\\U00010b40-\\U00010b55\\U00010b60-\\U00010b72\\U00010b80-\\U00010b91\\U00010c00-\\U00010c48\\U00010d00-\\U00010d23\\U00010f00-\\U00010f1c\\U00010f27\\U00010f30-\\U00010f45\\U00011003-\\U00011037\\U00011083-\\U000110af\\U000110d0-\\U000110e8\\U00011103-\\U00011126\\U00011144\\U00011150-\\U00011172\\U00011176\\U00011183-\\U000111b2\\U000111c1-\\U000111c4\\U000111da\\U000111dc\\U00011200-\\U00011211\\U00011213-\\U0001122b\\U00011280-\\U00011286\\U00011288\\U0001128a-\\U0001128d\\U0001128f-\\U0001129d\\U0001129f-\\U000112a8\\U000112b0-\\U000112de\\U00011305-\\U0001130c\\U0001130f-\\U00011310\\U00011313-\\U00011328\\U0001132a-\\U00011330\\U00011332-\\U00011333\\U00011335-\\U00011339\\U0001133d\\U00011350\\U0001135d-\\U00011361\\U00011400-\\U00011434\\U00011447-\\U0001144a\\U00011480-\\U000114af\\U000114c4-\\U000114c5\\U000114c7\\U00011580-\\U000115ae\\U000115d8-\\U000115db\\U00011600-\\U0001162f\\U00011644\\U00011680-\\U000116aa\\U00011700-\\U0001171a\\U00011800-\\U0001182b\\U000118ff\\U00011a00\\U00011a0b-\\U00011a32\\U00011a3a\\U00011a50\\U00011a5c-\\U00011a83\\U00011a86-\\U00011a89\\U00011a9d\\U00011ac0-\\U00011af8\\U00011c00-\\U00011c08\\U00011c0a-\\U00011c2e\\U00011c40\\U00011c72-\\U00011c8f\\U00011d00-\\U00011d06\\U00011d08-\\U00011d09\\U00011d0b-\\U00011d30\\U00011d46\\U00011d60-\\U00011d65\\U00011d67-\\U00011d68\\U00011d6a-\\U00011d89\\U00011d98\\U00011ee0-\\U00011ef2\\U00012000-\\U00012399\\U00012480-\\U00012543\\U00013000-\\U0001342e\\U00014400-\\U00014646\\U00016800-\\U00016a38\\U00016a40-\\U00016a5e\\U00016ad0-\\U00016aed\\U00016b00-\\U00016b2f\\U00016b63-\\U00016b77\\U00016b7d-\\U00016b8f\\U00016f00-\\U00016f44\\U00016f50\\U00017000-\\U000187f1\\U00018800-\\U00018af2\\U0001b000-\\U0001b11e\\U0001b170-\\U0001b2fb\\U0001bc00-\\U0001bc6a\\U0001bc70-\\U0001bc7c\\U0001bc80-\\U0001bc88\\U0001bc90-\\U0001bc99\\U0001e800-\\U0001e8c4\\U0001ee00-\\U0001ee03\\U0001ee05-\\U0001ee1f\\U0001ee21-\\U0001ee22\\U0001ee24\\U0001ee27\\U0001ee29-\\U0001ee32\\U0001ee34-\\U0001ee37\\U0001ee39\\U0001ee3b\\U0001ee42\\U0001ee47\\U0001ee49\\U0001ee4b\\U0001ee4d-\\U0001ee4f\\U0001ee51-\\U0001ee52\\U0001ee54\\U0001ee57\\U0001ee59\\U0001ee5b\\U0001ee5d\\U0001ee5f\\U0001ee61-\\U0001ee62\\U0001ee64\\U0001ee67-\\U0001ee6a\\U0001ee6c-\\U0001ee72\\U0001ee74-\\U0001ee77\\U0001ee79-\\U0001ee7c\\U0001ee7e\\U0001ee80-\\U0001ee89\\U0001ee8b-\\U0001ee9b\\U0001eea1-\\U0001eea3\\U0001eea5-\\U0001eea9\\U0001eeab-\\U0001eebb\\U00020000-\\U0002a6d6\\U0002a700-\\U0002b734\\U0002b740-\\U0002b81d\\U0002b820-\\U0002cea1\\U0002ceb0-\\U0002ebe0\\U0002f800-\\U0002fa1d'\n\nLt = '\\u01c5\\u01c8\\u01cb\\u01f2\\u1f88-\\u1f8f\\u1f98-\\u1f9f\\u1fa8-\\u1faf\\u1fbc\\u1fcc\\u1ffc'\n\nLu = 'A-Z\\xc0-\\xd6\\xd8-\\xde\\u0100\\u0102\\u0104\\u0106\\u0108\\u010a\\u010c\\u010e\\u0110\\u0112\\u0114\\u0116\\u0118\\u011a\\u011c\\u011e\\u0120\\u0122\\u0124\\u0126\\u0128\\u012a\\u012c\\u012e\\u0130\\u0132\\u0134\\u0136\\u0139\\u013b\\u013d\\u013f\\u0141\\u0143\\u0145\\u0147\\u014a\\u014c\\u014e\\u0150\\u0152\\u0154\\u0156\\u0158\\u015a\\u015c\\u015e\\u0160\\u0162\\u0164\\u0166\\u0168\\u016a\\u016c\\u016e\\u0170\\u0172\\u0174\\u0176\\u0178-\\u0179\\u017b\\u017d\\u0181-\\u0182\\u0184\\u0186-\\u0187\\u0189-\\u018b\\u018e-\\u0191\\u0193-\\u0194\\u0196-\\u0198\\u019c-\\u019d\\u019f-\\u01a0\\u01a2\\u01a4\\u01a6-\\u01a7\\u01a9\\u01ac\\u01ae-\\u01af\\u01b1-\\u01b3\\u01b5\\u01b7-\\u01b8\\u01bc\\u01c4\\u01c7\\u01ca\\u01cd\\u01cf\\u01d1\\u01d3\\u01d5\\u01d7\\u01d9\\u01db\\u01de\\u01e0\\u01e2\\u01e4\\u01e6\\u01e8\\u01ea\\u01ec\\u01ee\\u01f1\\u01f4\\u01f6-\\u01f8\\u01fa\\u01fc\\u01fe\\u0200\\u0202\\u0204\\u0206\\u0208\\u020a\\u020c\\u020e\\u0210\\u0212\\u0214\\u0216\\u0218\\u021a\\u021c\\u021e\\u0220\\u0222\\u0224\\u0226\\u0228\\u022a\\u022c\\u022e\\u0230\\u0232\\u023a-\\u023b\\u023d-\\u023e\\u0241\\u0243-\\u0246\\u0248\\u024a\\u024c\\u024e\\u0370\\u0372\\u0376\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u038f\\u0391-\\u03a1\\u03a3-\\u03ab\\u03cf\\u03d2-\\u03d4\\u03d8\\u03da\\u03dc\\u03de\\u03e0\\u03e2\\u03e4\\u03e6\\u03e8\\u03ea\\u03ec\\u03ee\\u03f4\\u03f7\\u03f9-\\u03fa\\u03fd-\\u042f\\u0460\\u0462\\u0464\\u0466\\u0468\\u046a\\u046c\\u046e\\u0470\\u0472\\u0474\\u0476\\u0478\\u047a\\u047c\\u047e\\u0480\\u048a\\u048c\\u048e\\u0490\\u0492\\u0494\\u0496\\u0498\\u049a\\u049c\\u049e\\u04a0\\u04a2\\u04a4\\u04a6\\u04a8\\u04aa\\u04ac\\u04ae\\u04b0\\u04b2\\u04b4\\u04b6\\u04b8\\u04ba\\u04bc\\u04be\\u04c0-\\u04c1\\u04c3\\u04c5\\u04c7\\u04c9\\u04cb\\u04cd\\u04d0\\u04d2\\u04d4\\u04d6\\u04d8\\u04da\\u04dc\\u04de\\u04e0\\u04e2\\u04e4\\u04e6\\u04e8\\u04ea\\u04ec\\u04ee\\u04f0\\u04f2\\u04f4\\u04f6\\u04f8\\u04fa\\u04fc\\u04fe\\u0500\\u0502\\u0504\\u0506\\u0508\\u050a\\u050c\\u050e\\u0510\\u0512\\u0514\\u0516\\u0518\\u051a\\u051c\\u051e\\u0520\\u0522\\u0524\\u0526\\u0528\\u052a\\u052c\\u052e\\u0531-\\u0556\\u10a0-\\u10c5\\u10c7\\u10cd\\u13a0-\\u13f5\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1e00\\u1e02\\u1e04\\u1e06\\u1e08\\u1e0a\\u1e0c\\u1e0e\\u1e10\\u1e12\\u1e14\\u1e16\\u1e18\\u1e1a\\u1e1c\\u1e1e\\u1e20\\u1e22\\u1e24\\u1e26\\u1e28\\u1e2a\\u1e2c\\u1e2e\\u1e30\\u1e32\\u1e34\\u1e36\\u1e38\\u1e3a\\u1e3c\\u1e3e\\u1e40\\u1e42\\u1e44\\u1e46\\u1e48\\u1e4a\\u1e4c\\u1e4e\\u1e50\\u1e52\\u1e54\\u1e56\\u1e58\\u1e5a\\u1e5c\\u1e5e\\u1e60\\u1e62\\u1e64\\u1e66\\u1e68\\u1e6a\\u1e6c\\u1e6e\\u1e70\\u1e72\\u1e74\\u1e76\\u1e78\\u1e7a\\u1e7c\\u1e7e\\u1e80\\u1e82\\u1e84\\u1e86\\u1e88\\u1e8a\\u1e8c\\u1e8e\\u1e90\\u1e92\\u1e94\\u1e9e\\u1ea0\\u1ea2\\u1ea4\\u1ea6\\u1ea8\\u1eaa\\u1eac\\u1eae\\u1eb0\\u1eb2\\u1eb4\\u1eb6\\u1eb8\\u1eba\\u1ebc\\u1ebe\\u1ec0\\u1ec2\\u1ec4\\u1ec6\\u1ec8\\u1eca\\u1ecc\\u1ece\\u1ed0\\u1ed2\\u1ed4\\u1ed6\\u1ed8\\u1eda\\u1edc\\u1ede\\u1ee0\\u1ee2\\u1ee4\\u1ee6\\u1ee8\\u1eea\\u1eec\\u1eee\\u1ef0\\u1ef2\\u1ef4\\u1ef6\\u1ef8\\u1efa\\u1efc\\u1efe\\u1f08-\\u1f0f\\u1f18-\\u1f1d\\u1f28-\\u1f2f\\u1f38-\\u1f3f\\u1f48-\\u1f4d\\u1f59\\u1f5b\\u1f5d\\u1f5f\\u1f68-\\u1f6f\\u1fb8-\\u1fbb\\u1fc8-\\u1fcb\\u1fd8-\\u1fdb\\u1fe8-\\u1fec\\u1ff8-\\u1ffb\\u2102\\u2107\\u210b-\\u210d\\u2110-\\u2112\\u2115\\u2119-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u212d\\u2130-\\u2133\\u213e-\\u213f\\u2145\\u2183\\u2c00-\\u2c2e\\u2c60\\u2c62-\\u2c64\\u2c67\\u2c69\\u2c6b\\u2c6d-\\u2c70\\u2c72\\u2c75\\u2c7e-\\u2c80\\u2c82\\u2c84\\u2c86\\u2c88\\u2c8a\\u2c8c\\u2c8e\\u2c90\\u2c92\\u2c94\\u2c96\\u2c98\\u2c9a\\u2c9c\\u2c9e\\u2ca0\\u2ca2\\u2ca4\\u2ca6\\u2ca8\\u2caa\\u2cac\\u2cae\\u2cb0\\u2cb2\\u2cb4\\u2cb6\\u2cb8\\u2cba\\u2cbc\\u2cbe\\u2cc0\\u2cc2\\u2cc4\\u2cc6\\u2cc8\\u2cca\\u2ccc\\u2cce\\u2cd0\\u2cd2\\u2cd4\\u2cd6\\u2cd8\\u2cda\\u2cdc\\u2cde\\u2ce0\\u2ce2\\u2ceb\\u2ced\\u2cf2\\ua640\\ua642\\ua644\\ua646\\ua648\\ua64a\\ua64c\\ua64e\\ua650\\ua652\\ua654\\ua656\\ua658\\ua65a\\ua65c\\ua65e\\ua660\\ua662\\ua664\\ua666\\ua668\\ua66a\\ua66c\\ua680\\ua682\\ua684\\ua686\\ua688\\ua68a\\ua68c\\ua68e\\ua690\\ua692\\ua694\\ua696\\ua698\\ua69a\\ua722\\ua724\\ua726\\ua728\\ua72a\\ua72c\\ua72e\\ua732\\ua734\\ua736\\ua738\\ua73a\\ua73c\\ua73e\\ua740\\ua742\\ua744\\ua746\\ua748\\ua74a\\ua74c\\ua74e\\ua750\\ua752\\ua754\\ua756\\ua758\\ua75a\\ua75c\\ua75e\\ua760\\ua762\\ua764\\ua766\\ua768\\ua76a\\ua76c\\ua76e\\ua779\\ua77b\\ua77d-\\ua77e\\ua780\\ua782\\ua784\\ua786\\ua78b\\ua78d\\ua790\\ua792\\ua796\\ua798\\ua79a\\ua79c\\ua79e\\ua7a0\\ua7a2\\ua7a4\\ua7a6\\ua7a8\\ua7aa-\\ua7ae\\ua7b0-\\ua7b4\\ua7b6\\ua7b8\\uff21-\\uff3a\\U00010400-\\U00010427\\U000104b0-\\U000104d3\\U00010c80-\\U00010cb2\\U000118a0-\\U000118bf\\U00016e40-\\U00016e5f\\U0001d400-\\U0001d419\\U0001d434-\\U0001d44d\\U0001d468-\\U0001d481\\U0001d49c\\U0001d49e-\\U0001d49f\\U0001d4a2\\U0001d4a5-\\U0001d4a6\\U0001d4a9-\\U0001d4ac\\U0001d4ae-\\U0001d4b5\\U0001d4d0-\\U0001d4e9\\U0001d504-\\U0001d505\\U0001d507-\\U0001d50a\\U0001d50d-\\U0001d514\\U0001d516-\\U0001d51c\\U0001d538-\\U0001d539\\U0001d53b-\\U0001d53e\\U0001d540-\\U0001d544\\U0001d546\\U0001d54a-\\U0001d550\\U0001d56c-\\U0001d585\\U0001d5a0-\\U0001d5b9\\U0001d5d4-\\U0001d5ed\\U0001d608-\\U0001d621\\U0001d63c-\\U0001d655\\U0001d670-\\U0001d689\\U0001d6a8-\\U0001d6c0\\U0001d6e2-\\U0001d6fa\\U0001d71c-\\U0001d734\\U0001d756-\\U0001d76e\\U0001d790-\\U0001d7a8\\U0001d7ca\\U0001e900-\\U0001e921'\n\nMc = '\\u0903\\u093b\\u093e-\\u0940\\u0949-\\u094c\\u094e-\\u094f\\u0982-\\u0983\\u09be-\\u09c0\\u09c7-\\u09c8\\u09cb-\\u09cc\\u09d7\\u0a03\\u0a3e-\\u0a40\\u0a83\\u0abe-\\u0ac0\\u0ac9\\u0acb-\\u0acc\\u0b02-\\u0b03\\u0b3e\\u0b40\\u0b47-\\u0b48\\u0b4b-\\u0b4c\\u0b57\\u0bbe-\\u0bbf\\u0bc1-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcc\\u0bd7\\u0c01-\\u0c03\\u0c41-\\u0c44\\u0c82-\\u0c83\\u0cbe\\u0cc0-\\u0cc4\\u0cc7-\\u0cc8\\u0cca-\\u0ccb\\u0cd5-\\u0cd6\\u0d02-\\u0d03\\u0d3e-\\u0d40\\u0d46-\\u0d48\\u0d4a-\\u0d4c\\u0d57\\u0d82-\\u0d83\\u0dcf-\\u0dd1\\u0dd8-\\u0ddf\\u0df2-\\u0df3\\u0f3e-\\u0f3f\\u0f7f\\u102b-\\u102c\\u1031\\u1038\\u103b-\\u103c\\u1056-\\u1057\\u1062-\\u1064\\u1067-\\u106d\\u1083-\\u1084\\u1087-\\u108c\\u108f\\u109a-\\u109c\\u17b6\\u17be-\\u17c5\\u17c7-\\u17c8\\u1923-\\u1926\\u1929-\\u192b\\u1930-\\u1931\\u1933-\\u1938\\u1a19-\\u1a1a\\u1a55\\u1a57\\u1a61\\u1a63-\\u1a64\\u1a6d-\\u1a72\\u1b04\\u1b35\\u1b3b\\u1b3d-\\u1b41\\u1b43-\\u1b44\\u1b82\\u1ba1\\u1ba6-\\u1ba7\\u1baa\\u1be7\\u1bea-\\u1bec\\u1bee\\u1bf2-\\u1bf3\\u1c24-\\u1c2b\\u1c34-\\u1c35\\u1ce1\\u1cf2-\\u1cf3\\u1cf7\\u302e-\\u302f\\ua823-\\ua824\\ua827\\ua880-\\ua881\\ua8b4-\\ua8c3\\ua952-\\ua953\\ua983\\ua9b4-\\ua9b5\\ua9ba-\\ua9bb\\ua9bd-\\ua9c0\\uaa2f-\\uaa30\\uaa33-\\uaa34\\uaa4d\\uaa7b\\uaa7d\\uaaeb\\uaaee-\\uaaef\\uaaf5\\uabe3-\\uabe4\\uabe6-\\uabe7\\uabe9-\\uabea\\uabec\\U00011000\\U00011002\\U00011082\\U000110b0-\\U000110b2\\U000110b7-\\U000110b8\\U0001112c\\U00011145-\\U00011146\\U00011182\\U000111b3-\\U000111b5\\U000111bf-\\U000111c0\\U0001122c-\\U0001122e\\U00011232-\\U00011233\\U00011235\\U000112e0-\\U000112e2\\U00011302-\\U00011303\\U0001133e-\\U0001133f\\U00011341-\\U00011344\\U00011347-\\U00011348\\U0001134b-\\U0001134d\\U00011357\\U00011362-\\U00011363\\U00011435-\\U00011437\\U00011440-\\U00011441\\U00011445\\U000114b0-\\U000114b2\\U000114b9\\U000114bb-\\U000114be\\U000114c1\\U000115af-\\U000115b1\\U000115b8-\\U000115bb\\U000115be\\U00011630-\\U00011632\\U0001163b-\\U0001163c\\U0001163e\\U000116ac\\U000116ae-\\U000116af\\U000116b6\\U00011720-\\U00011721\\U00011726\\U0001182c-\\U0001182e\\U00011838\\U00011a39\\U00011a57-\\U00011a58\\U00011a97\\U00011c2f\\U00011c3e\\U00011ca9\\U00011cb1\\U00011cb4\\U00011d8a-\\U00011d8e\\U00011d93-\\U00011d94\\U00011d96\\U00011ef5-\\U00011ef6\\U00016f51-\\U00016f7e\\U0001d165-\\U0001d166\\U0001d16d-\\U0001d172'\n\nMe = '\\u0488-\\u0489\\u1abe\\u20dd-\\u20e0\\u20e2-\\u20e4\\ua670-\\ua672'\n\nMn = '\\u0300-\\u036f\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1-\\u05c2\\u05c4-\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u065f\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7-\\u06e8\\u06ea-\\u06ed\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u08d3-\\u08e1\\u08e3-\\u0902\\u093a\\u093c\\u0941-\\u0948\\u094d\\u0951-\\u0957\\u0962-\\u0963\\u0981\\u09bc\\u09c1-\\u09c4\\u09cd\\u09e2-\\u09e3\\u09fe\\u0a01-\\u0a02\\u0a3c\\u0a41-\\u0a42\\u0a47-\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a70-\\u0a71\\u0a75\\u0a81-\\u0a82\\u0abc\\u0ac1-\\u0ac5\\u0ac7-\\u0ac8\\u0acd\\u0ae2-\\u0ae3\\u0afa-\\u0aff\\u0b01\\u0b3c\\u0b3f\\u0b41-\\u0b44\\u0b4d\\u0b56\\u0b62-\\u0b63\\u0b82\\u0bc0\\u0bcd\\u0c00\\u0c04\\u0c3e-\\u0c40\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55-\\u0c56\\u0c62-\\u0c63\\u0c81\\u0cbc\\u0cbf\\u0cc6\\u0ccc-\\u0ccd\\u0ce2-\\u0ce3\\u0d00-\\u0d01\\u0d3b-\\u0d3c\\u0d41-\\u0d44\\u0d4d\\u0d62-\\u0d63\\u0dca\\u0dd2-\\u0dd4\\u0dd6\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0eb1\\u0eb4-\\u0eb9\\u0ebb-\\u0ebc\\u0ec8-\\u0ecd\\u0f18-\\u0f19\\u0f35\\u0f37\\u0f39\\u0f71-\\u0f7e\\u0f80-\\u0f84\\u0f86-\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102d-\\u1030\\u1032-\\u1037\\u1039-\\u103a\\u103d-\\u103e\\u1058-\\u1059\\u105e-\\u1060\\u1071-\\u1074\\u1082\\u1085-\\u1086\\u108d\\u109d\\u135d-\\u135f\\u1712-\\u1714\\u1732-\\u1734\\u1752-\\u1753\\u1772-\\u1773\\u17b4-\\u17b5\\u17b7-\\u17bd\\u17c6\\u17c9-\\u17d3\\u17dd\\u180b-\\u180d\\u1885-\\u1886\\u18a9\\u1920-\\u1922\\u1927-\\u1928\\u1932\\u1939-\\u193b\\u1a17-\\u1a18\\u1a1b\\u1a56\\u1a58-\\u1a5e\\u1a60\\u1a62\\u1a65-\\u1a6c\\u1a73-\\u1a7c\\u1a7f\\u1ab0-\\u1abd\\u1b00-\\u1b03\\u1b34\\u1b36-\\u1b3a\\u1b3c\\u1b42\\u1b6b-\\u1b73\\u1b80-\\u1b81\\u1ba2-\\u1ba5\\u1ba8-\\u1ba9\\u1bab-\\u1bad\\u1be6\\u1be8-\\u1be9\\u1bed\\u1bef-\\u1bf1\\u1c2c-\\u1c33\\u1c36-\\u1c37\\u1cd0-\\u1cd2\\u1cd4-\\u1ce0\\u1ce2-\\u1ce8\\u1ced\\u1cf4\\u1cf8-\\u1cf9\\u1dc0-\\u1df9\\u1dfb-\\u1dff\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302d\\u3099-\\u309a\\ua66f\\ua674-\\ua67d\\ua69e-\\ua69f\\ua6f0-\\ua6f1\\ua802\\ua806\\ua80b\\ua825-\\ua826\\ua8c4-\\ua8c5\\ua8e0-\\ua8f1\\ua8ff\\ua926-\\ua92d\\ua947-\\ua951\\ua980-\\ua982\\ua9b3\\ua9b6-\\ua9b9\\ua9bc\\ua9e5\\uaa29-\\uaa2e\\uaa31-\\uaa32\\uaa35-\\uaa36\\uaa43\\uaa4c\\uaa7c\\uaab0\\uaab2-\\uaab4\\uaab7-\\uaab8\\uaabe-\\uaabf\\uaac1\\uaaec-\\uaaed\\uaaf6\\uabe5\\uabe8\\uabed\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\U000101fd\\U000102e0\\U00010376-\\U0001037a\\U00010a01-\\U00010a03\\U00010a05-\\U00010a06\\U00010a0c-\\U00010a0f\\U00010a38-\\U00010a3a\\U00010a3f\\U00010ae5-\\U00010ae6\\U00010d24-\\U00010d27\\U00010f46-\\U00010f50\\U00011001\\U00011038-\\U00011046\\U0001107f-\\U00011081\\U000110b3-\\U000110b6\\U000110b9-\\U000110ba\\U00011100-\\U00011102\\U00011127-\\U0001112b\\U0001112d-\\U00011134\\U00011173\\U00011180-\\U00011181\\U000111b6-\\U000111be\\U000111c9-\\U000111cc\\U0001122f-\\U00011231\\U00011234\\U00011236-\\U00011237\\U0001123e\\U000112df\\U000112e3-\\U000112ea\\U00011300-\\U00011301\\U0001133b-\\U0001133c\\U00011340\\U00011366-\\U0001136c\\U00011370-\\U00011374\\U00011438-\\U0001143f\\U00011442-\\U00011444\\U00011446\\U0001145e\\U000114b3-\\U000114b8\\U000114ba\\U000114bf-\\U000114c0\\U000114c2-\\U000114c3\\U000115b2-\\U000115b5\\U000115bc-\\U000115bd\\U000115bf-\\U000115c0\\U000115dc-\\U000115dd\\U00011633-\\U0001163a\\U0001163d\\U0001163f-\\U00011640\\U000116ab\\U000116ad\\U000116b0-\\U000116b5\\U000116b7\\U0001171d-\\U0001171f\\U00011722-\\U00011725\\U00011727-\\U0001172b\\U0001182f-\\U00011837\\U00011839-\\U0001183a\\U00011a01-\\U00011a0a\\U00011a33-\\U00011a38\\U00011a3b-\\U00011a3e\\U00011a47\\U00011a51-\\U00011a56\\U00011a59-\\U00011a5b\\U00011a8a-\\U00011a96\\U00011a98-\\U00011a99\\U00011c30-\\U00011c36\\U00011c38-\\U00011c3d\\U00011c3f\\U00011c92-\\U00011ca7\\U00011caa-\\U00011cb0\\U00011cb2-\\U00011cb3\\U00011cb5-\\U00011cb6\\U00011d31-\\U00011d36\\U00011d3a\\U00011d3c-\\U00011d3d\\U00011d3f-\\U00011d45\\U00011d47\\U00011d90-\\U00011d91\\U00011d95\\U00011d97\\U00011ef3-\\U00011ef4\\U00016af0-\\U00016af4\\U00016b30-\\U00016b36\\U00016f8f-\\U00016f92\\U0001bc9d-\\U0001bc9e\\U0001d167-\\U0001d169\\U0001d17b-\\U0001d182\\U0001d185-\\U0001d18b\\U0001d1aa-\\U0001d1ad\\U0001d242-\\U0001d244\\U0001da00-\\U0001da36\\U0001da3b-\\U0001da6c\\U0001da75\\U0001da84\\U0001da9b-\\U0001da9f\\U0001daa1-\\U0001daaf\\U0001e000-\\U0001e006\\U0001e008-\\U0001e018\\U0001e01b-\\U0001e021\\U0001e023-\\U0001e024\\U0001e026-\\U0001e02a\\U0001e8d0-\\U0001e8d6\\U0001e944-\\U0001e94a\\U000e0100-\\U000e01ef'\n\nNd = '0-9\\u0660-\\u0669\\u06f0-\\u06f9\\u07c0-\\u07c9\\u0966-\\u096f\\u09e6-\\u09ef\\u0a66-\\u0a6f\\u0ae6-\\u0aef\\u0b66-\\u0b6f\\u0be6-\\u0bef\\u0c66-\\u0c6f\\u0ce6-\\u0cef\\u0d66-\\u0d6f\\u0de6-\\u0def\\u0e50-\\u0e59\\u0ed0-\\u0ed9\\u0f20-\\u0f29\\u1040-\\u1049\\u1090-\\u1099\\u17e0-\\u17e9\\u1810-\\u1819\\u1946-\\u194f\\u19d0-\\u19d9\\u1a80-\\u1a89\\u1a90-\\u1a99\\u1b50-\\u1b59\\u1bb0-\\u1bb9\\u1c40-\\u1c49\\u1c50-\\u1c59\\ua620-\\ua629\\ua8d0-\\ua8d9\\ua900-\\ua909\\ua9d0-\\ua9d9\\ua9f0-\\ua9f9\\uaa50-\\uaa59\\uabf0-\\uabf9\\uff10-\\uff19\\U000104a0-\\U000104a9\\U00010d30-\\U00010d39\\U00011066-\\U0001106f\\U000110f0-\\U000110f9\\U00011136-\\U0001113f\\U000111d0-\\U000111d9\\U000112f0-\\U000112f9\\U00011450-\\U00011459\\U000114d0-\\U000114d9\\U00011650-\\U00011659\\U000116c0-\\U000116c9\\U00011730-\\U00011739\\U000118e0-\\U000118e9\\U00011c50-\\U00011c59\\U00011d50-\\U00011d59\\U00011da0-\\U00011da9\\U00016a60-\\U00016a69\\U00016b50-\\U00016b59\\U0001d7ce-\\U0001d7ff\\U0001e950-\\U0001e959'\n\nNl = '\\u16ee-\\u16f0\\u2160-\\u2182\\u2185-\\u2188\\u3007\\u3021-\\u3029\\u3038-\\u303a\\ua6e6-\\ua6ef\\U00010140-\\U00010174\\U00010341\\U0001034a\\U000103d1-\\U000103d5\\U00012400-\\U0001246e'\n\nNo = '\\xb2-\\xb3\\xb9\\xbc-\\xbe\\u09f4-\\u09f9\\u0b72-\\u0b77\\u0bf0-\\u0bf2\\u0c78-\\u0c7e\\u0d58-\\u0d5e\\u0d70-\\u0d78\\u0f2a-\\u0f33\\u1369-\\u137c\\u17f0-\\u17f9\\u19da\\u2070\\u2074-\\u2079\\u2080-\\u2089\\u2150-\\u215f\\u2189\\u2460-\\u249b\\u24ea-\\u24ff\\u2776-\\u2793\\u2cfd\\u3192-\\u3195\\u3220-\\u3229\\u3248-\\u324f\\u3251-\\u325f\\u3280-\\u3289\\u32b1-\\u32bf\\ua830-\\ua835\\U00010107-\\U00010133\\U00010175-\\U00010178\\U0001018a-\\U0001018b\\U000102e1-\\U000102fb\\U00010320-\\U00010323\\U00010858-\\U0001085f\\U00010879-\\U0001087f\\U000108a7-\\U000108af\\U000108fb-\\U000108ff\\U00010916-\\U0001091b\\U000109bc-\\U000109bd\\U000109c0-\\U000109cf\\U000109d2-\\U000109ff\\U00010a40-\\U00010a48\\U00010a7d-\\U00010a7e\\U00010a9d-\\U00010a9f\\U00010aeb-\\U00010aef\\U00010b58-\\U00010b5f\\U00010b78-\\U00010b7f\\U00010ba9-\\U00010baf\\U00010cfa-\\U00010cff\\U00010e60-\\U00010e7e\\U00010f1d-\\U00010f26\\U00010f51-\\U00010f54\\U00011052-\\U00011065\\U000111e1-\\U000111f4\\U0001173a-\\U0001173b\\U000118ea-\\U000118f2\\U00011c5a-\\U00011c6c\\U00016b5b-\\U00016b61\\U00016e80-\\U00016e96\\U0001d2e0-\\U0001d2f3\\U0001d360-\\U0001d378\\U0001e8c7-\\U0001e8cf\\U0001ec71-\\U0001ecab\\U0001ecad-\\U0001ecaf\\U0001ecb1-\\U0001ecb4\\U0001f100-\\U0001f10c'\n\nPc = '_\\u203f-\\u2040\\u2054\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\uff3f'\n\nPd = '\\\\-\\u058a\\u05be\\u1400\\u1806\\u2010-\\u2015\\u2e17\\u2e1a\\u2e3a-\\u2e3b\\u2e40\\u301c\\u3030\\u30a0\\ufe31-\\ufe32\\ufe58\\ufe63\\uff0d'\n\nPe = ')\\\\]}\\u0f3b\\u0f3d\\u169c\\u2046\\u207e\\u208e\\u2309\\u230b\\u232a\\u2769\\u276b\\u276d\\u276f\\u2771\\u2773\\u2775\\u27c6\\u27e7\\u27e9\\u27eb\\u27ed\\u27ef\\u2984\\u2986\\u2988\\u298a\\u298c\\u298e\\u2990\\u2992\\u2994\\u2996\\u2998\\u29d9\\u29db\\u29fd\\u2e23\\u2e25\\u2e27\\u2e29\\u3009\\u300b\\u300d\\u300f\\u3011\\u3015\\u3017\\u3019\\u301b\\u301e-\\u301f\\ufd3e\\ufe18\\ufe36\\ufe38\\ufe3a\\ufe3c\\ufe3e\\ufe40\\ufe42\\ufe44\\ufe48\\ufe5a\\ufe5c\\ufe5e\\uff09\\uff3d\\uff5d\\uff60\\uff63'\n\nPf = '\\xbb\\u2019\\u201d\\u203a\\u2e03\\u2e05\\u2e0a\\u2e0d\\u2e1d\\u2e21'\n\nPi = '\\xab\\u2018\\u201b-\\u201c\\u201f\\u2039\\u2e02\\u2e04\\u2e09\\u2e0c\\u2e1c\\u2e20'\n\nPo = \"!-#%-'*,.-/:-;?-@\\\\\\\\\\xa1\\xa7\\xb6-\\xb7\\xbf\\u037e\\u0387\\u055a-\\u055f\\u0589\\u05c0\\u05c3\\u05c6\\u05f3-\\u05f4\\u0609-\\u060a\\u060c-\\u060d\\u061b\\u061e-\\u061f\\u066a-\\u066d\\u06d4\\u0700-\\u070d\\u07f7-\\u07f9\\u0830-\\u083e\\u085e\\u0964-\\u0965\\u0970\\u09fd\\u0a76\\u0af0\\u0c84\\u0df4\\u0e4f\\u0e5a-\\u0e5b\\u0f04-\\u0f12\\u0f14\\u0f85\\u0fd0-\\u0fd4\\u0fd9-\\u0fda\\u104a-\\u104f\\u10fb\\u1360-\\u1368\\u166d-\\u166e\\u16eb-\\u16ed\\u1735-\\u1736\\u17d4-\\u17d6\\u17d8-\\u17da\\u1800-\\u1805\\u1807-\\u180a\\u1944-\\u1945\\u1a1e-\\u1a1f\\u1aa0-\\u1aa6\\u1aa8-\\u1aad\\u1b5a-\\u1b60\\u1bfc-\\u1bff\\u1c3b-\\u1c3f\\u1c7e-\\u1c7f\\u1cc0-\\u1cc7\\u1cd3\\u2016-\\u2017\\u2020-\\u2027\\u2030-\\u2038\\u203b-\\u203e\\u2041-\\u2043\\u2047-\\u2051\\u2053\\u2055-\\u205e\\u2cf9-\\u2cfc\\u2cfe-\\u2cff\\u2d70\\u2e00-\\u2e01\\u2e06-\\u2e08\\u2e0b\\u2e0e-\\u2e16\\u2e18-\\u2e19\\u2e1b\\u2e1e-\\u2e1f\\u2e2a-\\u2e2e\\u2e30-\\u2e39\\u2e3c-\\u2e3f\\u2e41\\u2e43-\\u2e4e\\u3001-\\u3003\\u303d\\u30fb\\ua4fe-\\ua4ff\\ua60d-\\ua60f\\ua673\\ua67e\\ua6f2-\\ua6f7\\ua874-\\ua877\\ua8ce-\\ua8cf\\ua8f8-\\ua8fa\\ua8fc\\ua92e-\\ua92f\\ua95f\\ua9c1-\\ua9cd\\ua9de-\\ua9df\\uaa5c-\\uaa5f\\uaade-\\uaadf\\uaaf0-\\uaaf1\\uabeb\\ufe10-\\ufe16\\ufe19\\ufe30\\ufe45-\\ufe46\\ufe49-\\ufe4c\\ufe50-\\ufe52\\ufe54-\\ufe57\\ufe5f-\\ufe61\\ufe68\\ufe6a-\\ufe6b\\uff01-\\uff03\\uff05-\\uff07\\uff0a\\uff0c\\uff0e-\\uff0f\\uff1a-\\uff1b\\uff1f-\\uff20\\uff3c\\uff61\\uff64-\\uff65\\U00010100-\\U00010102\\U0001039f\\U000103d0\\U0001056f\\U00010857\\U0001091f\\U0001093f\\U00010a50-\\U00010a58\\U00010a7f\\U00010af0-\\U00010af6\\U00010b39-\\U00010b3f\\U00010b99-\\U00010b9c\\U00010f55-\\U00010f59\\U00011047-\\U0001104d\\U000110bb-\\U000110bc\\U000110be-\\U000110c1\\U00011140-\\U00011143\\U00011174-\\U00011175\\U000111c5-\\U000111c8\\U000111cd\\U000111db\\U000111dd-\\U000111df\\U00011238-\\U0001123d\\U000112a9\\U0001144b-\\U0001144f\\U0001145b\\U0001145d\\U000114c6\\U000115c1-\\U000115d7\\U00011641-\\U00011643\\U00011660-\\U0001166c\\U0001173c-\\U0001173e\\U0001183b\\U00011a3f-\\U00011a46\\U00011a9a-\\U00011a9c\\U00011a9e-\\U00011aa2\\U00011c41-\\U00011c45\\U00011c70-\\U00011c71\\U00011ef7-\\U00011ef8\\U00012470-\\U00012474\\U00016a6e-\\U00016a6f\\U00016af5\\U00016b37-\\U00016b3b\\U00016b44\\U00016e97-\\U00016e9a\\U0001bc9f\\U0001da87-\\U0001da8b\\U0001e95e-\\U0001e95f\"\n\nPs = '(\\\\[{\\u0f3a\\u0f3c\\u169b\\u201a\\u201e\\u2045\\u207d\\u208d\\u2308\\u230a\\u2329\\u2768\\u276a\\u276c\\u276e\\u2770\\u2772\\u2774\\u27c5\\u27e6\\u27e8\\u27ea\\u27ec\\u27ee\\u2983\\u2985\\u2987\\u2989\\u298b\\u298d\\u298f\\u2991\\u2993\\u2995\\u2997\\u29d8\\u29da\\u29fc\\u2e22\\u2e24\\u2e26\\u2e28\\u2e42\\u3008\\u300a\\u300c\\u300e\\u3010\\u3014\\u3016\\u3018\\u301a\\u301d\\ufd3f\\ufe17\\ufe35\\ufe37\\ufe39\\ufe3b\\ufe3d\\ufe3f\\ufe41\\ufe43\\ufe47\\ufe59\\ufe5b\\ufe5d\\uff08\\uff3b\\uff5b\\uff5f\\uff62'\n\nSc = '$\\xa2-\\xa5\\u058f\\u060b\\u07fe-\\u07ff\\u09f2-\\u09f3\\u09fb\\u0af1\\u0bf9\\u0e3f\\u17db\\u20a0-\\u20bf\\ua838\\ufdfc\\ufe69\\uff04\\uffe0-\\uffe1\\uffe5-\\uffe6\\U0001ecb0'\n\nSk = '\\\\^`\\xa8\\xaf\\xb4\\xb8\\u02c2-\\u02c5\\u02d2-\\u02df\\u02e5-\\u02eb\\u02ed\\u02ef-\\u02ff\\u0375\\u0384-\\u0385\\u1fbd\\u1fbf-\\u1fc1\\u1fcd-\\u1fcf\\u1fdd-\\u1fdf\\u1fed-\\u1fef\\u1ffd-\\u1ffe\\u309b-\\u309c\\ua700-\\ua716\\ua720-\\ua721\\ua789-\\ua78a\\uab5b\\ufbb2-\\ufbc1\\uff3e\\uff40\\uffe3\\U0001f3fb-\\U0001f3ff'\n\nSm = '+<->|~\\xac\\xb1\\xd7\\xf7\\u03f6\\u0606-\\u0608\\u2044\\u2052\\u207a-\\u207c\\u208a-\\u208c\\u2118\\u2140-\\u2144\\u214b\\u2190-\\u2194\\u219a-\\u219b\\u21a0\\u21a3\\u21a6\\u21ae\\u21ce-\\u21cf\\u21d2\\u21d4\\u21f4-\\u22ff\\u2320-\\u2321\\u237c\\u239b-\\u23b3\\u23dc-\\u23e1\\u25b7\\u25c1\\u25f8-\\u25ff\\u266f\\u27c0-\\u27c4\\u27c7-\\u27e5\\u27f0-\\u27ff\\u2900-\\u2982\\u2999-\\u29d7\\u29dc-\\u29fb\\u29fe-\\u2aff\\u2b30-\\u2b44\\u2b47-\\u2b4c\\ufb29\\ufe62\\ufe64-\\ufe66\\uff0b\\uff1c-\\uff1e\\uff5c\\uff5e\\uffe2\\uffe9-\\uffec\\U0001d6c1\\U0001d6db\\U0001d6fb\\U0001d715\\U0001d735\\U0001d74f\\U0001d76f\\U0001d789\\U0001d7a9\\U0001d7c3\\U0001eef0-\\U0001eef1'\n\nSo = '\\xa6\\xa9\\xae\\xb0\\u0482\\u058d-\\u058e\\u060e-\\u060f\\u06de\\u06e9\\u06fd-\\u06fe\\u07f6\\u09fa\\u0b70\\u0bf3-\\u0bf8\\u0bfa\\u0c7f\\u0d4f\\u0d79\\u0f01-\\u0f03\\u0f13\\u0f15-\\u0f17\\u0f1a-\\u0f1f\\u0f34\\u0f36\\u0f38\\u0fbe-\\u0fc5\\u0fc7-\\u0fcc\\u0fce-\\u0fcf\\u0fd5-\\u0fd8\\u109e-\\u109f\\u1390-\\u1399\\u1940\\u19de-\\u19ff\\u1b61-\\u1b6a\\u1b74-\\u1b7c\\u2100-\\u2101\\u2103-\\u2106\\u2108-\\u2109\\u2114\\u2116-\\u2117\\u211e-\\u2123\\u2125\\u2127\\u2129\\u212e\\u213a-\\u213b\\u214a\\u214c-\\u214d\\u214f\\u218a-\\u218b\\u2195-\\u2199\\u219c-\\u219f\\u21a1-\\u21a2\\u21a4-\\u21a5\\u21a7-\\u21ad\\u21af-\\u21cd\\u21d0-\\u21d1\\u21d3\\u21d5-\\u21f3\\u2300-\\u2307\\u230c-\\u231f\\u2322-\\u2328\\u232b-\\u237b\\u237d-\\u239a\\u23b4-\\u23db\\u23e2-\\u2426\\u2440-\\u244a\\u249c-\\u24e9\\u2500-\\u25b6\\u25b8-\\u25c0\\u25c2-\\u25f7\\u2600-\\u266e\\u2670-\\u2767\\u2794-\\u27bf\\u2800-\\u28ff\\u2b00-\\u2b2f\\u2b45-\\u2b46\\u2b4d-\\u2b73\\u2b76-\\u2b95\\u2b98-\\u2bc8\\u2bca-\\u2bfe\\u2ce5-\\u2cea\\u2e80-\\u2e99\\u2e9b-\\u2ef3\\u2f00-\\u2fd5\\u2ff0-\\u2ffb\\u3004\\u3012-\\u3013\\u3020\\u3036-\\u3037\\u303e-\\u303f\\u3190-\\u3191\\u3196-\\u319f\\u31c0-\\u31e3\\u3200-\\u321e\\u322a-\\u3247\\u3250\\u3260-\\u327f\\u328a-\\u32b0\\u32c0-\\u32fe\\u3300-\\u33ff\\u4dc0-\\u4dff\\ua490-\\ua4c6\\ua828-\\ua82b\\ua836-\\ua837\\ua839\\uaa77-\\uaa79\\ufdfd\\uffe4\\uffe8\\uffed-\\uffee\\ufffc-\\ufffd\\U00010137-\\U0001013f\\U00010179-\\U00010189\\U0001018c-\\U0001018e\\U00010190-\\U0001019b\\U000101a0\\U000101d0-\\U000101fc\\U00010877-\\U00010878\\U00010ac8\\U0001173f\\U00016b3c-\\U00016b3f\\U00016b45\\U0001bc9c\\U0001d000-\\U0001d0f5\\U0001d100-\\U0001d126\\U0001d129-\\U0001d164\\U0001d16a-\\U0001d16c\\U0001d183-\\U0001d184\\U0001d18c-\\U0001d1a9\\U0001d1ae-\\U0001d1e8\\U0001d200-\\U0001d241\\U0001d245\\U0001d300-\\U0001d356\\U0001d800-\\U0001d9ff\\U0001da37-\\U0001da3a\\U0001da6d-\\U0001da74\\U0001da76-\\U0001da83\\U0001da85-\\U0001da86\\U0001ecac\\U0001f000-\\U0001f02b\\U0001f030-\\U0001f093\\U0001f0a0-\\U0001f0ae\\U0001f0b1-\\U0001f0bf\\U0001f0c1-\\U0001f0cf\\U0001f0d1-\\U0001f0f5\\U0001f110-\\U0001f16b\\U0001f170-\\U0001f1ac\\U0001f1e6-\\U0001f202\\U0001f210-\\U0001f23b\\U0001f240-\\U0001f248\\U0001f250-\\U0001f251\\U0001f260-\\U0001f265\\U0001f300-\\U0001f3fa\\U0001f400-\\U0001f6d4\\U0001f6e0-\\U0001f6ec\\U0001f6f0-\\U0001f6f9\\U0001f700-\\U0001f773\\U0001f780-\\U0001f7d8\\U0001f800-\\U0001f80b\\U0001f810-\\U0001f847\\U0001f850-\\U0001f859\\U0001f860-\\U0001f887\\U0001f890-\\U0001f8ad\\U0001f900-\\U0001f90b\\U0001f910-\\U0001f93e\\U0001f940-\\U0001f970\\U0001f973-\\U0001f976\\U0001f97a\\U0001f97c-\\U0001f9a2\\U0001f9b0-\\U0001f9b9\\U0001f9c0-\\U0001f9c2\\U0001f9d0-\\U0001f9ff\\U0001fa60-\\U0001fa6d'\n\nZl = '\\u2028'\n\nZp = '\\u2029'\n\nZs = ' \\xa0\\u1680\\u2000-\\u200a\\u202f\\u205f\\u3000'\n\nxid_continue = '0-9A-Z_a-z\\xaa\\xb5\\xb7\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0300-\\u0374\\u0376-\\u0377\\u037b-\\u037d\\u037f\\u0386-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u0483-\\u0487\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u0591-\\u05bd\\u05bf\\u05c1-\\u05c2\\u05c4-\\u05c5\\u05c7\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0610-\\u061a\\u0620-\\u0669\\u066e-\\u06d3\\u06d5-\\u06dc\\u06df-\\u06e8\\u06ea-\\u06fc\\u06ff\\u0710-\\u074a\\u074d-\\u07b1\\u07c0-\\u07f5\\u07fa\\u07fd\\u0800-\\u082d\\u0840-\\u085b\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u08d3-\\u08e1\\u08e3-\\u0963\\u0966-\\u096f\\u0971-\\u0983\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bc-\\u09c4\\u09c7-\\u09c8\\u09cb-\\u09ce\\u09d7\\u09dc-\\u09dd\\u09df-\\u09e3\\u09e6-\\u09f1\\u09fc\\u09fe\\u0a01-\\u0a03\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a3c\\u0a3e-\\u0a42\\u0a47-\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a59-\\u0a5c\\u0a5e\\u0a66-\\u0a75\\u0a81-\\u0a83\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abc-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ad0\\u0ae0-\\u0ae3\\u0ae6-\\u0aef\\u0af9-\\u0aff\\u0b01-\\u0b03\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3c-\\u0b44\\u0b47-\\u0b48\\u0b4b-\\u0b4d\\u0b56-\\u0b57\\u0b5c-\\u0b5d\\u0b5f-\\u0b63\\u0b66-\\u0b6f\\u0b71\\u0b82-\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd0\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55-\\u0c56\\u0c58-\\u0c5a\\u0c60-\\u0c63\\u0c66-\\u0c6f\\u0c80-\\u0c83\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbc-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5-\\u0cd6\\u0cde\\u0ce0-\\u0ce3\\u0ce6-\\u0cef\\u0cf1-\\u0cf2\\u0d00-\\u0d03\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4e\\u0d54-\\u0d57\\u0d5f-\\u0d63\\u0d66-\\u0d6f\\u0d7a-\\u0d7f\\u0d82-\\u0d83\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2-\\u0df3\\u0e01-\\u0e3a\\u0e40-\\u0e4e\\u0e50-\\u0e59\\u0e81-\\u0e82\\u0e84\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb9\\u0ebb-\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0edc-\\u0edf\\u0f00\\u0f18-\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e-\\u0f47\\u0f49-\\u0f6c\\u0f71-\\u0f84\\u0f86-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u1000-\\u1049\\u1050-\\u109d\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u135d-\\u135f\\u1369-\\u1371\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176c\\u176e-\\u1770\\u1772-\\u1773\\u1780-\\u17d3\\u17d7\\u17dc-\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u1810-\\u1819\\u1820-\\u1878\\u1880-\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u19d0-\\u19da\\u1a00-\\u1a1b\\u1a20-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1aa7\\u1ab0-\\u1abd\\u1b00-\\u1b4b\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1bf3\\u1c00-\\u1c37\\u1c40-\\u1c49\\u1c4d-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1cd0-\\u1cd2\\u1cd4-\\u1cf9\\u1d00-\\u1df9\\u1dfb-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u203f-\\u2040\\u2054\\u2071\\u207f\\u2090-\\u209c\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d7f-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u2de0-\\u2dff\\u3005-\\u3007\\u3021-\\u302f\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u3099-\\u309a\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua62b\\ua640-\\ua66f\\ua674-\\ua67d\\ua67f-\\ua6f1\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua827\\ua840-\\ua873\\ua880-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f7\\ua8fb\\ua8fd-\\ua92d\\ua930-\\ua953\\ua960-\\ua97c\\ua980-\\ua9c0\\ua9cf-\\ua9d9\\ua9e0-\\ua9fe\\uaa00-\\uaa36\\uaa40-\\uaa4d\\uaa50-\\uaa59\\uaa60-\\uaa76\\uaa7a-\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaef\\uaaf2-\\uaaf6\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabea\\uabec-\\uabed\\uabf0-\\uabf9\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufc5d\\ufc64-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdf9\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33-\\ufe34\\ufe4d-\\ufe4f\\ufe71\\ufe73\\ufe77\\ufe79\\ufe7b\\ufe7d\\ufe7f-\\ufefc\\uff10-\\uff19\\uff21-\\uff3a\\uff3f\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\\U00010000-\\U0001000b\\U0001000d-\\U00010026\\U00010028-\\U0001003a\\U0001003c-\\U0001003d\\U0001003f-\\U0001004d\\U00010050-\\U0001005d\\U00010080-\\U000100fa\\U00010140-\\U00010174\\U000101fd\\U00010280-\\U0001029c\\U000102a0-\\U000102d0\\U000102e0\\U00010300-\\U0001031f\\U0001032d-\\U0001034a\\U00010350-\\U0001037a\\U00010380-\\U0001039d\\U000103a0-\\U000103c3\\U000103c8-\\U000103cf\\U000103d1-\\U000103d5\\U00010400-\\U0001049d\\U000104a0-\\U000104a9\\U000104b0-\\U000104d3\\U000104d8-\\U000104fb\\U00010500-\\U00010527\\U00010530-\\U00010563\\U00010600-\\U00010736\\U00010740-\\U00010755\\U00010760-\\U00010767\\U00010800-\\U00010805\\U00010808\\U0001080a-\\U00010835\\U00010837-\\U00010838\\U0001083c\\U0001083f-\\U00010855\\U00010860-\\U00010876\\U00010880-\\U0001089e\\U000108e0-\\U000108f2\\U000108f4-\\U000108f5\\U00010900-\\U00010915\\U00010920-\\U00010939\\U00010980-\\U000109b7\\U000109be-\\U000109bf\\U00010a00-\\U00010a03\\U00010a05-\\U00010a06\\U00010a0c-\\U00010a13\\U00010a15-\\U00010a17\\U00010a19-\\U00010a35\\U00010a38-\\U00010a3a\\U00010a3f\\U00010a60-\\U00010a7c\\U00010a80-\\U00010a9c\\U00010ac0-\\U00010ac7\\U00010ac9-\\U00010ae6\\U00010b00-\\U00010b35\\U00010b40-\\U00010b55\\U00010b60-\\U00010b72\\U00010b80-\\U00010b91\\U00010c00-\\U00010c48\\U00010c80-\\U00010cb2\\U00010cc0-\\U00010cf2\\U00010d00-\\U00010d27\\U00010d30-\\U00010d39\\U00010f00-\\U00010f1c\\U00010f27\\U00010f30-\\U00010f50\\U00011000-\\U00011046\\U00011066-\\U0001106f\\U0001107f-\\U000110ba\\U000110d0-\\U000110e8\\U000110f0-\\U000110f9\\U00011100-\\U00011134\\U00011136-\\U0001113f\\U00011144-\\U00011146\\U00011150-\\U00011173\\U00011176\\U00011180-\\U000111c4\\U000111c9-\\U000111cc\\U000111d0-\\U000111da\\U000111dc\\U00011200-\\U00011211\\U00011213-\\U00011237\\U0001123e\\U00011280-\\U00011286\\U00011288\\U0001128a-\\U0001128d\\U0001128f-\\U0001129d\\U0001129f-\\U000112a8\\U000112b0-\\U000112ea\\U000112f0-\\U000112f9\\U00011300-\\U00011303\\U00011305-\\U0001130c\\U0001130f-\\U00011310\\U00011313-\\U00011328\\U0001132a-\\U00011330\\U00011332-\\U00011333\\U00011335-\\U00011339\\U0001133b-\\U00011344\\U00011347-\\U00011348\\U0001134b-\\U0001134d\\U00011350\\U00011357\\U0001135d-\\U00011363\\U00011366-\\U0001136c\\U00011370-\\U00011374\\U00011400-\\U0001144a\\U00011450-\\U00011459\\U0001145e\\U00011480-\\U000114c5\\U000114c7\\U000114d0-\\U000114d9\\U00011580-\\U000115b5\\U000115b8-\\U000115c0\\U000115d8-\\U000115dd\\U00011600-\\U00011640\\U00011644\\U00011650-\\U00011659\\U00011680-\\U000116b7\\U000116c0-\\U000116c9\\U00011700-\\U0001171a\\U0001171d-\\U0001172b\\U00011730-\\U00011739\\U00011800-\\U0001183a\\U000118a0-\\U000118e9\\U000118ff\\U00011a00-\\U00011a3e\\U00011a47\\U00011a50-\\U00011a83\\U00011a86-\\U00011a99\\U00011a9d\\U00011ac0-\\U00011af8\\U00011c00-\\U00011c08\\U00011c0a-\\U00011c36\\U00011c38-\\U00011c40\\U00011c50-\\U00011c59\\U00011c72-\\U00011c8f\\U00011c92-\\U00011ca7\\U00011ca9-\\U00011cb6\\U00011d00-\\U00011d06\\U00011d08-\\U00011d09\\U00011d0b-\\U00011d36\\U00011d3a\\U00011d3c-\\U00011d3d\\U00011d3f-\\U00011d47\\U00011d50-\\U00011d59\\U00011d60-\\U00011d65\\U00011d67-\\U00011d68\\U00011d6a-\\U00011d8e\\U00011d90-\\U00011d91\\U00011d93-\\U00011d98\\U00011da0-\\U00011da9\\U00011ee0-\\U00011ef6\\U00012000-\\U00012399\\U00012400-\\U0001246e\\U00012480-\\U00012543\\U00013000-\\U0001342e\\U00014400-\\U00014646\\U00016800-\\U00016a38\\U00016a40-\\U00016a5e\\U00016a60-\\U00016a69\\U00016ad0-\\U00016aed\\U00016af0-\\U00016af4\\U00016b00-\\U00016b36\\U00016b40-\\U00016b43\\U00016b50-\\U00016b59\\U00016b63-\\U00016b77\\U00016b7d-\\U00016b8f\\U00016e40-\\U00016e7f\\U00016f00-\\U00016f44\\U00016f50-\\U00016f7e\\U00016f8f-\\U00016f9f\\U00016fe0-\\U00016fe1\\U00017000-\\U000187f1\\U00018800-\\U00018af2\\U0001b000-\\U0001b11e\\U0001b170-\\U0001b2fb\\U0001bc00-\\U0001bc6a\\U0001bc70-\\U0001bc7c\\U0001bc80-\\U0001bc88\\U0001bc90-\\U0001bc99\\U0001bc9d-\\U0001bc9e\\U0001d165-\\U0001d169\\U0001d16d-\\U0001d172\\U0001d17b-\\U0001d182\\U0001d185-\\U0001d18b\\U0001d1aa-\\U0001d1ad\\U0001d242-\\U0001d244\\U0001d400-\\U0001d454\\U0001d456-\\U0001d49c\\U0001d49e-\\U0001d49f\\U0001d4a2\\U0001d4a5-\\U0001d4a6\\U0001d4a9-\\U0001d4ac\\U0001d4ae-\\U0001d4b9\\U0001d4bb\\U0001d4bd-\\U0001d4c3\\U0001d4c5-\\U0001d505\\U0001d507-\\U0001d50a\\U0001d50d-\\U0001d514\\U0001d516-\\U0001d51c\\U0001d51e-\\U0001d539\\U0001d53b-\\U0001d53e\\U0001d540-\\U0001d544\\U0001d546\\U0001d54a-\\U0001d550\\U0001d552-\\U0001d6a5\\U0001d6a8-\\U0001d6c0\\U0001d6c2-\\U0001d6da\\U0001d6dc-\\U0001d6fa\\U0001d6fc-\\U0001d714\\U0001d716-\\U0001d734\\U0001d736-\\U0001d74e\\U0001d750-\\U0001d76e\\U0001d770-\\U0001d788\\U0001d78a-\\U0001d7a8\\U0001d7aa-\\U0001d7c2\\U0001d7c4-\\U0001d7cb\\U0001d7ce-\\U0001d7ff\\U0001da00-\\U0001da36\\U0001da3b-\\U0001da6c\\U0001da75\\U0001da84\\U0001da9b-\\U0001da9f\\U0001daa1-\\U0001daaf\\U0001e000-\\U0001e006\\U0001e008-\\U0001e018\\U0001e01b-\\U0001e021\\U0001e023-\\U0001e024\\U0001e026-\\U0001e02a\\U0001e800-\\U0001e8c4\\U0001e8d0-\\U0001e8d6\\U0001e900-\\U0001e94a\\U0001e950-\\U0001e959\\U0001ee00-\\U0001ee03\\U0001ee05-\\U0001ee1f\\U0001ee21-\\U0001ee22\\U0001ee24\\U0001ee27\\U0001ee29-\\U0001ee32\\U0001ee34-\\U0001ee37\\U0001ee39\\U0001ee3b\\U0001ee42\\U0001ee47\\U0001ee49\\U0001ee4b\\U0001ee4d-\\U0001ee4f\\U0001ee51-\\U0001ee52\\U0001ee54\\U0001ee57\\U0001ee59\\U0001ee5b\\U0001ee5d\\U0001ee5f\\U0001ee61-\\U0001ee62\\U0001ee64\\U0001ee67-\\U0001ee6a\\U0001ee6c-\\U0001ee72\\U0001ee74-\\U0001ee77\\U0001ee79-\\U0001ee7c\\U0001ee7e\\U0001ee80-\\U0001ee89\\U0001ee8b-\\U0001ee9b\\U0001eea1-\\U0001eea3\\U0001eea5-\\U0001eea9\\U0001eeab-\\U0001eebb\\U00020000-\\U0002a6d6\\U0002a700-\\U0002b734\\U0002b740-\\U0002b81d\\U0002b820-\\U0002cea1\\U0002ceb0-\\U0002ebe0\\U0002f800-\\U0002fa1d\\U000e0100-\\U000e01ef'\n\nxid_start = 'A-Z_a-z\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376-\\u0377\\u037b-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e-\\u066f\\u0671-\\u06d3\\u06d5\\u06e5-\\u06e6\\u06ee-\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4-\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u08a0-\\u08b4\\u08b6-\\u08bd\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f-\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc-\\u09dd\\u09df-\\u09e1\\u09f0-\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f-\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32-\\u0a33\\u0a35-\\u0a36\\u0a38-\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2-\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0-\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f-\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32-\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c-\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99-\\u0b9a\\u0b9c\\u0b9e-\\u0b9f\\u0ba3-\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c60-\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cde\\u0ce0-\\u0ce1\\u0cf1-\\u0cf2\\u0d05-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e40-\\u0e46\\u0e81-\\u0e82\\u0e84\\u0e87-\\u0e88\\u0e8a\\u0e8d\\u0e94-\\u0e97\\u0e99-\\u0e9f\\u0ea1-\\u0ea3\\u0ea5\\u0ea7\\u0eaa-\\u0eab\\u0ead-\\u0eb0\\u0eb2\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065-\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u170c\\u170e-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4b\\u1b83-\\u1ba0\\u1bae-\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf1\\u1cf5-\\u1cf6\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2c2e\\u2c30-\\u2c5e\\u2c60-\\u2ce4\\u2ceb-\\u2cee\\u2cf2-\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309d-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31ba\\u31f0-\\u31ff\\u3400-\\u4db5\\u4e00-\\u9fef\\ua000-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a-\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7b9\\ua7f7-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd-\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5-\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab65\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufc5d\\ufc64-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdf9\\ufe71\\ufe73\\ufe77\\ufe79\\ufe7b\\ufe7d\\ufe7f-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uff9d\\uffa0-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\\U00010000-\\U0001000b\\U0001000d-\\U00010026\\U00010028-\\U0001003a\\U0001003c-\\U0001003d\\U0001003f-\\U0001004d\\U00010050-\\U0001005d\\U00010080-\\U000100fa\\U00010140-\\U00010174\\U00010280-\\U0001029c\\U000102a0-\\U000102d0\\U00010300-\\U0001031f\\U0001032d-\\U0001034a\\U00010350-\\U00010375\\U00010380-\\U0001039d\\U000103a0-\\U000103c3\\U000103c8-\\U000103cf\\U000103d1-\\U000103d5\\U00010400-\\U0001049d\\U000104b0-\\U000104d3\\U000104d8-\\U000104fb\\U00010500-\\U00010527\\U00010530-\\U00010563\\U00010600-\\U00010736\\U00010740-\\U00010755\\U00010760-\\U00010767\\U00010800-\\U00010805\\U00010808\\U0001080a-\\U00010835\\U00010837-\\U00010838\\U0001083c\\U0001083f-\\U00010855\\U00010860-\\U00010876\\U00010880-\\U0001089e\\U000108e0-\\U000108f2\\U000108f4-\\U000108f5\\U00010900-\\U00010915\\U00010920-\\U00010939\\U00010980-\\U000109b7\\U000109be-\\U000109bf\\U00010a00\\U00010a10-\\U00010a13\\U00010a15-\\U00010a17\\U00010a19-\\U00010a35\\U00010a60-\\U00010a7c\\U00010a80-\\U00010a9c\\U00010ac0-\\U00010ac7\\U00010ac9-\\U00010ae4\\U00010b00-\\U00010b35\\U00010b40-\\U00010b55\\U00010b60-\\U00010b72\\U00010b80-\\U00010b91\\U00010c00-\\U00010c48\\U00010c80-\\U00010cb2\\U00010cc0-\\U00010cf2\\U00010d00-\\U00010d23\\U00010f00-\\U00010f1c\\U00010f27\\U00010f30-\\U00010f45\\U00011003-\\U00011037\\U00011083-\\U000110af\\U000110d0-\\U000110e8\\U00011103-\\U00011126\\U00011144\\U00011150-\\U00011172\\U00011176\\U00011183-\\U000111b2\\U000111c1-\\U000111c4\\U000111da\\U000111dc\\U00011200-\\U00011211\\U00011213-\\U0001122b\\U00011280-\\U00011286\\U00011288\\U0001128a-\\U0001128d\\U0001128f-\\U0001129d\\U0001129f-\\U000112a8\\U000112b0-\\U000112de\\U00011305-\\U0001130c\\U0001130f-\\U00011310\\U00011313-\\U00011328\\U0001132a-\\U00011330\\U00011332-\\U00011333\\U00011335-\\U00011339\\U0001133d\\U00011350\\U0001135d-\\U00011361\\U00011400-\\U00011434\\U00011447-\\U0001144a\\U00011480-\\U000114af\\U000114c4-\\U000114c5\\U000114c7\\U00011580-\\U000115ae\\U000115d8-\\U000115db\\U00011600-\\U0001162f\\U00011644\\U00011680-\\U000116aa\\U00011700-\\U0001171a\\U00011800-\\U0001182b\\U000118a0-\\U000118df\\U000118ff\\U00011a00\\U00011a0b-\\U00011a32\\U00011a3a\\U00011a50\\U00011a5c-\\U00011a83\\U00011a86-\\U00011a89\\U00011a9d\\U00011ac0-\\U00011af8\\U00011c00-\\U00011c08\\U00011c0a-\\U00011c2e\\U00011c40\\U00011c72-\\U00011c8f\\U00011d00-\\U00011d06\\U00011d08-\\U00011d09\\U00011d0b-\\U00011d30\\U00011d46\\U00011d60-\\U00011d65\\U00011d67-\\U00011d68\\U00011d6a-\\U00011d89\\U00011d98\\U00011ee0-\\U00011ef2\\U00012000-\\U00012399\\U00012400-\\U0001246e\\U00012480-\\U00012543\\U00013000-\\U0001342e\\U00014400-\\U00014646\\U00016800-\\U00016a38\\U00016a40-\\U00016a5e\\U00016ad0-\\U00016aed\\U00016b00-\\U00016b2f\\U00016b40-\\U00016b43\\U00016b63-\\U00016b77\\U00016b7d-\\U00016b8f\\U00016e40-\\U00016e7f\\U00016f00-\\U00016f44\\U00016f50\\U00016f93-\\U00016f9f\\U00016fe0-\\U00016fe1\\U00017000-\\U000187f1\\U00018800-\\U00018af2\\U0001b000-\\U0001b11e\\U0001b170-\\U0001b2fb\\U0001bc00-\\U0001bc6a\\U0001bc70-\\U0001bc7c\\U0001bc80-\\U0001bc88\\U0001bc90-\\U0001bc99\\U0001d400-\\U0001d454\\U0001d456-\\U0001d49c\\U0001d49e-\\U0001d49f\\U0001d4a2\\U0001d4a5-\\U0001d4a6\\U0001d4a9-\\U0001d4ac\\U0001d4ae-\\U0001d4b9\\U0001d4bb\\U0001d4bd-\\U0001d4c3\\U0001d4c5-\\U0001d505\\U0001d507-\\U0001d50a\\U0001d50d-\\U0001d514\\U0001d516-\\U0001d51c\\U0001d51e-\\U0001d539\\U0001d53b-\\U0001d53e\\U0001d540-\\U0001d544\\U0001d546\\U0001d54a-\\U0001d550\\U0001d552-\\U0001d6a5\\U0001d6a8-\\U0001d6c0\\U0001d6c2-\\U0001d6da\\U0001d6dc-\\U0001d6fa\\U0001d6fc-\\U0001d714\\U0001d716-\\U0001d734\\U0001d736-\\U0001d74e\\U0001d750-\\U0001d76e\\U0001d770-\\U0001d788\\U0001d78a-\\U0001d7a8\\U0001d7aa-\\U0001d7c2\\U0001d7c4-\\U0001d7cb\\U0001e800-\\U0001e8c4\\U0001e900-\\U0001e943\\U0001ee00-\\U0001ee03\\U0001ee05-\\U0001ee1f\\U0001ee21-\\U0001ee22\\U0001ee24\\U0001ee27\\U0001ee29-\\U0001ee32\\U0001ee34-\\U0001ee37\\U0001ee39\\U0001ee3b\\U0001ee42\\U0001ee47\\U0001ee49\\U0001ee4b\\U0001ee4d-\\U0001ee4f\\U0001ee51-\\U0001ee52\\U0001ee54\\U0001ee57\\U0001ee59\\U0001ee5b\\U0001ee5d\\U0001ee5f\\U0001ee61-\\U0001ee62\\U0001ee64\\U0001ee67-\\U0001ee6a\\U0001ee6c-\\U0001ee72\\U0001ee74-\\U0001ee77\\U0001ee79-\\U0001ee7c\\U0001ee7e\\U0001ee80-\\U0001ee89\\U0001ee8b-\\U0001ee9b\\U0001eea1-\\U0001eea3\\U0001eea5-\\U0001eea9\\U0001eeab-\\U0001eebb\\U00020000-\\U0002a6d6\\U0002a700-\\U0002b734\\U0002b740-\\U0002b81d\\U0002b820-\\U0002cea1\\U0002ceb0-\\U0002ebe0\\U0002f800-\\U0002fa1d'\n\ncats = ['Cc', 'Cf', 'Cn', 'Co', 'Cs', 'Ll', 'Lm', 'Lo', 'Lt', 'Lu', 'Mc', 'Me', 'Mn', 'Nd', 'Nl', 'No', 'Pc', 'Pd', 'Pe', 'Pf', 'Pi', 'Po', 'Ps', 'Sc', 'Sk', 'Sm', 'So', 'Zl', 'Zp', 'Zs']\n\n# Generated from unidata 11.0.0\n\ndef combine(*args):\n    return ''.join(globals()[cat] for cat in args)\n\n\ndef allexcept(*args):\n    newcats = cats[:]\n    for arg in args:\n        newcats.remove(arg)\n    return ''.join(globals()[cat] for cat in newcats)\n\n\ndef _handle_runs(char_list):  # pragma: no cover\n    buf = []\n    for c in char_list:\n        if len(c) == 1:\n            if buf and buf[-1][1] == chr(ord(c)-1):\n                buf[-1] = (buf[-1][0], c)\n            else:\n                buf.append((c, c))\n        else:\n            buf.append((c, c))\n    for a, b in buf:\n        if a == b:\n            yield a\n        else:\n            yield f'{a}-{b}'\n\n\nif __name__ == '__main__':  # pragma: no cover\n    import unicodedata\n\n    categories = {'xid_start': [], 'xid_continue': []}\n\n    with open(__file__, encoding='utf-8') as fp:\n        content = fp.read()\n\n    header = content[:content.find('Cc =')]\n    footer = content[content.find(\"def combine(\"):]\n\n    for code in range(0x110000):\n        c = chr(code)\n        cat = unicodedata.category(c)\n        if ord(c) == 0xdc00:\n            # Hack to avoid combining this combining with the preceding high\n            # surrogate, 0xdbff, when doing a repr.\n            c = '\\\\' + c\n        elif ord(c) in (0x2d, 0x5b, 0x5c, 0x5d, 0x5e):\n            # Escape regex metachars.\n            c = '\\\\' + c\n        categories.setdefault(cat, []).append(c)\n        # XID_START and XID_CONTINUE are special categories used for matching\n        # identifiers in Python 3.\n        if c.isidentifier():\n            categories['xid_start'].append(c)\n        if ('a' + c).isidentifier():\n            categories['xid_continue'].append(c)\n\n    with open(__file__, 'w', encoding='utf-8') as fp:\n        fp.write(header)\n\n        for cat in sorted(categories):\n            val = ''.join(_handle_runs(categories[cat]))\n            fp.write(f'{cat} = {val!a}\\n\\n')\n\n        cats = sorted(categories)\n        cats.remove('xid_start')\n        cats.remove('xid_continue')\n        fp.write(f'cats = {cats!r}\\n\\n')\n\n        fp.write(f'# Generated from unidata {unicodedata.unidata_version}\\n\\n')\n\n        fp.write(footer)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/unistring.py",
        "start": 1,
        "end": 153,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 990
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/unistring.py",
        "start": 1,
        "end": 153,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 153,
          "column": 2,
          "position": 990
        }
      }
    },
    {
      "format": "python",
      "lines": 214,
      "fragment": "\"\"\"\n    pygments.token\n    ~~~~~~~~~~~~~~\n\n    Basic token types and the standard tokens.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\n\nclass _TokenType(tuple):\n    parent = None\n\n    def split(self):\n        buf = []\n        node = self\n        while node is not None:\n            buf.append(node)\n            node = node.parent\n        buf.reverse()\n        return buf\n\n    def __init__(self, *args):\n        # no need to call super.__init__\n        self.subtypes = set()\n\n    def __contains__(self, val):\n        return self is val or (\n            type(val) is self.__class__ and\n            val[:len(self)] == self\n        )\n\n    def __getattr__(self, val):\n        if not val or not val[0].isupper():\n            return tuple.__getattribute__(self, val)\n        new = _TokenType(self + (val,))\n        setattr(self, val, new)\n        self.subtypes.add(new)\n        new.parent = self\n        return new\n\n    def __repr__(self):\n        return 'Token' + (self and '.' or '') + '.'.join(self)\n\n    def __copy__(self):\n        # These instances are supposed to be singletons\n        return self\n\n    def __deepcopy__(self, memo):\n        # These instances are supposed to be singletons\n        return self\n\n\nToken = _TokenType()\n\n# Special token types\nText = Token.Text\nWhitespace = Text.Whitespace\nEscape = Token.Escape\nError = Token.Error\n# Text that doesn't belong to this lexer (e.g. HTML in PHP)\nOther = Token.Other\n\n# Common token types for source code\nKeyword = Token.Keyword\nName = Token.Name\nLiteral = Token.Literal\nString = Literal.String\nNumber = Literal.Number\nPunctuation = Token.Punctuation\nOperator = Token.Operator\nComment = Token.Comment\n\n# Generic types for non-source code\nGeneric = Token.Generic\n\n# String and some others are not direct children of Token.\n# alias them:\nToken.Token = Token\nToken.String = String\nToken.Number = Number\n\n\ndef is_token_subtype(ttype, other):\n    \"\"\"\n    Return True if ``ttype`` is a subtype of ``other``.\n\n    exists for backwards compatibility. use ``ttype in other`` now.\n    \"\"\"\n    return ttype in other\n\n\ndef string_to_tokentype(s):\n    \"\"\"\n    Convert a string into a token type::\n\n        >>> string_to_token('String.Double')\n        Token.Literal.String.Double\n        >>> string_to_token('Token.Literal.Number')\n        Token.Literal.Number\n        >>> string_to_token('')\n        Token\n\n    Tokens that are already tokens are returned unchanged:\n\n        >>> string_to_token(String)\n        Token.Literal.String\n    \"\"\"\n    if isinstance(s, _TokenType):\n        return s\n    if not s:\n        return Token\n    node = Token\n    for item in s.split('.'):\n        node = getattr(node, item)\n    return node\n\n\n# Map standard token types to short names, used in CSS class naming.\n# If you add a new item, please be sure to run this file to perform\n# a consistency check for duplicate values.\nSTANDARD_TYPES = {\n    Token:                         '',\n\n    Text:                          '',\n    Whitespace:                    'w',\n    Escape:                        'esc',\n    Error:                         'err',\n    Other:                         'x',\n\n    Keyword:                       'k',\n    Keyword.Constant:              'kc',\n    Keyword.Declaration:           'kd',\n    Keyword.Namespace:             'kn',\n    Keyword.Pseudo:                'kp',\n    Keyword.Reserved:              'kr',\n    Keyword.Type:                  'kt',\n\n    Name:                          'n',\n    Name.Attribute:                'na',\n    Name.Builtin:                  'nb',\n    Name.Builtin.Pseudo:           'bp',\n    Name.Class:                    'nc',\n    Name.Constant:                 'no',\n    Name.Decorator:                'nd',\n    Name.Entity:                   'ni',\n    Name.Exception:                'ne',\n    Name.Function:                 'nf',\n    Name.Function.Magic:           'fm',\n    Name.Property:                 'py',\n    Name.Label:                    'nl',\n    Name.Namespace:                'nn',\n    Name.Other:                    'nx',\n    Name.Tag:                      'nt',\n    Name.Variable:                 'nv',\n    Name.Variable.Class:           'vc',\n    Name.Variable.Global:          'vg',\n    Name.Variable.Instance:        'vi',\n    Name.Variable.Magic:           'vm',\n\n    Literal:                       'l',\n    Literal.Date:                  'ld',\n\n    String:                        's',\n    String.Affix:                  'sa',\n    String.Backtick:               'sb',\n    String.Char:                   'sc',\n    String.Delimiter:              'dl',\n    String.Doc:                    'sd',\n    String.Double:                 's2',\n    String.Escape:                 'se',\n    String.Heredoc:                'sh',\n    String.Interpol:               'si',\n    String.Other:                  'sx',\n    String.Regex:                  'sr',\n    String.Single:                 's1',\n    String.Symbol:                 'ss',\n\n    Number:                        'm',\n    Number.Bin:                    'mb',\n    Number.Float:                  'mf',\n    Number.Hex:                    'mh',\n    Number.Integer:                'mi',\n    Number.Integer.Long:           'il',\n    Number.Oct:                    'mo',\n\n    Operator:                      'o',\n    Operator.Word:                 'ow',\n\n    Punctuation:                   'p',\n    Punctuation.Marker:            'pm',\n\n    Comment:                       'c',\n    Comment.Hashbang:              'ch',\n    Comment.Multiline:             'cm',\n    Comment.Preproc:               'cp',\n    Comment.PreprocFile:           'cpf',\n    Comment.Single:                'c1',\n    Comment.Special:               'cs',\n\n    Generic:                       'g',\n    Generic.Deleted:               'gd',\n    Generic.Emph:                  'ge',\n    Generic.Error:                 'gr',\n    Generic.Heading:               'gh',\n    Generic.Inserted:              'gi',\n    Generic.Output:                'go',\n    Generic.Prompt:                'gp',\n    Generic.Strong:                'gs',\n    Generic.Subheading:            'gu',\n    Generic.EmphStrong:            'ges',\n    Generic.Traceback:             'gt',\n}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/token.py",
        "start": 1,
        "end": 214,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1345
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/token.py",
        "start": 1,
        "end": 214,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 214,
          "column": 2,
          "position": 1345
        }
      }
    },
    {
      "format": "python",
      "lines": 193,
      "fragment": "pygments.token import Token, STANDARD_TYPES\n\n# Default mapping of ansixxx to RGB colors.\n_ansimap = {\n    # dark\n    'ansiblack': '000000',\n    'ansired': '7f0000',\n    'ansigreen': '007f00',\n    'ansiyellow': '7f7fe0',\n    'ansiblue': '00007f',\n    'ansimagenta': '7f007f',\n    'ansicyan': '007f7f',\n    'ansigray': 'e5e5e5',\n    # normal\n    'ansibrightblack': '555555',\n    'ansibrightred': 'ff0000',\n    'ansibrightgreen': '00ff00',\n    'ansibrightyellow': 'ffff00',\n    'ansibrightblue': '0000ff',\n    'ansibrightmagenta': 'ff00ff',\n    'ansibrightcyan': '00ffff',\n    'ansiwhite': 'ffffff',\n}\n# mapping of deprecated #ansixxx colors to new color names\n_deprecated_ansicolors = {\n    # dark\n    '#ansiblack': 'ansiblack',\n    '#ansidarkred': 'ansired',\n    '#ansidarkgreen': 'ansigreen',\n    '#ansibrown': 'ansiyellow',\n    '#ansidarkblue': 'ansiblue',\n    '#ansipurple': 'ansimagenta',\n    '#ansiteal': 'ansicyan',\n    '#ansilightgray': 'ansigray',\n    # normal\n    '#ansidarkgray': 'ansibrightblack',\n    '#ansired': 'ansibrightred',\n    '#ansigreen': 'ansibrightgreen',\n    '#ansiyellow': 'ansibrightyellow',\n    '#ansiblue': 'ansibrightblue',\n    '#ansifuchsia': 'ansibrightmagenta',\n    '#ansiturquoise': 'ansibrightcyan',\n    '#ansiwhite': 'ansiwhite',\n}\nansicolors = set(_ansimap)\n\n\nclass StyleMeta(type):\n\n    def __new__(mcs, name, bases, dct):\n        obj = type.__new__(mcs, name, bases, dct)\n        for token in STANDARD_TYPES:\n            if token not in obj.styles:\n                obj.styles[token] = ''\n\n        def colorformat(text):\n            if text in ansicolors:\n                return text\n            if text[0:1] == '#':\n                col = text[1:]\n                if len(col) == 6:\n                    return col\n                elif len(col) == 3:\n                    return col[0] * 2 + col[1] * 2 + col[2] * 2\n            elif text == '':\n                return ''\n            elif text.startswith('var') or text.startswith('calc'):\n                return text\n            assert False, f\"wrong color format {text!r}\"\n\n        _styles = obj._styles = {}\n\n        for ttype in obj.styles:\n            for token in ttype.split():\n                if token in _styles:\n                    continue\n                ndef = _styles.get(token.parent, None)\n                styledefs = obj.styles.get(token, '').split()\n                if not ndef or token is None:\n                    ndef = ['', 0, 0, 0, '', '', 0, 0, 0]\n                elif 'noinherit' in styledefs and token is not Token:\n                    ndef = _styles[Token][:]\n                else:\n                    ndef = ndef[:]\n                _styles[token] = ndef\n                for styledef in obj.styles.get(token, '').split():\n                    if styledef == 'noinherit':\n                        pass\n                    elif styledef == 'bold':\n                        ndef[1] = 1\n                    elif styledef == 'nobold':\n                        ndef[1] = 0\n                    elif styledef == 'italic':\n                        ndef[2] = 1\n                    elif styledef == 'noitalic':\n                        ndef[2] = 0\n                    elif styledef == 'underline':\n                        ndef[3] = 1\n                    elif styledef == 'nounderline':\n                        ndef[3] = 0\n                    elif styledef[:3] == 'bg:':\n                        ndef[4] = colorformat(styledef[3:])\n                    elif styledef[:7] == 'border:':\n                        ndef[5] = colorformat(styledef[7:])\n                    elif styledef == 'roman':\n                        ndef[6] = 1\n                    elif styledef == 'sans':\n                        ndef[7] = 1\n                    elif styledef == 'mono':\n                        ndef[8] = 1\n                    else:\n                        ndef[0] = colorformat(styledef)\n\n        return obj\n\n    def style_for_token(cls, token):\n        t = cls._styles[token]\n        ansicolor = bgansicolor = None\n        color = t[0]\n        if color in _deprecated_ansicolors:\n            color = _deprecated_ansicolors[color]\n        if color in ansicolors:\n            ansicolor = color\n            color = _ansimap[color]\n        bgcolor = t[4]\n        if bgcolor in _deprecated_ansicolors:\n            bgcolor = _deprecated_ansicolors[bgcolor]\n        if bgcolor in ansicolors:\n            bgansicolor = bgcolor\n            bgcolor = _ansimap[bgcolor]\n\n        return {\n            'color':        color or None,\n            'bold':         bool(t[1]),\n            'italic':       bool(t[2]),\n            'underline':    bool(t[3]),\n            'bgcolor':      bgcolor or None,\n            'border':       t[5] or None,\n            'roman':        bool(t[6]) or None,\n            'sans':         bool(t[7]) or None,\n            'mono':         bool(t[8]) or None,\n            'ansicolor':    ansicolor,\n            'bgansicolor':  bgansicolor,\n        }\n\n    def list_styles(cls):\n        return list(cls)\n\n    def styles_token(cls, ttype):\n        return ttype in cls._styles\n\n    def __iter__(cls):\n        for token in cls._styles:\n            yield token, cls.style_for_token(token)\n\n    def __len__(cls):\n        return len(cls._styles)\n\n\nclass Style(metaclass=StyleMeta):\n\n    #: overall background color (``None`` means transparent)\n    background_color = '#ffffff'\n\n    #: highlight background color\n    highlight_color = '#ffffcc'\n\n    #: line number font color\n    line_number_color = 'inherit'\n\n    #: line number background color\n    line_number_background_color = 'transparent'\n\n    #: special line number font color\n    line_number_special_color = '#000000'\n\n    #: special line number background color\n    line_number_special_background_color = '#ffffc0'\n\n    #: Style definitions for individual token types.\n    styles = {}\n\n    #: user-friendly style name (used when selecting the style, so this\n    # should be all-lowercase, no spaces, hyphens)\n    name = 'unnamed'\n\n    aliases = []\n\n    # Attribute for lexers defined within Pygments. If set\n    # to True, the style is not shown in the style gallery\n    # on the website. This is intended for language-specific\n    # styles.\n    web_style_gallery_exclude = False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/style.py",
        "start": 11,
        "end": 203,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 5
        },
        "endLoc": {
          "line": 203,
          "column": 6,
          "position": 1557
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/style.py",
        "start": 11,
        "end": 203,
        "startLoc": {
          "line": 11,
          "column": 2,
          "position": 9
        },
        "endLoc": {
          "line": 203,
          "column": 6,
          "position": 1561
        }
      }
    },
    {
      "format": "python",
      "lines": 95,
      "fragment": "\"\"\"\n    pygments.sphinxext\n    ~~~~~~~~~~~~~~~~~~\n\n    Sphinx extension to generate automatic documentation of lexers,\n    formatters and filters.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport sys\n\nfrom docutils import nodes\nfrom docutils.statemachine import ViewList\nfrom docutils.parsers.rst import Directive\nfrom sphinx.util.nodes import nested_parse_with_titles\n\n\nMODULEDOC = '''\n.. module:: %s\n\n%s\n%s\n'''\n\nLEXERDOC = '''\n.. class:: %s\n\n    :Short names: %s\n    :Filenames:   %s\n    :MIME types:  %s\n\n    %s\n\n    %s\n\n'''\n\nFMTERDOC = '''\n.. class:: %s\n\n    :Short names: %s\n    :Filenames: %s\n\n    %s\n\n'''\n\nFILTERDOC = '''\n.. class:: %s\n\n    :Name: %s\n\n    %s\n\n'''\n\n\nclass PygmentsDoc(Directive):\n    \"\"\"\n    A directive to collect all lexers/formatters/filters and generate\n    autoclass directives for them.\n    \"\"\"\n    has_content = False\n    required_arguments = 1\n    optional_arguments = 0\n    final_argument_whitespace = False\n    option_spec = {}\n\n    def run(self):\n        self.filenames = set()\n        if self.arguments[0] == 'lexers':\n            out = self.document_lexers()\n        elif self.arguments[0] == 'formatters':\n            out = self.document_formatters()\n        elif self.arguments[0] == 'filters':\n            out = self.document_filters()\n        elif self.arguments[0] == 'lexers_overview':\n            out = self.document_lexers_overview()\n        else:\n            raise Exception('invalid argument for \"pygmentsdoc\" directive')\n        node = nodes.compound()\n        vl = ViewList(out.split('\\n'), source='')\n        nested_parse_with_titles(self.state, vl, node)\n        for fn in self.filenames:\n            self.state.document.settings.record_dependencies.add(fn)\n        return node.children\n\n    def document_lexers_overview(self):\n        \"\"\"Generate a tabular overview of all lexers.\n\n        The columns are the lexer name, the extensions handled by this lexer\n        (or \"None\"), the aliases and a link to the lexer class.\"\"\"\n        from pygments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/sphinxext.py",
        "start": 1,
        "end": 95,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 95,
          "column": 9,
          "position": 361
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py",
        "start": 1,
        "end": 95,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 95,
          "column": 4,
          "position": 361
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "find_lexer_class(data[1])\n            extensions = lexer_cls.filenames + lexer_cls.alias_filenames\n\n            table.append({\n                'name': format_link(data[1], lexer_cls.url),\n                'extensions': ', '.join(extensions).replace('*', '\\\\*').replace('_', '\\\\') or 'None',\n                'aliases': ', '.join(data[2]),\n                'class': f'{data[0]}.{classname}'\n            })\n\n        column_names = ['name', 'extensions', 'aliases', 'class']\n        column_lengths = [max([len(row[column]) for row in table if row[column]])\n                          for column in column_names]\n\n        def write_row(*columns):\n            \"\"\"Format a table row\"\"\"\n            out = []\n            for length, col in zip(column_lengths, columns):\n                if col:\n                    out.append(col.ljust(length))\n                else:\n                    out.append(' '*length)\n\n            return ' '.join(out)\n\n        def write_seperator():\n            \"\"\"Write a table separator row\"\"\"\n            sep = ['='*c for c in column_lengths]\n            return write_row(*sep)\n\n        out.append(write_seperator())\n        out.append(write_row('Name', 'Extension(s)', 'Short name(s)', 'Lexer class'))\n        out.append(write_seperator())\n        for row in table:\n            out.append(write_row(\n                row['name'],\n                row['extensions'],\n                row['aliases'],\n                f':class:`~{row[\"class\"]}`'))\n        out.append(write_seperator())\n\n        return '\\n'.join(out)\n\n    def document_lexers(self):\n        from pygments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/sphinxext.py",
        "start": 107,
        "end": 151,
        "startLoc": {
          "line": 107,
          "column": 2,
          "position": 475
        },
        "endLoc": {
          "line": 151,
          "column": 9,
          "position": 890
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py",
        "start": 107,
        "end": 151,
        "startLoc": {
          "line": 107,
          "column": 2,
          "position": 483
        },
        "endLoc": {
          "line": 151,
          "column": 4,
          "position": 898
        }
      }
    },
    {
      "format": "python",
      "lines": 65,
      "fragment": "import pygments\n        import inspect\n        import pathlib\n\n        out = []\n        modules = {}\n        moduledocstrings = {}\n        for classname, data in sorted(LEXERS.items(), key=lambda x: x[0]):\n            module = data[0]\n            mod = __import__(module, None, None, [classname])\n            self.filenames.add(mod.__file__)\n            cls = getattr(mod, classname)\n            if not cls.__doc__:\n                print(f\"Warning: {classname} does not have a docstring.\")\n            docstring = cls.__doc__\n            if isinstance(docstring, bytes):\n                docstring = docstring.decode('utf8')\n\n            example_file = getattr(cls, '_example', None)\n            if example_file:\n                p = pathlib.Path(inspect.getabsfile(pygments)).parent.parent /\\\n                    'tests' / 'examplefiles' / example_file\n                content = p.read_text(encoding='utf-8')\n                if not content:\n                    raise Exception(\n                        f\"Empty example file '{example_file}' for lexer \"\n                        f\"{classname}\")\n\n                if data[2]:\n                    lexer_name = data[2][0]\n                    docstring += '\\n\\n    .. admonition:: Example\\n'\n                    docstring += f'\\n      .. code-block:: {lexer_name}\\n\\n'\n                    for line in content.splitlines():\n                        docstring += f'          {line}\\n'\n\n            if cls.version_added:\n                version_line = f'.. versionadded:: {cls.version_added}'\n            else:\n                version_line = ''\n\n            modules.setdefault(module, []).append((\n                classname,\n                ', '.join(data[2]) or 'None',\n                ', '.join(data[3]).replace('*', '\\\\*').replace('_', '\\\\') or 'None',\n                ', '.join(data[4]) or 'None',\n                docstring,\n                version_line))\n            if module not in moduledocstrings:\n                moddoc = mod.__doc__\n                if isinstance(moddoc, bytes):\n                    moddoc = moddoc.decode('utf8')\n                moduledocstrings[module] = moddoc\n\n        for module, lexers in sorted(modules.items(), key=lambda x: x[0]):\n            if moduledocstrings[module] is None:\n                raise Exception(f\"Missing docstring for {module}\")\n            heading = moduledocstrings[module].splitlines()[4].strip().rstrip('.')\n            out.append(MODULEDOC % (module, heading, '-'*len(heading)))\n            for data in lexers:\n                out.append(LEXERDOC % data)\n\n        return ''.join(out)\n\n    def document_formatters(self):\n        from pygments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/sphinxext.py",
        "start": 152,
        "end": 216,
        "startLoc": {
          "line": 152,
          "column": 9,
          "position": 901
        },
        "endLoc": {
          "line": 216,
          "column": 9,
          "position": 1564
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py",
        "start": 152,
        "end": 216,
        "startLoc": {
          "line": 152,
          "column": 2,
          "position": 919
        },
        "endLoc": {
          "line": 216,
          "column": 4,
          "position": 1582
        }
      }
    },
    {
      "format": "python",
      "lines": 19,
      "fragment": "pygments.formatters import FORMATTERS\n\n        out = []\n        for classname, data in sorted(FORMATTERS.items(), key=lambda x: x[0]):\n            module = data[0]\n            mod = __import__(module, None, None, [classname])\n            self.filenames.add(mod.__file__)\n            cls = getattr(mod, classname)\n            docstring = cls.__doc__\n            if isinstance(docstring, bytes):\n                docstring = docstring.decode('utf8')\n            heading = cls.__name__\n            out.append(FMTERDOC % (heading, ', '.join(data[2]) or 'None',\n                                   ', '.join(data[3]).replace('*', '\\\\*') or 'None',\n                                   docstring))\n        return ''.join(out)\n\n    def document_filters(self):\n        from pygments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/sphinxext.py",
        "start": 216,
        "end": 234,
        "startLoc": {
          "line": 216,
          "column": 2,
          "position": 1564
        },
        "endLoc": {
          "line": 234,
          "column": 9,
          "position": 1792
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py",
        "start": 216,
        "end": 234,
        "startLoc": {
          "line": 216,
          "column": 2,
          "position": 1586
        },
        "endLoc": {
          "line": 234,
          "column": 4,
          "position": 1814
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "pygments.filters import FILTERS\n\n        out = []\n        for name, cls in FILTERS.items():\n            self.filenames.add(sys.modules[cls.__module__].__file__)\n            docstring = cls.__doc__\n            if isinstance(docstring, bytes):\n                docstring = docstring.decode('utf8')\n            out.append(FILTERDOC % (cls.__name__, name, docstring))\n        return ''.join(out)\n\n\ndef setup(app):\n    app.add_directive('pygmentsdoc', PygmentsDoc)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/sphinxext.py",
        "start": 234,
        "end": 247,
        "startLoc": {
          "line": 234,
          "column": 2,
          "position": 1792
        },
        "endLoc": {
          "line": 247,
          "column": 2,
          "position": 1929
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/sphinxext.py",
        "start": 234,
        "end": 247,
        "startLoc": {
          "line": 234,
          "column": 2,
          "position": 1818
        },
        "endLoc": {
          "line": 247,
          "column": 2,
          "position": 1955
        }
      }
    },
    {
      "format": "python",
      "lines": 104,
      "fragment": "\"\"\"\n    pygments.scanner\n    ~~~~~~~~~~~~~~~~\n\n    This library implements a regex based scanner. Some languages\n    like Pascal are easy to parse but have some keywords that\n    depend on the context. Because of this it's impossible to lex\n    that just by using a regular expression lexer like the\n    `RegexLexer`.\n\n    Have a look at the `DelphiLexer` to get an idea of how to use\n    this scanner.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\nimport re\n\n\nclass EndOfText(RuntimeError):\n    \"\"\"\n    Raise if end of text is reached and the user\n    tried to call a match function.\n    \"\"\"\n\n\nclass Scanner:\n    \"\"\"\n    Simple scanner\n\n    All method patterns are regular expression strings (not\n    compiled expressions!)\n    \"\"\"\n\n    def __init__(self, text, flags=0):\n        \"\"\"\n        :param text:    The text which should be scanned\n        :param flags:   default regular expression flags\n        \"\"\"\n        self.data = text\n        self.data_length = len(text)\n        self.start_pos = 0\n        self.pos = 0\n        self.flags = flags\n        self.last = None\n        self.match = None\n        self._re_cache = {}\n\n    def eos(self):\n        \"\"\"`True` if the scanner reached the end of text.\"\"\"\n        return self.pos >= self.data_length\n    eos = property(eos, eos.__doc__)\n\n    def check(self, pattern):\n        \"\"\"\n        Apply `pattern` on the current position and return\n        the match object. (Doesn't touch pos). Use this for\n        lookahead.\n        \"\"\"\n        if self.eos:\n            raise EndOfText()\n        if pattern not in self._re_cache:\n            self._re_cache[pattern] = re.compile(pattern, self.flags)\n        return self._re_cache[pattern].match(self.data, self.pos)\n\n    def test(self, pattern):\n        \"\"\"Apply a pattern on the current position and check\n        if it patches. Doesn't touch pos.\n        \"\"\"\n        return self.check(pattern) is not None\n\n    def scan(self, pattern):\n        \"\"\"\n        Scan the text for the given pattern and update pos/match\n        and related fields. The return value is a boolean that\n        indicates if the pattern matched. The matched value is\n        stored on the instance as ``match``, the last value is\n        stored as ``last``. ``start_pos`` is the position of the\n        pointer before the pattern was matched, ``pos`` is the\n        end position.\n        \"\"\"\n        if self.eos:\n            raise EndOfText()\n        if pattern not in self._re_cache:\n            self._re_cache[pattern] = re.compile(pattern, self.flags)\n        self.last = self.match\n        m = self._re_cache[pattern].match(self.data, self.pos)\n        if m is None:\n            return False\n        self.start_pos = m.start()\n        self.pos = m.end()\n        self.match = m.group()\n        return True\n\n    def get_char(self):\n        \"\"\"Scan exactly one char.\"\"\"\n        self.scan('.')\n\n    def __repr__(self):\n        return '<%s %d/%d>' % (\n            self.__class__.__name__,\n            self.pos,\n            self.data_length\n        )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/scanner.py",
        "start": 1,
        "end": 104,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 104,
          "column": 2,
          "position": 509
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/scanner.py",
        "start": 1,
        "end": 104,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 104,
          "column": 2,
          "position": 509
        }
      }
    },
    {
      "format": "python",
      "lines": 91,
      "fragment": "\"\"\"\n    pygments.regexopt\n    ~~~~~~~~~~~~~~~~~\n\n    An algorithm that generates optimized regexes for matching long lists of\n    literal strings.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport re\nfrom re import escape\nfrom os.path import commonprefix\nfrom itertools import groupby\nfrom operator import itemgetter\n\nCS_ESCAPE = re.compile(r'[\\[\\^\\\\\\-\\]]')\nFIRST_ELEMENT = itemgetter(0)\n\n\ndef make_charset(letters):\n    return '[' + CS_ESCAPE.sub(lambda m: '\\\\' + m.group(), ''.join(letters)) + ']'\n\n\ndef regex_opt_inner(strings, open_paren):\n    \"\"\"Return a regex that matches any string in the sorted list of strings.\"\"\"\n    close_paren = open_paren and ')' or ''\n    # print strings, repr(open_paren)\n    if not strings:\n        # print '-> nothing left'\n        return ''\n    first = strings[0]\n    if len(strings) == 1:\n        # print '-> only 1 string'\n        return open_paren + escape(first) + close_paren\n    if not first:\n        # print '-> first string empty'\n        return open_paren + regex_opt_inner(strings[1:], '(?:') \\\n            + '?' + close_paren\n    if len(first) == 1:\n        # multiple one-char strings? make a charset\n        oneletter = []\n        rest = []\n        for s in strings:\n            if len(s) == 1:\n                oneletter.append(s)\n            else:\n                rest.append(s)\n        if len(oneletter) > 1:  # do we have more than one oneletter string?\n            if rest:\n                # print '-> 1-character + rest'\n                return open_paren + regex_opt_inner(rest, '') + '|' \\\n                    + make_charset(oneletter) + close_paren\n            # print '-> only 1-character'\n            return open_paren + make_charset(oneletter) + close_paren\n    prefix = commonprefix(strings)\n    if prefix:\n        plen = len(prefix)\n        # we have a prefix for all strings\n        # print '-> prefix:', prefix\n        return open_paren + escape(prefix) \\\n            + regex_opt_inner([s[plen:] for s in strings], '(?:') \\\n            + close_paren\n    # is there a suffix?\n    strings_rev = [s[::-1] for s in strings]\n    suffix = commonprefix(strings_rev)\n    if suffix:\n        slen = len(suffix)\n        # print '-> suffix:', suffix[::-1]\n        return open_paren \\\n            + regex_opt_inner(sorted(s[:-slen] for s in strings), '(?:') \\\n            + escape(suffix[::-1]) + close_paren\n    # recurse on common 1-string prefixes\n    # print '-> last resort'\n    return open_paren + \\\n        '|'.join(regex_opt_inner(list(group[1]), '')\n                 for group in groupby(strings, lambda s: s[0] == first[0])) \\\n        + close_paren\n\n\ndef regex_opt(strings, prefix='', suffix=''):\n    \"\"\"Return a compiled regex that matches any string in the given list.\n\n    The strings to match must be literal strings, not regexes.  They will be\n    regex-escaped.\n\n    *prefix* and *suffix* are pre- and appended to the final regex.\n    \"\"\"\n    strings = sorted(strings)\n    return prefix + regex_opt_inner(strings, '(') + suffix",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/regexopt.py",
        "start": 1,
        "end": 91,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 705
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/regexopt.py",
        "start": 1,
        "end": 91,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 91,
          "column": 7,
          "position": 705
        }
      }
    },
    {
      "format": "python",
      "lines": 72,
      "fragment": "\"\"\"\n    pygments.plugin\n    ~~~~~~~~~~~~~~~\n\n    Pygments plugin interface.\n\n    lexer plugins::\n\n        [pygments.lexers]\n        yourlexer = yourmodule:YourLexer\n\n    formatter plugins::\n\n        [pygments.formatters]\n        yourformatter = yourformatter:YourFormatter\n        /.ext = yourformatter:YourFormatter\n\n    As you can see, you can define extensions for the formatter\n    with a leading slash.\n\n    syntax plugins::\n\n        [pygments.styles]\n        yourstyle = yourstyle:YourStyle\n\n    filter plugin::\n\n        [pygments.filter]\n        yourfilter = yourfilter:YourFilter\n\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\nfrom importlib.metadata import entry_points\n\nLEXER_ENTRY_POINT = 'pygments.lexers'\nFORMATTER_ENTRY_POINT = 'pygments.formatters'\nSTYLE_ENTRY_POINT = 'pygments.styles'\nFILTER_ENTRY_POINT = 'pygments.filters'\n\n\ndef iter_entry_points(group_name):\n    groups = entry_points()\n    if hasattr(groups, 'select'):\n        # New interface in Python 3.10 and newer versions of the\n        # importlib_metadata backport.\n        return groups.select(group=group_name)\n    else:\n        # Older interface, deprecated in Python 3.10 and recent\n        # importlib_metadata, but we need it in Python 3.8 and 3.9.\n        return groups.get(group_name, [])\n\n\ndef find_plugin_lexers():\n    for entrypoint in iter_entry_points(LEXER_ENTRY_POINT):\n        yield entrypoint.load()\n\n\ndef find_plugin_formatters():\n    for entrypoint in iter_entry_points(FORMATTER_ENTRY_POINT):\n        yield entrypoint.name, entrypoint.load()\n\n\ndef find_plugin_styles():\n    for entrypoint in iter_entry_points(STYLE_ENTRY_POINT):\n        yield entrypoint.name, entrypoint.load()\n\n\ndef find_plugin_filters():\n    for entrypoint in iter_entry_points(FILTER_ENTRY_POINT):\n        yield entrypoint.name, entrypoint.load()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/plugin.py",
        "start": 1,
        "end": 72,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 247
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/plugin.py",
        "start": 1,
        "end": 72,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 72,
          "column": 2,
          "position": 247
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": "\"\"\"\n    pygments.modeline\n    ~~~~~~~~~~~~~~~~~\n\n    A simple modeline parser (based on pymodeline).\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nimport re\n\n__all__ = ['get_filetype_from_buffer']\n\n\nmodeline_re = re.compile(r'''\n    (?: vi | vim | ex ) (?: [<=>]? \\d* )? :\n    .* (?: ft | filetype | syn | syntax ) = ( [^:\\s]+ )\n''', re.VERBOSE)\n\n\ndef get_filetype_from_line(l): # noqa: E741\n    m = modeline_re.search(l)\n    if m:\n        return m.group(1)\n\n\ndef get_filetype_from_buffer(buf, max_lines=5):\n    \"\"\"\n    Scan the buffer for modelines and return filetype if one is found.\n    \"\"\"\n    lines = buf.splitlines()\n    for line in lines[-1:-max_lines-1:-1]:\n        ret = get_filetype_from_line(line)\n        if ret:\n            return ret\n    for i in range(max_lines, -1, -1):\n        if i < len(lines):\n            ret = get_filetype_from_line(lines[i])\n            if ret:\n                return ret\n\n    return None",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/modeline.py",
        "start": 1,
        "end": 43,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 209
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/modeline.py",
        "start": 1,
        "end": 43,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 43,
          "column": 5,
          "position": 209
        }
      }
    },
    {
      "format": "python",
      "lines": 195,
      "fragment": "pygments.regexopt import regex_opt\n\n__all__ = ['Lexer', 'RegexLexer', 'ExtendedRegexLexer', 'DelegatingLexer',\n           'LexerContext', 'include', 'inherit', 'bygroups', 'using', 'this',\n           'default', 'words', 'line_re']\n\nline_re = re.compile('.*?\\n')\n\n_encoding_map = [(b'\\xef\\xbb\\xbf', 'utf-8'),\n                 (b'\\xff\\xfe\\0\\0', 'utf-32'),\n                 (b'\\0\\0\\xfe\\xff', 'utf-32be'),\n                 (b'\\xff\\xfe', 'utf-16'),\n                 (b'\\xfe\\xff', 'utf-16be')]\n\n_default_analyse = staticmethod(lambda x: 0.0)\n\n\nclass LexerMeta(type):\n    \"\"\"\n    This metaclass automagically converts ``analyse_text`` methods into\n    static methods which always return float values.\n    \"\"\"\n\n    def __new__(mcs, name, bases, d):\n        if 'analyse_text' in d:\n            d['analyse_text'] = make_analysator(d['analyse_text'])\n        return type.__new__(mcs, name, bases, d)\n\n\nclass Lexer(metaclass=LexerMeta):\n    \"\"\"\n    Lexer for a specific language.\n\n    See also :doc:`lexerdevelopment`, a high-level guide to writing\n    lexers.\n\n    Lexer classes have attributes used for choosing the most appropriate\n    lexer based on various criteria.\n\n    .. autoattribute:: name\n       :no-value:\n    .. autoattribute:: aliases\n       :no-value:\n    .. autoattribute:: filenames\n       :no-value:\n    .. autoattribute:: alias_filenames\n    .. autoattribute:: mimetypes\n       :no-value:\n    .. autoattribute:: priority\n\n    Lexers included in Pygments should have two additional attributes:\n\n    .. autoattribute:: url\n       :no-value:\n    .. autoattribute:: version_added\n       :no-value:\n\n    Lexers included in Pygments may have additional attributes:\n\n    .. autoattribute:: _example\n       :no-value:\n\n    You can pass options to the constructor. The basic options recognized\n    by all lexers and processed by the base `Lexer` class are:\n\n    ``stripnl``\n        Strip leading and trailing newlines from the input (default: True).\n    ``stripall``\n        Strip all leading and trailing whitespace from the input\n        (default: False).\n    ``ensurenl``\n        Make sure that the input ends with a newline (default: True).  This\n        is required for some lexers that consume input linewise.\n\n        .. versionadded:: 1.3\n\n    ``tabsize``\n        If given and greater than 0, expand tabs in the input (default: 0).\n    ``encoding``\n        If given, must be an encoding name. This encoding will be used to\n        convert the input string to Unicode, if it is not already a Unicode\n        string (default: ``'guess'``, which uses a simple UTF-8 / Locale /\n        Latin1 detection.  Can also be ``'chardet'`` to use the chardet\n        library, if it is installed.\n    ``inencoding``\n        Overrides the ``encoding`` if given.\n    \"\"\"\n\n    #: Full name of the lexer, in human-readable form\n    name = None\n\n    #: A list of short, unique identifiers that can be used to look\n    #: up the lexer from a list, e.g., using `get_lexer_by_name()`.\n    aliases = []\n\n    #: A list of `fnmatch` patterns that match filenames which contain\n    #: content for this lexer. The patterns in this list should be unique among\n    #: all lexers.\n    filenames = []\n\n    #: A list of `fnmatch` patterns that match filenames which may or may not\n    #: contain content for this lexer. This list is used by the\n    #: :func:`.guess_lexer_for_filename()` function, to determine which lexers\n    #: are then included in guessing the correct one. That means that\n    #: e.g. every lexer for HTML and a template language should include\n    #: ``\\*.html`` in this list.\n    alias_filenames = []\n\n    #: A list of MIME types for content that can be lexed with this lexer.\n    mimetypes = []\n\n    #: Priority, should multiple lexers match and no content is provided\n    priority = 0\n\n    #: URL of the language specification/definition. Used in the Pygments\n    #: documentation. Set to an empty string to disable.\n    url = None\n\n    #: Version of Pygments in which the lexer was added.\n    version_added = None\n\n    #: Example file name. Relative to the ``tests/examplefiles`` directory.\n    #: This is used by the documentation generator to show an example.\n    _example = None\n\n    def __init__(self, **options):\n        \"\"\"\n        This constructor takes arbitrary options as keyword arguments.\n        Every subclass must first process its own options and then call\n        the `Lexer` constructor, since it processes the basic\n        options like `stripnl`.\n\n        An example looks like this:\n\n        .. sourcecode:: python\n\n           def __init__(self, **options):\n               self.compress = options.get('compress', '')\n               Lexer.__init__(self, **options)\n\n        As these options must all be specifiable as strings (due to the\n        command line usage), there are various utility functions\n        available to help with that, see `Utilities`_.\n        \"\"\"\n        self.options = options\n        self.stripnl = get_bool_opt(options, 'stripnl', True)\n        self.stripall = get_bool_opt(options, 'stripall', False)\n        self.ensurenl = get_bool_opt(options, 'ensurenl', True)\n        self.tabsize = get_int_opt(options, 'tabsize', 0)\n        self.encoding = options.get('encoding', 'guess')\n        self.encoding = options.get('inencoding') or self.encoding\n        self.filters = []\n        for filter_ in get_list_opt(options, 'filters', ()):\n            self.add_filter(filter_)\n\n    def __repr__(self):\n        if self.options:\n            return f'<pygments.lexers.{self.__class__.__name__} with {self.options!r}>'\n        else:\n            return f'<pygments.lexers.{self.__class__.__name__}>'\n\n    def add_filter(self, filter_, **options):\n        \"\"\"\n        Add a new stream filter to this lexer.\n        \"\"\"\n        if not isinstance(filter_, Filter):\n            filter_ = get_filter_by_name(filter_, **options)\n        self.filters.append(filter_)\n\n    def analyse_text(text):\n        \"\"\"\n        A static method which is called for lexer guessing.\n\n        It should analyse the text and return a float in the range\n        from ``0.0`` to ``1.0``.  If it returns ``0.0``, the lexer\n        will not be selected as the most probable one, if it returns\n        ``1.0``, it will be selected immediately.  This is used by\n        `guess_lexer`.\n\n        The `LexerMeta` metaclass automatically wraps this function so\n        that it works like a static method (no ``self`` or ``cls``\n        parameter) and the return value is automatically converted to\n        `float`. If the return value is an object that is boolean `False`\n        it's the same as if the return values was ``0.0``.\n        \"\"\"\n\n    def _preprocess_lexer_input(self, text):\n        \"\"\"Apply preprocessing such as decoding the input, removing BOM and normalizing newlines.\"\"\"\n\n        if not isinstance(text, str):\n            if self.encoding == 'guess':\n                text, _ = guess_decode(text)\n            elif self.encoding == 'chardet':\n                try:\n                    import",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexer.py",
        "start": 20,
        "end": 214,
        "startLoc": {
          "line": 20,
          "column": 2,
          "position": 91
        },
        "endLoc": {
          "line": 214,
          "column": 7,
          "position": 804
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexer.py",
        "start": 20,
        "end": 214,
        "startLoc": {
          "line": 20,
          "column": 2,
          "position": 111
        },
        "endLoc": {
          "line": 214,
          "column": 57,
          "position": 824
        }
      }
    },
    {
      "format": "python",
      "lines": 747,
      "fragment": "except ImportError as e:\n                    raise ImportError('To enable chardet encoding guessing, '\n                                      'please install the chardet library '\n                                      'from http://chardet.feedparser.org/') from e\n                # check for BOM first\n                decoded = None\n                for bom, encoding in _encoding_map:\n                    if text.startswith(bom):\n                        decoded = text[len(bom):].decode(encoding, 'replace')\n                        break\n                # no BOM found, so use chardet\n                if decoded is None:\n                    enc = chardet.detect(text[:1024])  # Guess using first 1KB\n                    decoded = text.decode(enc.get('encoding') or 'utf-8',\n                                          'replace')\n                text = decoded\n            else:\n                text = text.decode(self.encoding)\n                if text.startswith('\\ufeff'):\n                    text = text[len('\\ufeff'):]\n        else:\n            if text.startswith('\\ufeff'):\n                text = text[len('\\ufeff'):]\n\n        # text now *is* a unicode string\n        text = text.replace('\\r\\n', '\\n')\n        text = text.replace('\\r', '\\n')\n        if self.stripall:\n            text = text.strip()\n        elif self.stripnl:\n            text = text.strip('\\n')\n        if self.tabsize > 0:\n            text = text.expandtabs(self.tabsize)\n        if self.ensurenl and not text.endswith('\\n'):\n            text += '\\n'\n\n        return text\n\n    def get_tokens(self, text, unfiltered=False):\n        \"\"\"\n        This method is the basic interface of a lexer. It is called by\n        the `highlight()` function. It must process the text and return an\n        iterable of ``(tokentype, value)`` pairs from `text`.\n\n        Normally, you don't need to override this method. The default\n        implementation processes the options recognized by all lexers\n        (`stripnl`, `stripall` and so on), and then yields all tokens\n        from `get_tokens_unprocessed()`, with the ``index`` dropped.\n\n        If `unfiltered` is set to `True`, the filtering mechanism is\n        bypassed even if filters are defined.\n        \"\"\"\n        text = self._preprocess_lexer_input(text)\n\n        def streamer():\n            for _, t, v in self.get_tokens_unprocessed(text):\n                yield t, v\n        stream = streamer()\n        if not unfiltered:\n            stream = apply_filters(stream, self.filters, self)\n        return stream\n\n    def get_tokens_unprocessed(self, text):\n        \"\"\"\n        This method should process the text and return an iterable of\n        ``(index, tokentype, value)`` tuples where ``index`` is the starting\n        position of the token within the input text.\n\n        It must be overridden by subclasses. It is recommended to\n        implement it as a generator to maximize effectiveness.\n        \"\"\"\n        raise NotImplementedError\n\n\nclass DelegatingLexer(Lexer):\n    \"\"\"\n    This lexer takes two lexer as arguments. A root lexer and\n    a language lexer. First everything is scanned using the language\n    lexer, afterwards all ``Other`` tokens are lexed using the root\n    lexer.\n\n    The lexers from the ``template`` lexer package use this base lexer.\n    \"\"\"\n\n    def __init__(self, _root_lexer, _language_lexer, _needle=Other, **options):\n        self.root_lexer = _root_lexer(**options)\n        self.language_lexer = _language_lexer(**options)\n        self.needle = _needle\n        Lexer.__init__(self, **options)\n\n    def get_tokens_unprocessed(self, text):\n        buffered = ''\n        insertions = []\n        lng_buffer = []\n        for i, t, v in self.language_lexer.get_tokens_unprocessed(text):\n            if t is self.needle:\n                if lng_buffer:\n                    insertions.append((len(buffered), lng_buffer))\n                    lng_buffer = []\n                buffered += v\n            else:\n                lng_buffer.append((i, t, v))\n        if lng_buffer:\n            insertions.append((len(buffered), lng_buffer))\n        return do_insertions(insertions,\n                             self.root_lexer.get_tokens_unprocessed(buffered))\n\n\n# ------------------------------------------------------------------------------\n# RegexLexer and ExtendedRegexLexer\n#\n\n\nclass include(str):  # pylint: disable=invalid-name\n    \"\"\"\n    Indicates that a state should include rules from another state.\n    \"\"\"\n    pass\n\n\nclass _inherit:\n    \"\"\"\n    Indicates the a state should inherit from its superclass.\n    \"\"\"\n    def __repr__(self):\n        return 'inherit'\n\ninherit = _inherit()  # pylint: disable=invalid-name\n\n\nclass combined(tuple):  # pylint: disable=invalid-name\n    \"\"\"\n    Indicates a state combined from multiple states.\n    \"\"\"\n\n    def __new__(cls, *args):\n        return tuple.__new__(cls, args)\n\n    def __init__(self, *args):\n        # tuple.__init__ doesn't do anything\n        pass\n\n\nclass _PseudoMatch:\n    \"\"\"\n    A pseudo match object constructed from a string.\n    \"\"\"\n\n    def __init__(self, start, text):\n        self._text = text\n        self._start = start\n\n    def start(self, arg=None):\n        return self._start\n\n    def end(self, arg=None):\n        return self._start + len(self._text)\n\n    def group(self, arg=None):\n        if arg:\n            raise IndexError('No such group')\n        return self._text\n\n    def groups(self):\n        return (self._text,)\n\n    def groupdict(self):\n        return {}\n\n\ndef bygroups(*args):\n    \"\"\"\n    Callback that yields multiple actions for each group in the match.\n    \"\"\"\n    def callback(lexer, match, ctx=None):\n        for i, action in enumerate(args):\n            if action is None:\n                continue\n            elif type(action) is _TokenType:\n                data = match.group(i + 1)\n                if data:\n                    yield match.start(i + 1), action, data\n            else:\n                data = match.group(i + 1)\n                if data is not None:\n                    if ctx:\n                        ctx.pos = match.start(i + 1)\n                    for item in action(lexer,\n                                       _PseudoMatch(match.start(i + 1), data), ctx):\n                        if item:\n                            yield item\n        if ctx:\n            ctx.pos = match.end()\n    return callback\n\n\nclass _This:\n    \"\"\"\n    Special singleton used for indicating the caller class.\n    Used by ``using``.\n    \"\"\"\n\nthis = _This()\n\n\ndef using(_other, **kwargs):\n    \"\"\"\n    Callback that processes the match with a different lexer.\n\n    The keyword arguments are forwarded to the lexer, except `state` which\n    is handled separately.\n\n    `state` specifies the state that the new lexer will start in, and can\n    be an enumerable such as ('root', 'inline', 'string') or a simple\n    string which is assumed to be on top of the root state.\n\n    Note: For that to work, `_other` must not be an `ExtendedRegexLexer`.\n    \"\"\"\n    gt_kwargs = {}\n    if 'state' in kwargs:\n        s = kwargs.pop('state')\n        if isinstance(s, (list, tuple)):\n            gt_kwargs['stack'] = s\n        else:\n            gt_kwargs['stack'] = ('root', s)\n\n    if _other is this:\n        def callback(lexer, match, ctx=None):\n            # if keyword arguments are given the callback\n            # function has to create a new lexer instance\n            if kwargs:\n                # XXX: cache that somehow\n                kwargs.update(lexer.options)\n                lx = lexer.__class__(**kwargs)\n            else:\n                lx = lexer\n            s = match.start()\n            for i, t, v in lx.get_tokens_unprocessed(match.group(), **gt_kwargs):\n                yield i + s, t, v\n            if ctx:\n                ctx.pos = match.end()\n    else:\n        def callback(lexer, match, ctx=None):\n            # XXX: cache that somehow\n            kwargs.update(lexer.options)\n            lx = _other(**kwargs)\n\n            s = match.start()\n            for i, t, v in lx.get_tokens_unprocessed(match.group(), **gt_kwargs):\n                yield i + s, t, v\n            if ctx:\n                ctx.pos = match.end()\n    return callback\n\n\nclass default:\n    \"\"\"\n    Indicates a state or state action (e.g. #pop) to apply.\n    For example default('#pop') is equivalent to ('', Token, '#pop')\n    Note that state tuples may be used as well.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    def __init__(self, state):\n        self.state = state\n\n\nclass words(Future):\n    \"\"\"\n    Indicates a list of literal words that is transformed into an optimized\n    regex that matches any of the words.\n\n    .. versionadded:: 2.0\n    \"\"\"\n    def __init__(self, words, prefix='', suffix=''):\n        self.words = words\n        self.prefix = prefix\n        self.suffix = suffix\n\n    def get(self):\n        return regex_opt(self.words, prefix=self.prefix, suffix=self.suffix)\n\n\nclass RegexLexerMeta(LexerMeta):\n    \"\"\"\n    Metaclass for RegexLexer, creates the self._tokens attribute from\n    self.tokens on the first instantiation.\n    \"\"\"\n\n    def _process_regex(cls, regex, rflags, state):\n        \"\"\"Preprocess the regular expression component of a token definition.\"\"\"\n        if isinstance(regex, Future):\n            regex = regex.get()\n        return re.compile(regex, rflags).match\n\n    def _process_token(cls, token):\n        \"\"\"Preprocess the token component of a token definition.\"\"\"\n        assert type(token) is _TokenType or callable(token), \\\n            f'token type must be simple type or callable, not {token!r}'\n        return token\n\n    def _process_new_state(cls, new_state, unprocessed, processed):\n        \"\"\"Preprocess the state transition action of a token definition.\"\"\"\n        if isinstance(new_state, str):\n            # an existing state\n            if new_state == '#pop':\n                return -1\n            elif new_state in unprocessed:\n                return (new_state,)\n            elif new_state == '#push':\n                return new_state\n            elif new_state[:5] == '#pop:':\n                return -int(new_state[5:])\n            else:\n                assert False, f'unknown new state {new_state!r}'\n        elif isinstance(new_state, combined):\n            # combine a new state from existing ones\n            tmp_state = '_tmp_%d' % cls._tmpname\n            cls._tmpname += 1\n            itokens = []\n            for istate in new_state:\n                assert istate != new_state, f'circular state ref {istate!r}'\n                itokens.extend(cls._process_state(unprocessed,\n                                                  processed, istate))\n            processed[tmp_state] = itokens\n            return (tmp_state,)\n        elif isinstance(new_state, tuple):\n            # push more than one state\n            for istate in new_state:\n                assert (istate in unprocessed or\n                        istate in ('#pop', '#push')), \\\n                    'unknown new state ' + istate\n            return new_state\n        else:\n            assert False, f'unknown new state def {new_state!r}'\n\n    def _process_state(cls, unprocessed, processed, state):\n        \"\"\"Preprocess a single state definition.\"\"\"\n        assert isinstance(state, str), f\"wrong state name {state!r}\"\n        assert state[0] != '#', f\"invalid state name {state!r}\"\n        if state in processed:\n            return processed[state]\n        tokens = processed[state] = []\n        rflags = cls.flags\n        for tdef in unprocessed[state]:\n            if isinstance(tdef, include):\n                # it's a state reference\n                assert tdef != state, f\"circular state reference {state!r}\"\n                tokens.extend(cls._process_state(unprocessed, processed,\n                                                 str(tdef)))\n                continue\n            if isinstance(tdef, _inherit):\n                # should be processed already, but may not in the case of:\n                # 1. the state has no counterpart in any parent\n                # 2. the state includes more than one 'inherit'\n                continue\n            if isinstance(tdef, default):\n                new_state = cls._process_new_state(tdef.state, unprocessed, processed)\n                tokens.append((re.compile('').match, None, new_state))\n                continue\n\n            assert type(tdef) is tuple, f\"wrong rule def {tdef!r}\"\n\n            try:\n                rex = cls._process_regex(tdef[0], rflags, state)\n            except Exception as err:\n                raise ValueError(f\"uncompilable regex {tdef[0]!r} in state {state!r} of {cls!r}: {err}\") from err\n\n            token = cls._process_token(tdef[1])\n\n            if len(tdef) == 2:\n                new_state = None\n            else:\n                new_state = cls._process_new_state(tdef[2],\n                                                   unprocessed, processed)\n\n            tokens.append((rex, token, new_state))\n        return tokens\n\n    def process_tokendef(cls, name, tokendefs=None):\n        \"\"\"Preprocess a dictionary of token definitions.\"\"\"\n        processed = cls._all_tokens[name] = {}\n        tokendefs = tokendefs or cls.tokens[name]\n        for state in list(tokendefs):\n            cls._process_state(tokendefs, processed, state)\n        return processed\n\n    def get_tokendefs(cls):\n        \"\"\"\n        Merge tokens from superclasses in MRO order, returning a single tokendef\n        dictionary.\n\n        Any state that is not defined by a subclass will be inherited\n        automatically.  States that *are* defined by subclasses will, by\n        default, override that state in the superclass.  If a subclass wishes to\n        inherit definitions from a superclass, it can use the special value\n        \"inherit\", which will cause the superclass' state definition to be\n        included at that point in the state.\n        \"\"\"\n        tokens = {}\n        inheritable = {}\n        for c in cls.__mro__:\n            toks = c.__dict__.get('tokens', {})\n\n            for state, items in toks.items():\n                curitems = tokens.get(state)\n                if curitems is None:\n                    # N.b. because this is assigned by reference, sufficiently\n                    # deep hierarchies are processed incrementally (e.g. for\n                    # A(B), B(C), C(RegexLexer), B will be premodified so X(B)\n                    # will not see any inherits in B).\n                    tokens[state] = items\n                    try:\n                        inherit_ndx = items.index(inherit)\n                    except ValueError:\n                        continue\n                    inheritable[state] = inherit_ndx\n                    continue\n\n                inherit_ndx = inheritable.pop(state, None)\n                if inherit_ndx is None:\n                    continue\n\n                # Replace the \"inherit\" value with the items\n                curitems[inherit_ndx:inherit_ndx+1] = items\n                try:\n                    # N.b. this is the index in items (that is, the superclass\n                    # copy), so offset required when storing below.\n                    new_inh_ndx = items.index(inherit)\n                except ValueError:\n                    pass\n                else:\n                    inheritable[state] = inherit_ndx + new_inh_ndx\n\n        return tokens\n\n    def __call__(cls, *args, **kwds):\n        \"\"\"Instantiate cls after preprocessing its token definitions.\"\"\"\n        if '_tokens' not in cls.__dict__:\n            cls._all_tokens = {}\n            cls._tmpname = 0\n            if hasattr(cls, 'token_variants') and cls.token_variants:\n                # don't process yet\n                pass\n            else:\n                cls._tokens = cls.process_tokendef('', cls.get_tokendefs())\n\n        return type.__call__(cls, *args, **kwds)\n\n\nclass RegexLexer(Lexer, metaclass=RegexLexerMeta):\n    \"\"\"\n    Base for simple stateful regular expression-based lexers.\n    Simplifies the lexing process so that you need only\n    provide a list of states and regular expressions.\n    \"\"\"\n\n    #: Flags for compiling the regular expressions.\n    #: Defaults to MULTILINE.\n    flags = re.MULTILINE\n\n    #: At all time there is a stack of states. Initially, the stack contains\n    #: a single state 'root'. The top of the stack is called \"the current state\".\n    #:\n    #: Dict of ``{'state': [(regex, tokentype, new_state), ...], ...}``\n    #:\n    #: ``new_state`` can be omitted to signify no state transition.\n    #: If ``new_state`` is a string, it is pushed on the stack. This ensure\n    #: the new current state is ``new_state``.\n    #: If ``new_state`` is a tuple of strings, all of those strings are pushed\n    #: on the stack and the current state will be the last element of the list.\n    #: ``new_state`` can also be ``combined('state1', 'state2', ...)``\n    #: to signify a new, anonymous state combined from the rules of two\n    #: or more existing ones.\n    #: Furthermore, it can be '#pop' to signify going back one step in\n    #: the state stack, or '#push' to push the current state on the stack\n    #: again. Note that if you push while in a combined state, the combined\n    #: state itself is pushed, and not only the state in which the rule is\n    #: defined.\n    #:\n    #: The tuple can also be replaced with ``include('state')``, in which\n    #: case the rules from the state named by the string are included in the\n    #: current one.\n    tokens = {}\n\n    def get_tokens_unprocessed(self, text, stack=('root',)):\n        \"\"\"\n        Split ``text`` into (tokentype, text) pairs.\n\n        ``stack`` is the initial stack (default: ``['root']``)\n        \"\"\"\n        pos = 0\n        tokendefs = self._tokens\n        statestack = list(stack)\n        statetokens = tokendefs[statestack[-1]]\n        while 1:\n            for rexmatch, action, new_state in statetokens:\n                m = rexmatch(text, pos)\n                if m:\n                    if action is not None:\n                        if type(action) is _TokenType:\n                            yield pos, action, m.group()\n                        else:\n                            yield from action(self, m)\n                    pos = m.end()\n                    if new_state is not None:\n                        # state transition\n                        if isinstance(new_state, tuple):\n                            for state in new_state:\n                                if state == '#pop':\n                                    if len(statestack) > 1:\n                                        statestack.pop()\n                                elif state == '#push':\n                                    statestack.append(statestack[-1])\n                                else:\n                                    statestack.append(state)\n                        elif isinstance(new_state, int):\n                            # pop, but keep at least one state on the stack\n                            # (random code leading to unexpected pops should\n                            # not allow exceptions)\n                            if abs(new_state) >= len(statestack):\n                                del statestack[1:]\n                            else:\n                                del statestack[new_state:]\n                        elif new_state == '#push':\n                            statestack.append(statestack[-1])\n                        else:\n                            assert False, f\"wrong state def: {new_state!r}\"\n                        statetokens = tokendefs[statestack[-1]]\n                    break\n            else:\n                # We are here only if all state tokens have been considered\n                # and there was not a match on any of them.\n                try:\n                    if text[pos] == '\\n':\n                        # at EOL, reset state to \"root\"\n                        statestack = ['root']\n                        statetokens = tokendefs['root']\n                        yield pos, Whitespace, '\\n'\n                        pos += 1\n                        continue\n                    yield pos, Error, text[pos]\n                    pos += 1\n                except IndexError:\n                    break\n\n\nclass LexerContext:\n    \"\"\"\n    A helper object that holds lexer position data.\n    \"\"\"\n\n    def __init__(self, text, pos, stack=None, end=None):\n        self.text = text\n        self.pos = pos\n        self.end = end or len(text)  # end=0 not supported ;-)\n        self.stack = stack or ['root']\n\n    def __repr__(self):\n        return f'LexerContext({self.text!r}, {self.pos!r}, {self.stack!r})'\n\n\nclass ExtendedRegexLexer(RegexLexer):\n    \"\"\"\n    A RegexLexer that uses a context object to store its state.\n    \"\"\"\n\n    def get_tokens_unprocessed(self, text=None, context=None):\n        \"\"\"\n        Split ``text`` into (tokentype, text) pairs.\n        If ``context`` is given, use this lexer context instead.\n        \"\"\"\n        tokendefs = self._tokens\n        if not context:\n            ctx = LexerContext(text, 0)\n            statetokens = tokendefs['root']\n        else:\n            ctx = context\n            statetokens = tokendefs[ctx.stack[-1]]\n            text = ctx.text\n        while 1:\n            for rexmatch, action, new_state in statetokens:\n                m = rexmatch(text, ctx.pos, ctx.end)\n                if m:\n                    if action is not None:\n                        if type(action) is _TokenType:\n                            yield ctx.pos, action, m.group()\n                            ctx.pos = m.end()\n                        else:\n                            yield from action(self, m, ctx)\n                            if not new_state:\n                                # altered the state stack?\n                                statetokens = tokendefs[ctx.stack[-1]]\n                    # CAUTION: callback must set ctx.pos!\n                    if new_state is not None:\n                        # state transition\n                        if isinstance(new_state, tuple):\n                            for state in new_state:\n                                if state == '#pop':\n                                    if len(ctx.stack) > 1:\n                                        ctx.stack.pop()\n                                elif state == '#push':\n                                    ctx.stack.append(ctx.stack[-1])\n                                else:\n                                    ctx.stack.append(state)\n                        elif isinstance(new_state, int):\n                            # see RegexLexer for why this check is made\n                            if abs(new_state) >= len(ctx.stack):\n                                del ctx.stack[1:]\n                            else:\n                                del ctx.stack[new_state:]\n                        elif new_state == '#push':\n                            ctx.stack.append(ctx.stack[-1])\n                        else:\n                            assert False, f\"wrong state def: {new_state!r}\"\n                        statetokens = tokendefs[ctx.stack[-1]]\n                    break\n            else:\n                try:\n                    if ctx.pos >= ctx.end:\n                        break\n                    if text[ctx.pos] == '\\n':\n                        # at EOL, reset state to \"root\"\n                        ctx.stack = ['root']\n                        statetokens = tokendefs['root']\n                        yield ctx.pos, Text, '\\n'\n                        ctx.pos += 1\n                        continue\n                    yield ctx.pos, Error, text[ctx.pos]\n                    ctx.pos += 1\n                except IndexError:\n                    break\n\n\ndef do_insertions(insertions, tokens):\n    \"\"\"\n    Helper for lexers which must combine the results of several\n    sublexers.\n\n    ``insertions`` is a list of ``(index, itokens)`` pairs.\n    Each ``itokens`` iterable should be inserted at position\n    ``index`` into the token stream given by the ``tokens``\n    argument.\n\n    The result is a combined token stream.\n\n    TODO: clean up the code here.\n    \"\"\"\n    insertions = iter(insertions)\n    try:\n        index, itokens = next(insertions)\n    except StopIteration:\n        # no insertions\n        yield from tokens\n        return\n\n    realpos = None\n    insleft = True\n\n    # iterate over the token stream where we want to insert\n    # the tokens from the insertion list.\n    for i, t, v in tokens:\n        # first iteration. store the position of first item\n        if realpos is None:\n            realpos = i\n        oldi = 0\n        while insleft and i + len(v) >= index:\n            tmpval = v[oldi:index - i]\n            if tmpval:\n                yield realpos, t, tmpval\n                realpos += len(tmpval)\n            for it_index, it_token, it_value in itokens:\n                yield realpos, it_token, it_value\n                realpos += len(it_value)\n            oldi = index - i\n            try:\n                index, itokens = next(insertions)\n            except StopIteration:\n                insleft = False\n                break  # not strictly necessary\n        if oldi < len(v):\n            yield realpos, t, v[oldi:]\n            realpos += len(v) - oldi\n\n    # leftover tokens\n    while insleft:\n        # no normal tokens, set realpos to zero\n        realpos = realpos or 0\n        for p, t, v in itokens:\n            yield realpos, t, v\n            realpos += len(v)\n        try:\n            index, itokens = next(insertions)\n        except StopIteration:\n            insleft = False\n            break  # not strictly necessary\n\n\nclass ProfilingRegexLexerMeta(RegexLexerMeta):\n    \"\"\"Metaclass for ProfilingRegexLexer, collects regex timing info.\"\"\"\n\n    def _process_regex(cls, regex, rflags, state):\n        if isinstance(regex, words):\n            rex = regex_opt(regex.words, prefix=regex.prefix,\n                            suffix=regex.suffix)\n        else:\n            rex = regex\n        compiled = re.compile(rex, rflags)\n\n        def match_func(text, pos, endpos=sys.maxsize):\n            info = cls._prof_data[-1].setdefault((state, rex), [0, 0.0])\n            t0 = time.time()\n            res = compiled.match(text, pos, endpos)\n            t1 = time.time()\n            info[0] += 1\n            info[1] += t1 - t0\n            return res\n        return match_func\n\n\nclass ProfilingRegexLexer(RegexLexer, metaclass=ProfilingRegexLexerMeta):\n    \"\"\"Drop-in replacement for RegexLexer that does profiling of its regexes.\"\"\"\n\n    _prof_data = []\n    _prof_sort_index = 4  # defaults to time per call\n\n    def get_tokens_unprocessed(self, text, stack=('root',)):\n        # this needs to be a stack, since using(this) will produce nested calls\n        self.__class__._prof_data.append({})\n        yield from RegexLexer.get_tokens_unprocessed(self, text, stack)\n        rawdata = self.__class__._prof_data.pop()\n        data = sorted(((s, repr(r).strip('u\\'').replace('\\\\\\\\', '\\\\')[:65],\n                        n, 1000 * t, 1000 * t / n)\n                       for ((s, r), (n, t)) in rawdata.items()),\n                      key=lambda x: x[self._prof_sort_index],\n                      reverse=True)\n        sum_total = sum(x[3] for x in data)\n\n        print()\n        print('Profiling result for %s lexing %d chars in %.3f ms' %\n              (self.__class__.__name__, len(text), sum_total))\n        print('=' * 110)\n        print('%-20s %-64s ncalls  tottime  percall' % ('state', 'regex'))\n        print('-' * 110)\n        for d in data:\n            print('%-20s %-65s %5d %8.4f %8.4f' % d)\n        print('=' * 110)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/lexer.py",
        "start": 215,
        "end": 961,
        "startLoc": {
          "line": 215,
          "column": 17,
          "position": 809
        },
        "endLoc": {
          "line": 961,
          "column": 2,
          "position": 5794
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/lexer.py",
        "start": 217,
        "end": 963,
        "startLoc": {
          "line": 217,
          "column": 17,
          "position": 838
        },
        "endLoc": {
          "line": 963,
          "column": 2,
          "position": 5823
        }
      }
    },
    {
      "format": "python",
      "lines": 116,
      "fragment": "pygments.styles import get_style_by_name\n\n__all__ = ['Formatter']\n\n\ndef _lookup_style(style):\n    if isinstance(style, str):\n        return get_style_by_name(style)\n    return style\n\n\nclass Formatter:\n    \"\"\"\n    Converts a token stream to text.\n\n    Formatters should have attributes to help selecting them. These\n    are similar to the corresponding :class:`~pygments.lexer.Lexer`\n    attributes.\n\n    .. autoattribute:: name\n       :no-value:\n\n    .. autoattribute:: aliases\n       :no-value:\n\n    .. autoattribute:: filenames\n       :no-value:\n\n    You can pass options as keyword arguments to the constructor.\n    All formatters accept these basic options:\n\n    ``style``\n        The style to use, can be a string or a Style subclass\n        (default: \"default\"). Not used by e.g. the\n        TerminalFormatter.\n    ``full``\n        Tells the formatter to output a \"full\" document, i.e.\n        a complete self-contained document. This doesn't have\n        any effect for some formatters (default: false).\n    ``title``\n        If ``full`` is true, the title that should be used to\n        caption the document (default: '').\n    ``encoding``\n        If given, must be an encoding name. This will be used to\n        convert the Unicode token strings to byte strings in the\n        output. If it is \"\" or None, Unicode strings will be written\n        to the output file, which most file-like objects do not\n        support (default: None).\n    ``outencoding``\n        Overrides ``encoding`` if given.\n\n    \"\"\"\n\n    #: Full name for the formatter, in human-readable form.\n    name = None\n\n    #: A list of short, unique identifiers that can be used to lookup\n    #: the formatter from a list, e.g. using :func:`.get_formatter_by_name()`.\n    aliases = []\n\n    #: A list of fnmatch patterns that match filenames for which this\n    #: formatter can produce output. The patterns in this list should be unique\n    #: among all formatters.\n    filenames = []\n\n    #: If True, this formatter outputs Unicode strings when no encoding\n    #: option is given.\n    unicodeoutput = True\n\n    def __init__(self, **options):\n        \"\"\"\n        As with lexers, this constructor takes arbitrary optional arguments,\n        and if you override it, you should first process your own options, then\n        call the base class implementation.\n        \"\"\"\n        self.style = _lookup_style(options.get('style', 'default'))\n        self.full = get_bool_opt(options, 'full', False)\n        self.title = options.get('title', '')\n        self.encoding = options.get('encoding', None) or None\n        if self.encoding in ('guess', 'chardet'):\n            # can happen for e.g. pygmentize -O encoding=guess\n            self.encoding = 'utf-8'\n        self.encoding = options.get('outencoding') or self.encoding\n        self.options = options\n\n    def get_style_defs(self, arg=''):\n        \"\"\"\n        This method must return statements or declarations suitable to define\n        the current style for subsequent highlighted text (e.g. CSS classes\n        in the `HTMLFormatter`).\n\n        The optional argument `arg` can be used to modify the generation and\n        is formatter dependent (it is standardized because it can be given on\n        the command line).\n\n        This method is called by the ``-S`` :doc:`command-line option <cmdline>`,\n        the `arg` is then given by the ``-a`` option.\n        \"\"\"\n        return ''\n\n    def format(self, tokensource, outfile):\n        \"\"\"\n        This method must format the tokens from the `tokensource` iterable and\n        write the formatted version to the file object `outfile`.\n\n        Formatter options can control how exactly the tokens are converted.\n        \"\"\"\n        if self.encoding:\n            # wrap the outfile in a StreamWriter\n            outfile = codecs.lookup(self.encoding)[3](outfile)\n        return self.format_unencoded(tokensource, outfile)\n\n    # Allow writing Formatter[str] or Formatter[bytes]. That's equivalent to\n    # Formatter. This helps when using third-party type stubs from typeshed.\n    def __class_getitem__(cls, name):\n        return cls",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/formatter.py",
        "start": 14,
        "end": 129,
        "startLoc": {
          "line": 14,
          "column": 2,
          "position": 20
        },
        "endLoc": {
          "line": 129,
          "column": 4,
          "position": 399
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/formatter.py",
        "start": 14,
        "end": 129,
        "startLoc": {
          "line": 14,
          "column": 2,
          "position": 28
        },
        "endLoc": {
          "line": 129,
          "column": 4,
          "position": 407
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "\"\"\"\n    pygments.filter\n    ~~~~~~~~~~~~~~~\n\n    Module that implements the default filter.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\n\ndef apply_filters(stream, filters, lexer=None):\n    \"\"\"\n    Use this method to apply an iterable of filters to\n    a stream. If lexer is given it's forwarded to the\n    filter, otherwise the filter receives `None`.\n    \"\"\"\n    def _apply(filter_, stream):\n        yield from filter_.filter(lexer, stream)\n    for filter_ in filters:\n        stream = _apply(filter_, stream)\n    return stream\n\n\ndef simplefilter(f):\n    \"\"\"\n    Decorator that converts a function into a filter::\n\n        @simplefilter\n        def lowercase(self, lexer, stream, options):\n            for ttype, value in stream:\n                yield ttype, value.lower()\n    \"\"\"\n    return type(f.__name__, (FunctionFilter,), {\n        '__module__': getattr(f, '__module__'),\n        '__doc__': f.__doc__,\n        'function': f,\n    })\n\n\nclass Filter:\n    \"\"\"\n    Default filter. Subclass this class or use the `simplefilter`\n    decorator to create own filters.\n    \"\"\"\n\n    def __init__(self, **options):\n        self.options = options\n\n    def filter(self, lexer, stream):\n        raise NotImplementedError()\n\n\nclass FunctionFilter(Filter):\n    \"\"\"\n    Abstract class used by `simplefilter` to create simple\n    function filters on the fly. The `simplefilter` decorator\n    automatically creates subclasses of this class for\n    functions passed to it.\n    \"\"\"\n    function = None\n\n    def __init__(self, **options):\n        if not hasattr(self, 'function'):\n            raise TypeError(f'{self.__class__.__name__!r} used without bound function')\n        Filter.__init__(self, **options)\n\n    def filter(self, lexer, stream):\n        # pylint: disable=not-callable\n        yield from self.function(lexer, stream, self.options)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/filter.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 304
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/filter.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 304
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "\"\"\"\n    pygments.console\n    ~~~~~~~~~~~~~~~~\n\n    Format colored console output.\n\n    :copyright: Copyright 2006-2025 by the Pygments team, see AUTHORS.\n    :license: BSD, see LICENSE for details.\n\"\"\"\n\nesc = \"\\x1b[\"\n\ncodes = {}\ncodes[\"\"] = \"\"\ncodes[\"reset\"] = esc + \"39;49;00m\"\n\ncodes[\"bold\"] = esc + \"01m\"\ncodes[\"faint\"] = esc + \"02m\"\ncodes[\"standout\"] = esc + \"03m\"\ncodes[\"underline\"] = esc + \"04m\"\ncodes[\"blink\"] = esc + \"05m\"\ncodes[\"overline\"] = esc + \"06m\"\n\ndark_colors = [\"black\", \"red\", \"green\", \"yellow\", \"blue\",\n               \"magenta\", \"cyan\", \"gray\"]\nlight_colors = [\"brightblack\", \"brightred\", \"brightgreen\", \"brightyellow\", \"brightblue\",\n                \"brightmagenta\", \"brightcyan\", \"white\"]\n\nx = 30\nfor dark, light in zip(dark_colors, light_colors):\n    codes[dark] = esc + \"%im\" % x\n    codes[light] = esc + \"%im\" % (60 + x)\n    x += 1\n\ndel dark, light, x\n\ncodes[\"white\"] = codes[\"bold\"]\n\n\ndef reset_color():\n    return codes[\"reset\"]\n\n\ndef colorize(color_key, text):\n    return codes[color_key] + text + codes[\"reset\"]\n\n\ndef ansiformat(attr, text):\n    \"\"\"\n    Format ``text`` with a color and/or some attributes::\n\n        color       normal color\n        *color*     bold color\n        _color_     underlined color\n        +color+     blinking color\n    \"\"\"\n    result = []\n    if attr[:1] == attr[-1:] == '+':\n        result.append(codes['blink'])\n        attr = attr[1:-1]\n    if attr[:1] == attr[-1:] == '*':\n        result.append(codes['bold'])\n        attr = attr[1:-1]\n    if attr[:1] == attr[-1:] == '_':\n        result.append(codes['underline'])\n        attr = attr[1:-1]\n    result.append(codes[attr])\n    result.append(text)\n    result.append(codes['reset'])\n    return ''.join(result)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/console.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 529
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/console.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 529
        }
      }
    },
    {
      "format": "python",
      "lines": 26,
      "fragment": "pygments.lexer import RegexLexer\n        if isinstance(lexer, type) and issubclass(lexer, RegexLexer):\n            raise TypeError('lex() argument must be a lexer instance, '\n                            'not a class')\n        raise\n\n\ndef format(tokens, formatter, outfile=None):  # pylint: disable=redefined-builtin\n    \"\"\"\n    Format ``tokens`` (an iterable of tokens) with the formatter ``formatter``\n    (a `Formatter` instance).\n\n    If ``outfile`` is given and a valid file object (an object with a\n    ``write`` method), the result will be written to it, otherwise it\n    is returned as a string.\n    \"\"\"\n    try:\n        if not outfile:\n            realoutfile = getattr(formatter, 'encoding', None) and BytesIO() or StringIO()\n            formatter.format(tokens, realoutfile)\n            return realoutfile.getvalue()\n        else:\n            formatter.format(tokens, outfile)\n    except TypeError:\n        # Heuristic to catch a common mistake.\n        from pygments",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pygments/__init__.py",
        "start": 45,
        "end": 70,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 83
        },
        "endLoc": {
          "line": 70,
          "column": 9,
          "position": 237
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/pygments/__init__.py",
        "start": 45,
        "end": 70,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 87
        },
        "endLoc": {
          "line": 70,
          "column": 4,
          "position": 241
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": ",\n        /,\n        *,\n        strict: bool | None = None,\n        extra: ExtraValues | None = None,\n        context: Any | None = None,\n        experimental_allow_partial: bool | Literal['off', 'on', 'trailing-strings'] = False,\n        by_alias: bool | None = None,\n        by_name: bool | None = None,\n    ) -> T:\n        \"\"\"Validate object contains string data against the model.\n\n        Args:\n            obj: The object contains string data to validate.\n            strict: Whether to strictly check types.\n            extra: Whether to ignore, allow, or forbid extra data during model validation.\n                See the [`extra` configuration value][pydantic.ConfigDict.extra] for details.\n            context: Additional context to use during validation.\n            experimental_allow_partial: **Experimental** whether to enable\n                [partial validation](../concepts/experimental.md#partial-validation), e.g. to process streams.\n                * False / 'off': Default behavior, no partial validation.\n                * True / 'on': Enable partial validation.\n                * 'trailing-strings': Enable partial validation and allow trailing strings in the input.\n            by_alias: Whether to use the field's alias when validating against the provided input data.\n            by_name: Whether to use the field's name when validating against the provided input data.\n\n        Returns:\n            The validated object.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/type_adapter.py",
        "start": 504,
        "end": 532,
        "startLoc": {
          "line": 504,
          "column": 4,
          "position": 2590
        },
        "endLoc": {
          "line": 532,
          "column": 12,
          "position": 2709
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/type_adapter.py",
        "start": 454,
        "end": 485,
        "startLoc": {
          "line": 454,
          "column": 10,
          "position": 2360
        },
        "endLoc": {
          "line": 485,
          "column": 12,
          "position": 2479
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": ",\n        include: IncEx | None = None,\n        exclude: IncEx | None = None,\n        by_alias: bool | None = None,\n        exclude_unset: bool = False,\n        exclude_defaults: bool = False,\n        exclude_none: bool = False,\n        exclude_computed_fields: bool = False,\n        round_trip: bool = False,\n        warnings: bool | Literal['none', 'warn', 'error'] = True,\n        fallback: Callable[[Any], Any] | None = None,\n        serialize_as_any: bool = False,\n        context: Any | None = None,\n    ) -> bytes",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/type_adapter.py",
        "start": 628,
        "end": 641,
        "startLoc": {
          "line": 628,
          "column": 6,
          "position": 3252
        },
        "endLoc": {
          "line": 641,
          "column": 6,
          "position": 3433
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/type_adapter.py",
        "start": 566,
        "end": 579,
        "startLoc": {
          "line": 566,
          "column": 9,
          "position": 2920
        },
        "endLoc": {
          "line": 579,
          "column": 4,
          "position": 3101
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "json_schema_input_type: Any = PydanticUndefined\n\n    def __get_pydantic_core_schema__(self, source_type: Any, handler: GetCoreSchemaHandler) -> core_schema.CoreSchema:\n        schema = handler(source_type)\n        input_schema = (\n            None\n            if self.json_schema_input_type is PydanticUndefined\n            else handler.generate_schema(self.json_schema_input_type)\n        )\n\n        info_arg = _inspect_validator(self.func, mode='wrap'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/functional_validators.py",
        "start": 298,
        "end": 308,
        "startLoc": {
          "line": 298,
          "column": 5,
          "position": 1156
        },
        "endLoc": {
          "line": 308,
          "column": 7,
          "position": 1255
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/functional_validators.py",
        "start": 125,
        "end": 135,
        "startLoc": {
          "line": 125,
          "column": 5,
          "position": 459
        },
        "endLoc": {
          "line": 135,
          "column": 9,
          "position": 558
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "schema = handler(source_type)\n        if self.return_type is not PydanticUndefined:\n            return_type = self.return_type\n        else:\n            try:\n                # Do not pass in globals as the function could be defined in a different module.\n                # Instead, let `get_callable_return_type` infer the globals to use, but still pass\n                # in locals that may contain a parent/rebuild namespace:\n                return_type = _decorators.get_callable_return_type(\n                    self.func,\n                    localns=handler._get_types_namespace().locals,\n                )\n            except NameError as e:\n                raise PydanticUndefinedAnnotation.from_name_error(e) from e\n\n        return_schema = None if return_type is PydanticUndefined else handler.generate_schema(return_type)\n        schema['serialization'] = core_schema.wrap_serializer_function_ser_schema",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/functional_serializers.py",
        "start": 166,
        "end": 182,
        "startLoc": {
          "line": 166,
          "column": 9,
          "position": 479
        },
        "endLoc": {
          "line": 182,
          "column": 36,
          "position": 618
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/functional_serializers.py",
        "start": 63,
        "end": 79,
        "startLoc": {
          "line": 63,
          "column": 9,
          "position": 205
        },
        "endLoc": {
          "line": 79,
          "column": 37,
          "position": 344
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "*,\n        init: Literal[False] = False,\n        repr: bool = True,\n        eq: bool = True,\n        order: bool = False,\n        unsafe_hash: bool = False,\n        frozen: bool | None = None,\n        config: ConfigDict | type[object] | None = None,\n        validate_on_init: bool | None = None,\n    )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 70,
        "end": 79,
        "startLoc": {
          "line": 70,
          "column": 9,
          "position": 645
        },
        "endLoc": {
          "line": 79,
          "column": 2,
          "position": 759
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 52,
        "end": 61,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 457
        },
        "endLoc": {
          "line": 61,
          "column": 8,
          "position": 571
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ",\n    ) -> Callable[[type[_T]], type[PydanticDataclass]]:  # type: ignore\n        ...\n\n    @dataclass_transform(field_specifiers=(dataclasses.field, Field, PrivateAttr))\n    @overload\n    def dataclass(\n        _cls: type[_T],  # type: ignore\n        *,\n        init: Literal[False] = False,\n        repr: bool = True,\n        eq: bool = True,\n        order: bool = False,\n        unsafe_hash: bool = False,\n        frozen: bool | None = None,\n        config: ConfigDict | type[object] | None = None,\n        validate_on_init: bool | None = None,\n    ) -> type",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 78,
        "end": 95,
        "startLoc": {
          "line": 78,
          "column": 5,
          "position": 756
        },
        "endLoc": {
          "line": 95,
          "column": 5,
          "position": 948
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 44,
        "end": 79,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 384
        },
        "endLoc": {
          "line": 79,
          "column": 9,
          "position": 764
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "*,\n    init: Literal[False] = False,\n    repr: bool = True,\n    eq: bool = True,\n    order: bool = False,\n    unsafe_hash: bool = False,\n    frozen: bool | None = None,\n    config: ConfigDict | type[object] | None = None,\n    validate_on_init: bool | None = None,\n    kw_only: bool = False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 101,
        "end": 110,
        "startLoc": {
          "line": 101,
          "column": 5,
          "position": 1001
        },
        "endLoc": {
          "line": 110,
          "column": 6,
          "position": 1122
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/dataclasses.py",
        "start": 52,
        "end": 61,
        "startLoc": {
          "line": 52,
          "column": 9,
          "position": 457
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 578
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "[int, int, int], self.as_rgb_tuple())\n            try:\n                return COLORS_BY_VALUE[rgb]\n            except KeyError as e:\n                if fallback:\n                    return self.as_hex()\n                else:\n                    raise ValueError('no named color found, use fallback=True, as_hex() or as_rgb()') from e\n        else:\n            return self.as_hex()\n\n    def as_hex(self) -> str:\n        \"\"\"Returns the hexadecimal representation of the color.\n\n        Hex string representing the color can be 3, 4, 6, or 8 characters depending on whether the string\n        a \"short\" representation of the color is possible and whether there's an alpha channel.\n\n        Returns:\n            The hexadecimal representation of the color.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 127,
        "end": 146,
        "startLoc": {
          "line": 127,
          "column": 6,
          "position": 1111
        },
        "endLoc": {
          "line": 146,
          "column": 12,
          "position": 1211
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 94,
        "end": 109,
        "startLoc": {
          "line": 94,
          "column": 6,
          "position": 282
        },
        "endLoc": {
          "line": 109,
          "column": 12,
          "position": 382
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "values = [float_to_255(c) for c in self._rgba[:3]]\n        if self._rgba.alpha is not None:\n            values.append(float_to_255(self._rgba.alpha))\n\n        as_hex = ''.join(f'{v:02x}' for v in values)\n        if all(c in repeat_colors for c in values):\n            as_hex = ''.join(as_hex[c] for c in range(0, len(as_hex), 2))\n        return '#' + as_hex\n\n    def as_rgb(self) -> str:\n        \"\"\"Color as an `rgb(<r>, <g>, <b>)` or `rgba(<r>, <g>, <b>, <a>)` string.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 147,
        "end": 157,
        "startLoc": {
          "line": 147,
          "column": 9,
          "position": 1214
        },
        "endLoc": {
          "line": 157,
          "column": 77,
          "position": 1373
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 110,
        "end": 122,
        "startLoc": {
          "line": 110,
          "column": 9,
          "position": 385
        },
        "endLoc": {
          "line": 122,
          "column": 12,
          "position": 544
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "r, g, b = (float_to_255(c) for c in self._rgba[:3])\n        if alpha is None:\n            if self._rgba.alpha is None:\n                return r, g, b\n            else:\n                return r, g, b, self._alpha_float()\n        elif alpha:\n            return r, g, b, self._alpha_float()\n        else:\n            # alpha is False\n            return r, g, b\n\n    def as_hsl(self) -> str:\n        \"\"\"Color as an `hsl(<h>, <s>, <l>)` or `hsl(<h>, <s>, <l>, <a>)` string.\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 180,
        "end": 193,
        "startLoc": {
          "line": 180,
          "column": 9,
          "position": 1450
        },
        "endLoc": {
          "line": 193,
          "column": 76,
          "position": 1596
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 141,
        "end": 156,
        "startLoc": {
          "line": 141,
          "column": 9,
          "position": 621
        },
        "endLoc": {
          "line": 156,
          "column": 12,
          "position": 767
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "if self._rgba.alpha is None:\n            h, s, li = self.as_hsl_tuple(alpha=False)  # type: ignore\n            return f'hsl({h * 360:0.0f}, {s:0.0%}, {li:0.0%})'\n        else:\n            h, s, li, a = self.as_hsl_tuple(alpha=True)  # type: ignore\n            return f'hsl({h * 360:0.0f}, {s:0.0%}, {li:0.0%}, {round(a, 2)})'\n\n    def as_hsl_tuple(self, *, alpha: Optional[bool] = None) -> HslColorTuple:\n        \"\"\"Returns the color as an HSL or HSLA tuple.\n\n        Args:\n            alpha: Whether to include the alpha channel.\n\n                - `None` (default): Include the alpha channel only if it's set (e.g. not `None`).\n                - `True`: Always include alpha.\n                - `False`: Always omit alpha.\n\n        Returns:\n            The color as a tuple of hue, saturation, lightness, and alpha (if included).\n                All elements are in the range 0 to 1.\n\n        Note:\n            This is HSL as used in HTML and most other places, not HLS as used in Python's `colorsys`.\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 194,
        "end": 217,
        "startLoc": {
          "line": 194,
          "column": 9,
          "position": 1599
        },
        "endLoc": {
          "line": 217,
          "column": 12,
          "position": 1707
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 157,
        "end": 175,
        "startLoc": {
          "line": 157,
          "column": 9,
          "position": 770
        },
        "endLoc": {
          "line": 175,
          "column": 12,
          "position": 878
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "if alpha is None:\n            if self._rgba.alpha is None:\n                return h, s, l\n            else:\n                return h, s, l, self._alpha_float()\n        if alpha:\n            return h, s, l, self._alpha_float()\n        else:\n            # alpha is False\n            return h, s, l\n\n    def _alpha_float(self) -> float:\n        return 1 if self._rgba.alpha is None else self._rgba.alpha\n\n    @classmethod\n    def __get_pydantic_core_schema__",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 219,
        "end": 234,
        "startLoc": {
          "line": 219,
          "column": 9,
          "position": 1746
        },
        "endLoc": {
          "line": 234,
          "column": 29,
          "position": 1892
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 177,
        "end": 192,
        "startLoc": {
          "line": 177,
          "column": 9,
          "position": 915
        },
        "endLoc": {
          "line": 192,
          "column": 19,
          "position": 1061
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "if len(value) == 3:\n        r, g, b = (parse_color_value(v) for v in value)\n        return RGBA(r, g, b, None)\n    elif len(value) == 4:\n        r, g, b = (parse_color_value(v) for v in value[:3])\n        return RGBA(r, g, b, parse_float_alpha(value[3]))\n    else:\n        raise PydanticCustomError",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 270,
        "end": 277,
        "startLoc": {
          "line": 270,
          "column": 5,
          "position": 2177
        },
        "endLoc": {
          "line": 277,
          "column": 20,
          "position": 2305
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 212,
        "end": 219,
        "startLoc": {
          "line": 212,
          "column": 5,
          "position": 1260
        },
        "endLoc": {
          "line": 219,
          "column": 11,
          "position": 1388
        }
      }
    },
    {
      "format": "python",
      "lines": 29,
      "fragment": "value_lower = value.lower()\n    try:\n        r, g, b = COLORS_BY_NAME[value_lower]\n    except KeyError:\n        pass\n    else:\n        return ints_to_rgba(r, g, b, None)\n\n    m = re.fullmatch(r_hex_short, value_lower)\n    if m:\n        *rgb, a = m.groups()\n        r, g, b = (int(v * 2, 16) for v in rgb)\n        if a:\n            alpha: Optional[float] = int(a * 2, 16) / 255\n        else:\n            alpha = None\n        return ints_to_rgba(r, g, b, alpha)\n\n    m = re.fullmatch(r_hex_long, value_lower)\n    if m:\n        *rgb, a = m.groups()\n        r, g, b = (int(v, 16) for v in rgb)\n        if a:\n            alpha = int(a, 16) / 255\n        else:\n            alpha = None\n        return ints_to_rgba(r, g, b, alpha)\n\n    m = re.fullmatch(r_rgb, value_lower) or",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 300,
        "end": 328,
        "startLoc": {
          "line": 300,
          "column": 5,
          "position": 2335
        },
        "endLoc": {
          "line": 328,
          "column": 3,
          "position": 2659
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 231,
        "end": 260,
        "startLoc": {
          "line": 231,
          "column": 5,
          "position": 1417
        },
        "endLoc": {
          "line": 260,
          "column": 3,
          "position": 1742
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "s_value, l_value = parse_color_value(sat, 100), parse_color_value(light, 100)\n\n    h_value = float(h)\n    if h_units in {None, 'deg'}:\n        h_value = h_value % 360 / 360\n    elif h_units == 'rad':\n        h_value = h_value % rads / rads\n    else:\n        # turns\n        h_value = h_value % 1\n\n    r, g, b = hls_to_rgb(h_value, l_value, s_value)\n    return RGBA(r, g, b, parse_float_alpha",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 424,
        "end": 436,
        "startLoc": {
          "line": 424,
          "column": 5,
          "position": 3200
        },
        "endLoc": {
          "line": 436,
          "column": 18,
          "position": 3345
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 325,
        "end": 337,
        "startLoc": {
          "line": 325,
          "column": 5,
          "position": 2360
        },
        "endLoc": {
          "line": 337,
          "column": 6,
          "position": 2505
        }
      }
    },
    {
      "format": "python",
      "lines": 154,
      "fragment": "return int(round(c * 255))\n\n\nCOLORS_BY_NAME = {\n    'aliceblue': (240, 248, 255),\n    'antiquewhite': (250, 235, 215),\n    'aqua': (0, 255, 255),\n    'aquamarine': (127, 255, 212),\n    'azure': (240, 255, 255),\n    'beige': (245, 245, 220),\n    'bisque': (255, 228, 196),\n    'black': (0, 0, 0),\n    'blanchedalmond': (255, 235, 205),\n    'blue': (0, 0, 255),\n    'blueviolet': (138, 43, 226),\n    'brown': (165, 42, 42),\n    'burlywood': (222, 184, 135),\n    'cadetblue': (95, 158, 160),\n    'chartreuse': (127, 255, 0),\n    'chocolate': (210, 105, 30),\n    'coral': (255, 127, 80),\n    'cornflowerblue': (100, 149, 237),\n    'cornsilk': (255, 248, 220),\n    'crimson': (220, 20, 60),\n    'cyan': (0, 255, 255),\n    'darkblue': (0, 0, 139),\n    'darkcyan': (0, 139, 139),\n    'darkgoldenrod': (184, 134, 11),\n    'darkgray': (169, 169, 169),\n    'darkgreen': (0, 100, 0),\n    'darkgrey': (169, 169, 169),\n    'darkkhaki': (189, 183, 107),\n    'darkmagenta': (139, 0, 139),\n    'darkolivegreen': (85, 107, 47),\n    'darkorange': (255, 140, 0),\n    'darkorchid': (153, 50, 204),\n    'darkred': (139, 0, 0),\n    'darksalmon': (233, 150, 122),\n    'darkseagreen': (143, 188, 143),\n    'darkslateblue': (72, 61, 139),\n    'darkslategray': (47, 79, 79),\n    'darkslategrey': (47, 79, 79),\n    'darkturquoise': (0, 206, 209),\n    'darkviolet': (148, 0, 211),\n    'deeppink': (255, 20, 147),\n    'deepskyblue': (0, 191, 255),\n    'dimgray': (105, 105, 105),\n    'dimgrey': (105, 105, 105),\n    'dodgerblue': (30, 144, 255),\n    'firebrick': (178, 34, 34),\n    'floralwhite': (255, 250, 240),\n    'forestgreen': (34, 139, 34),\n    'fuchsia': (255, 0, 255),\n    'gainsboro': (220, 220, 220),\n    'ghostwhite': (248, 248, 255),\n    'gold': (255, 215, 0),\n    'goldenrod': (218, 165, 32),\n    'gray': (128, 128, 128),\n    'green': (0, 128, 0),\n    'greenyellow': (173, 255, 47),\n    'grey': (128, 128, 128),\n    'honeydew': (240, 255, 240),\n    'hotpink': (255, 105, 180),\n    'indianred': (205, 92, 92),\n    'indigo': (75, 0, 130),\n    'ivory': (255, 255, 240),\n    'khaki': (240, 230, 140),\n    'lavender': (230, 230, 250),\n    'lavenderblush': (255, 240, 245),\n    'lawngreen': (124, 252, 0),\n    'lemonchiffon': (255, 250, 205),\n    'lightblue': (173, 216, 230),\n    'lightcoral': (240, 128, 128),\n    'lightcyan': (224, 255, 255),\n    'lightgoldenrodyellow': (250, 250, 210),\n    'lightgray': (211, 211, 211),\n    'lightgreen': (144, 238, 144),\n    'lightgrey': (211, 211, 211),\n    'lightpink': (255, 182, 193),\n    'lightsalmon': (255, 160, 122),\n    'lightseagreen': (32, 178, 170),\n    'lightskyblue': (135, 206, 250),\n    'lightslategray': (119, 136, 153),\n    'lightslategrey': (119, 136, 153),\n    'lightsteelblue': (176, 196, 222),\n    'lightyellow': (255, 255, 224),\n    'lime': (0, 255, 0),\n    'limegreen': (50, 205, 50),\n    'linen': (250, 240, 230),\n    'magenta': (255, 0, 255),\n    'maroon': (128, 0, 0),\n    'mediumaquamarine': (102, 205, 170),\n    'mediumblue': (0, 0, 205),\n    'mediumorchid': (186, 85, 211),\n    'mediumpurple': (147, 112, 219),\n    'mediumseagreen': (60, 179, 113),\n    'mediumslateblue': (123, 104, 238),\n    'mediumspringgreen': (0, 250, 154),\n    'mediumturquoise': (72, 209, 204),\n    'mediumvioletred': (199, 21, 133),\n    'midnightblue': (25, 25, 112),\n    'mintcream': (245, 255, 250),\n    'mistyrose': (255, 228, 225),\n    'moccasin': (255, 228, 181),\n    'navajowhite': (255, 222, 173),\n    'navy': (0, 0, 128),\n    'oldlace': (253, 245, 230),\n    'olive': (128, 128, 0),\n    'olivedrab': (107, 142, 35),\n    'orange': (255, 165, 0),\n    'orangered': (255, 69, 0),\n    'orchid': (218, 112, 214),\n    'palegoldenrod': (238, 232, 170),\n    'palegreen': (152, 251, 152),\n    'paleturquoise': (175, 238, 238),\n    'palevioletred': (219, 112, 147),\n    'papayawhip': (255, 239, 213),\n    'peachpuff': (255, 218, 185),\n    'peru': (205, 133, 63),\n    'pink': (255, 192, 203),\n    'plum': (221, 160, 221),\n    'powderblue': (176, 224, 230),\n    'purple': (128, 0, 128),\n    'red': (255, 0, 0),\n    'rosybrown': (188, 143, 143),\n    'royalblue': (65, 105, 225),\n    'saddlebrown': (139, 69, 19),\n    'salmon': (250, 128, 114),\n    'sandybrown': (244, 164, 96),\n    'seagreen': (46, 139, 87),\n    'seashell': (255, 245, 238),\n    'sienna': (160, 82, 45),\n    'silver': (192, 192, 192),\n    'skyblue': (135, 206, 235),\n    'slateblue': (106, 90, 205),\n    'slategray': (112, 128, 144),\n    'slategrey': (112, 128, 144),\n    'snow': (255, 250, 250),\n    'springgreen': (0, 255, 127),\n    'steelblue': (70, 130, 180),\n    'tan': (210, 180, 140),\n    'teal': (0, 128, 128),\n    'thistle': (216, 191, 216),\n    'tomato': (255, 99, 71),\n    'turquoise': (64, 224, 208),\n    'violet': (238, 130, 238),\n    'wheat': (245, 222, 179),\n    'white': (255, 255, 255),\n    'whitesmoke': (245, 245, 245),\n    'yellow': (255, 255, 0),\n    'yellowgreen': (154, 205, 50),\n}\n\nCOLORS_BY_VALUE = {v: k for k, v in COLORS_BY_NAME.items()}",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/color.py",
        "start": 451,
        "end": 604,
        "startLoc": {
          "line": 451,
          "column": 5,
          "position": 3373
        },
        "endLoc": {
          "line": 604,
          "column": 2,
          "position": 5627
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pydantic/v1/color.py",
        "start": 341,
        "end": 494,
        "startLoc": {
          "line": 341,
          "column": 5,
          "position": 2527
        },
        "endLoc": {
          "line": 494,
          "column": 2,
          "position": 4781
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\"__version__\", \"__version_tuple__\", \"version\", \"version_tuple\"]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\nelse:\n    VERSION_TUPLE = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\n\n__version__ = version = '1.6.0'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/pluggy/_version.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 8,
          "position": 114
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/urllib3/_version.py",
        "start": 1,
        "end": 20,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 20,
          "column": 8,
          "position": 114
        }
      }
    },
    {
      "format": "python",
      "lines": 272,
      "fragment": "\"\"\"Windows.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom functools import lru_cache\nfrom typing import TYPE_CHECKING\n\nfrom .api import PlatformDirsABC\n\nif TYPE_CHECKING:\n    from collections.abc import Callable\n\n\nclass Windows(PlatformDirsABC):\n    \"\"\"\n    `MSDN on where to store app data files <https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `appauthor\n    <platformdirs.api.PlatformDirsABC.appauthor>`, `version <platformdirs.api.PlatformDirsABC.version>`, `roaming\n    <platformdirs.api.PlatformDirsABC.roaming>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    \"\"\"\n\n    @property\n    def user_data_dir(self) -> str:\n        \"\"\"\n        :return: data directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname`` (not roaming) or\n         ``%USERPROFILE%\\\\AppData\\\\Roaming\\\\$appauthor\\\\$appname`` (roaming)\n        \"\"\"\n        const = \"CSIDL_APPDATA\" if self.roaming else \"CSIDL_LOCAL_APPDATA\"\n        path = os.path.normpath(get_win_folder(const))\n        return self._append_parts(path)\n\n    def _append_parts(self, path: str, *, opinion_value: str | None = None) -> str:\n        params = []\n        if self.appname:\n            if self.appauthor is not False:\n                author = self.appauthor or self.appname\n                params.append(author)\n            params.append(self.appname)\n            if opinion_value is not None and self.opinion:\n                params.append(opinion_value)\n            if self.version:\n                params.append(self.version)\n        path = os.path.join(path, *params)  # noqa: PTH118\n        self._optionally_create_directory(path)\n        return path\n\n    @property\n    def site_data_dir(self) -> str:\n        \"\"\":return: data directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname``\"\"\"\n        path = os.path.normpath(get_win_folder(\"CSIDL_COMMON_APPDATA\"))\n        return self._append_parts(path)\n\n    @property\n    def user_config_dir(self) -> str:\n        \"\"\":return: config directory tied to the user, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def site_config_dir(self) -> str:\n        \"\"\":return: config directory shared by the users, same as `site_data_dir`\"\"\"\n        return self.site_data_dir\n\n    @property\n    def user_cache_dir(self) -> str:\n        \"\"\"\n        :return: cache directory tied to the user (if opinionated with ``Cache`` folder within ``$appname``) e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``\n        \"\"\"\n        path = os.path.normpath(get_win_folder(\"CSIDL_LOCAL_APPDATA\"))\n        return self._append_parts(path, opinion_value=\"Cache\")\n\n    @property\n    def site_cache_dir(self) -> str:\n        \"\"\":return: cache directory shared by users, e.g. ``C:\\\\ProgramData\\\\$appauthor\\\\$appname\\\\Cache\\\\$version``\"\"\"\n        path = os.path.normpath(get_win_folder(\"CSIDL_COMMON_APPDATA\"))\n        return self._append_parts(path, opinion_value=\"Cache\")\n\n    @property\n    def user_state_dir(self) -> str:\n        \"\"\":return: state directory tied to the user, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def user_log_dir(self) -> str:\n        \"\"\":return: log directory tied to the user, same as `user_data_dir` if not opinionated else ``Logs`` in it\"\"\"\n        path = self.user_data_dir\n        if self.opinion:\n            path = os.path.join(path, \"Logs\")  # noqa: PTH118\n            self._optionally_create_directory(path)\n        return path\n\n    @property\n    def user_documents_dir(self) -> str:\n        \"\"\":return: documents directory tied to the user e.g. ``%USERPROFILE%\\\\Documents``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_PERSONAL\"))\n\n    @property\n    def user_downloads_dir(self) -> str:\n        \"\"\":return: downloads directory tied to the user e.g. ``%USERPROFILE%\\\\Downloads``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_DOWNLOADS\"))\n\n    @property\n    def user_pictures_dir(self) -> str:\n        \"\"\":return: pictures directory tied to the user e.g. ``%USERPROFILE%\\\\Pictures``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_MYPICTURES\"))\n\n    @property\n    def user_videos_dir(self) -> str:\n        \"\"\":return: videos directory tied to the user e.g. ``%USERPROFILE%\\\\Videos``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_MYVIDEO\"))\n\n    @property\n    def user_music_dir(self) -> str:\n        \"\"\":return: music directory tied to the user e.g. ``%USERPROFILE%\\\\Music``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_MYMUSIC\"))\n\n    @property\n    def user_desktop_dir(self) -> str:\n        \"\"\":return: desktop directory tied to the user, e.g. ``%USERPROFILE%\\\\Desktop``\"\"\"\n        return os.path.normpath(get_win_folder(\"CSIDL_DESKTOPDIRECTORY\"))\n\n    @property\n    def user_runtime_dir(self) -> str:\n        \"\"\"\n        :return: runtime directory tied to the user, e.g.\n         ``%USERPROFILE%\\\\AppData\\\\Local\\\\Temp\\\\$appauthor\\\\$appname``\n        \"\"\"\n        path = os.path.normpath(os.path.join(get_win_folder(\"CSIDL_LOCAL_APPDATA\"), \"Temp\"))  # noqa: PTH118\n        return self._append_parts(path)\n\n    @property\n    def site_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory shared by users, same as `user_runtime_dir`\"\"\"\n        return self.user_runtime_dir\n\n\ndef get_win_folder_from_env_vars(csidl_name: str) -> str:\n    \"\"\"Get folder from environment variables.\"\"\"\n    result = get_win_folder_if_csidl_name_not_env_var(csidl_name)\n    if result is not None:\n        return result\n\n    env_var_name = {\n        \"CSIDL_APPDATA\": \"APPDATA\",\n        \"CSIDL_COMMON_APPDATA\": \"ALLUSERSPROFILE\",\n        \"CSIDL_LOCAL_APPDATA\": \"LOCALAPPDATA\",\n    }.get(csidl_name)\n    if env_var_name is None:\n        msg = f\"Unknown CSIDL name: {csidl_name}\"\n        raise ValueError(msg)\n    result = os.environ.get(env_var_name)\n    if result is None:\n        msg = f\"Unset environment variable: {env_var_name}\"\n        raise ValueError(msg)\n    return result\n\n\ndef get_win_folder_if_csidl_name_not_env_var(csidl_name: str) -> str | None:\n    \"\"\"Get a folder for a CSIDL name that does not exist as an environment variable.\"\"\"\n    if csidl_name == \"CSIDL_PERSONAL\":\n        return os.path.join(os.path.normpath(os.environ[\"USERPROFILE\"]), \"Documents\")  # noqa: PTH118\n\n    if csidl_name == \"CSIDL_DOWNLOADS\":\n        return os.path.join(os.path.normpath(os.environ[\"USERPROFILE\"]), \"Downloads\")  # noqa: PTH118\n\n    if csidl_name == \"CSIDL_MYPICTURES\":\n        return os.path.join(os.path.normpath(os.environ[\"USERPROFILE\"]), \"Pictures\")  # noqa: PTH118\n\n    if csidl_name == \"CSIDL_MYVIDEO\":\n        return os.path.join(os.path.normpath(os.environ[\"USERPROFILE\"]), \"Videos\")  # noqa: PTH118\n\n    if csidl_name == \"CSIDL_MYMUSIC\":\n        return os.path.join(os.path.normpath(os.environ[\"USERPROFILE\"]), \"Music\")  # noqa: PTH118\n    return None\n\n\ndef get_win_folder_from_registry(csidl_name: str) -> str:\n    \"\"\"\n    Get folder from the registry.\n\n    This is a fallback technique at best. I'm not sure if using the registry for these guarantees us the correct answer\n    for all CSIDL_* names.\n\n    \"\"\"\n    shell_folder_name = {\n        \"CSIDL_APPDATA\": \"AppData\",\n        \"CSIDL_COMMON_APPDATA\": \"Common AppData\",\n        \"CSIDL_LOCAL_APPDATA\": \"Local AppData\",\n        \"CSIDL_PERSONAL\": \"Personal\",\n        \"CSIDL_DOWNLOADS\": \"{374DE290-123F-4565-9164-39C4925E467B}\",\n        \"CSIDL_MYPICTURES\": \"My Pictures\",\n        \"CSIDL_MYVIDEO\": \"My Video\",\n        \"CSIDL_MYMUSIC\": \"My Music\",\n    }.get(csidl_name)\n    if shell_folder_name is None:\n        msg = f\"Unknown CSIDL name: {csidl_name}\"\n        raise ValueError(msg)\n    if sys.platform != \"win32\":  # only needed for mypy type checker to know that this code runs only on Windows\n        raise NotImplementedError\n    import winreg  # noqa: PLC0415\n\n    key = winreg.OpenKey(winreg.HKEY_CURRENT_USER, r\"Software\\Microsoft\\Windows\\CurrentVersion\\Explorer\\Shell Folders\")\n    directory, _ = winreg.QueryValueEx(key, shell_folder_name)\n    return str(directory)\n\n\ndef get_win_folder_via_ctypes(csidl_name: str) -> str:\n    \"\"\"Get folder with ctypes.\"\"\"\n    # There is no 'CSIDL_DOWNLOADS'.\n    # Use 'CSIDL_PROFILE' (40) and append the default folder 'Downloads' instead.\n    # https://learn.microsoft.com/en-us/windows/win32/shell/knownfolderid\n\n    import ctypes  # noqa: PLC0415\n\n    csidl_const = {\n        \"CSIDL_APPDATA\": 26,\n        \"CSIDL_COMMON_APPDATA\": 35,\n        \"CSIDL_LOCAL_APPDATA\": 28,\n        \"CSIDL_PERSONAL\": 5,\n        \"CSIDL_MYPICTURES\": 39,\n        \"CSIDL_MYVIDEO\": 14,\n        \"CSIDL_MYMUSIC\": 13,\n        \"CSIDL_DOWNLOADS\": 40,\n        \"CSIDL_DESKTOPDIRECTORY\": 16,\n    }.get(csidl_name)\n    if csidl_const is None:\n        msg = f\"Unknown CSIDL name: {csidl_name}\"\n        raise ValueError(msg)\n\n    buf = ctypes.create_unicode_buffer(1024)\n    windll = getattr(ctypes, \"windll\")  # noqa: B009 # using getattr to avoid false positive with mypy type checker\n    windll.shell32.SHGetFolderPathW(None, csidl_const, None, 0, buf)\n\n    # Downgrade to short path name if it has high-bit chars.\n    if any(ord(c) > 255 for c in buf):  # noqa: PLR2004\n        buf2 = ctypes.create_unicode_buffer(1024)\n        if windll.kernel32.GetShortPathNameW(buf.value, buf2, 1024):\n            buf = buf2\n\n    if csidl_name == \"CSIDL_DOWNLOADS\":\n        return os.path.join(buf.value, \"Downloads\")  # noqa: PTH118\n\n    return buf.value\n\n\ndef _pick_get_win_folder() -> Callable[[str], str]:\n    try:\n        import ctypes  # noqa: PLC0415\n    except ImportError:\n        pass\n    else:\n        if hasattr(ctypes, \"windll\"):\n            return get_win_folder_via_ctypes\n    try:\n        import winreg  # noqa: PLC0415, F401\n    except ImportError:\n        return get_win_folder_from_env_vars\n    else:\n        return get_win_folder_from_registry\n\n\nget_win_folder = lru_cache(maxsize=None)(_pick_get_win_folder())\n\n__all__ = [\n    \"Windows\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/windows.py",
        "start": 1,
        "end": 272,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 272,
          "column": 2,
          "position": 1945
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/windows.py",
        "start": 1,
        "end": 272,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 272,
          "column": 2,
          "position": 1945
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\n    \"__version__\",\n    \"__version_tuple__\",\n    \"version\",\n    \"version_tuple\",\n    \"__commit_id__\",\n    \"commit_id\",\n]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n    COMMIT_ID = Union[str, None]\nelse:\n    VERSION_TUPLE = object\n    COMMIT_ID = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\ncommit_id: COMMIT_ID\n__commit_id__: COMMIT_ID\n\n__version__ = version = '4.5.0'\n__version_tuple__ = version_tuple = (4, 5, 0)\n\n__commit_id__ = commit_id = None",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/version.py",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 5,
          "position": 188
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py",
        "start": 1,
        "end": 34,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 34,
          "column": 5,
          "position": 188
        }
      }
    },
    {
      "format": "python",
      "lines": 272,
      "fragment": "\"\"\"Unix.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport sys\nfrom configparser import ConfigParser\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING, NoReturn\n\nfrom .api import PlatformDirsABC\n\nif TYPE_CHECKING:\n    from collections.abc import Iterator\n\nif sys.platform == \"win32\":\n\n    def getuid() -> NoReturn:\n        msg = \"should only be used on Unix\"\n        raise RuntimeError(msg)\n\nelse:\n    from os import getuid\n\n\nclass Unix(PlatformDirsABC):  # noqa: PLR0904\n    \"\"\"\n    On Unix/Linux, we follow the `XDG Basedir Spec <https://specifications.freedesktop.org/basedir-spec/basedir-spec-\n    latest.html>`_.\n\n    The spec allows overriding directories with environment variables. The examples shown are the default values,\n    alongside the name of the environment variable that overrides them. Makes use of the `appname\n    <platformdirs.api.PlatformDirsABC.appname>`, `version <platformdirs.api.PlatformDirsABC.version>`, `multipath\n    <platformdirs.api.PlatformDirsABC.multipath>`, `opinion <platformdirs.api.PlatformDirsABC.opinion>`, `ensure_exists\n    <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    \"\"\"\n\n    @property\n    def user_data_dir(self) -> str:\n        \"\"\"\n        :return: data directory tied to the user, e.g. ``~/.local/share/$appname/$version`` or\n         ``$XDG_DATA_HOME/$appname/$version``\n        \"\"\"\n        path = os.environ.get(\"XDG_DATA_HOME\", \"\")\n        if not path.strip():\n            path = os.path.expanduser(\"~/.local/share\")  # noqa: PTH111\n        return self._append_app_name_and_version(path)\n\n    @property\n    def _site_data_dirs(self) -> list[str]:\n        path = os.environ.get(\"XDG_DATA_DIRS\", \"\")\n        if not path.strip():\n            path = f\"/usr/local/share{os.pathsep}/usr/share\"\n        return [self._append_app_name_and_version(p) for p in path.split(os.pathsep)]\n\n    @property\n    def site_data_dir(self) -> str:\n        \"\"\"\n        :return: data directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>` is\n         enabled and ``XDG_DATA_DIRS`` is set and a multi path the response is also a multi path separated by the\n         OS path separator), e.g. ``/usr/local/share/$appname/$version`` or ``/usr/share/$appname/$version``\n        \"\"\"\n        # XDG default for $XDG_DATA_DIRS; only first, if multipath is False\n        dirs = self._site_data_dirs\n        if not self.multipath:\n            return dirs[0]\n        return os.pathsep.join(dirs)\n\n    @property\n    def user_config_dir(self) -> str:\n        \"\"\"\n        :return: config directory tied to the user, e.g. ``~/.config/$appname/$version`` or\n         ``$XDG_CONFIG_HOME/$appname/$version``\n        \"\"\"\n        path = os.environ.get(\"XDG_CONFIG_HOME\", \"\")\n        if not path.strip():\n            path = os.path.expanduser(\"~/.config\")  # noqa: PTH111\n        return self._append_app_name_and_version(path)\n\n    @property\n    def _site_config_dirs(self) -> list[str]:\n        path = os.environ.get(\"XDG_CONFIG_DIRS\", \"\")\n        if not path.strip():\n            path = \"/etc/xdg\"\n        return [self._append_app_name_and_version(p) for p in path.split(os.pathsep)]\n\n    @property\n    def site_config_dir(self) -> str:\n        \"\"\"\n        :return: config directories shared by users (if `multipath <platformdirs.api.PlatformDirsABC.multipath>`\n         is enabled and ``XDG_CONFIG_DIRS`` is set and a multi path the response is also a multi path separated by\n         the OS path separator), e.g. ``/etc/xdg/$appname/$version``\n        \"\"\"\n        # XDG default for $XDG_CONFIG_DIRS only first, if multipath is False\n        dirs = self._site_config_dirs\n        if not self.multipath:\n            return dirs[0]\n        return os.pathsep.join(dirs)\n\n    @property\n    def user_cache_dir(self) -> str:\n        \"\"\"\n        :return: cache directory tied to the user, e.g. ``~/.cache/$appname/$version`` or\n         ``~/$XDG_CACHE_HOME/$appname/$version``\n        \"\"\"\n        path = os.environ.get(\"XDG_CACHE_HOME\", \"\")\n        if not path.strip():\n            path = os.path.expanduser(\"~/.cache\")  # noqa: PTH111\n        return self._append_app_name_and_version(path)\n\n    @property\n    def site_cache_dir(self) -> str:\n        \"\"\":return: cache directory shared by users, e.g. ``/var/cache/$appname/$version``\"\"\"\n        return self._append_app_name_and_version(\"/var/cache\")\n\n    @property\n    def user_state_dir(self) -> str:\n        \"\"\"\n        :return: state directory tied to the user, e.g. ``~/.local/state/$appname/$version`` or\n         ``$XDG_STATE_HOME/$appname/$version``\n        \"\"\"\n        path = os.environ.get(\"XDG_STATE_HOME\", \"\")\n        if not path.strip():\n            path = os.path.expanduser(\"~/.local/state\")  # noqa: PTH111\n        return self._append_app_name_and_version(path)\n\n    @property\n    def user_log_dir(self) -> str:\n        \"\"\":return: log directory tied to the user, same as `user_state_dir` if not opinionated else ``log`` in it\"\"\"\n        path = self.user_state_dir\n        if self.opinion:\n            path = os.path.join(path, \"log\")  # noqa: PTH118\n            self._optionally_create_directory(path)\n        return path\n\n    @property\n    def user_documents_dir(self) -> str:\n        \"\"\":return: documents directory tied to the user, e.g. ``~/Documents``\"\"\"\n        return _get_user_media_dir(\"XDG_DOCUMENTS_DIR\", \"~/Documents\")\n\n    @property\n    def user_downloads_dir(self) -> str:\n        \"\"\":return: downloads directory tied to the user, e.g. ``~/Downloads``\"\"\"\n        return _get_user_media_dir(\"XDG_DOWNLOAD_DIR\", \"~/Downloads\")\n\n    @property\n    def user_pictures_dir(self) -> str:\n        \"\"\":return: pictures directory tied to the user, e.g. ``~/Pictures``\"\"\"\n        return _get_user_media_dir(\"XDG_PICTURES_DIR\", \"~/Pictures\")\n\n    @property\n    def user_videos_dir(self) -> str:\n        \"\"\":return: videos directory tied to the user, e.g. ``~/Videos``\"\"\"\n        return _get_user_media_dir(\"XDG_VIDEOS_DIR\", \"~/Videos\")\n\n    @property\n    def user_music_dir(self) -> str:\n        \"\"\":return: music directory tied to the user, e.g. ``~/Music``\"\"\"\n        return _get_user_media_dir(\"XDG_MUSIC_DIR\", \"~/Music\")\n\n    @property\n    def user_desktop_dir(self) -> str:\n        \"\"\":return: desktop directory tied to the user, e.g. ``~/Desktop``\"\"\"\n        return _get_user_media_dir(\"XDG_DESKTOP_DIR\", \"~/Desktop\")\n\n    @property\n    def user_runtime_dir(self) -> str:\n        \"\"\"\n        :return: runtime directory tied to the user, e.g. ``/run/user/$(id -u)/$appname/$version`` or\n         ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n         For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/user/$(id -u)/$appname/$version`` if\n         exists, otherwise ``/tmp/runtime-$(id -u)/$appname/$version``, if``$XDG_RUNTIME_DIR``\n         is not set.\n        \"\"\"\n        path = os.environ.get(\"XDG_RUNTIME_DIR\", \"\")\n        if not path.strip():\n            if sys.platform.startswith((\"freebsd\", \"openbsd\", \"netbsd\")):\n                path = f\"/var/run/user/{getuid()}\"\n                if not Path(path).exists():\n                    path = f\"/tmp/runtime-{getuid()}\"  # noqa: S108\n            else:\n                path = f\"/run/user/{getuid()}\"\n        return self._append_app_name_and_version(path)\n\n    @property\n    def site_runtime_dir(self) -> str:\n        \"\"\"\n        :return: runtime directory shared by users, e.g. ``/run/$appname/$version`` or \\\n        ``$XDG_RUNTIME_DIR/$appname/$version``.\n\n        Note that this behaves almost exactly like `user_runtime_dir` if ``$XDG_RUNTIME_DIR`` is set, but will\n        fall back to paths associated to the root user instead of a regular logged-in user if it's not set.\n\n        If you wish to ensure that a logged-in root user path is returned e.g. ``/run/user/0``, use `user_runtime_dir`\n        instead.\n\n        For FreeBSD/OpenBSD/NetBSD, it would return ``/var/run/$appname/$version`` if ``$XDG_RUNTIME_DIR`` is not set.\n        \"\"\"\n        path = os.environ.get(\"XDG_RUNTIME_DIR\", \"\")\n        if not path.strip():\n            if sys.platform.startswith((\"freebsd\", \"openbsd\", \"netbsd\")):\n                path = \"/var/run\"\n            else:\n                path = \"/run\"\n        return self._append_app_name_and_version(path)\n\n    @property\n    def site_data_path(self) -> Path:\n        \"\"\":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``\"\"\"\n        return self._first_item_as_path_if_multipath(self.site_data_dir)\n\n    @property\n    def site_config_path(self) -> Path:\n        \"\"\":return: config path shared by the users, returns the first item, even if ``multipath`` is set to ``True``\"\"\"\n        return self._first_item_as_path_if_multipath(self.site_config_dir)\n\n    @property\n    def site_cache_path(self) -> Path:\n        \"\"\":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``\"\"\"\n        return self._first_item_as_path_if_multipath(self.site_cache_dir)\n\n    def iter_config_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site configuration directories.\"\"\"\n        yield self.user_config_dir\n        yield from self._site_config_dirs\n\n    def iter_data_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site data directories.\"\"\"\n        yield self.user_data_dir\n        yield from self._site_data_dirs\n\n\ndef _get_user_media_dir(env_var: str, fallback_tilde_path: str) -> str:\n    media_dir = _get_user_dirs_folder(env_var)\n    if media_dir is None:\n        media_dir = os.environ.get(env_var, \"\").strip()\n        if not media_dir:\n            media_dir = os.path.expanduser(fallback_tilde_path)  # noqa: PTH111\n\n    return media_dir\n\n\ndef _get_user_dirs_folder(key: str) -> str | None:\n    \"\"\"\n    Return directory from user-dirs.dirs config file.\n\n    See https://freedesktop.org/wiki/Software/xdg-user-dirs/.\n\n    \"\"\"\n    user_dirs_config_path = Path(Unix().user_config_dir) / \"user-dirs.dirs\"\n    if user_dirs_config_path.exists():\n        parser = ConfigParser()\n\n        with user_dirs_config_path.open() as stream:\n            # Add fake section header, so ConfigParser doesn't complain\n            parser.read_string(f\"[top]\\n{stream.read()}\")\n\n        if key not in parser[\"top\"]:\n            return None\n\n        path = parser[\"top\"][key].strip('\"')\n        # Handle relative home paths\n        return path.replace(\"$HOME\", os.path.expanduser(\"~\"))  # noqa: PTH111\n\n    return None\n\n\n__all__ = [\n    \"Unix\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/unix.py",
        "start": 1,
        "end": 272,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 272,
          "column": 2,
          "position": 1721
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/unix.py",
        "start": 1,
        "end": 272,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 272,
          "column": 2,
          "position": 1721
        }
      }
    },
    {
      "format": "python",
      "lines": 146,
      "fragment": "\"\"\"macOS.\"\"\"\n\nfrom __future__ import annotations\n\nimport os.path\nimport sys\nfrom typing import TYPE_CHECKING\n\nfrom .api import PlatformDirsABC\n\nif TYPE_CHECKING:\n    from pathlib import Path\n\n\nclass MacOS(PlatformDirsABC):\n    \"\"\"\n    Platform directories for the macOS operating system.\n\n    Follows the guidance from\n    `Apple documentation <https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/FileSystemProgrammingGuide/MacOSXDirectories/MacOSXDirectories.html>`_.\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`,\n    `version <platformdirs.api.PlatformDirsABC.version>`,\n    `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    \"\"\"\n\n    @property\n    def user_data_dir(self) -> str:\n        \"\"\":return: data directory tied to the user, e.g. ``~/Library/Application Support/$appname/$version``\"\"\"\n        return self._append_app_name_and_version(os.path.expanduser(\"~/Library/Application Support\"))  # noqa: PTH111\n\n    @property\n    def site_data_dir(self) -> str:\n        \"\"\"\n        :return: data directory shared by users, e.g. ``/Library/Application Support/$appname/$version``.\n          If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``$homebrew_prefix/share/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n          the response is a multi-path string separated by \":\", e.g.\n          ``$homebrew_prefix/share/$appname/$version:/Library/Application Support/$appname/$version``\n        \"\"\"\n        is_homebrew = \"/opt/python\" in sys.prefix\n        homebrew_prefix = sys.prefix.split(\"/opt/python\")[0] if is_homebrew else \"\"\n        path_list = [self._append_app_name_and_version(f\"{homebrew_prefix}/share\")] if is_homebrew else []\n        path_list.append(self._append_app_name_and_version(\"/Library/Application Support\"))\n        if self.multipath:\n            return os.pathsep.join(path_list)\n        return path_list[0]\n\n    @property\n    def site_data_path(self) -> Path:\n        \"\"\":return: data path shared by users. Only return the first item, even if ``multipath`` is set to ``True``\"\"\"\n        return self._first_item_as_path_if_multipath(self.site_data_dir)\n\n    @property\n    def user_config_dir(self) -> str:\n        \"\"\":return: config directory tied to the user, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def site_config_dir(self) -> str:\n        \"\"\":return: config directory shared by the users, same as `site_data_dir`\"\"\"\n        return self.site_data_dir\n\n    @property\n    def user_cache_dir(self) -> str:\n        \"\"\":return: cache directory tied to the user, e.g. ``~/Library/Caches/$appname/$version``\"\"\"\n        return self._append_app_name_and_version(os.path.expanduser(\"~/Library/Caches\"))  # noqa: PTH111\n\n    @property\n    def site_cache_dir(self) -> str:\n        \"\"\"\n        :return: cache directory shared by users, e.g. ``/Library/Caches/$appname/$version``.\n          If we're using a Python binary managed by `Homebrew <https://brew.sh>`_, the directory\n          will be under the Homebrew prefix, e.g. ``$homebrew_prefix/var/cache/$appname/$version``.\n          If `multipath <platformdirs.api.PlatformDirsABC.multipath>` is enabled, and we're in Homebrew,\n          the response is a multi-path string separated by \":\", e.g.\n          ``$homebrew_prefix/var/cache/$appname/$version:/Library/Caches/$appname/$version``\n        \"\"\"\n        is_homebrew = \"/opt/python\" in sys.prefix\n        homebrew_prefix = sys.prefix.split(\"/opt/python\")[0] if is_homebrew else \"\"\n        path_list = [self._append_app_name_and_version(f\"{homebrew_prefix}/var/cache\")] if is_homebrew else []\n        path_list.append(self._append_app_name_and_version(\"/Library/Caches\"))\n        if self.multipath:\n            return os.pathsep.join(path_list)\n        return path_list[0]\n\n    @property\n    def site_cache_path(self) -> Path:\n        \"\"\":return: cache path shared by users. Only return the first item, even if ``multipath`` is set to ``True``\"\"\"\n        return self._first_item_as_path_if_multipath(self.site_cache_dir)\n\n    @property\n    def user_state_dir(self) -> str:\n        \"\"\":return: state directory tied to the user, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def user_log_dir(self) -> str:\n        \"\"\":return: log directory tied to the user, e.g. ``~/Library/Logs/$appname/$version``\"\"\"\n        return self._append_app_name_and_version(os.path.expanduser(\"~/Library/Logs\"))  # noqa: PTH111\n\n    @property\n    def user_documents_dir(self) -> str:\n        \"\"\":return: documents directory tied to the user, e.g. ``~/Documents``\"\"\"\n        return os.path.expanduser(\"~/Documents\")  # noqa: PTH111\n\n    @property\n    def user_downloads_dir(self) -> str:\n        \"\"\":return: downloads directory tied to the user, e.g. ``~/Downloads``\"\"\"\n        return os.path.expanduser(\"~/Downloads\")  # noqa: PTH111\n\n    @property\n    def user_pictures_dir(self) -> str:\n        \"\"\":return: pictures directory tied to the user, e.g. ``~/Pictures``\"\"\"\n        return os.path.expanduser(\"~/Pictures\")  # noqa: PTH111\n\n    @property\n    def user_videos_dir(self) -> str:\n        \"\"\":return: videos directory tied to the user, e.g. ``~/Movies``\"\"\"\n        return os.path.expanduser(\"~/Movies\")  # noqa: PTH111\n\n    @property\n    def user_music_dir(self) -> str:\n        \"\"\":return: music directory tied to the user, e.g. ``~/Music``\"\"\"\n        return os.path.expanduser(\"~/Music\")  # noqa: PTH111\n\n    @property\n    def user_desktop_dir(self) -> str:\n        \"\"\":return: desktop directory tied to the user, e.g. ``~/Desktop``\"\"\"\n        return os.path.expanduser(\"~/Desktop\")  # noqa: PTH111\n\n    @property\n    def user_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory tied to the user, e.g. ``~/Library/Caches/TemporaryItems/$appname/$version``\"\"\"\n        return self._append_app_name_and_version(os.path.expanduser(\"~/Library/Caches/TemporaryItems\"))  # noqa: PTH111\n\n    @property\n    def site_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory shared by users, same as `user_runtime_dir`\"\"\"\n        return self.user_runtime_dir\n\n\n__all__ = [\n    \"MacOS\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/macos.py",
        "start": 1,
        "end": 146,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 146,
          "column": 2,
          "position": 894
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/macos.py",
        "start": 1,
        "end": 146,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 146,
          "column": 2,
          "position": 894
        }
      }
    },
    {
      "format": "python",
      "lines": 299,
      "fragment": "\"\"\"Base API.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nfrom abc import ABC, abstractmethod\nfrom pathlib import Path\nfrom typing import TYPE_CHECKING\n\nif TYPE_CHECKING:\n    from collections.abc import Iterator\n    from typing import Literal\n\n\nclass PlatformDirsABC(ABC):  # noqa: PLR0904\n    \"\"\"Abstract base class for platform directories.\"\"\"\n\n    def __init__(  # noqa: PLR0913, PLR0917\n        self,\n        appname: str | None = None,\n        appauthor: str | Literal[False] | None = None,\n        version: str | None = None,\n        roaming: bool = False,  # noqa: FBT001, FBT002\n        multipath: bool = False,  # noqa: FBT001, FBT002\n        opinion: bool = True,  # noqa: FBT001, FBT002\n        ensure_exists: bool = False,  # noqa: FBT001, FBT002\n    ) -> None:\n        \"\"\"\n        Create a new platform directory.\n\n        :param appname: See `appname`.\n        :param appauthor: See `appauthor`.\n        :param version: See `version`.\n        :param roaming: See `roaming`.\n        :param multipath: See `multipath`.\n        :param opinion: See `opinion`.\n        :param ensure_exists: See `ensure_exists`.\n\n        \"\"\"\n        self.appname = appname  #: The name of application.\n        self.appauthor = appauthor\n        \"\"\"\n        The name of the app author or distributing body for this application.\n\n        Typically, it is the owning company name. Defaults to `appname`. You may pass ``False`` to disable it.\n\n        \"\"\"\n        self.version = version\n        \"\"\"\n        An optional version path element to append to the path.\n\n        You might want to use this if you want multiple versions of your app to be able to run independently. If used,\n        this would typically be ``<major>.<minor>``.\n\n        \"\"\"\n        self.roaming = roaming\n        \"\"\"\n        Whether to use the roaming appdata directory on Windows.\n\n        That means that for users on a Windows network setup for roaming profiles, this user data will be synced on\n        login (see\n        `here <https://technet.microsoft.com/en-us/library/cc766489(WS.10).aspx>`_).\n\n        \"\"\"\n        self.multipath = multipath\n        \"\"\"\n        An optional parameter which indicates that the entire list of data dirs should be returned.\n\n        By default, the first item would only be returned.\n\n        \"\"\"\n        self.opinion = opinion  #: A flag to indicating to use opinionated values.\n        self.ensure_exists = ensure_exists\n        \"\"\"\n        Optionally create the directory (and any missing parents) upon access if it does not exist.\n\n        By default, no directories are created.\n\n        \"\"\"\n\n    def _append_app_name_and_version(self, *base: str) -> str:\n        params = list(base[1:])\n        if self.appname:\n            params.append(self.appname)\n            if self.version:\n                params.append(self.version)\n        path = os.path.join(base[0], *params)  # noqa: PTH118\n        self._optionally_create_directory(path)\n        return path\n\n    def _optionally_create_directory(self, path: str) -> None:\n        if self.ensure_exists:\n            Path(path).mkdir(parents=True, exist_ok=True)\n\n    def _first_item_as_path_if_multipath(self, directory: str) -> Path:\n        if self.multipath:\n            # If multipath is True, the first path is returned.\n            directory = directory.partition(os.pathsep)[0]\n        return Path(directory)\n\n    @property\n    @abstractmethod\n    def user_data_dir(self) -> str:\n        \"\"\":return: data directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def site_data_dir(self) -> str:\n        \"\"\":return: data directory shared by users\"\"\"\n\n    @property\n    @abstractmethod\n    def user_config_dir(self) -> str:\n        \"\"\":return: config directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def site_config_dir(self) -> str:\n        \"\"\":return: config directory shared by the users\"\"\"\n\n    @property\n    @abstractmethod\n    def user_cache_dir(self) -> str:\n        \"\"\":return: cache directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def site_cache_dir(self) -> str:\n        \"\"\":return: cache directory shared by users\"\"\"\n\n    @property\n    @abstractmethod\n    def user_state_dir(self) -> str:\n        \"\"\":return: state directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_log_dir(self) -> str:\n        \"\"\":return: log directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_documents_dir(self) -> str:\n        \"\"\":return: documents directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_downloads_dir(self) -> str:\n        \"\"\":return: downloads directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_pictures_dir(self) -> str:\n        \"\"\":return: pictures directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_videos_dir(self) -> str:\n        \"\"\":return: videos directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_music_dir(self) -> str:\n        \"\"\":return: music directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_desktop_dir(self) -> str:\n        \"\"\":return: desktop directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def user_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory tied to the user\"\"\"\n\n    @property\n    @abstractmethod\n    def site_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory shared by users\"\"\"\n\n    @property\n    def user_data_path(self) -> Path:\n        \"\"\":return: data path tied to the user\"\"\"\n        return Path(self.user_data_dir)\n\n    @property\n    def site_data_path(self) -> Path:\n        \"\"\":return: data path shared by users\"\"\"\n        return Path(self.site_data_dir)\n\n    @property\n    def user_config_path(self) -> Path:\n        \"\"\":return: config path tied to the user\"\"\"\n        return Path(self.user_config_dir)\n\n    @property\n    def site_config_path(self) -> Path:\n        \"\"\":return: config path shared by the users\"\"\"\n        return Path(self.site_config_dir)\n\n    @property\n    def user_cache_path(self) -> Path:\n        \"\"\":return: cache path tied to the user\"\"\"\n        return Path(self.user_cache_dir)\n\n    @property\n    def site_cache_path(self) -> Path:\n        \"\"\":return: cache path shared by users\"\"\"\n        return Path(self.site_cache_dir)\n\n    @property\n    def user_state_path(self) -> Path:\n        \"\"\":return: state path tied to the user\"\"\"\n        return Path(self.user_state_dir)\n\n    @property\n    def user_log_path(self) -> Path:\n        \"\"\":return: log path tied to the user\"\"\"\n        return Path(self.user_log_dir)\n\n    @property\n    def user_documents_path(self) -> Path:\n        \"\"\":return: documents a path tied to the user\"\"\"\n        return Path(self.user_documents_dir)\n\n    @property\n    def user_downloads_path(self) -> Path:\n        \"\"\":return: downloads path tied to the user\"\"\"\n        return Path(self.user_downloads_dir)\n\n    @property\n    def user_pictures_path(self) -> Path:\n        \"\"\":return: pictures path tied to the user\"\"\"\n        return Path(self.user_pictures_dir)\n\n    @property\n    def user_videos_path(self) -> Path:\n        \"\"\":return: videos path tied to the user\"\"\"\n        return Path(self.user_videos_dir)\n\n    @property\n    def user_music_path(self) -> Path:\n        \"\"\":return: music path tied to the user\"\"\"\n        return Path(self.user_music_dir)\n\n    @property\n    def user_desktop_path(self) -> Path:\n        \"\"\":return: desktop path tied to the user\"\"\"\n        return Path(self.user_desktop_dir)\n\n    @property\n    def user_runtime_path(self) -> Path:\n        \"\"\":return: runtime path tied to the user\"\"\"\n        return Path(self.user_runtime_dir)\n\n    @property\n    def site_runtime_path(self) -> Path:\n        \"\"\":return: runtime path shared by users\"\"\"\n        return Path(self.site_runtime_dir)\n\n    def iter_config_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site configuration directories.\"\"\"\n        yield self.user_config_dir\n        yield self.site_config_dir\n\n    def iter_data_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site data directories.\"\"\"\n        yield self.user_data_dir\n        yield self.site_data_dir\n\n    def iter_cache_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site cache directories.\"\"\"\n        yield self.user_cache_dir\n        yield self.site_cache_dir\n\n    def iter_runtime_dirs(self) -> Iterator[str]:\n        \"\"\":yield: all user and site runtime directories.\"\"\"\n        yield self.user_runtime_dir\n        yield self.site_runtime_dir\n\n    def iter_config_paths(self) -> Iterator[Path]:\n        \"\"\":yield: all user and site configuration paths.\"\"\"\n        for path in self.iter_config_dirs():\n            yield Path(path)\n\n    def iter_data_paths(self) -> Iterator[Path]:\n        \"\"\":yield: all user and site data paths.\"\"\"\n        for path in self.iter_data_dirs():\n            yield Path(path)\n\n    def iter_cache_paths(self) -> Iterator[Path]:\n        \"\"\":yield: all user and site cache paths.\"\"\"\n        for path in self.iter_cache_dirs():\n            yield Path(path)\n\n    def iter_runtime_paths(self) -> Iterator[Path]:\n        \"\"\":yield: all user and site runtime paths.\"\"\"\n        for path in self.iter_runtime_dirs():\n            yield Path(path)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/api.py",
        "start": 1,
        "end": 299,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 1729
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/api.py",
        "start": 1,
        "end": 299,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 299,
          "column": 2,
          "position": 1729
        }
      }
    },
    {
      "format": "python",
      "lines": 249,
      "fragment": "\"\"\"Android.\"\"\"\n\nfrom __future__ import annotations\n\nimport os\nimport re\nimport sys\nfrom functools import lru_cache\nfrom typing import TYPE_CHECKING, cast\n\nfrom .api import PlatformDirsABC\n\n\nclass Android(PlatformDirsABC):\n    \"\"\"\n    Follows the guidance `from here <https://android.stackexchange.com/a/216132>`_.\n\n    Makes use of the `appname <platformdirs.api.PlatformDirsABC.appname>`, `version\n    <platformdirs.api.PlatformDirsABC.version>`, `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n\n    \"\"\"\n\n    @property\n    def user_data_dir(self) -> str:\n        \"\"\":return: data directory tied to the user, e.g. ``/data/user/<userid>/<packagename>/files/<AppName>``\"\"\"\n        return self._append_app_name_and_version(cast(\"str\", _android_folder()), \"files\")\n\n    @property\n    def site_data_dir(self) -> str:\n        \"\"\":return: data directory shared by users, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def user_config_dir(self) -> str:\n        \"\"\"\n        :return: config directory tied to the user, e.g. \\\n        ``/data/user/<userid>/<packagename>/shared_prefs/<AppName>``\n        \"\"\"\n        return self._append_app_name_and_version(cast(\"str\", _android_folder()), \"shared_prefs\")\n\n    @property\n    def site_config_dir(self) -> str:\n        \"\"\":return: config directory shared by the users, same as `user_config_dir`\"\"\"\n        return self.user_config_dir\n\n    @property\n    def user_cache_dir(self) -> str:\n        \"\"\":return: cache directory tied to the user, e.g.,``/data/user/<userid>/<packagename>/cache/<AppName>``\"\"\"\n        return self._append_app_name_and_version(cast(\"str\", _android_folder()), \"cache\")\n\n    @property\n    def site_cache_dir(self) -> str:\n        \"\"\":return: cache directory shared by users, same as `user_cache_dir`\"\"\"\n        return self.user_cache_dir\n\n    @property\n    def user_state_dir(self) -> str:\n        \"\"\":return: state directory tied to the user, same as `user_data_dir`\"\"\"\n        return self.user_data_dir\n\n    @property\n    def user_log_dir(self) -> str:\n        \"\"\"\n        :return: log directory tied to the user, same as `user_cache_dir` if not opinionated else ``log`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/log``\n        \"\"\"\n        path = self.user_cache_dir\n        if self.opinion:\n            path = os.path.join(path, \"log\")  # noqa: PTH118\n        return path\n\n    @property\n    def user_documents_dir(self) -> str:\n        \"\"\":return: documents directory tied to the user e.g. ``/storage/emulated/0/Documents``\"\"\"\n        return _android_documents_folder()\n\n    @property\n    def user_downloads_dir(self) -> str:\n        \"\"\":return: downloads directory tied to the user e.g. ``/storage/emulated/0/Downloads``\"\"\"\n        return _android_downloads_folder()\n\n    @property\n    def user_pictures_dir(self) -> str:\n        \"\"\":return: pictures directory tied to the user e.g. ``/storage/emulated/0/Pictures``\"\"\"\n        return _android_pictures_folder()\n\n    @property\n    def user_videos_dir(self) -> str:\n        \"\"\":return: videos directory tied to the user e.g. ``/storage/emulated/0/DCIM/Camera``\"\"\"\n        return _android_videos_folder()\n\n    @property\n    def user_music_dir(self) -> str:\n        \"\"\":return: music directory tied to the user e.g. ``/storage/emulated/0/Music``\"\"\"\n        return _android_music_folder()\n\n    @property\n    def user_desktop_dir(self) -> str:\n        \"\"\":return: desktop directory tied to the user e.g. ``/storage/emulated/0/Desktop``\"\"\"\n        return \"/storage/emulated/0/Desktop\"\n\n    @property\n    def user_runtime_dir(self) -> str:\n        \"\"\"\n        :return: runtime directory tied to the user, same as `user_cache_dir` if not opinionated else ``tmp`` in it,\n          e.g. ``/data/user/<userid>/<packagename>/cache/<AppName>/tmp``\n        \"\"\"\n        path = self.user_cache_dir\n        if self.opinion:\n            path = os.path.join(path, \"tmp\")  # noqa: PTH118\n        return path\n\n    @property\n    def site_runtime_dir(self) -> str:\n        \"\"\":return: runtime directory shared by users, same as `user_runtime_dir`\"\"\"\n        return self.user_runtime_dir\n\n\n@lru_cache(maxsize=1)\ndef _android_folder() -> str | None:  # noqa: C901\n    \"\"\":return: base folder for the Android OS or None if it cannot be found\"\"\"\n    result: str | None = None\n    # type checker isn't happy with our \"import android\", just don't do this when type checking see\n    # https://stackoverflow.com/a/61394121\n    if not TYPE_CHECKING:\n        try:\n            # First try to get a path to android app using python4android (if available)...\n            from android import mActivity  # noqa: PLC0415\n\n            context = cast(\"android.content.Context\", mActivity.getApplicationContext())  # noqa: F821\n            result = context.getFilesDir().getParentFile().getAbsolutePath()\n        except Exception:  # noqa: BLE001\n            result = None\n    if result is None:\n        try:\n            # ...and fall back to using plain pyjnius, if python4android isn't available or doesn't deliver any useful\n            # result...\n            from jnius import autoclass  # noqa: PLC0415\n\n            context = autoclass(\"android.content.Context\")\n            result = context.getFilesDir().getParentFile().getAbsolutePath()\n        except Exception:  # noqa: BLE001\n            result = None\n    if result is None:\n        # and if that fails, too, find an android folder looking at path on the sys.path\n        # warning: only works for apps installed under /data, not adopted storage etc.\n        pattern = re.compile(r\"/data/(data|user/\\d+)/(.+)/files\")\n        for path in sys.path:\n            if pattern.match(path):\n                result = path.split(\"/files\")[0]\n                break\n        else:\n            result = None\n    if result is None:\n        # one last try: find an android folder looking at path on the sys.path taking adopted storage paths into\n        # account\n        pattern = re.compile(r\"/mnt/expand/[a-fA-F0-9-]{36}/(data|user/\\d+)/(.+)/files\")\n        for path in sys.path:\n            if pattern.match(path):\n                result = path.split(\"/files\")[0]\n                break\n        else:\n            result = None\n    return result\n\n\n@lru_cache(maxsize=1)\ndef _android_documents_folder() -> str:\n    \"\"\":return: documents folder for the Android OS\"\"\"\n    # Get directories with pyjnius\n    try:\n        from jnius import autoclass  # noqa: PLC0415\n\n        context = autoclass(\"android.content.Context\")\n        environment = autoclass(\"android.os.Environment\")\n        documents_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOCUMENTS).getAbsolutePath()\n    except Exception:  # noqa: BLE001\n        documents_dir = \"/storage/emulated/0/Documents\"\n\n    return documents_dir\n\n\n@lru_cache(maxsize=1)\ndef _android_downloads_folder() -> str:\n    \"\"\":return: downloads folder for the Android OS\"\"\"\n    # Get directories with pyjnius\n    try:\n        from jnius import autoclass  # noqa: PLC0415\n\n        context = autoclass(\"android.content.Context\")\n        environment = autoclass(\"android.os.Environment\")\n        downloads_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DOWNLOADS).getAbsolutePath()\n    except Exception:  # noqa: BLE001\n        downloads_dir = \"/storage/emulated/0/Downloads\"\n\n    return downloads_dir\n\n\n@lru_cache(maxsize=1)\ndef _android_pictures_folder() -> str:\n    \"\"\":return: pictures folder for the Android OS\"\"\"\n    # Get directories with pyjnius\n    try:\n        from jnius import autoclass  # noqa: PLC0415\n\n        context = autoclass(\"android.content.Context\")\n        environment = autoclass(\"android.os.Environment\")\n        pictures_dir: str = context.getExternalFilesDir(environment.DIRECTORY_PICTURES).getAbsolutePath()\n    except Exception:  # noqa: BLE001\n        pictures_dir = \"/storage/emulated/0/Pictures\"\n\n    return pictures_dir\n\n\n@lru_cache(maxsize=1)\ndef _android_videos_folder() -> str:\n    \"\"\":return: videos folder for the Android OS\"\"\"\n    # Get directories with pyjnius\n    try:\n        from jnius import autoclass  # noqa: PLC0415\n\n        context = autoclass(\"android.content.Context\")\n        environment = autoclass(\"android.os.Environment\")\n        videos_dir: str = context.getExternalFilesDir(environment.DIRECTORY_DCIM).getAbsolutePath()\n    except Exception:  # noqa: BLE001\n        videos_dir = \"/storage/emulated/0/DCIM/Camera\"\n\n    return videos_dir\n\n\n@lru_cache(maxsize=1)\ndef _android_music_folder() -> str:\n    \"\"\":return: music folder for the Android OS\"\"\"\n    # Get directories with pyjnius\n    try:\n        from jnius import autoclass  # noqa: PLC0415\n\n        context = autoclass(\"android.content.Context\")\n        environment = autoclass(\"android.os.Environment\")\n        music_dir: str = context.getExternalFilesDir(environment.DIRECTORY_MUSIC).getAbsolutePath()\n    except Exception:  # noqa: BLE001\n        music_dir = \"/storage/emulated/0/Music\"\n\n    return music_dir\n\n\n__all__ = [\n    \"Android\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/android.py",
        "start": 1,
        "end": 249,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 249,
          "column": 2,
          "position": 1548
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/android.py",
        "start": 1,
        "end": 249,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 249,
          "column": 2,
          "position": 1548
        }
      }
    },
    {
      "format": "python",
      "lines": 51,
      "fragment": "platformdirs import PlatformDirs, __version__\n\nPROPS = (\n    \"user_data_dir\",\n    \"user_config_dir\",\n    \"user_cache_dir\",\n    \"user_state_dir\",\n    \"user_log_dir\",\n    \"user_documents_dir\",\n    \"user_downloads_dir\",\n    \"user_pictures_dir\",\n    \"user_videos_dir\",\n    \"user_music_dir\",\n    \"user_runtime_dir\",\n    \"site_data_dir\",\n    \"site_config_dir\",\n    \"site_cache_dir\",\n    \"site_runtime_dir\",\n)\n\n\ndef main() -> None:\n    \"\"\"Run the main entry point.\"\"\"\n    app_name = \"MyApp\"\n    app_author = \"MyCompany\"\n\n    print(f\"-- platformdirs {__version__} --\")  # noqa: T201\n\n    print(\"-- app dirs (with optional 'version')\")  # noqa: T201\n    dirs = PlatformDirs(app_name, app_author, version=\"1.0\")\n    for prop in PROPS:\n        print(f\"{prop}: {getattr(dirs, prop)}\")  # noqa: T201\n\n    print(\"\\n-- app dirs (without optional 'version')\")  # noqa: T201\n    dirs = PlatformDirs(app_name, app_author)\n    for prop in PROPS:\n        print(f\"{prop}: {getattr(dirs, prop)}\")  # noqa: T201\n\n    print(\"\\n-- app dirs (without optional 'appauthor')\")  # noqa: T201\n    dirs = PlatformDirs(app_name)\n    for prop in PROPS:\n        print(f\"{prop}: {getattr(dirs, prop)}\")  # noqa: T201\n\n    print(\"\\n-- app dirs (with disabled 'appauthor')\")  # noqa: T201\n    dirs = PlatformDirs(app_name, appauthor=False)\n    for prop in PROPS:\n        print(f\"{prop}: {getattr(dirs, prop)}\")  # noqa: T201\n\n\nif __name__ == \"__main__\":\n    main()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/__main__.py",
        "start": 5,
        "end": 55,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 14
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 315
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/__main__.py",
        "start": 5,
        "end": 55,
        "startLoc": {
          "line": 5,
          "column": 2,
          "position": 18
        },
        "endLoc": {
          "line": 55,
          "column": 2,
          "position": 319
        }
      }
    },
    {
      "format": "python",
      "lines": 594,
      "fragment": "platformdirs.android import Android  # noqa: PLC0415\n\n            return Android  # return to avoid redefinition of a result\n\n    return _Result\n\n\nif TYPE_CHECKING:\n    # Work around mypy issue: https://github.com/python/mypy/issues/10962\n    PlatformDirs = _Result\nelse:\n    PlatformDirs = _set_platform_dir_class()  #: Currently active platform\nAppDirs = PlatformDirs  #: Backwards compatibility with appdirs\n\n\ndef user_data_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_data_dir\n\n\ndef site_data_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    multipath: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data directory shared by users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        multipath=multipath,\n        ensure_exists=ensure_exists,\n    ).site_data_dir\n\n\ndef user_config_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_config_dir\n\n\ndef site_config_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    multipath: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config directory shared by the users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        multipath=multipath,\n        ensure_exists=ensure_exists,\n    ).site_config_dir\n\n\ndef user_cache_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_cache_dir\n\n\ndef site_cache_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).site_cache_dir\n\n\ndef user_state_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: state directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_state_dir\n\n\ndef user_log_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: log directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_log_dir\n\n\ndef user_documents_dir() -> str:\n    \"\"\":returns: documents directory tied to the user\"\"\"\n    return PlatformDirs().user_documents_dir\n\n\ndef user_downloads_dir() -> str:\n    \"\"\":returns: downloads directory tied to the user\"\"\"\n    return PlatformDirs().user_downloads_dir\n\n\ndef user_pictures_dir() -> str:\n    \"\"\":returns: pictures directory tied to the user\"\"\"\n    return PlatformDirs().user_pictures_dir\n\n\ndef user_videos_dir() -> str:\n    \"\"\":returns: videos directory tied to the user\"\"\"\n    return PlatformDirs().user_videos_dir\n\n\ndef user_music_dir() -> str:\n    \"\"\":returns: music directory tied to the user\"\"\"\n    return PlatformDirs().user_music_dir\n\n\ndef user_desktop_dir() -> str:\n    \"\"\":returns: desktop directory tied to the user\"\"\"\n    return PlatformDirs().user_desktop_dir\n\n\ndef user_runtime_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_runtime_dir\n\n\ndef site_runtime_dir(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> str:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime directory shared by users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).site_runtime_dir\n\n\ndef user_data_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_data_path\n\n\ndef site_data_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    multipath: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `multipath <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: data path shared by users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        multipath=multipath,\n        ensure_exists=ensure_exists,\n    ).site_data_path\n\n\ndef user_config_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_config_path\n\n\ndef site_config_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    multipath: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param multipath: See `roaming <platformdirs.api.PlatformDirsABC.multipath>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: config path shared by the users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        multipath=multipath,\n        ensure_exists=ensure_exists,\n    ).site_config_path\n\n\ndef site_cache_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache directory tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).site_cache_path\n\n\ndef user_cache_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: cache path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_cache_path\n\n\ndef user_state_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    roaming: bool = False,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param roaming: See `roaming <platformdirs.api.PlatformDirsABC.roaming>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: state path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        roaming=roaming,\n        ensure_exists=ensure_exists,\n    ).user_state_path\n\n\ndef user_log_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `roaming <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: log path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_log_path\n\n\ndef user_documents_path() -> Path:\n    \"\"\":returns: documents a path tied to the user\"\"\"\n    return PlatformDirs().user_documents_path\n\n\ndef user_downloads_path() -> Path:\n    \"\"\":returns: downloads path tied to the user\"\"\"\n    return PlatformDirs().user_downloads_path\n\n\ndef user_pictures_path() -> Path:\n    \"\"\":returns: pictures path tied to the user\"\"\"\n    return PlatformDirs().user_pictures_path\n\n\ndef user_videos_path() -> Path:\n    \"\"\":returns: videos path tied to the user\"\"\"\n    return PlatformDirs().user_videos_path\n\n\ndef user_music_path() -> Path:\n    \"\"\":returns: music path tied to the user\"\"\"\n    return PlatformDirs().user_music_path\n\n\ndef user_desktop_path() -> Path:\n    \"\"\":returns: desktop path tied to the user\"\"\"\n    return PlatformDirs().user_desktop_path\n\n\ndef user_runtime_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime path tied to the user\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).user_runtime_path\n\n\ndef site_runtime_path(\n    appname: str | None = None,\n    appauthor: str | Literal[False] | None = None,\n    version: str | None = None,\n    opinion: bool = True,  # noqa: FBT001, FBT002\n    ensure_exists: bool = False,  # noqa: FBT001, FBT002\n) -> Path:\n    \"\"\"\n    :param appname: See `appname <platformdirs.api.PlatformDirsABC.appname>`.\n    :param appauthor: See `appauthor <platformdirs.api.PlatformDirsABC.appauthor>`.\n    :param version: See `version <platformdirs.api.PlatformDirsABC.version>`.\n    :param opinion: See `opinion <platformdirs.api.PlatformDirsABC.opinion>`.\n    :param ensure_exists: See `ensure_exists <platformdirs.api.PlatformDirsABC.ensure_exists>`.\n    :returns: runtime path shared by users\n    \"\"\"\n    return PlatformDirs(\n        appname=appname,\n        appauthor=appauthor,\n        version=version,\n        opinion=opinion,\n        ensure_exists=ensure_exists,\n    ).site_runtime_path\n\n\n__all__ = [\n    \"AppDirs\",\n    \"PlatformDirs\",\n    \"PlatformDirsABC\",\n    \"__version__\",\n    \"__version_info__\",\n    \"site_cache_dir\",\n    \"site_cache_path\",\n    \"site_config_dir\",\n    \"site_config_path\",\n    \"site_data_dir\",\n    \"site_data_path\",\n    \"site_runtime_dir\",\n    \"site_runtime_path\",\n    \"user_cache_dir\",\n    \"user_cache_path\",\n    \"user_config_dir\",\n    \"user_config_path\",\n    \"user_data_dir\",\n    \"user_data_path\",\n    \"user_desktop_dir\",\n    \"user_desktop_path\",\n    \"user_documents_dir\",\n    \"user_documents_path\",\n    \"user_downloads_dir\",\n    \"user_downloads_path\",\n    \"user_log_dir\",\n    \"user_log_path\",\n    \"user_music_dir\",\n    \"user_music_path\",\n    \"user_pictures_dir\",\n    \"user_pictures_path\",\n    \"user_runtime_dir\",\n    \"user_runtime_path\",\n    \"user_state_dir\",\n    \"user_state_path\",\n    \"user_videos_dir\",\n    \"user_videos_path\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/platformdirs/__init__.py",
        "start": 38,
        "end": 631,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 257
        },
        "endLoc": {
          "line": 631,
          "column": 2,
          "position": 3528
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/__init__.py",
        "start": 38,
        "end": 631,
        "startLoc": {
          "line": 38,
          "column": 2,
          "position": 277
        },
        "endLoc": {
          "line": 631,
          "column": 2,
          "position": 3548
        }
      }
    },
    {
      "format": "python",
      "lines": 573,
      "fragment": "from __future__ import annotations\n\nimport itertools\nimport re\nfrom typing import Any, Callable, NamedTuple, SupportsInt, Tuple, Union\n\nfrom ._structures import Infinity, InfinityType, NegativeInfinity, NegativeInfinityType\n\n__all__ = [\"VERSION_PATTERN\", \"InvalidVersion\", \"Version\", \"parse\"]\n\nLocalType = Tuple[Union[int, str], ...]\n\nCmpPrePostDevType = Union[InfinityType, NegativeInfinityType, Tuple[str, int]]\nCmpLocalType = Union[\n    NegativeInfinityType,\n    Tuple[Union[Tuple[int, str], Tuple[NegativeInfinityType, Union[int, str]]], ...],\n]\nCmpKey = Tuple[\n    int,\n    Tuple[int, ...],\n    CmpPrePostDevType,\n    CmpPrePostDevType,\n    CmpPrePostDevType,\n    CmpLocalType,\n]\nVersionComparisonMethod = Callable[[CmpKey, CmpKey], bool]\n\n\nclass _Version(NamedTuple):\n    epoch: int\n    release: tuple[int, ...]\n    dev: tuple[str, int] | None\n    pre: tuple[str, int] | None\n    post: tuple[str, int] | None\n    local: LocalType | None\n\n\ndef parse(version: str) -> Version:\n    \"\"\"Parse the given version string.\n\n    >>> parse('1.0.dev1')\n    <Version('1.0.dev1')>\n\n    :param version: The version string to parse.\n    :raises InvalidVersion: When the version string is not a valid version.\n    \"\"\"\n    return Version(version)\n\n\nclass InvalidVersion(ValueError):\n    \"\"\"Raised when a version string is not a valid version.\n\n    >>> Version(\"invalid\")\n    Traceback (most recent call last):\n        ...\n    packaging.version.InvalidVersion: Invalid version: 'invalid'\n    \"\"\"\n\n\nclass _BaseVersion:\n    _key: tuple[Any, ...]\n\n    def __hash__(self) -> int:\n        return hash(self._key)\n\n    # Please keep the duplicated `isinstance` check\n    # in the six comparisons hereunder\n    # unless you find a way to avoid adding overhead function calls.\n    def __lt__(self, other: _BaseVersion) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key < other._key\n\n    def __le__(self, other: _BaseVersion) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key <= other._key\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key == other._key\n\n    def __ge__(self, other: _BaseVersion) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key >= other._key\n\n    def __gt__(self, other: _BaseVersion) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key > other._key\n\n    def __ne__(self, other: object) -> bool:\n        if not isinstance(other, _BaseVersion):\n            return NotImplemented\n\n        return self._key != other._key\n\n\n# Deliberately not anchored to the start and end of the string, to make it\n# easier for 3rd party code to reuse\n_VERSION_PATTERN = r\"\"\"\n    v?\n    (?:\n        (?:(?P<epoch>[0-9]+)!)?                           # epoch\n        (?P<release>[0-9]+(?:\\.[0-9]+)*)                  # release segment\n        (?P<pre>                                          # pre-release\n            [-_\\.]?\n            (?P<pre_l>alpha|a|beta|b|preview|pre|c|rc)\n            [-_\\.]?\n            (?P<pre_n>[0-9]+)?\n        )?\n        (?P<post>                                         # post release\n            (?:-(?P<post_n1>[0-9]+))\n            |\n            (?:\n                [-_\\.]?\n                (?P<post_l>post|rev|r)\n                [-_\\.]?\n                (?P<post_n2>[0-9]+)?\n            )\n        )?\n        (?P<dev>                                          # dev release\n            [-_\\.]?\n            (?P<dev_l>dev)\n            [-_\\.]?\n            (?P<dev_n>[0-9]+)?\n        )?\n    )\n    (?:\\+(?P<local>[a-z0-9]+(?:[-_\\.][a-z0-9]+)*))?       # local version\n\"\"\"\n\nVERSION_PATTERN = _VERSION_PATTERN\n\"\"\"\nA string containing the regular expression used to match a valid version.\n\nThe pattern is not anchored at either end, and is intended for embedding in larger\nexpressions (for example, matching a version number as part of a file name). The\nregular expression should be compiled with the ``re.VERBOSE`` and ``re.IGNORECASE``\nflags set.\n\n:meta hide-value:\n\"\"\"\n\n\nclass Version(_BaseVersion):\n    \"\"\"This class abstracts handling of a project's versions.\n\n    A :class:`Version` instance is comparison aware and can be compared and\n    sorted using the standard Python interfaces.\n\n    >>> v1 = Version(\"1.0a5\")\n    >>> v2 = Version(\"1.0\")\n    >>> v1\n    <Version('1.0a5')>\n    >>> v2\n    <Version('1.0')>\n    >>> v1 < v2\n    True\n    >>> v1 == v2\n    False\n    >>> v1 > v2\n    False\n    >>> v1 >= v2\n    False\n    >>> v1 <= v2\n    True\n    \"\"\"\n\n    _regex = re.compile(r\"^\\s*\" + VERSION_PATTERN + r\"\\s*$\", re.VERBOSE | re.IGNORECASE)\n    _key: CmpKey\n\n    def __init__(self, version: str) -> None:\n        \"\"\"Initialize a Version object.\n\n        :param version:\n            The string representation of a version which will be parsed and normalized\n            before use.\n        :raises InvalidVersion:\n            If the ``version`` does not conform to PEP 440 in any way then this\n            exception will be raised.\n        \"\"\"\n\n        # Validate the version and parse it into pieces\n        match = self._regex.search(version)\n        if not match:\n            raise InvalidVersion(f\"Invalid version: {version!r}\")\n\n        # Store the parsed out pieces of the version\n        self._version = _Version(\n            epoch=int(match.group(\"epoch\")) if match.group(\"epoch\") else 0,\n            release=tuple(int(i) for i in match.group(\"release\").split(\".\")),\n            pre=_parse_letter_version(match.group(\"pre_l\"), match.group(\"pre_n\")),\n            post=_parse_letter_version(\n                match.group(\"post_l\"), match.group(\"post_n1\") or match.group(\"post_n2\")\n            ),\n            dev=_parse_letter_version(match.group(\"dev_l\"), match.group(\"dev_n\")),\n            local=_parse_local_version(match.group(\"local\")),\n        )\n\n        # Generate a key which will be used for sorting\n        self._key = _cmpkey(\n            self._version.epoch,\n            self._version.release,\n            self._version.pre,\n            self._version.post,\n            self._version.dev,\n            self._version.local,\n        )\n\n    def __repr__(self) -> str:\n        \"\"\"A representation of the Version that shows all internal state.\n\n        >>> Version('1.0.0')\n        <Version('1.0.0')>\n        \"\"\"\n        return f\"<Version('{self}')>\"\n\n    def __str__(self) -> str:\n        \"\"\"A string representation of the version that can be round-tripped.\n\n        >>> str(Version(\"1.0a5\"))\n        '1.0a5'\n        \"\"\"\n        parts = []\n\n        # Epoch\n        if self.epoch != 0:\n            parts.append(f\"{self.epoch}!\")\n\n        # Release segment\n        parts.append(\".\".join(str(x) for x in self.release))\n\n        # Pre-release\n        if self.pre is not None:\n            parts.append(\"\".join(str(x) for x in self.pre))\n\n        # Post-release\n        if self.post is not None:\n            parts.append(f\".post{self.post}\")\n\n        # Development release\n        if self.dev is not None:\n            parts.append(f\".dev{self.dev}\")\n\n        # Local version segment\n        if self.local is not None:\n            parts.append(f\"+{self.local}\")\n\n        return \"\".join(parts)\n\n    @property\n    def epoch(self) -> int:\n        \"\"\"The epoch of the version.\n\n        >>> Version(\"2.0.0\").epoch\n        0\n        >>> Version(\"1!2.0.0\").epoch\n        1\n        \"\"\"\n        return self._version.epoch\n\n    @property\n    def release(self) -> tuple[int, ...]:\n        \"\"\"The components of the \"release\" segment of the version.\n\n        >>> Version(\"1.2.3\").release\n        (1, 2, 3)\n        >>> Version(\"2.0.0\").release\n        (2, 0, 0)\n        >>> Version(\"1!2.0.0.post0\").release\n        (2, 0, 0)\n\n        Includes trailing zeroes but not the epoch or any pre-release / development /\n        post-release suffixes.\n        \"\"\"\n        return self._version.release\n\n    @property\n    def pre(self) -> tuple[str, int] | None:\n        \"\"\"The pre-release segment of the version.\n\n        >>> print(Version(\"1.2.3\").pre)\n        None\n        >>> Version(\"1.2.3a1\").pre\n        ('a', 1)\n        >>> Version(\"1.2.3b1\").pre\n        ('b', 1)\n        >>> Version(\"1.2.3rc1\").pre\n        ('rc', 1)\n        \"\"\"\n        return self._version.pre\n\n    @property\n    def post(self) -> int | None:\n        \"\"\"The post-release number of the version.\n\n        >>> print(Version(\"1.2.3\").post)\n        None\n        >>> Version(\"1.2.3.post1\").post\n        1\n        \"\"\"\n        return self._version.post[1] if self._version.post else None\n\n    @property\n    def dev(self) -> int | None:\n        \"\"\"The development number of the version.\n\n        >>> print(Version(\"1.2.3\").dev)\n        None\n        >>> Version(\"1.2.3.dev1\").dev\n        1\n        \"\"\"\n        return self._version.dev[1] if self._version.dev else None\n\n    @property\n    def local(self) -> str | None:\n        \"\"\"The local version segment of the version.\n\n        >>> print(Version(\"1.2.3\").local)\n        None\n        >>> Version(\"1.2.3+abc\").local\n        'abc'\n        \"\"\"\n        if self._version.local:\n            return \".\".join(str(x) for x in self._version.local)\n        else:\n            return None\n\n    @property\n    def public(self) -> str:\n        \"\"\"The public portion of the version.\n\n        >>> Version(\"1.2.3\").public\n        '1.2.3'\n        >>> Version(\"1.2.3+abc\").public\n        '1.2.3'\n        >>> Version(\"1!1.2.3dev1+abc\").public\n        '1!1.2.3.dev1'\n        \"\"\"\n        return str(self).split(\"+\", 1)[0]\n\n    @property\n    def base_version(self) -> str:\n        \"\"\"The \"base version\" of the version.\n\n        >>> Version(\"1.2.3\").base_version\n        '1.2.3'\n        >>> Version(\"1.2.3+abc\").base_version\n        '1.2.3'\n        >>> Version(\"1!1.2.3dev1+abc\").base_version\n        '1!1.2.3'\n\n        The \"base version\" is the public version of the project without any pre or post\n        release markers.\n        \"\"\"\n        parts = []\n\n        # Epoch\n        if self.epoch != 0:\n            parts.append(f\"{self.epoch}!\")\n\n        # Release segment\n        parts.append(\".\".join(str(x) for x in self.release))\n\n        return \"\".join(parts)\n\n    @property\n    def is_prerelease(self) -> bool:\n        \"\"\"Whether this version is a pre-release.\n\n        >>> Version(\"1.2.3\").is_prerelease\n        False\n        >>> Version(\"1.2.3a1\").is_prerelease\n        True\n        >>> Version(\"1.2.3b1\").is_prerelease\n        True\n        >>> Version(\"1.2.3rc1\").is_prerelease\n        True\n        >>> Version(\"1.2.3dev1\").is_prerelease\n        True\n        \"\"\"\n        return self.dev is not None or self.pre is not None\n\n    @property\n    def is_postrelease(self) -> bool:\n        \"\"\"Whether this version is a post-release.\n\n        >>> Version(\"1.2.3\").is_postrelease\n        False\n        >>> Version(\"1.2.3.post1\").is_postrelease\n        True\n        \"\"\"\n        return self.post is not None\n\n    @property\n    def is_devrelease(self) -> bool:\n        \"\"\"Whether this version is a development release.\n\n        >>> Version(\"1.2.3\").is_devrelease\n        False\n        >>> Version(\"1.2.3.dev1\").is_devrelease\n        True\n        \"\"\"\n        return self.dev is not None\n\n    @property\n    def major(self) -> int:\n        \"\"\"The first item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").major\n        1\n        \"\"\"\n        return self.release[0] if len(self.release) >= 1 else 0\n\n    @property\n    def minor(self) -> int:\n        \"\"\"The second item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").minor\n        2\n        >>> Version(\"1\").minor\n        0\n        \"\"\"\n        return self.release[1] if len(self.release) >= 2 else 0\n\n    @property\n    def micro(self) -> int:\n        \"\"\"The third item of :attr:`release` or ``0`` if unavailable.\n\n        >>> Version(\"1.2.3\").micro\n        3\n        >>> Version(\"1\").micro\n        0\n        \"\"\"\n        return self.release[2] if len(self.release) >= 3 else 0\n\n\nclass _TrimmedRelease(Version):\n    @property\n    def release(self) -> tuple[int, ...]:\n        \"\"\"\n        Release segment without any trailing zeros.\n\n        >>> _TrimmedRelease('1.0.0').release\n        (1,)\n        >>> _TrimmedRelease('0.0').release\n        (0,)\n        \"\"\"\n        rel = super().release\n        nonzeros = (index for index, val in enumerate(rel) if val)\n        last_nonzero = max(nonzeros, default=0)\n        return rel[: last_nonzero + 1]\n\n\ndef _parse_letter_version(\n    letter: str | None, number: str | bytes | SupportsInt | None\n) -> tuple[str, int] | None:\n    if letter:\n        # We consider there to be an implicit 0 in a pre-release if there is\n        # not a numeral associated with it.\n        if number is None:\n            number = 0\n\n        # We normalize any letters to their lower case form\n        letter = letter.lower()\n\n        # We consider some words to be alternate spellings of other words and\n        # in those cases we want to normalize the spellings to our preferred\n        # spelling.\n        if letter == \"alpha\":\n            letter = \"a\"\n        elif letter == \"beta\":\n            letter = \"b\"\n        elif letter in [\"c\", \"pre\", \"preview\"]:\n            letter = \"rc\"\n        elif letter in [\"rev\", \"r\"]:\n            letter = \"post\"\n\n        return letter, int(number)\n\n    assert not letter\n    if number:\n        # We assume if we are given a number, but we are not given a letter\n        # then this is using the implicit post release syntax (e.g. 1.0-1)\n        letter = \"post\"\n\n        return letter, int(number)\n\n    return None\n\n\n_local_version_separators = re.compile(r\"[\\._-]\")\n\n\ndef _parse_local_version(local: str | None) -> LocalType | None:\n    \"\"\"\n    Takes a string like abc.1.twelve and turns it into (\"abc\", 1, \"twelve\").\n    \"\"\"\n    if local is not None:\n        return tuple(\n            part.lower() if not part.isdigit() else int(part)\n            for part in _local_version_separators.split(local)\n        )\n    return None\n\n\ndef _cmpkey(\n    epoch: int,\n    release: tuple[int, ...],\n    pre: tuple[str, int] | None,\n    post: tuple[str, int] | None,\n    dev: tuple[str, int] | None,\n    local: LocalType | None,\n) -> CmpKey:\n    # When we compare a release version, we want to compare it with all of the\n    # trailing zeros removed. So we'll use a reverse the list, drop all the now\n    # leading zeros until we come to something non zero, then take the rest\n    # re-reverse it back into the correct order and make it a tuple and use\n    # that for our sorting key.\n    _release = tuple(\n        reversed(list(itertools.dropwhile(lambda x: x == 0, reversed(release))))\n    )\n\n    # We need to \"trick\" the sorting algorithm to put 1.0.dev0 before 1.0a0.\n    # We'll do this by abusing the pre segment, but we _only_ want to do this\n    # if there is not a pre or a post segment. If we have one of those then\n    # the normal sorting rules will handle this case correctly.\n    if pre is None and post is None and dev is not None:\n        _pre: CmpPrePostDevType = NegativeInfinity\n    # Versions without a pre-release (except as noted above) should sort after\n    # those with one.\n    elif pre is None:\n        _pre = Infinity\n    else:\n        _pre = pre\n\n    # Versions without a post segment should sort before those with one.\n    if post is None:\n        _post: CmpPrePostDevType = NegativeInfinity\n\n    else:\n        _post = post\n\n    # Versions without a development segment should sort after those with one.\n    if dev is None:\n        _dev: CmpPrePostDevType = Infinity\n\n    else:\n        _dev = dev\n\n    if local is None:\n        # Versions without a local segment should sort before those with one.\n        _local: CmpLocalType = NegativeInfinity\n    else:\n        # Versions with a local segment need that segment parsed to implement\n        # the sorting rules in PEP440.\n        # - Alpha numeric segments sort before numeric segments\n        # - Alpha numeric segments sort lexicographically\n        # - Numeric segments sort numerically\n        # - Shorter versions sort before longer versions when the prefixes\n        #   match exactly\n        _local = tuple(\n            (i, \"\") if isinstance(i, int) else (NegativeInfinity, i) for i in local\n        )\n\n    return epoch, _release, _pre, _post, _dev, _local",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/version.py",
        "start": 10,
        "end": 582,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 582,
          "column": 7,
          "position": 2719
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/version.py",
        "start": 10,
        "end": 582,
        "startLoc": {
          "line": 10,
          "column": 1,
          "position": 9
        },
        "endLoc": {
          "line": 582,
          "column": 7,
          "position": 2719
        }
      }
    },
    {
      "format": "python",
      "lines": 163,
      "fragment": "# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\n\nfrom __future__ import annotations\n\nimport functools\nimport re\nfrom typing import NewType, Tuple, Union, cast\n\nfrom .tags import Tag, parse_tag\nfrom .version import InvalidVersion, Version, _TrimmedRelease\n\nBuildTag = Union[Tuple[()], Tuple[int, str]]\nNormalizedName = NewType(\"NormalizedName\", str)\n\n\nclass InvalidName(ValueError):\n    \"\"\"\n    An invalid distribution name; users should refer to the packaging user guide.\n    \"\"\"\n\n\nclass InvalidWheelFilename(ValueError):\n    \"\"\"\n    An invalid wheel filename was found, users should refer to PEP 427.\n    \"\"\"\n\n\nclass InvalidSdistFilename(ValueError):\n    \"\"\"\n    An invalid sdist filename was found, users should refer to the packaging user guide.\n    \"\"\"\n\n\n# Core metadata spec for `Name`\n_validate_regex = re.compile(\n    r\"^([A-Z0-9]|[A-Z0-9][A-Z0-9._-]*[A-Z0-9])$\", re.IGNORECASE\n)\n_canonicalize_regex = re.compile(r\"[-_.]+\")\n_normalized_regex = re.compile(r\"^([a-z0-9]|[a-z0-9]([a-z0-9-](?!--))*[a-z0-9])$\")\n# PEP 427: The build number must start with a digit.\n_build_tag_regex = re.compile(r\"(\\d+)(.*)\")\n\n\ndef canonicalize_name(name: str, *, validate: bool = False) -> NormalizedName:\n    if validate and not _validate_regex.match(name):\n        raise InvalidName(f\"name is invalid: {name!r}\")\n    # This is taken from PEP 503.\n    value = _canonicalize_regex.sub(\"-\", name).lower()\n    return cast(NormalizedName, value)\n\n\ndef is_normalized_name(name: str) -> bool:\n    return _normalized_regex.match(name) is not None\n\n\n@functools.singledispatch\ndef canonicalize_version(\n    version: Version | str, *, strip_trailing_zero: bool = True\n) -> str:\n    \"\"\"\n    Return a canonical form of a version as a string.\n\n    >>> canonicalize_version('1.0.1')\n    '1.0.1'\n\n    Per PEP 625, versions may have multiple canonical forms, differing\n    only by trailing zeros.\n\n    >>> canonicalize_version('1.0.0')\n    '1'\n    >>> canonicalize_version('1.0.0', strip_trailing_zero=False)\n    '1.0.0'\n\n    Invalid versions are returned unaltered.\n\n    >>> canonicalize_version('foo bar baz')\n    'foo bar baz'\n    \"\"\"\n    return str(_TrimmedRelease(str(version)) if strip_trailing_zero else version)\n\n\n@canonicalize_version.register\ndef _(version: str, *, strip_trailing_zero: bool = True) -> str:\n    try:\n        parsed = Version(version)\n    except InvalidVersion:\n        # Legacy versions cannot be normalized\n        return version\n    return canonicalize_version(parsed, strip_trailing_zero=strip_trailing_zero)\n\n\ndef parse_wheel_filename(\n    filename: str,\n) -> tuple[NormalizedName, Version, BuildTag, frozenset[Tag]]:\n    if not filename.endswith(\".whl\"):\n        raise InvalidWheelFilename(\n            f\"Invalid wheel filename (extension must be '.whl'): {filename!r}\"\n        )\n\n    filename = filename[:-4]\n    dashes = filename.count(\"-\")\n    if dashes not in (4, 5):\n        raise InvalidWheelFilename(\n            f\"Invalid wheel filename (wrong number of parts): {filename!r}\"\n        )\n\n    parts = filename.split(\"-\", dashes - 2)\n    name_part = parts[0]\n    # See PEP 427 for the rules on escaping the project name.\n    if \"__\" in name_part or re.match(r\"^[\\w\\d._]*$\", name_part, re.UNICODE) is None:\n        raise InvalidWheelFilename(f\"Invalid project name: {filename!r}\")\n    name = canonicalize_name(name_part)\n\n    try:\n        version = Version(parts[1])\n    except InvalidVersion as e:\n        raise InvalidWheelFilename(\n            f\"Invalid wheel filename (invalid version): {filename!r}\"\n        ) from e\n\n    if dashes == 5:\n        build_part = parts[2]\n        build_match = _build_tag_regex.match(build_part)\n        if build_match is None:\n            raise InvalidWheelFilename(\n                f\"Invalid build number: {build_part} in {filename!r}\"\n            )\n        build = cast(BuildTag, (int(build_match.group(1)), build_match.group(2)))\n    else:\n        build = ()\n    tags = parse_tag(parts[-1])\n    return (name, version, build, tags)\n\n\ndef parse_sdist_filename(filename: str) -> tuple[NormalizedName, Version]:\n    if filename.endswith(\".tar.gz\"):\n        file_stem = filename[: -len(\".tar.gz\")]\n    elif filename.endswith(\".zip\"):\n        file_stem = filename[: -len(\".zip\")]\n    else:\n        raise InvalidSdistFilename(\n            f\"Invalid sdist filename (extension must be '.tar.gz' or '.zip'):\"\n            f\" {filename!r}\"\n        )\n\n    # We are requiring a PEP 440 version, which cannot contain dashes,\n    # so we split on the last dash.\n    name_part, sep, version_part = file_stem.rpartition(\"-\")\n    if not sep:\n        raise InvalidSdistFilename(f\"Invalid sdist filename: {filename!r}\")\n\n    name = canonicalize_name(name_part)\n\n    try:\n        version = Version(version_part)\n    except InvalidVersion as e:\n        raise InvalidSdistFilename(\n            f\"Invalid sdist filename (invalid version): {filename!r}\"\n        ) from e\n\n    return (name, version)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/utils.py",
        "start": 1,
        "end": 163,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1051
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/utils.py",
        "start": 1,
        "end": 163,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 163,
          "column": 2,
          "position": 1051
        }
      }
    },
    {
      "format": "python",
      "lines": 656,
      "fragment": "# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\n\nfrom __future__ import annotations\n\nimport logging\nimport platform\nimport re\nimport struct\nimport subprocess\nimport sys\nimport sysconfig\nfrom importlib.machinery import EXTENSION_SUFFIXES\nfrom typing import (\n    Iterable,\n    Iterator,\n    Sequence,\n    Tuple,\n    cast,\n)\n\nfrom . import _manylinux, _musllinux\n\nlogger = logging.getLogger(__name__)\n\nPythonVersion = Sequence[int]\nAppleVersion = Tuple[int, int]\n\nINTERPRETER_SHORT_NAMES: dict[str, str] = {\n    \"python\": \"py\",  # Generic.\n    \"cpython\": \"cp\",\n    \"pypy\": \"pp\",\n    \"ironpython\": \"ip\",\n    \"jython\": \"jy\",\n}\n\n\n_32_BIT_INTERPRETER = struct.calcsize(\"P\") == 4\n\n\nclass Tag:\n    \"\"\"\n    A representation of the tag triple for a wheel.\n\n    Instances are considered immutable and thus are hashable. Equality checking\n    is also supported.\n    \"\"\"\n\n    __slots__ = [\"_abi\", \"_hash\", \"_interpreter\", \"_platform\"]\n\n    def __init__(self, interpreter: str, abi: str, platform: str) -> None:\n        self._interpreter = interpreter.lower()\n        self._abi = abi.lower()\n        self._platform = platform.lower()\n        # The __hash__ of every single element in a Set[Tag] will be evaluated each time\n        # that a set calls its `.disjoint()` method, which may be called hundreds of\n        # times when scanning a page of links for packages with tags matching that\n        # Set[Tag]. Pre-computing the value here produces significant speedups for\n        # downstream consumers.\n        self._hash = hash((self._interpreter, self._abi, self._platform))\n\n    @property\n    def interpreter(self) -> str:\n        return self._interpreter\n\n    @property\n    def abi(self) -> str:\n        return self._abi\n\n    @property\n    def platform(self) -> str:\n        return self._platform\n\n    def __eq__(self, other: object) -> bool:\n        if not isinstance(other, Tag):\n            return NotImplemented\n\n        return (\n            (self._hash == other._hash)  # Short-circuit ASAP for perf reasons.\n            and (self._platform == other._platform)\n            and (self._abi == other._abi)\n            and (self._interpreter == other._interpreter)\n        )\n\n    def __hash__(self) -> int:\n        return self._hash\n\n    def __str__(self) -> str:\n        return f\"{self._interpreter}-{self._abi}-{self._platform}\"\n\n    def __repr__(self) -> str:\n        return f\"<{self} @ {id(self)}>\"\n\n\ndef parse_tag(tag: str) -> frozenset[Tag]:\n    \"\"\"\n    Parses the provided tag (e.g. `py3-none-any`) into a frozenset of Tag instances.\n\n    Returning a set is required due to the possibility that the tag is a\n    compressed tag set.\n    \"\"\"\n    tags = set()\n    interpreters, abis, platforms = tag.split(\"-\")\n    for interpreter in interpreters.split(\".\"):\n        for abi in abis.split(\".\"):\n            for platform_ in platforms.split(\".\"):\n                tags.add(Tag(interpreter, abi, platform_))\n    return frozenset(tags)\n\n\ndef _get_config_var(name: str, warn: bool = False) -> int | str | None:\n    value: int | str | None = sysconfig.get_config_var(name)\n    if value is None and warn:\n        logger.debug(\n            \"Config variable '%s' is unset, Python ABI tag may be incorrect\", name\n        )\n    return value\n\n\ndef _normalize_string(string: str) -> str:\n    return string.replace(\".\", \"_\").replace(\"-\", \"_\").replace(\" \", \"_\")\n\n\ndef _is_threaded_cpython(abis: list[str]) -> bool:\n    \"\"\"\n    Determine if the ABI corresponds to a threaded (`--disable-gil`) build.\n\n    The threaded builds are indicated by a \"t\" in the abiflags.\n    \"\"\"\n    if len(abis) == 0:\n        return False\n    # expect e.g., cp313\n    m = re.match(r\"cp\\d+(.*)\", abis[0])\n    if not m:\n        return False\n    abiflags = m.group(1)\n    return \"t\" in abiflags\n\n\ndef _abi3_applies(python_version: PythonVersion, threading: bool) -> bool:\n    \"\"\"\n    Determine if the Python version supports abi3.\n\n    PEP 384 was first implemented in Python 3.2. The threaded (`--disable-gil`)\n    builds do not support abi3.\n    \"\"\"\n    return len(python_version) > 1 and tuple(python_version) >= (3, 2) and not threading\n\n\ndef _cpython_abis(py_version: PythonVersion, warn: bool = False) -> list[str]:\n    py_version = tuple(py_version)  # To allow for version comparison.\n    abis = []\n    version = _version_nodot(py_version[:2])\n    threading = debug = pymalloc = ucs4 = \"\"\n    with_debug = _get_config_var(\"Py_DEBUG\", warn)\n    has_refcount = hasattr(sys, \"gettotalrefcount\")\n    # Windows doesn't set Py_DEBUG, so checking for support of debug-compiled\n    # extension modules is the best option.\n    # https://github.com/pypa/pip/issues/3383#issuecomment-173267692\n    has_ext = \"_d.pyd\" in EXTENSION_SUFFIXES\n    if with_debug or (with_debug is None and (has_refcount or has_ext)):\n        debug = \"d\"\n    if py_version >= (3, 13) and _get_config_var(\"Py_GIL_DISABLED\", warn):\n        threading = \"t\"\n    if py_version < (3, 8):\n        with_pymalloc = _get_config_var(\"WITH_PYMALLOC\", warn)\n        if with_pymalloc or with_pymalloc is None:\n            pymalloc = \"m\"\n        if py_version < (3, 3):\n            unicode_size = _get_config_var(\"Py_UNICODE_SIZE\", warn)\n            if unicode_size == 4 or (\n                unicode_size is None and sys.maxunicode == 0x10FFFF\n            ):\n                ucs4 = \"u\"\n    elif debug:\n        # Debug builds can also load \"normal\" extension modules.\n        # We can also assume no UCS-4 or pymalloc requirement.\n        abis.append(f\"cp{version}{threading}\")\n    abis.insert(0, f\"cp{version}{threading}{debug}{pymalloc}{ucs4}\")\n    return abis\n\n\ndef cpython_tags(\n    python_version: PythonVersion | None = None,\n    abis: Iterable[str] | None = None,\n    platforms: Iterable[str] | None = None,\n    *,\n    warn: bool = False,\n) -> Iterator[Tag]:\n    \"\"\"\n    Yields the tags for a CPython interpreter.\n\n    The tags consist of:\n    - cp<python_version>-<abi>-<platform>\n    - cp<python_version>-abi3-<platform>\n    - cp<python_version>-none-<platform>\n    - cp<less than python_version>-abi3-<platform>  # Older Python versions down to 3.2.\n\n    If python_version only specifies a major version then user-provided ABIs and\n    the 'none' ABItag will be used.\n\n    If 'abi3' or 'none' are specified in 'abis' then they will be yielded at\n    their normal position and not at the beginning.\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n\n    interpreter = f\"cp{_version_nodot(python_version[:2])}\"\n\n    if abis is None:\n        if len(python_version) > 1:\n            abis = _cpython_abis(python_version, warn)\n        else:\n            abis = []\n    abis = list(abis)\n    # 'abi3' and 'none' are explicitly handled later.\n    for explicit_abi in (\"abi3\", \"none\"):\n        try:\n            abis.remove(explicit_abi)\n        except ValueError:\n            pass\n\n    platforms = list(platforms or platform_tags())\n    for abi in abis:\n        for platform_ in platforms:\n            yield Tag(interpreter, abi, platform_)\n\n    threading = _is_threaded_cpython(abis)\n    use_abi3 = _abi3_applies(python_version, threading)\n    if use_abi3:\n        yield from (Tag(interpreter, \"abi3\", platform_) for platform_ in platforms)\n    yield from (Tag(interpreter, \"none\", platform_) for platform_ in platforms)\n\n    if use_abi3:\n        for minor_version in range(python_version[1] - 1, 1, -1):\n            for platform_ in platforms:\n                version = _version_nodot((python_version[0], minor_version))\n                interpreter = f\"cp{version}\"\n                yield Tag(interpreter, \"abi3\", platform_)\n\n\ndef _generic_abi() -> list[str]:\n    \"\"\"\n    Return the ABI tag based on EXT_SUFFIX.\n    \"\"\"\n    # The following are examples of `EXT_SUFFIX`.\n    # We want to keep the parts which are related to the ABI and remove the\n    # parts which are related to the platform:\n    # - linux:   '.cpython-310-x86_64-linux-gnu.so' => cp310\n    # - mac:     '.cpython-310-darwin.so'           => cp310\n    # - win:     '.cp310-win_amd64.pyd'             => cp310\n    # - win:     '.pyd'                             => cp37 (uses _cpython_abis())\n    # - pypy:    '.pypy38-pp73-x86_64-linux-gnu.so' => pypy38_pp73\n    # - graalpy: '.graalpy-38-native-x86_64-darwin.dylib'\n    #                                               => graalpy_38_native\n\n    ext_suffix = _get_config_var(\"EXT_SUFFIX\", warn=True)\n    if not isinstance(ext_suffix, str) or ext_suffix[0] != \".\":\n        raise SystemError(\"invalid sysconfig.get_config_var('EXT_SUFFIX')\")\n    parts = ext_suffix.split(\".\")\n    if len(parts) < 3:\n        # CPython3.7 and earlier uses \".pyd\" on Windows.\n        return _cpython_abis(sys.version_info[:2])\n    soabi = parts[1]\n    if soabi.startswith(\"cpython\"):\n        # non-windows\n        abi = \"cp\" + soabi.split(\"-\")[1]\n    elif soabi.startswith(\"cp\"):\n        # windows\n        abi = soabi.split(\"-\")[0]\n    elif soabi.startswith(\"pypy\"):\n        abi = \"-\".join(soabi.split(\"-\")[:2])\n    elif soabi.startswith(\"graalpy\"):\n        abi = \"-\".join(soabi.split(\"-\")[:3])\n    elif soabi:\n        # pyston, ironpython, others?\n        abi = soabi\n    else:\n        return []\n    return [_normalize_string(abi)]\n\n\ndef generic_tags(\n    interpreter: str | None = None,\n    abis: Iterable[str] | None = None,\n    platforms: Iterable[str] | None = None,\n    *,\n    warn: bool = False,\n) -> Iterator[Tag]:\n    \"\"\"\n    Yields the tags for a generic interpreter.\n\n    The tags consist of:\n    - <interpreter>-<abi>-<platform>\n\n    The \"none\" ABI will be added if it was not explicitly provided.\n    \"\"\"\n    if not interpreter:\n        interp_name = interpreter_name()\n        interp_version = interpreter_version(warn=warn)\n        interpreter = \"\".join([interp_name, interp_version])\n    if abis is None:\n        abis = _generic_abi()\n    else:\n        abis = list(abis)\n    platforms = list(platforms or platform_tags())\n    if \"none\" not in abis:\n        abis.append(\"none\")\n    for abi in abis:\n        for platform_ in platforms:\n            yield Tag(interpreter, abi, platform_)\n\n\ndef _py_interpreter_range(py_version: PythonVersion) -> Iterator[str]:\n    \"\"\"\n    Yields Python versions in descending order.\n\n    After the latest version, the major-only version will be yielded, and then\n    all previous versions of that major version.\n    \"\"\"\n    if len(py_version) > 1:\n        yield f\"py{_version_nodot(py_version[:2])}\"\n    yield f\"py{py_version[0]}\"\n    if len(py_version) > 1:\n        for minor in range(py_version[1] - 1, -1, -1):\n            yield f\"py{_version_nodot((py_version[0], minor))}\"\n\n\ndef compatible_tags(\n    python_version: PythonVersion | None = None,\n    interpreter: str | None = None,\n    platforms: Iterable[str] | None = None,\n) -> Iterator[Tag]:\n    \"\"\"\n    Yields the sequence of tags that are compatible with a specific version of Python.\n\n    The tags consist of:\n    - py*-none-<platform>\n    - <interpreter>-none-any  # ... if `interpreter` is provided.\n    - py*-none-any\n    \"\"\"\n    if not python_version:\n        python_version = sys.version_info[:2]\n    platforms = list(platforms or platform_tags())\n    for version in _py_interpreter_range(python_version):\n        for platform_ in platforms:\n            yield Tag(version, \"none\", platform_)\n    if interpreter:\n        yield Tag(interpreter, \"none\", \"any\")\n    for version in _py_interpreter_range(python_version):\n        yield Tag(version, \"none\", \"any\")\n\n\ndef _mac_arch(arch: str, is_32bit: bool = _32_BIT_INTERPRETER) -> str:\n    if not is_32bit:\n        return arch\n\n    if arch.startswith(\"ppc\"):\n        return \"ppc\"\n\n    return \"i386\"\n\n\ndef _mac_binary_formats(version: AppleVersion, cpu_arch: str) -> list[str]:\n    formats = [cpu_arch]\n    if cpu_arch == \"x86_64\":\n        if version < (10, 4):\n            return []\n        formats.extend([\"intel\", \"fat64\", \"fat32\"])\n\n    elif cpu_arch == \"i386\":\n        if version < (10, 4):\n            return []\n        formats.extend([\"intel\", \"fat32\", \"fat\"])\n\n    elif cpu_arch == \"ppc64\":\n        # TODO: Need to care about 32-bit PPC for ppc64 through 10.2?\n        if version > (10, 5) or version < (10, 4):\n            return []\n        formats.append(\"fat64\")\n\n    elif cpu_arch == \"ppc\":\n        if version > (10, 6):\n            return []\n        formats.extend([\"fat32\", \"fat\"])\n\n    if cpu_arch in {\"arm64\", \"x86_64\"}:\n        formats.append(\"universal2\")\n\n    if cpu_arch in {\"x86_64\", \"i386\", \"ppc64\", \"ppc\", \"intel\"}:\n        formats.append(\"universal\")\n\n    return formats\n\n\ndef mac_platforms(\n    version: AppleVersion | None = None, arch: str | None = None\n) -> Iterator[str]:\n    \"\"\"\n    Yields the platform tags for a macOS system.\n\n    The `version` parameter is a two-item tuple specifying the macOS version to\n    generate platform tags for. The `arch` parameter is the CPU architecture to\n    generate platform tags for. Both parameters default to the appropriate value\n    for the current system.\n    \"\"\"\n    version_str, _, cpu_arch = platform.mac_ver()\n    if version is None:\n        version = cast(\"AppleVersion\", tuple(map(int, version_str.split(\".\")[:2])))\n        if version == (10, 16):\n            # When built against an older macOS SDK, Python will report macOS 10.16\n            # instead of the real version.\n            version_str = subprocess.run(\n                [\n                    sys.executable,\n                    \"-sS\",\n                    \"-c\",\n                    \"import platform; print(platform.mac_ver()[0])\",\n                ],\n                check=True,\n                env={\"SYSTEM_VERSION_COMPAT\": \"0\"},\n                stdout=subprocess.PIPE,\n                text=True,\n            ).stdout\n            version = cast(\"AppleVersion\", tuple(map(int, version_str.split(\".\")[:2])))\n    else:\n        version = version\n    if arch is None:\n        arch = _mac_arch(cpu_arch)\n    else:\n        arch = arch\n\n    if (10, 0) <= version and version < (11, 0):\n        # Prior to Mac OS 11, each yearly release of Mac OS bumped the\n        # \"minor\" version number.  The major version was always 10.\n        major_version = 10\n        for minor_version in range(version[1], -1, -1):\n            compat_version = major_version, minor_version\n            binary_formats = _mac_binary_formats(compat_version, arch)\n            for binary_format in binary_formats:\n                yield f\"macosx_{major_version}_{minor_version}_{binary_format}\"\n\n    if version >= (11, 0):\n        # Starting with Mac OS 11, each yearly release bumps the major version\n        # number.   The minor versions are now the midyear updates.\n        minor_version = 0\n        for major_version in range(version[0], 10, -1):\n            compat_version = major_version, minor_version\n            binary_formats = _mac_binary_formats(compat_version, arch)\n            for binary_format in binary_formats:\n                yield f\"macosx_{major_version}_{minor_version}_{binary_format}\"\n\n    if version >= (11, 0):\n        # Mac OS 11 on x86_64 is compatible with binaries from previous releases.\n        # Arm64 support was introduced in 11.0, so no Arm binaries from previous\n        # releases exist.\n        #\n        # However, the \"universal2\" binary format can have a\n        # macOS version earlier than 11.0 when the x86_64 part of the binary supports\n        # that version of macOS.\n        major_version = 10\n        if arch == \"x86_64\":\n            for minor_version in range(16, 3, -1):\n                compat_version = major_version, minor_version\n                binary_formats = _mac_binary_formats(compat_version, arch)\n                for binary_format in binary_formats:\n                    yield f\"macosx_{major_version}_{minor_version}_{binary_format}\"\n        else:\n            for minor_version in range(16, 3, -1):\n                compat_version = major_version, minor_version\n                binary_format = \"universal2\"\n                yield f\"macosx_{major_version}_{minor_version}_{binary_format}\"\n\n\ndef ios_platforms(\n    version: AppleVersion | None = None, multiarch: str | None = None\n) -> Iterator[str]:\n    \"\"\"\n    Yields the platform tags for an iOS system.\n\n    :param version: A two-item tuple specifying the iOS version to generate\n        platform tags for. Defaults to the current iOS version.\n    :param multiarch: The CPU architecture+ABI to generate platform tags for -\n        (the value used by `sys.implementation._multiarch` e.g.,\n        `arm64_iphoneos` or `x84_64_iphonesimulator`). Defaults to the current\n        multiarch value.\n    \"\"\"\n    if version is None:\n        # if iOS is the current platform, ios_ver *must* be defined. However,\n        # it won't exist for CPython versions before 3.13, which causes a mypy\n        # error.\n        _, release, _, _ = platform.ios_ver()  # type: ignore[attr-defined, unused-ignore]\n        version = cast(\"AppleVersion\", tuple(map(int, release.split(\".\")[:2])))\n\n    if multiarch is None:\n        multiarch = sys.implementation._multiarch\n    multiarch = multiarch.replace(\"-\", \"_\")\n\n    ios_platform_template = \"ios_{major}_{minor}_{multiarch}\"\n\n    # Consider any iOS major.minor version from the version requested, down to\n    # 12.0. 12.0 is the first iOS version that is known to have enough features\n    # to support CPython. Consider every possible minor release up to X.9. There\n    # highest the minor has ever gone is 8 (14.8 and 15.8) but having some extra\n    # candidates that won't ever match doesn't really hurt, and it saves us from\n    # having to keep an explicit list of known iOS versions in the code. Return\n    # the results descending order of version number.\n\n    # If the requested major version is less than 12, there won't be any matches.\n    if version[0] < 12:\n        return\n\n    # Consider the actual X.Y version that was requested.\n    yield ios_platform_template.format(\n        major=version[0], minor=version[1], multiarch=multiarch\n    )\n\n    # Consider every minor version from X.0 to the minor version prior to the\n    # version requested by the platform.\n    for minor in range(version[1] - 1, -1, -1):\n        yield ios_platform_template.format(\n            major=version[0], minor=minor, multiarch=multiarch\n        )\n\n    for major in range(version[0] - 1, 11, -1):\n        for minor in range(9, -1, -1):\n            yield ios_platform_template.format(\n                major=major, minor=minor, multiarch=multiarch\n            )\n\n\ndef android_platforms(\n    api_level: int | None = None, abi: str | None = None\n) -> Iterator[str]:\n    \"\"\"\n    Yields the :attr:`~Tag.platform` tags for Android. If this function is invoked on\n    non-Android platforms, the ``api_level`` and ``abi`` arguments are required.\n\n    :param int api_level: The maximum `API level\n        <https://developer.android.com/tools/releases/platforms>`__ to return. Defaults\n        to the current system's version, as returned by ``platform.android_ver``.\n    :param str abi: The `Android ABI <https://developer.android.com/ndk/guides/abis>`__,\n        e.g. ``arm64_v8a``. Defaults to the current system's ABI , as returned by\n        ``sysconfig.get_platform``. Hyphens and periods will be replaced with\n        underscores.\n    \"\"\"\n    if platform.system() != \"Android\" and (api_level is None or abi is None):\n        raise TypeError(\n            \"on non-Android platforms, the api_level and abi arguments are required\"\n        )\n\n    if api_level is None:\n        # Python 3.13 was the first version to return platform.system() == \"Android\",\n        # and also the first version to define platform.android_ver().\n        api_level = platform.android_ver().api_level  # type: ignore[attr-defined]\n\n    if abi is None:\n        abi = sysconfig.get_platform().split(\"-\")[-1]\n    abi = _normalize_string(abi)\n\n    # 16 is the minimum API level known to have enough features to support CPython\n    # without major patching. Yield every API level from the maximum down to the\n    # minimum, inclusive.\n    min_api_level = 16\n    for ver in range(api_level, min_api_level - 1, -1):\n        yield f\"android_{ver}_{abi}\"\n\n\ndef _linux_platforms(is_32bit: bool = _32_BIT_INTERPRETER) -> Iterator[str]:\n    linux = _normalize_string(sysconfig.get_platform())\n    if not linux.startswith(\"linux_\"):\n        # we should never be here, just yield the sysconfig one and return\n        yield linux\n        return\n    if is_32bit:\n        if linux == \"linux_x86_64\":\n            linux = \"linux_i686\"\n        elif linux == \"linux_aarch64\":\n            linux = \"linux_armv8l\"\n    _, arch = linux.split(\"_\", 1)\n    archs = {\"armv8l\": [\"armv8l\", \"armv7l\"]}.get(arch, [arch])\n    yield from _manylinux.platform_tags(archs)\n    yield from _musllinux.platform_tags(archs)\n    for arch in archs:\n        yield f\"linux_{arch}\"\n\n\ndef _generic_platforms() -> Iterator[str]:\n    yield _normalize_string(sysconfig.get_platform())\n\n\ndef platform_tags() -> Iterator[str]:\n    \"\"\"\n    Provides the platform tags for this installation.\n    \"\"\"\n    if platform.system() == \"Darwin\":\n        return mac_platforms()\n    elif platform.system() == \"iOS\":\n        return ios_platforms()\n    elif platform.system() == \"Android\":\n        return android_platforms()\n    elif platform.system() == \"Linux\":\n        return _linux_platforms()\n    else:\n        return _generic_platforms()\n\n\ndef interpreter_name() -> str:\n    \"\"\"\n    Returns the name of the running interpreter.\n\n    Some implementations have a reserved, two-letter abbreviation which will\n    be returned when appropriate.\n    \"\"\"\n    name = sys.implementation.name\n    return INTERPRETER_SHORT_NAMES.get(name) or name\n\n\ndef interpreter_version(*, warn: bool = False) -> str:\n    \"\"\"\n    Returns the version of the running interpreter.\n    \"\"\"\n    version = _get_config_var(\"py_version_nodot\", warn=warn)\n    if version:\n        version = str(version)\n    else:\n        version = _version_nodot(sys.version_info[:2])\n    return version\n\n\ndef _version_nodot(version: PythonVersion) -> str:\n    return \"\".join(map(str, version))\n\n\ndef sys_tags(*, warn: bool = False) -> Iterator[Tag]:\n    \"\"\"\n    Returns the sequence of tag triples for the running interpreter.\n\n    The order of the sequence corresponds to priority order for the\n    interpreter, from most to least important.\n    \"\"\"\n\n    interp_name = interpreter_name()\n    if interp_name == \"cp\":\n        yield from cpython_tags(warn=warn)\n    else:\n        yield from generic_tags()\n\n    if interp_name == \"pp\":\n        interp = \"pp3\"\n    elif interp_name == \"cp\":\n        interp = \"cp\" + interpreter_version(warn=warn)\n    else:\n        interp = None\n    yield from compatible_tags(interpreter=interp)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/tags.py",
        "start": 1,
        "end": 656,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 656,
          "column": 2,
          "position": 4849
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/tags.py",
        "start": 1,
        "end": 656,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 656,
          "column": 2,
          "position": 4849
        }
      }
    },
    {
      "format": "python",
      "lines": 91,
      "fragment": "# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\nfrom __future__ import annotations\n\nfrom typing import Any, Iterator\n\nfrom ._parser import parse_requirement as _parse_requirement\nfrom ._tokenizer import ParserSyntaxError\nfrom .markers import Marker, _normalize_extra_values\nfrom .specifiers import SpecifierSet\nfrom .utils import canonicalize_name\n\n\nclass InvalidRequirement(ValueError):\n    \"\"\"\n    An invalid requirement was found, users should refer to PEP 508.\n    \"\"\"\n\n\nclass Requirement:\n    \"\"\"Parse a requirement.\n\n    Parse a given requirement string into its parts, such as name, specifier,\n    URL, and extras. Raises InvalidRequirement on a badly-formed requirement\n    string.\n    \"\"\"\n\n    # TODO: Can we test whether something is contained within a requirement?\n    #       If so how do we do that? Do we need to test against the _name_ of\n    #       the thing as well as the version? What about the markers?\n    # TODO: Can we normalize the name and extra name?\n\n    def __init__(self, requirement_string: str) -> None:\n        try:\n            parsed = _parse_requirement(requirement_string)\n        except ParserSyntaxError as e:\n            raise InvalidRequirement(str(e)) from e\n\n        self.name: str = parsed.name\n        self.url: str | None = parsed.url or None\n        self.extras: set[str] = set(parsed.extras or [])\n        self.specifier: SpecifierSet = SpecifierSet(parsed.specifier)\n        self.marker: Marker | None = None\n        if parsed.marker is not None:\n            self.marker = Marker.__new__(Marker)\n            self.marker._markers = _normalize_extra_values(parsed.marker)\n\n    def _iter_parts(self, name: str) -> Iterator[str]:\n        yield name\n\n        if self.extras:\n            formatted_extras = \",\".join(sorted(self.extras))\n            yield f\"[{formatted_extras}]\"\n\n        if self.specifier:\n            yield str(self.specifier)\n\n        if self.url:\n            yield f\"@ {self.url}\"\n            if self.marker:\n                yield \" \"\n\n        if self.marker:\n            yield f\"; {self.marker}\"\n\n    def __str__(self) -> str:\n        return \"\".join(self._iter_parts(self.name))\n\n    def __repr__(self) -> str:\n        return f\"<Requirement('{self}')>\"\n\n    def __hash__(self) -> int:\n        return hash(\n            (\n                self.__class__.__name__,\n                *self._iter_parts(canonicalize_name(self.name)),\n            )\n        )\n\n    def __eq__(self, other: Any) -> bool:\n        if not isinstance(other, Requirement):\n            return NotImplemented\n\n        return (\n            canonicalize_name(self.name) == canonicalize_name(other.name)\n            and self.extras == other.extras\n            and self.specifier == other.specifier\n            and self.url == other.url\n            and self.marker == other.marker\n        )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/requirements.py",
        "start": 1,
        "end": 91,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 659
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/requirements.py",
        "start": 1,
        "end": 91,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 91,
          "column": 2,
          "position": 659
        }
      }
    },
    {
      "format": "python",
      "lines": 862,
      "fragment": "from __future__ import annotations\n\nimport email.feedparser\nimport email.header\nimport email.message\nimport email.parser\nimport email.policy\nimport pathlib\nimport sys\nimport typing\nfrom typing import (\n    Any,\n    Callable,\n    Generic,\n    Literal,\n    TypedDict,\n    cast,\n)\n\nfrom . import licenses, requirements, specifiers, utils\nfrom . import version as version_module\nfrom .licenses import NormalizedLicenseExpression\n\nT = typing.TypeVar(\"T\")\n\n\nif sys.version_info >= (3, 11):  # pragma: no cover\n    ExceptionGroup = ExceptionGroup\nelse:  # pragma: no cover\n\n    class ExceptionGroup(Exception):\n        \"\"\"A minimal implementation of :external:exc:`ExceptionGroup` from Python 3.11.\n\n        If :external:exc:`ExceptionGroup` is already defined by Python itself,\n        that version is used instead.\n        \"\"\"\n\n        message: str\n        exceptions: list[Exception]\n\n        def __init__(self, message: str, exceptions: list[Exception]) -> None:\n            self.message = message\n            self.exceptions = exceptions\n\n        def __repr__(self) -> str:\n            return f\"{self.__class__.__name__}({self.message!r}, {self.exceptions!r})\"\n\n\nclass InvalidMetadata(ValueError):\n    \"\"\"A metadata field contains invalid data.\"\"\"\n\n    field: str\n    \"\"\"The name of the field that contains invalid data.\"\"\"\n\n    def __init__(self, field: str, message: str) -> None:\n        self.field = field\n        super().__init__(message)\n\n\n# The RawMetadata class attempts to make as few assumptions about the underlying\n# serialization formats as possible. The idea is that as long as a serialization\n# formats offer some very basic primitives in *some* way then we can support\n# serializing to and from that format.\nclass RawMetadata(TypedDict, total=False):\n    \"\"\"A dictionary of raw core metadata.\n\n    Each field in core metadata maps to a key of this dictionary (when data is\n    provided). The key is lower-case and underscores are used instead of dashes\n    compared to the equivalent core metadata field. Any core metadata field that\n    can be specified multiple times or can hold multiple values in a single\n    field have a key with a plural name. See :class:`Metadata` whose attributes\n    match the keys of this dictionary.\n\n    Core metadata fields that can be specified multiple times are stored as a\n    list or dict depending on which is appropriate for the field. Any fields\n    which hold multiple values in a single field are stored as a list.\n\n    \"\"\"\n\n    # Metadata 1.0 - PEP 241\n    metadata_version: str\n    name: str\n    version: str\n    platforms: list[str]\n    summary: str\n    description: str\n    keywords: list[str]\n    home_page: str\n    author: str\n    author_email: str\n    license: str\n\n    # Metadata 1.1 - PEP 314\n    supported_platforms: list[str]\n    download_url: str\n    classifiers: list[str]\n    requires: list[str]\n    provides: list[str]\n    obsoletes: list[str]\n\n    # Metadata 1.2 - PEP 345\n    maintainer: str\n    maintainer_email: str\n    requires_dist: list[str]\n    provides_dist: list[str]\n    obsoletes_dist: list[str]\n    requires_python: str\n    requires_external: list[str]\n    project_urls: dict[str, str]\n\n    # Metadata 2.0\n    # PEP 426 attempted to completely revamp the metadata format\n    # but got stuck without ever being able to build consensus on\n    # it and ultimately ended up withdrawn.\n    #\n    # However, a number of tools had started emitting METADATA with\n    # `2.0` Metadata-Version, so for historical reasons, this version\n    # was skipped.\n\n    # Metadata 2.1 - PEP 566\n    description_content_type: str\n    provides_extra: list[str]\n\n    # Metadata 2.2 - PEP 643\n    dynamic: list[str]\n\n    # Metadata 2.3 - PEP 685\n    # No new fields were added in PEP 685, just some edge case were\n    # tightened up to provide better interoptability.\n\n    # Metadata 2.4 - PEP 639\n    license_expression: str\n    license_files: list[str]\n\n\n_STRING_FIELDS = {\n    \"author\",\n    \"author_email\",\n    \"description\",\n    \"description_content_type\",\n    \"download_url\",\n    \"home_page\",\n    \"license\",\n    \"license_expression\",\n    \"maintainer\",\n    \"maintainer_email\",\n    \"metadata_version\",\n    \"name\",\n    \"requires_python\",\n    \"summary\",\n    \"version\",\n}\n\n_LIST_FIELDS = {\n    \"classifiers\",\n    \"dynamic\",\n    \"license_files\",\n    \"obsoletes\",\n    \"obsoletes_dist\",\n    \"platforms\",\n    \"provides\",\n    \"provides_dist\",\n    \"provides_extra\",\n    \"requires\",\n    \"requires_dist\",\n    \"requires_external\",\n    \"supported_platforms\",\n}\n\n_DICT_FIELDS = {\n    \"project_urls\",\n}\n\n\ndef _parse_keywords(data: str) -> list[str]:\n    \"\"\"Split a string of comma-separated keywords into a list of keywords.\"\"\"\n    return [k.strip() for k in data.split(\",\")]\n\n\ndef _parse_project_urls(data: list[str]) -> dict[str, str]:\n    \"\"\"Parse a list of label/URL string pairings separated by a comma.\"\"\"\n    urls = {}\n    for pair in data:\n        # Our logic is slightly tricky here as we want to try and do\n        # *something* reasonable with malformed data.\n        #\n        # The main thing that we have to worry about, is data that does\n        # not have a ',' at all to split the label from the Value. There\n        # isn't a singular right answer here, and we will fail validation\n        # later on (if the caller is validating) so it doesn't *really*\n        # matter, but since the missing value has to be an empty str\n        # and our return value is dict[str, str], if we let the key\n        # be the missing value, then they'd have multiple '' values that\n        # overwrite each other in a accumulating dict.\n        #\n        # The other potentional issue is that it's possible to have the\n        # same label multiple times in the metadata, with no solid \"right\"\n        # answer with what to do in that case. As such, we'll do the only\n        # thing we can, which is treat the field as unparseable and add it\n        # to our list of unparsed fields.\n        parts = [p.strip() for p in pair.split(\",\", 1)]\n        parts.extend([\"\"] * (max(0, 2 - len(parts))))  # Ensure 2 items\n\n        # TODO: The spec doesn't say anything about if the keys should be\n        #       considered case sensitive or not... logically they should\n        #       be case-preserving and case-insensitive, but doing that\n        #       would open up more cases where we might have duplicate\n        #       entries.\n        label, url = parts\n        if label in urls:\n            # The label already exists in our set of urls, so this field\n            # is unparseable, and we can just add the whole thing to our\n            # unparseable data and stop processing it.\n            raise KeyError(\"duplicate labels in project urls\")\n        urls[label] = url\n\n    return urls\n\n\ndef _get_payload(msg: email.message.Message, source: bytes | str) -> str:\n    \"\"\"Get the body of the message.\"\"\"\n    # If our source is a str, then our caller has managed encodings for us,\n    # and we don't need to deal with it.\n    if isinstance(source, str):\n        payload = msg.get_payload()\n        assert isinstance(payload, str)\n        return payload\n    # If our source is a bytes, then we're managing the encoding and we need\n    # to deal with it.\n    else:\n        bpayload = msg.get_payload(decode=True)\n        assert isinstance(bpayload, bytes)\n        try:\n            return bpayload.decode(\"utf8\", \"strict\")\n        except UnicodeDecodeError as exc:\n            raise ValueError(\"payload in an invalid encoding\") from exc\n\n\n# The various parse_FORMAT functions here are intended to be as lenient as\n# possible in their parsing, while still returning a correctly typed\n# RawMetadata.\n#\n# To aid in this, we also generally want to do as little touching of the\n# data as possible, except where there are possibly some historic holdovers\n# that make valid data awkward to work with.\n#\n# While this is a lower level, intermediate format than our ``Metadata``\n# class, some light touch ups can make a massive difference in usability.\n\n# Map METADATA fields to RawMetadata.\n_EMAIL_TO_RAW_MAPPING = {\n    \"author\": \"author\",\n    \"author-email\": \"author_email\",\n    \"classifier\": \"classifiers\",\n    \"description\": \"description\",\n    \"description-content-type\": \"description_content_type\",\n    \"download-url\": \"download_url\",\n    \"dynamic\": \"dynamic\",\n    \"home-page\": \"home_page\",\n    \"keywords\": \"keywords\",\n    \"license\": \"license\",\n    \"license-expression\": \"license_expression\",\n    \"license-file\": \"license_files\",\n    \"maintainer\": \"maintainer\",\n    \"maintainer-email\": \"maintainer_email\",\n    \"metadata-version\": \"metadata_version\",\n    \"name\": \"name\",\n    \"obsoletes\": \"obsoletes\",\n    \"obsoletes-dist\": \"obsoletes_dist\",\n    \"platform\": \"platforms\",\n    \"project-url\": \"project_urls\",\n    \"provides\": \"provides\",\n    \"provides-dist\": \"provides_dist\",\n    \"provides-extra\": \"provides_extra\",\n    \"requires\": \"requires\",\n    \"requires-dist\": \"requires_dist\",\n    \"requires-external\": \"requires_external\",\n    \"requires-python\": \"requires_python\",\n    \"summary\": \"summary\",\n    \"supported-platform\": \"supported_platforms\",\n    \"version\": \"version\",\n}\n_RAW_TO_EMAIL_MAPPING = {raw: email for email, raw in _EMAIL_TO_RAW_MAPPING.items()}\n\n\ndef parse_email(data: bytes | str) -> tuple[RawMetadata, dict[str, list[str]]]:\n    \"\"\"Parse a distribution's metadata stored as email headers (e.g. from ``METADATA``).\n\n    This function returns a two-item tuple of dicts. The first dict is of\n    recognized fields from the core metadata specification. Fields that can be\n    parsed and translated into Python's built-in types are converted\n    appropriately. All other fields are left as-is. Fields that are allowed to\n    appear multiple times are stored as lists.\n\n    The second dict contains all other fields from the metadata. This includes\n    any unrecognized fields. It also includes any fields which are expected to\n    be parsed into a built-in type but were not formatted appropriately. Finally,\n    any fields that are expected to appear only once but are repeated are\n    included in this dict.\n\n    \"\"\"\n    raw: dict[str, str | list[str] | dict[str, str]] = {}\n    unparsed: dict[str, list[str]] = {}\n\n    if isinstance(data, str):\n        parsed = email.parser.Parser(policy=email.policy.compat32).parsestr(data)\n    else:\n        parsed = email.parser.BytesParser(policy=email.policy.compat32).parsebytes(data)\n\n    # We have to wrap parsed.keys() in a set, because in the case of multiple\n    # values for a key (a list), the key will appear multiple times in the\n    # list of keys, but we're avoiding that by using get_all().\n    for name in frozenset(parsed.keys()):\n        # Header names in RFC are case insensitive, so we'll normalize to all\n        # lower case to make comparisons easier.\n        name = name.lower()\n\n        # We use get_all() here, even for fields that aren't multiple use,\n        # because otherwise someone could have e.g. two Name fields, and we\n        # would just silently ignore it rather than doing something about it.\n        headers = parsed.get_all(name) or []\n\n        # The way the email module works when parsing bytes is that it\n        # unconditionally decodes the bytes as ascii using the surrogateescape\n        # handler. When you pull that data back out (such as with get_all() ),\n        # it looks to see if the str has any surrogate escapes, and if it does\n        # it wraps it in a Header object instead of returning the string.\n        #\n        # As such, we'll look for those Header objects, and fix up the encoding.\n        value = []\n        # Flag if we have run into any issues processing the headers, thus\n        # signalling that the data belongs in 'unparsed'.\n        valid_encoding = True\n        for h in headers:\n            # It's unclear if this can return more types than just a Header or\n            # a str, so we'll just assert here to make sure.\n            assert isinstance(h, (email.header.Header, str))\n\n            # If it's a header object, we need to do our little dance to get\n            # the real data out of it. In cases where there is invalid data\n            # we're going to end up with mojibake, but there's no obvious, good\n            # way around that without reimplementing parts of the Header object\n            # ourselves.\n            #\n            # That should be fine since, if mojibacked happens, this key is\n            # going into the unparsed dict anyways.\n            if isinstance(h, email.header.Header):\n                # The Header object stores it's data as chunks, and each chunk\n                # can be independently encoded, so we'll need to check each\n                # of them.\n                chunks: list[tuple[bytes, str | None]] = []\n                for bin, encoding in email.header.decode_header(h):\n                    try:\n                        bin.decode(\"utf8\", \"strict\")\n                    except UnicodeDecodeError:\n                        # Enable mojibake.\n                        encoding = \"latin1\"\n                        valid_encoding = False\n                    else:\n                        encoding = \"utf8\"\n                    chunks.append((bin, encoding))\n\n                # Turn our chunks back into a Header object, then let that\n                # Header object do the right thing to turn them into a\n                # string for us.\n                value.append(str(email.header.make_header(chunks)))\n            # This is already a string, so just add it.\n            else:\n                value.append(h)\n\n        # We've processed all of our values to get them into a list of str,\n        # but we may have mojibake data, in which case this is an unparsed\n        # field.\n        if not valid_encoding:\n            unparsed[name] = value\n            continue\n\n        raw_name = _EMAIL_TO_RAW_MAPPING.get(name)\n        if raw_name is None:\n            # This is a bit of a weird situation, we've encountered a key that\n            # we don't know what it means, so we don't know whether it's meant\n            # to be a list or not.\n            #\n            # Since we can't really tell one way or another, we'll just leave it\n            # as a list, even though it may be a single item list, because that's\n            # what makes the most sense for email headers.\n            unparsed[name] = value\n            continue\n\n        # If this is one of our string fields, then we'll check to see if our\n        # value is a list of a single item. If it is then we'll assume that\n        # it was emitted as a single string, and unwrap the str from inside\n        # the list.\n        #\n        # If it's any other kind of data, then we haven't the faintest clue\n        # what we should parse it as, and we have to just add it to our list\n        # of unparsed stuff.\n        if raw_name in _STRING_FIELDS and len(value) == 1:\n            raw[raw_name] = value[0]\n        # If this is one of our list of string fields, then we can just assign\n        # the value, since email *only* has strings, and our get_all() call\n        # above ensures that this is a list.\n        elif raw_name in _LIST_FIELDS:\n            raw[raw_name] = value\n        # Special Case: Keywords\n        # The keywords field is implemented in the metadata spec as a str,\n        # but it conceptually is a list of strings, and is serialized using\n        # \", \".join(keywords), so we'll do some light data massaging to turn\n        # this into what it logically is.\n        elif raw_name == \"keywords\" and len(value) == 1:\n            raw[raw_name] = _parse_keywords(value[0])\n        # Special Case: Project-URL\n        # The project urls is implemented in the metadata spec as a list of\n        # specially-formatted strings that represent a key and a value, which\n        # is fundamentally a mapping, however the email format doesn't support\n        # mappings in a sane way, so it was crammed into a list of strings\n        # instead.\n        #\n        # We will do a little light data massaging to turn this into a map as\n        # it logically should be.\n        elif raw_name == \"project_urls\":\n            try:\n                raw[raw_name] = _parse_project_urls(value)\n            except KeyError:\n                unparsed[name] = value\n        # Nothing that we've done has managed to parse this, so it'll just\n        # throw it in our unparseable data and move on.\n        else:\n            unparsed[name] = value\n\n    # We need to support getting the Description from the message payload in\n    # addition to getting it from the the headers. This does mean, though, there\n    # is the possibility of it being set both ways, in which case we put both\n    # in 'unparsed' since we don't know which is right.\n    try:\n        payload = _get_payload(parsed, data)\n    except ValueError:\n        unparsed.setdefault(\"description\", []).append(\n            parsed.get_payload(decode=isinstance(data, bytes))  # type: ignore[call-overload]\n        )\n    else:\n        if payload:\n            # Check to see if we've already got a description, if so then both\n            # it, and this body move to unparseable.\n            if \"description\" in raw:\n                description_header = cast(str, raw.pop(\"description\"))\n                unparsed.setdefault(\"description\", []).extend(\n                    [description_header, payload]\n                )\n            elif \"description\" in unparsed:\n                unparsed[\"description\"].append(payload)\n            else:\n                raw[\"description\"] = payload\n\n    # We need to cast our `raw` to a metadata, because a TypedDict only support\n    # literal key names, but we're computing our key names on purpose, but the\n    # way this function is implemented, our `TypedDict` can only have valid key\n    # names.\n    return cast(RawMetadata, raw), unparsed\n\n\n_NOT_FOUND = object()\n\n\n# Keep the two values in sync.\n_VALID_METADATA_VERSIONS = [\"1.0\", \"1.1\", \"1.2\", \"2.1\", \"2.2\", \"2.3\", \"2.4\"]\n_MetadataVersion = Literal[\"1.0\", \"1.1\", \"1.2\", \"2.1\", \"2.2\", \"2.3\", \"2.4\"]\n\n_REQUIRED_ATTRS = frozenset([\"metadata_version\", \"name\", \"version\"])\n\n\nclass _Validator(Generic[T]):\n    \"\"\"Validate a metadata field.\n\n    All _process_*() methods correspond to a core metadata field. The method is\n    called with the field's raw value. If the raw value is valid it is returned\n    in its \"enriched\" form (e.g. ``version.Version`` for the ``Version`` field).\n    If the raw value is invalid, :exc:`InvalidMetadata` is raised (with a cause\n    as appropriate).\n    \"\"\"\n\n    name: str\n    raw_name: str\n    added: _MetadataVersion\n\n    def __init__(\n        self,\n        *,\n        added: _MetadataVersion = \"1.0\",\n    ) -> None:\n        self.added = added\n\n    def __set_name__(self, _owner: Metadata, name: str) -> None:\n        self.name = name\n        self.raw_name = _RAW_TO_EMAIL_MAPPING[name]\n\n    def __get__(self, instance: Metadata, _owner: type[Metadata]) -> T:\n        # With Python 3.8, the caching can be replaced with functools.cached_property().\n        # No need to check the cache as attribute lookup will resolve into the\n        # instance's __dict__ before __get__ is called.\n        cache = instance.__dict__\n        value = instance._raw.get(self.name)\n\n        # To make the _process_* methods easier, we'll check if the value is None\n        # and if this field is NOT a required attribute, and if both of those\n        # things are true, we'll skip the the converter. This will mean that the\n        # converters never have to deal with the None union.\n        if self.name in _REQUIRED_ATTRS or value is not None:\n            try:\n                converter: Callable[[Any], T] = getattr(self, f\"_process_{self.name}\")\n            except AttributeError:\n                pass\n            else:\n                value = converter(value)\n\n        cache[self.name] = value\n        try:\n            del instance._raw[self.name]  # type: ignore[misc]\n        except KeyError:\n            pass\n\n        return cast(T, value)\n\n    def _invalid_metadata(\n        self, msg: str, cause: Exception | None = None\n    ) -> InvalidMetadata:\n        exc = InvalidMetadata(\n            self.raw_name, msg.format_map({\"field\": repr(self.raw_name)})\n        )\n        exc.__cause__ = cause\n        return exc\n\n    def _process_metadata_version(self, value: str) -> _MetadataVersion:\n        # Implicitly makes Metadata-Version required.\n        if value not in _VALID_METADATA_VERSIONS:\n            raise self._invalid_metadata(f\"{value!r} is not a valid metadata version\")\n        return cast(_MetadataVersion, value)\n\n    def _process_name(self, value: str) -> str:\n        if not value:\n            raise self._invalid_metadata(\"{field} is a required field\")\n        # Validate the name as a side-effect.\n        try:\n            utils.canonicalize_name(value, validate=True)\n        except utils.InvalidName as exc:\n            raise self._invalid_metadata(\n                f\"{value!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n        else:\n            return value\n\n    def _process_version(self, value: str) -> version_module.Version:\n        if not value:\n            raise self._invalid_metadata(\"{field} is a required field\")\n        try:\n            return version_module.parse(value)\n        except version_module.InvalidVersion as exc:\n            raise self._invalid_metadata(\n                f\"{value!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n\n    def _process_summary(self, value: str) -> str:\n        \"\"\"Check the field contains no newlines.\"\"\"\n        if \"\\n\" in value:\n            raise self._invalid_metadata(\"{field} must be a single line\")\n        return value\n\n    def _process_description_content_type(self, value: str) -> str:\n        content_types = {\"text/plain\", \"text/x-rst\", \"text/markdown\"}\n        message = email.message.EmailMessage()\n        message[\"content-type\"] = value\n\n        content_type, parameters = (\n            # Defaults to `text/plain` if parsing failed.\n            message.get_content_type().lower(),\n            message[\"content-type\"].params,\n        )\n        # Check if content-type is valid or defaulted to `text/plain` and thus was\n        # not parseable.\n        if content_type not in content_types or content_type not in value.lower():\n            raise self._invalid_metadata(\n                f\"{{field}} must be one of {list(content_types)}, not {value!r}\"\n            )\n\n        charset = parameters.get(\"charset\", \"UTF-8\")\n        if charset != \"UTF-8\":\n            raise self._invalid_metadata(\n                f\"{{field}} can only specify the UTF-8 charset, not {list(charset)}\"\n            )\n\n        markdown_variants = {\"GFM\", \"CommonMark\"}\n        variant = parameters.get(\"variant\", \"GFM\")  # Use an acceptable default.\n        if content_type == \"text/markdown\" and variant not in markdown_variants:\n            raise self._invalid_metadata(\n                f\"valid Markdown variants for {{field}} are {list(markdown_variants)}, \"\n                f\"not {variant!r}\",\n            )\n        return value\n\n    def _process_dynamic(self, value: list[str]) -> list[str]:\n        for dynamic_field in map(str.lower, value):\n            if dynamic_field in {\"name\", \"version\", \"metadata-version\"}:\n                raise self._invalid_metadata(\n                    f\"{dynamic_field!r} is not allowed as a dynamic field\"\n                )\n            elif dynamic_field not in _EMAIL_TO_RAW_MAPPING:\n                raise self._invalid_metadata(\n                    f\"{dynamic_field!r} is not a valid dynamic field\"\n                )\n        return list(map(str.lower, value))\n\n    def _process_provides_extra(\n        self,\n        value: list[str],\n    ) -> list[utils.NormalizedName]:\n        normalized_names = []\n        try:\n            for name in value:\n                normalized_names.append(utils.canonicalize_name(name, validate=True))\n        except utils.InvalidName as exc:\n            raise self._invalid_metadata(\n                f\"{name!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n        else:\n            return normalized_names\n\n    def _process_requires_python(self, value: str) -> specifiers.SpecifierSet:\n        try:\n            return specifiers.SpecifierSet(value)\n        except specifiers.InvalidSpecifier as exc:\n            raise self._invalid_metadata(\n                f\"{value!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n\n    def _process_requires_dist(\n        self,\n        value: list[str],\n    ) -> list[requirements.Requirement]:\n        reqs = []\n        try:\n            for req in value:\n                reqs.append(requirements.Requirement(req))\n        except requirements.InvalidRequirement as exc:\n            raise self._invalid_metadata(\n                f\"{req!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n        else:\n            return reqs\n\n    def _process_license_expression(\n        self, value: str\n    ) -> NormalizedLicenseExpression | None:\n        try:\n            return licenses.canonicalize_license_expression(value)\n        except ValueError as exc:\n            raise self._invalid_metadata(\n                f\"{value!r} is invalid for {{field}}\", cause=exc\n            ) from exc\n\n    def _process_license_files(self, value: list[str]) -> list[str]:\n        paths = []\n        for path in value:\n            if \"..\" in path:\n                raise self._invalid_metadata(\n                    f\"{path!r} is invalid for {{field}}, \"\n                    \"parent directory indicators are not allowed\"\n                )\n            if \"*\" in path:\n                raise self._invalid_metadata(\n                    f\"{path!r} is invalid for {{field}}, paths must be resolved\"\n                )\n            if (\n                pathlib.PurePosixPath(path).is_absolute()\n                or pathlib.PureWindowsPath(path).is_absolute()\n            ):\n                raise self._invalid_metadata(\n                    f\"{path!r} is invalid for {{field}}, paths must be relative\"\n                )\n            if pathlib.PureWindowsPath(path).as_posix() != path:\n                raise self._invalid_metadata(\n                    f\"{path!r} is invalid for {{field}}, paths must use '/' delimiter\"\n                )\n            paths.append(path)\n        return paths\n\n\nclass Metadata:\n    \"\"\"Representation of distribution metadata.\n\n    Compared to :class:`RawMetadata`, this class provides objects representing\n    metadata fields instead of only using built-in types. Any invalid metadata\n    will cause :exc:`InvalidMetadata` to be raised (with a\n    :py:attr:`~BaseException.__cause__` attribute as appropriate).\n    \"\"\"\n\n    _raw: RawMetadata\n\n    @classmethod\n    def from_raw(cls, data: RawMetadata, *, validate: bool = True) -> Metadata:\n        \"\"\"Create an instance from :class:`RawMetadata`.\n\n        If *validate* is true, all metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        \"\"\"\n        ins = cls()\n        ins._raw = data.copy()  # Mutations occur due to caching enriched values.\n\n        if validate:\n            exceptions: list[Exception] = []\n            try:\n                metadata_version = ins.metadata_version\n                metadata_age = _VALID_METADATA_VERSIONS.index(metadata_version)\n            except InvalidMetadata as metadata_version_exc:\n                exceptions.append(metadata_version_exc)\n                metadata_version = None\n\n            # Make sure to check for the fields that are present, the required\n            # fields (so their absence can be reported).\n            fields_to_check = frozenset(ins._raw) | _REQUIRED_ATTRS\n            # Remove fields that have already been checked.\n            fields_to_check -= {\"metadata_version\"}\n\n            for key in fields_to_check:\n                try:\n                    if metadata_version:\n                        # Can't use getattr() as that triggers descriptor protocol which\n                        # will fail due to no value for the instance argument.\n                        try:\n                            field_metadata_version = cls.__dict__[key].added\n                        except KeyError:\n                            exc = InvalidMetadata(key, f\"unrecognized field: {key!r}\")\n                            exceptions.append(exc)\n                            continue\n                        field_age = _VALID_METADATA_VERSIONS.index(\n                            field_metadata_version\n                        )\n                        if field_age > metadata_age:\n                            field = _RAW_TO_EMAIL_MAPPING[key]\n                            exc = InvalidMetadata(\n                                field,\n                                f\"{field} introduced in metadata version \"\n                                f\"{field_metadata_version}, not {metadata_version}\",\n                            )\n                            exceptions.append(exc)\n                            continue\n                    getattr(ins, key)\n                except InvalidMetadata as exc:\n                    exceptions.append(exc)\n\n            if exceptions:\n                raise ExceptionGroup(\"invalid metadata\", exceptions)\n\n        return ins\n\n    @classmethod\n    def from_email(cls, data: bytes | str, *, validate: bool = True) -> Metadata:\n        \"\"\"Parse metadata from email headers.\n\n        If *validate* is true, the metadata will be validated. All exceptions\n        related to validation will be gathered and raised as an :class:`ExceptionGroup`.\n        \"\"\"\n        raw, unparsed = parse_email(data)\n\n        if validate:\n            exceptions: list[Exception] = []\n            for unparsed_key in unparsed:\n                if unparsed_key in _EMAIL_TO_RAW_MAPPING:\n                    message = f\"{unparsed_key!r} has invalid data\"\n                else:\n                    message = f\"unrecognized field: {unparsed_key!r}\"\n                exceptions.append(InvalidMetadata(unparsed_key, message))\n\n            if exceptions:\n                raise ExceptionGroup(\"unparsed\", exceptions)\n\n        try:\n            return cls.from_raw(raw, validate=validate)\n        except ExceptionGroup as exc_group:\n            raise ExceptionGroup(\n                \"invalid or unparsed metadata\", exc_group.exceptions\n            ) from None\n\n    metadata_version: _Validator[_MetadataVersion] = _Validator()\n    \"\"\":external:ref:`core-metadata-metadata-version`\n    (required; validated to be a valid metadata version)\"\"\"\n    # `name` is not normalized/typed to NormalizedName so as to provide access to\n    # the original/raw name.\n    name: _Validator[str] = _Validator()\n    \"\"\":external:ref:`core-metadata-name`\n    (required; validated using :func:`~packaging.utils.canonicalize_name` and its\n    *validate* parameter)\"\"\"\n    version: _Validator[version_module.Version] = _Validator()\n    \"\"\":external:ref:`core-metadata-version` (required)\"\"\"\n    dynamic: _Validator[list[str] | None] = _Validator(\n        added=\"2.2\",\n    )\n    \"\"\":external:ref:`core-metadata-dynamic`\n    (validated against core metadata field names and lowercased)\"\"\"\n    platforms: _Validator[list[str] | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-platform`\"\"\"\n    supported_platforms: _Validator[list[str] | None] = _Validator(added=\"1.1\")\n    \"\"\":external:ref:`core-metadata-supported-platform`\"\"\"\n    summary: _Validator[str | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-summary` (validated to contain no newlines)\"\"\"\n    description: _Validator[str | None] = _Validator()  # TODO 2.1: can be in body\n    \"\"\":external:ref:`core-metadata-description`\"\"\"\n    description_content_type: _Validator[str | None] = _Validator(added=\"2.1\")\n    \"\"\":external:ref:`core-metadata-description-content-type` (validated)\"\"\"\n    keywords: _Validator[list[str] | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-keywords`\"\"\"\n    home_page: _Validator[str | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-home-page`\"\"\"\n    download_url: _Validator[str | None] = _Validator(added=\"1.1\")\n    \"\"\":external:ref:`core-metadata-download-url`\"\"\"\n    author: _Validator[str | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-author`\"\"\"\n    author_email: _Validator[str | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-author-email`\"\"\"\n    maintainer: _Validator[str | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-maintainer`\"\"\"\n    maintainer_email: _Validator[str | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-maintainer-email`\"\"\"\n    license: _Validator[str | None] = _Validator()\n    \"\"\":external:ref:`core-metadata-license`\"\"\"\n    license_expression: _Validator[NormalizedLicenseExpression | None] = _Validator(\n        added=\"2.4\"\n    )\n    \"\"\":external:ref:`core-metadata-license-expression`\"\"\"\n    license_files: _Validator[list[str] | None] = _Validator(added=\"2.4\")\n    \"\"\":external:ref:`core-metadata-license-file`\"\"\"\n    classifiers: _Validator[list[str] | None] = _Validator(added=\"1.1\")\n    \"\"\":external:ref:`core-metadata-classifier`\"\"\"\n    requires_dist: _Validator[list[requirements.Requirement] | None] = _Validator(\n        added=\"1.2\"\n    )\n    \"\"\":external:ref:`core-metadata-requires-dist`\"\"\"\n    requires_python: _Validator[specifiers.SpecifierSet | None] = _Validator(\n        added=\"1.2\"\n    )\n    \"\"\":external:ref:`core-metadata-requires-python`\"\"\"\n    # Because `Requires-External` allows for non-PEP 440 version specifiers, we\n    # don't do any processing on the values.\n    requires_external: _Validator[list[str] | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-requires-external`\"\"\"\n    project_urls: _Validator[dict[str, str] | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-project-url`\"\"\"\n    # PEP 685 lets us raise an error if an extra doesn't pass `Name` validation\n    # regardless of metadata version.\n    provides_extra: _Validator[list[utils.NormalizedName] | None] = _Validator(\n        added=\"2.1\",\n    )\n    \"\"\":external:ref:`core-metadata-provides-extra`\"\"\"\n    provides_dist: _Validator[list[str] | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-provides-dist`\"\"\"\n    obsoletes_dist: _Validator[list[str] | None] = _Validator(added=\"1.2\")\n    \"\"\":external:ref:`core-metadata-obsoletes-dist`\"\"\"\n    requires: _Validator[list[str] | None] = _Validator(added=\"1.1\")\n    \"\"\"``Requires`` (deprecated)\"\"\"\n    provides: _Validator[list[str] | None] = _Validator(added=\"1.1\")\n    \"\"\"``Provides`` (deprecated)\"\"\"\n    obsoletes: _Validator[list[str] | None] = _Validator(added=\"1.1\")\n    \"\"\"``Obsoletes`` (deprecated)\"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/metadata.py",
        "start": 1,
        "end": 862,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 862,
          "column": 33,
          "position": 5678
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/metadata.py",
        "start": 1,
        "end": 862,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 862,
          "column": 33,
          "position": 5678
        }
      }
    },
    {
      "format": "python",
      "lines": 362,
      "fragment": "# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\n\nfrom __future__ import annotations\n\nimport operator\nimport os\nimport platform\nimport sys\nfrom typing import AbstractSet, Any, Callable, Literal, TypedDict, Union, cast\n\nfrom ._parser import MarkerAtom, MarkerList, Op, Value, Variable\nfrom ._parser import parse_marker as _parse_marker\nfrom ._tokenizer import ParserSyntaxError\nfrom .specifiers import InvalidSpecifier, Specifier\nfrom .utils import canonicalize_name\n\n__all__ = [\n    \"EvaluateContext\",\n    \"InvalidMarker\",\n    \"Marker\",\n    \"UndefinedComparison\",\n    \"UndefinedEnvironmentName\",\n    \"default_environment\",\n]\n\nOperator = Callable[[str, Union[str, AbstractSet[str]]], bool]\nEvaluateContext = Literal[\"metadata\", \"lock_file\", \"requirement\"]\nMARKERS_ALLOWING_SET = {\"extras\", \"dependency_groups\"}\n\n\nclass InvalidMarker(ValueError):\n    \"\"\"\n    An invalid marker was found, users should refer to PEP 508.\n    \"\"\"\n\n\nclass UndefinedComparison(ValueError):\n    \"\"\"\n    An invalid operation was attempted on a value that doesn't support it.\n    \"\"\"\n\n\nclass UndefinedEnvironmentName(ValueError):\n    \"\"\"\n    A name was attempted to be used that does not exist inside of the\n    environment.\n    \"\"\"\n\n\nclass Environment(TypedDict):\n    implementation_name: str\n    \"\"\"The implementation's identifier, e.g. ``'cpython'``.\"\"\"\n\n    implementation_version: str\n    \"\"\"\n    The implementation's version, e.g. ``'3.13.0a2'`` for CPython 3.13.0a2, or\n    ``'7.3.13'`` for PyPy3.10 v7.3.13.\n    \"\"\"\n\n    os_name: str\n    \"\"\"\n    The value of :py:data:`os.name`. The name of the operating system dependent module\n    imported, e.g. ``'posix'``.\n    \"\"\"\n\n    platform_machine: str\n    \"\"\"\n    Returns the machine type, e.g. ``'i386'``.\n\n    An empty string if the value cannot be determined.\n    \"\"\"\n\n    platform_release: str\n    \"\"\"\n    The system's release, e.g. ``'2.2.0'`` or ``'NT'``.\n\n    An empty string if the value cannot be determined.\n    \"\"\"\n\n    platform_system: str\n    \"\"\"\n    The system/OS name, e.g. ``'Linux'``, ``'Windows'`` or ``'Java'``.\n\n    An empty string if the value cannot be determined.\n    \"\"\"\n\n    platform_version: str\n    \"\"\"\n    The system's release version, e.g. ``'#3 on degas'``.\n\n    An empty string if the value cannot be determined.\n    \"\"\"\n\n    python_full_version: str\n    \"\"\"\n    The Python version as string ``'major.minor.patchlevel'``.\n\n    Note that unlike the Python :py:data:`sys.version`, this value will always include\n    the patchlevel (it defaults to 0).\n    \"\"\"\n\n    platform_python_implementation: str\n    \"\"\"\n    A string identifying the Python implementation, e.g. ``'CPython'``.\n    \"\"\"\n\n    python_version: str\n    \"\"\"The Python version as string ``'major.minor'``.\"\"\"\n\n    sys_platform: str\n    \"\"\"\n    This string contains a platform identifier that can be used to append\n    platform-specific components to :py:data:`sys.path`, for instance.\n\n    For Unix systems, except on Linux and AIX, this is the lowercased OS name as\n    returned by ``uname -s`` with the first part of the version as returned by\n    ``uname -r`` appended, e.g. ``'sunos5'`` or ``'freebsd8'``, at the time when Python\n    was built.\n    \"\"\"\n\n\ndef _normalize_extra_values(results: Any) -> Any:\n    \"\"\"\n    Normalize extra values.\n    \"\"\"\n    if isinstance(results[0], tuple):\n        lhs, op, rhs = results[0]\n        if isinstance(lhs, Variable) and lhs.value == \"extra\":\n            normalized_extra = canonicalize_name(rhs.value)\n            rhs = Value(normalized_extra)\n        elif isinstance(rhs, Variable) and rhs.value == \"extra\":\n            normalized_extra = canonicalize_name(lhs.value)\n            lhs = Value(normalized_extra)\n        results[0] = lhs, op, rhs\n    return results\n\n\ndef _format_marker(\n    marker: list[str] | MarkerAtom | str, first: bool | None = True\n) -> str:\n    assert isinstance(marker, (list, tuple, str))\n\n    # Sometimes we have a structure like [[...]] which is a single item list\n    # where the single item is itself it's own list. In that case we want skip\n    # the rest of this function so that we don't get extraneous () on the\n    # outside.\n    if (\n        isinstance(marker, list)\n        and len(marker) == 1\n        and isinstance(marker[0], (list, tuple))\n    ):\n        return _format_marker(marker[0])\n\n    if isinstance(marker, list):\n        inner = (_format_marker(m, first=False) for m in marker)\n        if first:\n            return \" \".join(inner)\n        else:\n            return \"(\" + \" \".join(inner) + \")\"\n    elif isinstance(marker, tuple):\n        return \" \".join([m.serialize() for m in marker])\n    else:\n        return marker\n\n\n_operators: dict[str, Operator] = {\n    \"in\": lambda lhs, rhs: lhs in rhs,\n    \"not in\": lambda lhs, rhs: lhs not in rhs,\n    \"<\": operator.lt,\n    \"<=\": operator.le,\n    \"==\": operator.eq,\n    \"!=\": operator.ne,\n    \">=\": operator.ge,\n    \">\": operator.gt,\n}\n\n\ndef _eval_op(lhs: str, op: Op, rhs: str | AbstractSet[str]) -> bool:\n    if isinstance(rhs, str):\n        try:\n            spec = Specifier(\"\".join([op.serialize(), rhs]))\n        except InvalidSpecifier:\n            pass\n        else:\n            return spec.contains(lhs, prereleases=True)\n\n    oper: Operator | None = _operators.get(op.serialize())\n    if oper is None:\n        raise UndefinedComparison(f\"Undefined {op!r} on {lhs!r} and {rhs!r}.\")\n\n    return oper(lhs, rhs)\n\n\ndef _normalize(\n    lhs: str, rhs: str | AbstractSet[str], key: str\n) -> tuple[str, str | AbstractSet[str]]:\n    # PEP 685 – Comparison of extra names for optional distribution dependencies\n    # https://peps.python.org/pep-0685/\n    # > When comparing extra names, tools MUST normalize the names being\n    # > compared using the semantics outlined in PEP 503 for names\n    if key == \"extra\":\n        assert isinstance(rhs, str), \"extra value must be a string\"\n        return (canonicalize_name(lhs), canonicalize_name(rhs))\n    if key in MARKERS_ALLOWING_SET:\n        if isinstance(rhs, str):  # pragma: no cover\n            return (canonicalize_name(lhs), canonicalize_name(rhs))\n        else:\n            return (canonicalize_name(lhs), {canonicalize_name(v) for v in rhs})\n\n    # other environment markers don't have such standards\n    return lhs, rhs\n\n\ndef _evaluate_markers(\n    markers: MarkerList, environment: dict[str, str | AbstractSet[str]]\n) -> bool:\n    groups: list[list[bool]] = [[]]\n\n    for marker in markers:\n        assert isinstance(marker, (list, tuple, str))\n\n        if isinstance(marker, list):\n            groups[-1].append(_evaluate_markers(marker, environment))\n        elif isinstance(marker, tuple):\n            lhs, op, rhs = marker\n\n            if isinstance(lhs, Variable):\n                environment_key = lhs.value\n                lhs_value = environment[environment_key]\n                rhs_value = rhs.value\n            else:\n                lhs_value = lhs.value\n                environment_key = rhs.value\n                rhs_value = environment[environment_key]\n            assert isinstance(lhs_value, str), \"lhs must be a string\"\n            lhs_value, rhs_value = _normalize(lhs_value, rhs_value, key=environment_key)\n            groups[-1].append(_eval_op(lhs_value, op, rhs_value))\n        else:\n            assert marker in [\"and\", \"or\"]\n            if marker == \"or\":\n                groups.append([])\n\n    return any(all(item) for item in groups)\n\n\ndef format_full_version(info: sys._version_info) -> str:\n    version = f\"{info.major}.{info.minor}.{info.micro}\"\n    kind = info.releaselevel\n    if kind != \"final\":\n        version += kind[0] + str(info.serial)\n    return version\n\n\ndef default_environment() -> Environment:\n    iver = format_full_version(sys.implementation.version)\n    implementation_name = sys.implementation.name\n    return {\n        \"implementation_name\": implementation_name,\n        \"implementation_version\": iver,\n        \"os_name\": os.name,\n        \"platform_machine\": platform.machine(),\n        \"platform_release\": platform.release(),\n        \"platform_system\": platform.system(),\n        \"platform_version\": platform.version(),\n        \"python_full_version\": platform.python_version(),\n        \"platform_python_implementation\": platform.python_implementation(),\n        \"python_version\": \".\".join(platform.python_version_tuple()[:2]),\n        \"sys_platform\": sys.platform,\n    }\n\n\nclass Marker:\n    def __init__(self, marker: str) -> None:\n        # Note: We create a Marker object without calling this constructor in\n        #       packaging.requirements.Requirement. If any additional logic is\n        #       added here, make sure to mirror/adapt Requirement.\n        try:\n            self._markers = _normalize_extra_values(_parse_marker(marker))\n            # The attribute `_markers` can be described in terms of a recursive type:\n            # MarkerList = List[Union[Tuple[Node, ...], str, MarkerList]]\n            #\n            # For example, the following expression:\n            # python_version > \"3.6\" or (python_version == \"3.6\" and os_name == \"unix\")\n            #\n            # is parsed into:\n            # [\n            #     (<Variable('python_version')>, <Op('>')>, <Value('3.6')>),\n            #     'and',\n            #     [\n            #         (<Variable('python_version')>, <Op('==')>, <Value('3.6')>),\n            #         'or',\n            #         (<Variable('os_name')>, <Op('==')>, <Value('unix')>)\n            #     ]\n            # ]\n        except ParserSyntaxError as e:\n            raise InvalidMarker(str(e)) from e\n\n    def __str__(self) -> str:\n        return _format_marker(self._markers)\n\n    def __repr__(self) -> str:\n        return f\"<Marker('{self}')>\"\n\n    def __hash__(self) -> int:\n        return hash((self.__class__.__name__, str(self)))\n\n    def __eq__(self, other: Any) -> bool:\n        if not isinstance(other, Marker):\n            return NotImplemented\n\n        return str(self) == str(other)\n\n    def evaluate(\n        self,\n        environment: dict[str, str] | None = None,\n        context: EvaluateContext = \"metadata\",\n    ) -> bool:\n        \"\"\"Evaluate a marker.\n\n        Return the boolean from evaluating the given marker against the\n        environment. environment is an optional argument to override all or\n        part of the determined environment. The *context* parameter specifies what\n        context the markers are being evaluated for, which influences what markers\n        are considered valid. Acceptable values are \"metadata\" (for core metadata;\n        default), \"lock_file\", and \"requirement\" (i.e. all other situations).\n\n        The environment is determined from the current Python process.\n        \"\"\"\n        current_environment = cast(\n            \"dict[str, str | AbstractSet[str]]\", default_environment()\n        )\n        if context == \"lock_file\":\n            current_environment.update(\n                extras=frozenset(), dependency_groups=frozenset()\n            )\n        elif context == \"metadata\":\n            current_environment[\"extra\"] = \"\"\n        if environment is not None:\n            current_environment.update(environment)\n            # The API used to allow setting extra to None. We need to handle this\n            # case for backwards compatibility.\n            if \"extra\" in current_environment and current_environment[\"extra\"] is None:\n                current_environment[\"extra\"] = \"\"\n\n        return _evaluate_markers(\n            self._markers, _repair_python_full_version(current_environment)\n        )\n\n\ndef _repair_python_full_version(\n    env: dict[str, str | AbstractSet[str]],\n) -> dict[str, str | AbstractSet[str]]:\n    \"\"\"\n    Work around platform.python_version() returning something that is not PEP 440\n    compliant for non-tagged Python builds.\n    \"\"\"\n    python_full_version = cast(str, env[\"python_full_version\"])\n    if python_full_version.endswith(\"+\"):\n        env[\"python_full_version\"] = f\"{python_full_version}local\"\n    return env",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/markers.py",
        "start": 1,
        "end": 362,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 362,
          "column": 4,
          "position": 870
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/markers.py",
        "start": 1,
        "end": 362,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 362,
          "column": 4,
          "position": 870
        }
      }
    },
    {
      "format": "python",
      "lines": 195,
      "fragment": "from __future__ import annotations\n\nimport contextlib\nimport re\nfrom dataclasses import dataclass\nfrom typing import Iterator, NoReturn\n\nfrom .specifiers import Specifier\n\n\n@dataclass\nclass Token:\n    name: str\n    text: str\n    position: int\n\n\nclass ParserSyntaxError(Exception):\n    \"\"\"The provided source text could not be parsed correctly.\"\"\"\n\n    def __init__(\n        self,\n        message: str,\n        *,\n        source: str,\n        span: tuple[int, int],\n    ) -> None:\n        self.span = span\n        self.message = message\n        self.source = source\n\n        super().__init__()\n\n    def __str__(self) -> str:\n        marker = \" \" * self.span[0] + \"~\" * (self.span[1] - self.span[0]) + \"^\"\n        return \"\\n    \".join([self.message, self.source, marker])\n\n\nDEFAULT_RULES: dict[str, str | re.Pattern[str]] = {\n    \"LEFT_PARENTHESIS\": r\"\\(\",\n    \"RIGHT_PARENTHESIS\": r\"\\)\",\n    \"LEFT_BRACKET\": r\"\\[\",\n    \"RIGHT_BRACKET\": r\"\\]\",\n    \"SEMICOLON\": r\";\",\n    \"COMMA\": r\",\",\n    \"QUOTED_STRING\": re.compile(\n        r\"\"\"\n            (\n                ('[^']*')\n                |\n                (\"[^\"]*\")\n            )\n        \"\"\",\n        re.VERBOSE,\n    ),\n    \"OP\": r\"(===|==|~=|!=|<=|>=|<|>)\",\n    \"BOOLOP\": r\"\\b(or|and)\\b\",\n    \"IN\": r\"\\bin\\b\",\n    \"NOT\": r\"\\bnot\\b\",\n    \"VARIABLE\": re.compile(\n        r\"\"\"\n            \\b(\n                python_version\n                |python_full_version\n                |os[._]name\n                |sys[._]platform\n                |platform_(release|system)\n                |platform[._](version|machine|python_implementation)\n                |python_implementation\n                |implementation_(name|version)\n                |extras?\n                |dependency_groups\n            )\\b\n        \"\"\",\n        re.VERBOSE,\n    ),\n    \"SPECIFIER\": re.compile(\n        Specifier._operator_regex_str + Specifier._version_regex_str,\n        re.VERBOSE | re.IGNORECASE,\n    ),\n    \"AT\": r\"\\@\",\n    \"URL\": r\"[^ \\t]+\",\n    \"IDENTIFIER\": r\"\\b[a-zA-Z0-9][a-zA-Z0-9._-]*\\b\",\n    \"VERSION_PREFIX_TRAIL\": r\"\\.\\*\",\n    \"VERSION_LOCAL_LABEL_TRAIL\": r\"\\+[a-z0-9]+(?:[-_\\.][a-z0-9]+)*\",\n    \"WS\": r\"[ \\t]+\",\n    \"END\": r\"$\",\n}\n\n\nclass Tokenizer:\n    \"\"\"Context-sensitive token parsing.\n\n    Provides methods to examine the input stream to check whether the next token\n    matches.\n    \"\"\"\n\n    def __init__(\n        self,\n        source: str,\n        *,\n        rules: dict[str, str | re.Pattern[str]],\n    ) -> None:\n        self.source = source\n        self.rules: dict[str, re.Pattern[str]] = {\n            name: re.compile(pattern) for name, pattern in rules.items()\n        }\n        self.next_token: Token | None = None\n        self.position = 0\n\n    def consume(self, name: str) -> None:\n        \"\"\"Move beyond provided token name, if at current position.\"\"\"\n        if self.check(name):\n            self.read()\n\n    def check(self, name: str, *, peek: bool = False) -> bool:\n        \"\"\"Check whether the next token has the provided name.\n\n        By default, if the check succeeds, the token *must* be read before\n        another check. If `peek` is set to `True`, the token is not loaded and\n        would need to be checked again.\n        \"\"\"\n        assert self.next_token is None, (\n            f\"Cannot check for {name!r}, already have {self.next_token!r}\"\n        )\n        assert name in self.rules, f\"Unknown token name: {name!r}\"\n\n        expression = self.rules[name]\n\n        match = expression.match(self.source, self.position)\n        if match is None:\n            return False\n        if not peek:\n            self.next_token = Token(name, match[0], self.position)\n        return True\n\n    def expect(self, name: str, *, expected: str) -> Token:\n        \"\"\"Expect a certain token name next, failing with a syntax error otherwise.\n\n        The token is *not* read.\n        \"\"\"\n        if not self.check(name):\n            raise self.raise_syntax_error(f\"Expected {expected}\")\n        return self.read()\n\n    def read(self) -> Token:\n        \"\"\"Consume the next token and return it.\"\"\"\n        token = self.next_token\n        assert token is not None\n\n        self.position += len(token.text)\n        self.next_token = None\n\n        return token\n\n    def raise_syntax_error(\n        self,\n        message: str,\n        *,\n        span_start: int | None = None,\n        span_end: int | None = None,\n    ) -> NoReturn:\n        \"\"\"Raise ParserSyntaxError at the given position.\"\"\"\n        span = (\n            self.position if span_start is None else span_start,\n            self.position if span_end is None else span_end,\n        )\n        raise ParserSyntaxError(\n            message,\n            source=self.source,\n            span=span,\n        )\n\n    @contextlib.contextmanager\n    def enclosing_tokens(\n        self, open_token: str, close_token: str, *, around: str\n    ) -> Iterator[None]:\n        if self.check(open_token):\n            open_position = self.position\n            self.read()\n        else:\n            open_position = None\n\n        yield\n\n        if open_position is None:\n            return\n\n        if not self.check(close_token):\n            self.raise_syntax_error(\n                f\"Expected matching {close_token} for {open_token}, after {around}\",\n                span_start=open_position,\n            )\n\n        self.read()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_tokenizer.py",
        "start": 1,
        "end": 195,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 195,
          "column": 2,
          "position": 1267
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_tokenizer.py",
        "start": 1,
        "end": 195,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 195,
          "column": 2,
          "position": 1267
        }
      }
    },
    {
      "format": "python",
      "lines": 61,
      "fragment": "# This file is dual licensed under the terms of the Apache License, Version\n# 2.0, and the BSD License. See the LICENSE file in the root of this repository\n# for complete details.\n\n\nclass InfinityType:\n    def __repr__(self) -> str:\n        return \"Infinity\"\n\n    def __hash__(self) -> int:\n        return hash(repr(self))\n\n    def __lt__(self, other: object) -> bool:\n        return False\n\n    def __le__(self, other: object) -> bool:\n        return False\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, self.__class__)\n\n    def __gt__(self, other: object) -> bool:\n        return True\n\n    def __ge__(self, other: object) -> bool:\n        return True\n\n    def __neg__(self: object) -> \"NegativeInfinityType\":\n        return NegativeInfinity\n\n\nInfinity = InfinityType()\n\n\nclass NegativeInfinityType:\n    def __repr__(self) -> str:\n        return \"-Infinity\"\n\n    def __hash__(self) -> int:\n        return hash(repr(self))\n\n    def __lt__(self, other: object) -> bool:\n        return True\n\n    def __le__(self, other: object) -> bool:\n        return True\n\n    def __eq__(self, other: object) -> bool:\n        return isinstance(other, self.__class__)\n\n    def __gt__(self, other: object) -> bool:\n        return False\n\n    def __ge__(self, other: object) -> bool:\n        return False\n\n    def __neg__(self: object) -> InfinityType:\n        return Infinity\n\n\nNegativeInfinity = NegativeInfinityType()",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_structures.py",
        "start": 1,
        "end": 61,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 450
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_structures.py",
        "start": 1,
        "end": 61,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 61,
          "column": 2,
          "position": 450
        }
      }
    },
    {
      "format": "python",
      "lines": 353,
      "fragment": "\"\"\"Handwritten parser of dependency specifiers.\n\nThe docstring for each __parse_* function contains EBNF-inspired grammar representing\nthe implementation.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport ast\nfrom typing import NamedTuple, Sequence, Tuple, Union\n\nfrom ._tokenizer import DEFAULT_RULES, Tokenizer\n\n\nclass Node:\n    def __init__(self, value: str) -> None:\n        self.value = value\n\n    def __str__(self) -> str:\n        return self.value\n\n    def __repr__(self) -> str:\n        return f\"<{self.__class__.__name__}('{self}')>\"\n\n    def serialize(self) -> str:\n        raise NotImplementedError\n\n\nclass Variable(Node):\n    def serialize(self) -> str:\n        return str(self)\n\n\nclass Value(Node):\n    def serialize(self) -> str:\n        return f'\"{self}\"'\n\n\nclass Op(Node):\n    def serialize(self) -> str:\n        return str(self)\n\n\nMarkerVar = Union[Variable, Value]\nMarkerItem = Tuple[MarkerVar, Op, MarkerVar]\nMarkerAtom = Union[MarkerItem, Sequence[\"MarkerAtom\"]]\nMarkerList = Sequence[Union[\"MarkerList\", MarkerAtom, str]]\n\n\nclass ParsedRequirement(NamedTuple):\n    name: str\n    url: str\n    extras: list[str]\n    specifier: str\n    marker: MarkerList | None\n\n\n# --------------------------------------------------------------------------------------\n# Recursive descent parser for dependency specifier\n# --------------------------------------------------------------------------------------\ndef parse_requirement(source: str) -> ParsedRequirement:\n    return _parse_requirement(Tokenizer(source, rules=DEFAULT_RULES))\n\n\ndef _parse_requirement(tokenizer: Tokenizer) -> ParsedRequirement:\n    \"\"\"\n    requirement = WS? IDENTIFIER WS? extras WS? requirement_details\n    \"\"\"\n    tokenizer.consume(\"WS\")\n\n    name_token = tokenizer.expect(\n        \"IDENTIFIER\", expected=\"package name at the start of dependency specifier\"\n    )\n    name = name_token.text\n    tokenizer.consume(\"WS\")\n\n    extras = _parse_extras(tokenizer)\n    tokenizer.consume(\"WS\")\n\n    url, specifier, marker = _parse_requirement_details(tokenizer)\n    tokenizer.expect(\"END\", expected=\"end of dependency specifier\")\n\n    return ParsedRequirement(name, url, extras, specifier, marker)\n\n\ndef _parse_requirement_details(\n    tokenizer: Tokenizer,\n) -> tuple[str, str, MarkerList | None]:\n    \"\"\"\n    requirement_details = AT URL (WS requirement_marker?)?\n                        | specifier WS? (requirement_marker)?\n    \"\"\"\n\n    specifier = \"\"\n    url = \"\"\n    marker = None\n\n    if tokenizer.check(\"AT\"):\n        tokenizer.read()\n        tokenizer.consume(\"WS\")\n\n        url_start = tokenizer.position\n        url = tokenizer.expect(\"URL\", expected=\"URL after @\").text\n        if tokenizer.check(\"END\", peek=True):\n            return (url, specifier, marker)\n\n        tokenizer.expect(\"WS\", expected=\"whitespace after URL\")\n\n        # The input might end after whitespace.\n        if tokenizer.check(\"END\", peek=True):\n            return (url, specifier, marker)\n\n        marker = _parse_requirement_marker(\n            tokenizer, span_start=url_start, after=\"URL and whitespace\"\n        )\n    else:\n        specifier_start = tokenizer.position\n        specifier = _parse_specifier(tokenizer)\n        tokenizer.consume(\"WS\")\n\n        if tokenizer.check(\"END\", peek=True):\n            return (url, specifier, marker)\n\n        marker = _parse_requirement_marker(\n            tokenizer,\n            span_start=specifier_start,\n            after=(\n                \"version specifier\"\n                if specifier\n                else \"name and no valid version specifier\"\n            ),\n        )\n\n    return (url, specifier, marker)\n\n\ndef _parse_requirement_marker(\n    tokenizer: Tokenizer, *, span_start: int, after: str\n) -> MarkerList:\n    \"\"\"\n    requirement_marker = SEMICOLON marker WS?\n    \"\"\"\n\n    if not tokenizer.check(\"SEMICOLON\"):\n        tokenizer.raise_syntax_error(\n            f\"Expected end or semicolon (after {after})\",\n            span_start=span_start,\n        )\n    tokenizer.read()\n\n    marker = _parse_marker(tokenizer)\n    tokenizer.consume(\"WS\")\n\n    return marker\n\n\ndef _parse_extras(tokenizer: Tokenizer) -> list[str]:\n    \"\"\"\n    extras = (LEFT_BRACKET wsp* extras_list? wsp* RIGHT_BRACKET)?\n    \"\"\"\n    if not tokenizer.check(\"LEFT_BRACKET\", peek=True):\n        return []\n\n    with tokenizer.enclosing_tokens(\n        \"LEFT_BRACKET\",\n        \"RIGHT_BRACKET\",\n        around=\"extras\",\n    ):\n        tokenizer.consume(\"WS\")\n        extras = _parse_extras_list(tokenizer)\n        tokenizer.consume(\"WS\")\n\n    return extras\n\n\ndef _parse_extras_list(tokenizer: Tokenizer) -> list[str]:\n    \"\"\"\n    extras_list = identifier (wsp* ',' wsp* identifier)*\n    \"\"\"\n    extras: list[str] = []\n\n    if not tokenizer.check(\"IDENTIFIER\"):\n        return extras\n\n    extras.append(tokenizer.read().text)\n\n    while True:\n        tokenizer.consume(\"WS\")\n        if tokenizer.check(\"IDENTIFIER\", peek=True):\n            tokenizer.raise_syntax_error(\"Expected comma between extra names\")\n        elif not tokenizer.check(\"COMMA\"):\n            break\n\n        tokenizer.read()\n        tokenizer.consume(\"WS\")\n\n        extra_token = tokenizer.expect(\"IDENTIFIER\", expected=\"extra name after comma\")\n        extras.append(extra_token.text)\n\n    return extras\n\n\ndef _parse_specifier(tokenizer: Tokenizer) -> str:\n    \"\"\"\n    specifier = LEFT_PARENTHESIS WS? version_many WS? RIGHT_PARENTHESIS\n              | WS? version_many WS?\n    \"\"\"\n    with tokenizer.enclosing_tokens(\n        \"LEFT_PARENTHESIS\",\n        \"RIGHT_PARENTHESIS\",\n        around=\"version specifier\",\n    ):\n        tokenizer.consume(\"WS\")\n        parsed_specifiers = _parse_version_many(tokenizer)\n        tokenizer.consume(\"WS\")\n\n    return parsed_specifiers\n\n\ndef _parse_version_many(tokenizer: Tokenizer) -> str:\n    \"\"\"\n    version_many = (SPECIFIER (WS? COMMA WS? SPECIFIER)*)?\n    \"\"\"\n    parsed_specifiers = \"\"\n    while tokenizer.check(\"SPECIFIER\"):\n        span_start = tokenizer.position\n        parsed_specifiers += tokenizer.read().text\n        if tokenizer.check(\"VERSION_PREFIX_TRAIL\", peek=True):\n            tokenizer.raise_syntax_error(\n                \".* suffix can only be used with `==` or `!=` operators\",\n                span_start=span_start,\n                span_end=tokenizer.position + 1,\n            )\n        if tokenizer.check(\"VERSION_LOCAL_LABEL_TRAIL\", peek=True):\n            tokenizer.raise_syntax_error(\n                \"Local version label can only be used with `==` or `!=` operators\",\n                span_start=span_start,\n                span_end=tokenizer.position,\n            )\n        tokenizer.consume(\"WS\")\n        if not tokenizer.check(\"COMMA\"):\n            break\n        parsed_specifiers += tokenizer.read().text\n        tokenizer.consume(\"WS\")\n\n    return parsed_specifiers\n\n\n# --------------------------------------------------------------------------------------\n# Recursive descent parser for marker expression\n# --------------------------------------------------------------------------------------\ndef parse_marker(source: str) -> MarkerList:\n    return _parse_full_marker(Tokenizer(source, rules=DEFAULT_RULES))\n\n\ndef _parse_full_marker(tokenizer: Tokenizer) -> MarkerList:\n    retval = _parse_marker(tokenizer)\n    tokenizer.expect(\"END\", expected=\"end of marker expression\")\n    return retval\n\n\ndef _parse_marker(tokenizer: Tokenizer) -> MarkerList:\n    \"\"\"\n    marker = marker_atom (BOOLOP marker_atom)+\n    \"\"\"\n    expression = [_parse_marker_atom(tokenizer)]\n    while tokenizer.check(\"BOOLOP\"):\n        token = tokenizer.read()\n        expr_right = _parse_marker_atom(tokenizer)\n        expression.extend((token.text, expr_right))\n    return expression\n\n\ndef _parse_marker_atom(tokenizer: Tokenizer) -> MarkerAtom:\n    \"\"\"\n    marker_atom = WS? LEFT_PARENTHESIS WS? marker WS? RIGHT_PARENTHESIS WS?\n                | WS? marker_item WS?\n    \"\"\"\n\n    tokenizer.consume(\"WS\")\n    if tokenizer.check(\"LEFT_PARENTHESIS\", peek=True):\n        with tokenizer.enclosing_tokens(\n            \"LEFT_PARENTHESIS\",\n            \"RIGHT_PARENTHESIS\",\n            around=\"marker expression\",\n        ):\n            tokenizer.consume(\"WS\")\n            marker: MarkerAtom = _parse_marker(tokenizer)\n            tokenizer.consume(\"WS\")\n    else:\n        marker = _parse_marker_item(tokenizer)\n    tokenizer.consume(\"WS\")\n    return marker\n\n\ndef _parse_marker_item(tokenizer: Tokenizer) -> MarkerItem:\n    \"\"\"\n    marker_item = WS? marker_var WS? marker_op WS? marker_var WS?\n    \"\"\"\n    tokenizer.consume(\"WS\")\n    marker_var_left = _parse_marker_var(tokenizer)\n    tokenizer.consume(\"WS\")\n    marker_op = _parse_marker_op(tokenizer)\n    tokenizer.consume(\"WS\")\n    marker_var_right = _parse_marker_var(tokenizer)\n    tokenizer.consume(\"WS\")\n    return (marker_var_left, marker_op, marker_var_right)\n\n\ndef _parse_marker_var(tokenizer: Tokenizer) -> MarkerVar:\n    \"\"\"\n    marker_var = VARIABLE | QUOTED_STRING\n    \"\"\"\n    if tokenizer.check(\"VARIABLE\"):\n        return process_env_var(tokenizer.read().text.replace(\".\", \"_\"))\n    elif tokenizer.check(\"QUOTED_STRING\"):\n        return process_python_str(tokenizer.read().text)\n    else:\n        tokenizer.raise_syntax_error(\n            message=\"Expected a marker variable or quoted string\"\n        )\n\n\ndef process_env_var(env_var: str) -> Variable:\n    if env_var in (\"platform_python_implementation\", \"python_implementation\"):\n        return Variable(\"platform_python_implementation\")\n    else:\n        return Variable(env_var)\n\n\ndef process_python_str(python_str: str) -> Value:\n    value = ast.literal_eval(python_str)\n    return Value(str(value))\n\n\ndef _parse_marker_op(tokenizer: Tokenizer) -> Op:\n    \"\"\"\n    marker_op = IN | NOT IN | OP\n    \"\"\"\n    if tokenizer.check(\"IN\"):\n        tokenizer.read()\n        return Op(\"in\")\n    elif tokenizer.check(\"NOT\"):\n        tokenizer.read()\n        tokenizer.expect(\"WS\", expected=\"whitespace after 'not'\")\n        tokenizer.expect(\"IN\", expected=\"'in' after 'not'\")\n        return Op(\"not in\")\n    elif tokenizer.check(\"OP\"):\n        return Op(tokenizer.read().text)\n    else:\n        return tokenizer.raise_syntax_error(\n            \"Expected marker operator, one of <=, <, !=, ==, >=, >, ~=, ===, in, not in\"\n        )",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_parser.py",
        "start": 1,
        "end": 353,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 353,
          "column": 2,
          "position": 2258
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_parser.py",
        "start": 1,
        "end": 353,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 353,
          "column": 2,
          "position": 2258
        }
      }
    },
    {
      "format": "python",
      "lines": 85,
      "fragment": "\"\"\"PEP 656 support.\n\nThis module implements logic to detect if the currently running Python is\nlinked against musl, and what musl version is used.\n\"\"\"\n\nfrom __future__ import annotations\n\nimport functools\nimport re\nimport subprocess\nimport sys\nfrom typing import Iterator, NamedTuple, Sequence\n\nfrom ._elffile import ELFFile\n\n\nclass _MuslVersion(NamedTuple):\n    major: int\n    minor: int\n\n\ndef _parse_musl_version(output: str) -> _MuslVersion | None:\n    lines = [n for n in (n.strip() for n in output.splitlines()) if n]\n    if len(lines) < 2 or lines[0][:4] != \"musl\":\n        return None\n    m = re.match(r\"Version (\\d+)\\.(\\d+)\", lines[1])\n    if not m:\n        return None\n    return _MuslVersion(major=int(m.group(1)), minor=int(m.group(2)))\n\n\n@functools.lru_cache\ndef _get_musl_version(executable: str) -> _MuslVersion | None:\n    \"\"\"Detect currently-running musl runtime version.\n\n    This is done by checking the specified executable's dynamic linking\n    information, and invoking the loader to parse its output for a version\n    string. If the loader is musl, the output would be something like::\n\n        musl libc (x86_64)\n        Version 1.2.2\n        Dynamic Program Loader\n    \"\"\"\n    try:\n        with open(executable, \"rb\") as f:\n            ld = ELFFile(f).interpreter\n    except (OSError, TypeError, ValueError):\n        return None\n    if ld is None or \"musl\" not in ld:\n        return None\n    proc = subprocess.run([ld], stderr=subprocess.PIPE, text=True)\n    return _parse_musl_version(proc.stderr)\n\n\ndef platform_tags(archs: Sequence[str]) -> Iterator[str]:\n    \"\"\"Generate musllinux tags compatible to the current platform.\n\n    :param archs: Sequence of compatible architectures.\n        The first one shall be the closest to the actual architecture and be the part of\n        platform tag after the ``linux_`` prefix, e.g. ``x86_64``.\n        The ``linux_`` prefix is assumed as a prerequisite for the current platform to\n        be musllinux-compatible.\n\n    :returns: An iterator of compatible musllinux tags.\n    \"\"\"\n    sys_musl = _get_musl_version(sys.executable)\n    if sys_musl is None:  # Python not dynamically linked against musl.\n        return\n    for arch in archs:\n        for minor in range(sys_musl.minor, -1, -1):\n            yield f\"musllinux_{sys_musl.major}_{minor}_{arch}\"\n\n\nif __name__ == \"__main__\":  # pragma: no cover\n    import sysconfig\n\n    plat = sysconfig.get_platform()\n    assert plat.startswith(\"linux-\"), \"not linux\"\n\n    print(\"plat:\", plat)\n    print(\"musl:\", _get_musl_version(sys.executable))\n    print(\"tags:\", end=\" \")\n    for t in platform_tags(re.sub(r\"[.-]\", \"_\", plat.split(\"-\", 1)[-1])):\n        print(t, end=\"\\n      \")",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_musllinux.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 589
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_musllinux.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 589
        }
      }
    },
    {
      "format": "python",
      "lines": 262,
      "fragment": "from __future__ import annotations\n\nimport collections\nimport contextlib\nimport functools\nimport os\nimport re\nimport sys\nimport warnings\nfrom typing import Generator, Iterator, NamedTuple, Sequence\n\nfrom ._elffile import EIClass, EIData, ELFFile, EMachine\n\nEF_ARM_ABIMASK = 0xFF000000\nEF_ARM_ABI_VER5 = 0x05000000\nEF_ARM_ABI_FLOAT_HARD = 0x00000400\n\n\n# `os.PathLike` not a generic type until Python 3.9, so sticking with `str`\n# as the type for `path` until then.\n@contextlib.contextmanager\ndef _parse_elf(path: str) -> Generator[ELFFile | None, None, None]:\n    try:\n        with open(path, \"rb\") as f:\n            yield ELFFile(f)\n    except (OSError, TypeError, ValueError):\n        yield None\n\n\ndef _is_linux_armhf(executable: str) -> bool:\n    # hard-float ABI can be detected from the ELF header of the running\n    # process\n    # https://static.docs.arm.com/ihi0044/g/aaelf32.pdf\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.Arm\n            and f.flags & EF_ARM_ABIMASK == EF_ARM_ABI_VER5\n            and f.flags & EF_ARM_ABI_FLOAT_HARD == EF_ARM_ABI_FLOAT_HARD\n        )\n\n\ndef _is_linux_i686(executable: str) -> bool:\n    with _parse_elf(executable) as f:\n        return (\n            f is not None\n            and f.capacity == EIClass.C32\n            and f.encoding == EIData.Lsb\n            and f.machine == EMachine.I386\n        )\n\n\ndef _have_compatible_abi(executable: str, archs: Sequence[str]) -> bool:\n    if \"armv7l\" in archs:\n        return _is_linux_armhf(executable)\n    if \"i686\" in archs:\n        return _is_linux_i686(executable)\n    allowed_archs = {\n        \"x86_64\",\n        \"aarch64\",\n        \"ppc64\",\n        \"ppc64le\",\n        \"s390x\",\n        \"loongarch64\",\n        \"riscv64\",\n    }\n    return any(arch in allowed_archs for arch in archs)\n\n\n# If glibc ever changes its major version, we need to know what the last\n# minor version was, so we can build the complete list of all versions.\n# For now, guess what the highest minor version might be, assume it will\n# be 50 for testing. Once this actually happens, update the dictionary\n# with the actual value.\n_LAST_GLIBC_MINOR: dict[int, int] = collections.defaultdict(lambda: 50)\n\n\nclass _GLibCVersion(NamedTuple):\n    major: int\n    minor: int\n\n\ndef _glibc_version_string_confstr() -> str | None:\n    \"\"\"\n    Primary implementation of glibc_version_string using os.confstr.\n    \"\"\"\n    # os.confstr is quite a bit faster than ctypes.DLL. It's also less likely\n    # to be broken or missing. This strategy is used in the standard library\n    # platform module.\n    # https://github.com/python/cpython/blob/fcf1d003bf4f0100c/Lib/platform.py#L175-L183\n    try:\n        # Should be a string like \"glibc 2.17\".\n        version_string: str | None = os.confstr(\"CS_GNU_LIBC_VERSION\")\n        assert version_string is not None\n        _, version = version_string.rsplit()\n    except (AssertionError, AttributeError, OSError, ValueError):\n        # os.confstr() or CS_GNU_LIBC_VERSION not available (or a bad value)...\n        return None\n    return version\n\n\ndef _glibc_version_string_ctypes() -> str | None:\n    \"\"\"\n    Fallback implementation of glibc_version_string using ctypes.\n    \"\"\"\n    try:\n        import ctypes\n    except ImportError:\n        return None\n\n    # ctypes.CDLL(None) internally calls dlopen(NULL), and as the dlopen\n    # manpage says, \"If filename is NULL, then the returned handle is for the\n    # main program\". This way we can let the linker do the work to figure out\n    # which libc our process is actually using.\n    #\n    # We must also handle the special case where the executable is not a\n    # dynamically linked executable. This can occur when using musl libc,\n    # for example. In this situation, dlopen() will error, leading to an\n    # OSError. Interestingly, at least in the case of musl, there is no\n    # errno set on the OSError. The single string argument used to construct\n    # OSError comes from libc itself and is therefore not portable to\n    # hard code here. In any case, failure to call dlopen() means we\n    # can proceed, so we bail on our attempt.\n    try:\n        process_namespace = ctypes.CDLL(None)\n    except OSError:\n        return None\n\n    try:\n        gnu_get_libc_version = process_namespace.gnu_get_libc_version\n    except AttributeError:\n        # Symbol doesn't exist -> therefore, we are not linked to\n        # glibc.\n        return None\n\n    # Call gnu_get_libc_version, which returns a string like \"2.5\"\n    gnu_get_libc_version.restype = ctypes.c_char_p\n    version_str: str = gnu_get_libc_version()\n    # py2 / py3 compatibility:\n    if not isinstance(version_str, str):\n        version_str = version_str.decode(\"ascii\")\n\n    return version_str\n\n\ndef _glibc_version_string() -> str | None:\n    \"\"\"Returns glibc version string, or None if not using glibc.\"\"\"\n    return _glibc_version_string_confstr() or _glibc_version_string_ctypes()\n\n\ndef _parse_glibc_version(version_str: str) -> tuple[int, int]:\n    \"\"\"Parse glibc version.\n\n    We use a regexp instead of str.split because we want to discard any\n    random junk that might come after the minor version -- this might happen\n    in patched/forked versions of glibc (e.g. Linaro's version of glibc\n    uses version strings like \"2.20-2014.11\"). See gh-3588.\n    \"\"\"\n    m = re.match(r\"(?P<major>[0-9]+)\\.(?P<minor>[0-9]+)\", version_str)\n    if not m:\n        warnings.warn(\n            f\"Expected glibc version with 2 components major.minor, got: {version_str}\",\n            RuntimeWarning,\n            stacklevel=2,\n        )\n        return -1, -1\n    return int(m.group(\"major\")), int(m.group(\"minor\"))\n\n\n@functools.lru_cache\ndef _get_glibc_version() -> tuple[int, int]:\n    version_str = _glibc_version_string()\n    if version_str is None:\n        return (-1, -1)\n    return _parse_glibc_version(version_str)\n\n\n# From PEP 513, PEP 600\ndef _is_compatible(arch: str, version: _GLibCVersion) -> bool:\n    sys_glibc = _get_glibc_version()\n    if sys_glibc < version:\n        return False\n    # Check for presence of _manylinux module.\n    try:\n        import _manylinux\n    except ImportError:\n        return True\n    if hasattr(_manylinux, \"manylinux_compatible\"):\n        result = _manylinux.manylinux_compatible(version[0], version[1], arch)\n        if result is not None:\n            return bool(result)\n        return True\n    if version == _GLibCVersion(2, 5):\n        if hasattr(_manylinux, \"manylinux1_compatible\"):\n            return bool(_manylinux.manylinux1_compatible)\n    if version == _GLibCVersion(2, 12):\n        if hasattr(_manylinux, \"manylinux2010_compatible\"):\n            return bool(_manylinux.manylinux2010_compatible)\n    if version == _GLibCVersion(2, 17):\n        if hasattr(_manylinux, \"manylinux2014_compatible\"):\n            return bool(_manylinux.manylinux2014_compatible)\n    return True\n\n\n_LEGACY_MANYLINUX_MAP = {\n    # CentOS 7 w/ glibc 2.17 (PEP 599)\n    (2, 17): \"manylinux2014\",\n    # CentOS 6 w/ glibc 2.12 (PEP 571)\n    (2, 12): \"manylinux2010\",\n    # CentOS 5 w/ glibc 2.5 (PEP 513)\n    (2, 5): \"manylinux1\",\n}\n\n\ndef platform_tags(archs: Sequence[str]) -> Iterator[str]:\n    \"\"\"Generate manylinux tags compatible to the current platform.\n\n    :param archs: Sequence of compatible architectures.\n        The first one shall be the closest to the actual architecture and be the part of\n        platform tag after the ``linux_`` prefix, e.g. ``x86_64``.\n        The ``linux_`` prefix is assumed as a prerequisite for the current platform to\n        be manylinux-compatible.\n\n    :returns: An iterator of compatible manylinux tags.\n    \"\"\"\n    if not _have_compatible_abi(sys.executable, archs):\n        return\n    # Oldest glibc to be supported regardless of architecture is (2, 17).\n    too_old_glibc2 = _GLibCVersion(2, 16)\n    if set(archs) & {\"x86_64\", \"i686\"}:\n        # On x86/i686 also oldest glibc to be supported is (2, 5).\n        too_old_glibc2 = _GLibCVersion(2, 4)\n    current_glibc = _GLibCVersion(*_get_glibc_version())\n    glibc_max_list = [current_glibc]\n    # We can assume compatibility across glibc major versions.\n    # https://sourceware.org/bugzilla/show_bug.cgi?id=24636\n    #\n    # Build a list of maximum glibc versions so that we can\n    # output the canonical list of all glibc from current_glibc\n    # down to too_old_glibc2, including all intermediary versions.\n    for glibc_major in range(current_glibc.major - 1, 1, -1):\n        glibc_minor = _LAST_GLIBC_MINOR[glibc_major]\n        glibc_max_list.append(_GLibCVersion(glibc_major, glibc_minor))\n    for arch in archs:\n        for glibc_max in glibc_max_list:\n            if glibc_max.major == too_old_glibc2.major:\n                min_minor = too_old_glibc2.minor\n            else:\n                # For other glibc major versions oldest supported is (x, 0).\n                min_minor = -1\n            for glibc_minor in range(glibc_max.minor, min_minor, -1):\n                glibc_version = _GLibCVersion(glibc_max.major, glibc_minor)\n                tag = \"manylinux_{}_{}\".format(*glibc_version)\n                if _is_compatible(arch, glibc_version):\n                    yield f\"{tag}_{arch}\"\n                # Handle the legacy manylinux1, manylinux2010, manylinux2014 tags.\n                if glibc_version in _LEGACY_MANYLINUX_MAP:\n                    legacy_tag = _LEGACY_MANYLINUX_MAP[glibc_version]\n                    if _is_compatible(arch, glibc_version):\n                        yield f\"{legacy_tag}_{arch}\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_manylinux.py",
        "start": 1,
        "end": 262,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 262,
          "column": 22,
          "position": 1749
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_manylinux.py",
        "start": 1,
        "end": 262,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 262,
          "column": 22,
          "position": 1749
        }
      }
    },
    {
      "format": "python",
      "lines": 109,
      "fragment": "\"\"\"\nELF file parser.\n\nThis provides a class ``ELFFile`` that parses an ELF executable in a similar\ninterface to ``ZipFile``. Only the read interface is implemented.\n\nBased on: https://gist.github.com/lyssdod/f51579ae8d93c8657a5564aefc2ffbca\nELF header: https://refspecs.linuxfoundation.org/elf/gabi4+/ch4.eheader.html\n\"\"\"\n\nfrom __future__ import annotations\n\nimport enum\nimport os\nimport struct\nfrom typing import IO\n\n\nclass ELFInvalid(ValueError):\n    pass\n\n\nclass EIClass(enum.IntEnum):\n    C32 = 1\n    C64 = 2\n\n\nclass EIData(enum.IntEnum):\n    Lsb = 1\n    Msb = 2\n\n\nclass EMachine(enum.IntEnum):\n    I386 = 3\n    S390 = 22\n    Arm = 40\n    X8664 = 62\n    AArc64 = 183\n\n\nclass ELFFile:\n    \"\"\"\n    Representation of an ELF executable.\n    \"\"\"\n\n    def __init__(self, f: IO[bytes]) -> None:\n        self._f = f\n\n        try:\n            ident = self._read(\"16B\")\n        except struct.error as e:\n            raise ELFInvalid(\"unable to parse identification\") from e\n        magic = bytes(ident[:4])\n        if magic != b\"\\x7fELF\":\n            raise ELFInvalid(f\"invalid magic: {magic!r}\")\n\n        self.capacity = ident[4]  # Format for program header (bitness).\n        self.encoding = ident[5]  # Data structure encoding (endianness).\n\n        try:\n            # e_fmt: Format for program header.\n            # p_fmt: Format for section header.\n            # p_idx: Indexes to find p_type, p_offset, and p_filesz.\n            e_fmt, self._p_fmt, self._p_idx = {\n                (1, 1): (\"<HHIIIIIHHH\", \"<IIIIIIII\", (0, 1, 4)),  # 32-bit LSB.\n                (1, 2): (\">HHIIIIIHHH\", \">IIIIIIII\", (0, 1, 4)),  # 32-bit MSB.\n                (2, 1): (\"<HHIQQQIHHH\", \"<IIQQQQQQ\", (0, 2, 5)),  # 64-bit LSB.\n                (2, 2): (\">HHIQQQIHHH\", \">IIQQQQQQ\", (0, 2, 5)),  # 64-bit MSB.\n            }[(self.capacity, self.encoding)]\n        except KeyError as e:\n            raise ELFInvalid(\n                f\"unrecognized capacity ({self.capacity}) or encoding ({self.encoding})\"\n            ) from e\n\n        try:\n            (\n                _,\n                self.machine,  # Architecture type.\n                _,\n                _,\n                self._e_phoff,  # Offset of program header.\n                _,\n                self.flags,  # Processor-specific flags.\n                _,\n                self._e_phentsize,  # Size of section.\n                self._e_phnum,  # Number of sections.\n            ) = self._read(e_fmt)\n        except struct.error as e:\n            raise ELFInvalid(\"unable to parse machine and section information\") from e\n\n    def _read(self, fmt: str) -> tuple[int, ...]:\n        return struct.unpack(fmt, self._f.read(struct.calcsize(fmt)))\n\n    @property\n    def interpreter(self) -> str | None:\n        \"\"\"\n        The path recorded in the ``PT_INTERP`` section header.\n        \"\"\"\n        for index in range(self._e_phnum):\n            self._f.seek(self._e_phoff + self._e_phentsize * index)\n            try:\n                data = self._read(self._p_fmt)\n            except struct.error:\n                continue\n            if data[self._p_idx[0]] != 3:  # Not PT_INTERP.\n                continue\n            self._f.seek(data[self._p_idx[1]])\n            return os.fsdecode(self._f.read(data[self._p_idx[2]])).strip(\"\\0\")\n        return None",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/packaging/_elffile.py",
        "start": 1,
        "end": 109,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 109,
          "column": 5,
          "position": 808
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/packaging/_elffile.py",
        "start": 1,
        "end": 109,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 109,
          "column": 5,
          "position": 808
        }
      }
    },
    {
      "format": "python",
      "lines": 23,
      "fragment": "[_T], BasePage[_T], Generic[_T]):\n    \"\"\"Note: no pagination actually occurs yet, this is for forwards-compatibility.\"\"\"\n\n    data: List[_T]\n    object: str\n\n    @override\n    def _get_page_items(self) -> List[_T]:\n        data = self.data\n        if not data:\n            return []\n        return data\n\n    @override\n    def next_page_info(self) -> None:\n        \"\"\"\n        This page represents a response that isn't actually paginated at the API level\n        so there will never be a next page.\n        \"\"\"\n        return None\n\n\nclass SyncCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 47,
        "end": 69,
        "startLoc": {
          "line": 47,
          "column": 14,
          "position": 249
        },
        "endLoc": {
          "line": 69,
          "column": 15,
          "position": 365
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 25,
        "end": 47,
        "startLoc": {
          "line": 25,
          "column": 13,
          "position": 130
        },
        "endLoc": {
          "line": 47,
          "column": 10,
          "position": 246
        }
      }
    },
    {
      "format": "python",
      "lines": 34,
      "fragment": "[_T], BasePage[_T], Generic[_T]):\n    data: List[_T]\n    has_more: Optional[bool] = None\n\n    @override\n    def _get_page_items(self) -> List[_T]:\n        data = self.data\n        if not data:\n            return []\n        return data\n\n    @override\n    def has_next_page(self) -> bool:\n        has_more = self.has_more\n        if has_more is not None and has_more is False:\n            return False\n\n        return super().has_next_page()\n\n    @override\n    def next_page_info(self) -> Optional[PageInfo]:\n        data = self.data\n        if not data:\n            return None\n\n        item = cast(Any, data[-1])\n        if not isinstance(item, CursorPageItem) or item.id is None:\n            # TODO emit warning log\n            return None\n\n        return PageInfo(params={\"after\": item.id})\n\n\nclass SyncConversationCursorPage",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 102,
        "end": 135,
        "startLoc": {
          "line": 102,
          "column": 14,
          "position": 639
        },
        "endLoc": {
          "line": 135,
          "column": 27,
          "position": 907
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 69,
        "end": 102,
        "startLoc": {
          "line": 69,
          "column": 13,
          "position": 368
        },
        "endLoc": {
          "line": 102,
          "column": 16,
          "position": 636
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": "] = None\n\n    @override\n    def _get_page_items(self) -> List[_T]:\n        data = self.data\n        if not data:\n            return []\n        return data\n\n    @override\n    def has_next_page(self) -> bool:\n        has_more = self.has_more\n        if has_more is not None and has_more is False:\n            return False\n\n        return super().has_next_page()\n\n    @override\n    def next_page_info(self) -> Optional[PageInfo]:\n        last_id",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 138,
        "end": 157,
        "startLoc": {
          "line": 138,
          "column": 4,
          "position": 957
        },
        "endLoc": {
          "line": 157,
          "column": 8,
          "position": 1098
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 71,
        "end": 90,
        "startLoc": {
          "line": 71,
          "column": 5,
          "position": 402
        },
        "endLoc": {
          "line": 90,
          "column": 5,
          "position": 543
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "[_T], BasePage[_T], Generic[_T]):\n    data: List[_T]\n    has_more: Optional[bool] = None\n    last_id: Optional[str] = None\n\n    @override\n    def _get_page_items(self) -> List[_T]:\n        data = self.data\n        if not data:\n            return []\n        return data\n\n    @override\n    def has_next_page(self) -> bool:\n        has_more = self.has_more\n        if has_more is not None and has_more is False:\n            return False\n\n        return super().has_next_page()\n\n    @override\n    def next_page_info(self) -> Optional[PageInfo]:\n        last_id = self.last_id\n        if not last_id:\n            return None\n\n        return PageInfo(params={\"after\": last_id})",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 164,
        "end": 190,
        "startLoc": {
          "line": 164,
          "column": 14,
          "position": 1142
        },
        "endLoc": {
          "line": 190,
          "column": 2,
          "position": 1365
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/pagination.py",
        "start": 135,
        "end": 161,
        "startLoc": {
          "line": 135,
          "column": 13,
          "position": 910
        },
        "endLoc": {
          "line": 161,
          "column": 2,
          "position": 1133
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "is_mapping(data) and data.get(\"error\"):\n                    message = None\n                    error = data.get(\"error\")\n                    if is_mapping(error):\n                        message = error.get(\"message\")\n                    if not message or not isinstance(message, str):\n                        message = \"An error occurred during streaming\"\n\n                    raise APIError(\n                        message=message,\n                        request=self.response.request,\n                        body=data[\"error\"],\n                    )\n\n                yield process_data(data=data",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_streaming.py",
        "start": 83,
        "end": 97,
        "startLoc": {
          "line": 83,
          "column": 2,
          "position": 675
        },
        "endLoc": {
          "line": 97,
          "column": 5,
          "position": 800
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_streaming.py",
        "start": 66,
        "end": 80,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 506
        },
        "endLoc": {
          "line": 80,
          "column": 2,
          "position": 631
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": "for sse in iterator:\n            if sse.data.startswith(\"[DONE]\"):\n                break\n\n            # we have to special case the Assistants `thread.` events since we won't have an \"event\" key in the data\n            if sse.event and sse.event.startswith(\"thread.\"):\n                data = sse.json()\n\n                if sse.event == \"error\" and is_mapping(data) and data.get(\"error\"):\n                    message = None\n                    error = data.get(\"error\")\n                    if is_mapping(error):\n                        message = error.get(\"message\")\n                    if not message or not isinstance(message, str):\n                        message = \"An error occurred during streaming\"\n\n                    raise APIError(\n                        message=message,\n                        request=self.response.request,\n                        body=data[\"error\"],\n                    )\n\n                yield process_data(data={\"data\": data, \"event\": sse.event}, cast_to=cast_to, response=response)\n            else:\n                data = sse.json()\n                if is_mapping(data) and data.get(\"error\"):\n                    message = None\n                    error = data.get(\"error\")\n                    if is_mapping(error):\n                        message = error.get(\"message\")\n                    if not message or not isinstance(message, str):\n                        message = \"An error occurred during streaming\"\n\n                    raise APIError(\n                        message=message,\n                        request=self.response.request,\n                        body=data[\"error\"],\n                    )\n\n                yield process_data(data=data, cast_to=cast_to, response=response)\n\n        # Ensure the entire stream is consumed\n        async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_streaming.py",
        "start": 160,
        "end": 202,
        "startLoc": {
          "line": 160,
          "column": 2,
          "position": 1270
        },
        "endLoc": {
          "line": 202,
          "column": 6,
          "position": 1655
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_streaming.py",
        "start": 58,
        "end": 100,
        "startLoc": {
          "line": 58,
          "column": 9,
          "position": 433
        },
        "endLoc": {
          "line": 100,
          "column": 4,
          "position": 818
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "async def __aenter__(self) -> Self:\n        return self\n\n    async def __aexit__(\n        self,\n        exc_type: type[BaseException] | None,\n        exc: BaseException | None,\n        exc_tb: TracebackType | None,\n    ) -> None:\n        await self.close()\n\n    async def close(self) -> None:\n        \"\"\"\n        Close the response and release the connection.\n\n        Automatically called if the response body is read to completion.\n        \"\"\"\n        await self.response",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_streaming.py",
        "start": 205,
        "end": 222,
        "startLoc": {
          "line": 205,
          "column": 5,
          "position": 1673
        },
        "endLoc": {
          "line": 222,
          "column": 9,
          "position": 1785
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/lib/streaming/responses/_responses.py",
        "start": 161,
        "end": 178,
        "startLoc": {
          "line": 161,
          "column": 5,
          "position": 1370
        },
        "endLoc": {
          "line": 178,
          "column": 10,
          "position": 1482
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "self.read()\n\n        parsed = self._parse(to=to)\n        if is_given(self._options.post_parser):\n            parsed = self._options.post_parser(parsed)\n\n        if isinstance(parsed, BaseModel):\n            add_request_id(parsed, self.request_id)\n\n        self._parsed_by_type[cache_key] = parsed\n        return cast(R, parsed)\n\n    async",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 428,
        "end": 440,
        "startLoc": {
          "line": 428,
          "column": 2,
          "position": 2774
        },
        "endLoc": {
          "line": 440,
          "column": 6,
          "position": 2872
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 321,
        "end": 333,
        "startLoc": {
          "line": 321,
          "column": 13,
          "position": 2135
        },
        "endLoc": {
          "line": 333,
          "column": 4,
          "position": 2233
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": ",\n            include: IncEx | None = None,\n            exclude: IncEx | None = None,\n            by_alias: bool | None = None,\n            exclude_unset: bool = False,\n            exclude_defaults: bool = False,\n            exclude_none: bool = False,\n            round_trip: bool = False,\n            warnings: bool | Literal[\"none\", \"warn\", \"error\"] = True,\n            context: dict[str, Any] | None = None,\n            fallback",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_models.py",
        "start": 341,
        "end": 351,
        "startLoc": {
          "line": 341,
          "column": 5,
          "position": 2004
        },
        "endLoc": {
          "line": 351,
          "column": 9,
          "position": 2141
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_models.py",
        "start": 281,
        "end": 291,
        "startLoc": {
          "line": 281,
          "column": 9,
          "position": 1572
        },
        "endLoc": {
          "line": 291,
          "column": 17,
          "position": 1709
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": ": bool\n    _stream_cls: type[Stream[Any]] | type[AsyncStream[Any]] | None\n    _options: FinalRequestOptions\n\n    http_response: httpx.Response\n\n    retries_taken: int\n    \"\"\"The number of retries made. If no retries happened this will be `0`\"\"\"\n\n    def __init__(\n        self,\n        *,\n        raw: httpx.Response,\n        cast_to: type[R],\n        client: BaseClient[Any, Any],\n        stream: bool,\n        stream_cls: type[Stream[Any]] | type[AsyncStream[Any]] | None,\n        options: FinalRequestOptions,\n        retries_taken: int = 0,\n    ) -> None:\n        self._cast_to = cast_to\n        self._client = client\n        self._parsed_by_type = {}\n        self._stream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 61,
        "end": 84,
        "startLoc": {
          "line": 61,
          "column": 8,
          "position": 318
        },
        "endLoc": {
          "line": 84,
          "column": 8,
          "position": 512
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 52,
        "end": 75,
        "startLoc": {
          "line": 52,
          "column": 15,
          "position": 356
        },
        "endLoc": {
          "line": 75,
          "column": 15,
          "position": 550
        }
      }
    },
    {
      "format": "python",
      "lines": 42,
      "fragment": "@property\n    def request_id(self) -> str | None:\n        return self.http_response.headers.get(\"x-request-id\")  # type: ignore[no-any-return]\n\n    @overload\n    def parse(self, *, to: type[_T]) -> _T: ...\n\n    @overload\n    def parse(self) -> R: ...\n\n    def parse(self, *, to: type[_T] | None = None) -> R | _T:\n        \"\"\"Returns the rich python representation of this response's data.\n\n        NOTE: For the async client: this will become a coroutine in the next major version.\n\n        For lower-level control, see `.read()`, `.json()`, `.iter_bytes()`.\n\n        You can customise the type that the response is parsed into through\n        the `to` argument, e.g.\n\n        ```py\n        from openai import BaseModel\n\n\n        class MyModel(BaseModel):\n            foo: str\n\n\n        obj = response.parse(to=MyModel)\n        print(obj.foo)\n        ```\n\n        We support parsing:\n          - `BaseModel`\n          - `dict`\n          - `list`\n          - `Union`\n          - `str`\n          - `int`\n          - `float`\n          - `httpx.Response`\n        \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 90,
        "end": 131,
        "startLoc": {
          "line": 90,
          "column": 5,
          "position": 556
        },
        "endLoc": {
          "line": 131,
          "column": 12,
          "position": 689
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 275,
        "end": 314,
        "startLoc": {
          "line": 275,
          "column": 5,
          "position": 1932
        },
        "endLoc": {
          "line": 314,
          "column": 12,
          "position": 2065
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "parsed = self._parse(to=to)\n        if is_given(self._options.post_parser):\n            parsed = self._options.post_parser(parsed)\n\n        if isinstance(parsed, BaseModel):\n            add_request_id(parsed, self.request_id)\n\n        self._parsed_by_type[cache_key] = parsed\n        return cast(R, parsed)\n\n    @",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 137,
        "end": 147,
        "startLoc": {
          "line": 137,
          "column": 9,
          "position": 749
        },
        "endLoc": {
          "line": 147,
          "column": 2,
          "position": 839
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 323,
        "end": 333,
        "startLoc": {
          "line": 323,
          "column": 9,
          "position": 2143
        },
        "endLoc": {
          "line": 333,
          "column": 4,
          "position": 2233
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "def _parse(self, *, to: type[_T] | None = None) -> R | _T:\n        cast_to = to if to is not None else self._cast_to\n\n        # unwrap `TypeAlias('Name', T)` -> `T`\n        if is_type_alias_type(cast_to):\n            cast_to = cast_to.__value__  # type: ignore[unreachable]\n\n        # unwrap `Annotated[T, ...]` -> `T`\n        if cast_to and is_annotated_type(cast_to):\n            cast_to = extract_type_arg(cast_to, 0)\n\n        origin = get_origin(cast_to) or cast_to\n\n        if self._stream",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 197,
        "end": 210,
        "startLoc": {
          "line": 197,
          "column": 5,
          "position": 1136
        },
        "endLoc": {
          "line": 210,
          "column": 8,
          "position": 1271
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 128,
        "end": 141,
        "startLoc": {
          "line": 128,
          "column": 5,
          "position": 868
        },
        "endLoc": {
          "line": 141,
          "column": 15,
          "position": 1003
        }
      }
    },
    {
      "format": "python",
      "lines": 48,
      "fragment": ":\n            if to:\n                if not is_stream_class_type(to):\n                    raise TypeError(f\"Expected custom parse type to be a subclass of {Stream} or {AsyncStream}\")\n\n                return cast(\n                    _T,\n                    to(\n                        cast_to=extract_stream_chunk_type(\n                            to,\n                            failure_message=\"Expected custom stream type to be passed with a type argument, e.g. Stream[ChunkType]\",\n                        ),\n                        response=self.http_response,\n                        client=cast(Any, self._client),\n                    ),\n                )\n\n            if self._stream_cls:\n                return cast(\n                    R,\n                    self._stream_cls(\n                        cast_to=extract_stream_chunk_type(self._stream_cls),\n                        response=self.http_response,\n                        client=cast(Any, self._client),\n                    ),\n                )\n\n            stream_cls = cast(\"type[Stream[Any]] | type[AsyncStream[Any]] | None\", self._client._default_stream_cls)\n            if stream_cls is None:\n                raise MissingStreamClassError()\n\n            return cast(\n                R,\n                stream_cls(\n                    cast_to=cast_to,\n                    response=self.http_response,\n                    client=cast(Any, self._client),\n                ),\n            )\n\n        if cast_to is NoneType:\n            return cast(R, None)\n\n        response = self.http_response\n        if cast_to == str:\n            return cast(R, response.text)\n\n        if cast_to == int",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 210,
        "end": 257,
        "startLoc": {
          "line": 210,
          "column": 8,
          "position": 1272
        },
        "endLoc": {
          "line": 257,
          "column": 4,
          "position": 1577
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 141,
        "end": 188,
        "startLoc": {
          "line": 141,
          "column": 15,
          "position": 1004
        },
        "endLoc": {
          "line": 188,
          "column": 6,
          "position": 1309
        }
      }
    },
    {
      "format": "python",
      "lines": 67,
      "fragment": ") and issubclass(origin, httpx.Response):\n            # Because of the invariance of our ResponseT TypeVar, users can subclass httpx.Response\n            # and pass that class to our request functions. We cannot change the variance to be either\n            # covariant or contravariant as that makes our usage of ResponseT illegal. We could construct\n            # the response class ourselves but that is something that should be supported directly in httpx\n            # as it would be easy to incorrectly construct the Response object due to the multitude of arguments.\n            if cast_to != httpx.Response:\n                raise ValueError(f\"Subclasses of httpx.Response cannot be passed to `cast_to`\")\n            return cast(R, response)\n\n        if (\n            inspect.isclass(\n                origin  # pyright: ignore[reportUnknownArgumentType]\n            )\n            and not issubclass(origin, BaseModel)\n            and issubclass(origin, pydantic.BaseModel)\n        ):\n            raise TypeError(\"Pydantic models must subclass our base model type, e.g. `from openai import BaseModel`\")\n\n        if (\n            cast_to is not object\n            and not origin is list\n            and not origin is dict\n            and not origin is Union\n            and not issubclass(origin, BaseModel)\n        ):\n            raise RuntimeError(\n                f\"Unsupported type, expected {cast_to} to be a subclass of {BaseModel}, {dict}, {list}, {Union}, {NoneType}, {str} or {httpx.Response}.\"\n            )\n\n        # split is required to handle cases where additional information is included\n        # in the response, e.g. application/json; charset=utf-8\n        content_type, *_ = response.headers.get(\"content-type\", \"*\").split(\";\")\n        if not content_type.endswith(\"json\"):\n            if is_basemodel(cast_to):\n                try:\n                    data = response.json()\n                except Exception as exc:\n                    log.debug(\"Could not read JSON from response data due to %s - %s\", type(exc), exc)\n                else:\n                    return self._client._process_response_data(\n                        data=data,\n                        cast_to=cast_to,  # type: ignore\n                        response=response,\n                    )\n\n            if self._client._strict_response_validation:\n                raise APIResponseValidationError(\n                    response=response,\n                    message=f\"Expected Content-Type response header to be `application/json` but received `{content_type}` instead.\",\n                    body=response.text,\n                )\n\n            # If the API responds with content that isn't JSON then we just return\n            # the (decoded) text without performing any parsing so that you can still\n            # handle the response however you need to.\n            return response.text  # type: ignore\n\n        data = response.json()\n\n        return self._client._process_response_data(\n            data=data,\n            cast_to=cast_to,  # type: ignore\n            response=response,\n        )\n\n    @override",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 274,
        "end": 340,
        "startLoc": {
          "line": 274,
          "column": 9,
          "position": 1727
        },
        "endLoc": {
          "line": 340,
          "column": 10,
          "position": 2167
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_response.py",
        "start": 207,
        "end": 274,
        "startLoc": {
          "line": 207,
          "column": 7,
          "position": 1480
        },
        "endLoc": {
          "line": 274,
          "column": 6,
          "position": 1920
        }
      }
    },
    {
      "format": "python",
      "lines": 7,
      "fragment": "def wrapped(*args: P.args, **kwargs: P.kwargs) -> LegacyAPIResponse[R]:\n        extra_headers: dict[str, str] = {**(cast(Any, kwargs.get(\"extra_headers\")) or {})}\n        extra_headers[RAW_RESPONSE_HEADER] = \"true\"\n\n        kwargs[\"extra_headers\"] = extra_headers\n\n        return cast(LegacyAPIResponse[R], await",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 375,
        "end": 381,
        "startLoc": {
          "line": 375,
          "column": 2,
          "position": 2446
        },
        "endLoc": {
          "line": 381,
          "column": 6,
          "position": 2547
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_legacy_response.py",
        "start": 358,
        "end": 364,
        "startLoc": {
          "line": 358,
          "column": 5,
          "position": 2274
        },
        "endLoc": {
          "line": 364,
          "column": 5,
          "position": 2375
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\n    \"__version__\",\n    \"__version_tuple__\",\n    \"version\",\n    \"version_tuple\",\n    \"__commit_id__\",\n    \"commit_id\",\n]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n    COMMIT_ID = Union[str, None]\nelse:\n    VERSION_TUPLE = object\n    COMMIT_ID = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\ncommit_id: COMMIT_ID\n__commit_id__: COMMIT_ID\n\n__version__ = version = '2.3.0'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/iniconfig/_version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 57,
      "fragment": "\"\"\"\nGiven a list of integers, made up of (hopefully) a small number of long runs\nof consecutive integers, compute a representation of the form\n((start1, end1), (start2, end2) ...). Then answer the question \"was x present\nin the original list?\" in time O(log(# runs)).\n\"\"\"\n\nimport bisect\nfrom typing import List, Tuple\n\n\ndef intranges_from_list(list_: List[int]) -> Tuple[int, ...]:\n    \"\"\"Represent a list of integers as a sequence of ranges:\n    ((start_0, end_0), (start_1, end_1), ...), such that the original\n    integers are exactly those x such that start_i <= x < end_i for some i.\n\n    Ranges are encoded as single integers (start << 32 | end), not as tuples.\n    \"\"\"\n\n    sorted_list = sorted(list_)\n    ranges = []\n    last_write = -1\n    for i in range(len(sorted_list)):\n        if i + 1 < len(sorted_list):\n            if sorted_list[i] == sorted_list[i + 1] - 1:\n                continue\n        current_range = sorted_list[last_write + 1 : i + 1]\n        ranges.append(_encode_range(current_range[0], current_range[-1] + 1))\n        last_write = i\n\n    return tuple(ranges)\n\n\ndef _encode_range(start: int, end: int) -> int:\n    return (start << 32) | end\n\n\ndef _decode_range(r: int) -> Tuple[int, int]:\n    return (r >> 32), (r & ((1 << 32) - 1))\n\n\ndef intranges_contain(int_: int, ranges: Tuple[int, ...]) -> bool:\n    \"\"\"Determine if `int_` falls into one of the ranges in `ranges`.\"\"\"\n    tuple_ = _encode_range(int_, 0)\n    pos = bisect.bisect_left(ranges, tuple_)\n    # we could be immediately ahead of a tuple (start, end)\n    # with start < int_ <= end\n    if pos > 0:\n        left, right = _decode_range(ranges[pos - 1])\n        if left <= int_ < right:\n            return True\n    # or we could be immediately behind a tuple (int_, end)\n    if pos < len(ranges):\n        left, _ = _decode_range(ranges[pos])\n        if left == int_:\n            return True\n    return False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/intranges.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 6,
          "position": 328
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/intranges.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 6,
          "position": 328
        }
      }
    },
    {
      "format": "python",
      "lines": 311,
      "fragment": "import bisect\nimport re\nimport unicodedata\nfrom typing import Optional, Union\n\nfrom . import idnadata\nfrom .intranges import intranges_contain\n\n_virama_combining_class = 9\n_alabel_prefix = b\"xn--\"\n_unicode_dots_re = re.compile(\"[\\u002e\\u3002\\uff0e\\uff61]\")\n\n\nclass IDNAError(UnicodeError):\n    \"\"\"Base exception for all IDNA-encoding related problems\"\"\"\n\n    pass\n\n\nclass IDNABidiError(IDNAError):\n    \"\"\"Exception when bidirectional requirements are not satisfied\"\"\"\n\n    pass\n\n\nclass InvalidCodepoint(IDNAError):\n    \"\"\"Exception when a disallowed or unallocated codepoint is used\"\"\"\n\n    pass\n\n\nclass InvalidCodepointContext(IDNAError):\n    \"\"\"Exception when the codepoint is not valid in the context it is used\"\"\"\n\n    pass\n\n\ndef _combining_class(cp: int) -> int:\n    v = unicodedata.combining(chr(cp))\n    if v == 0:\n        if not unicodedata.name(chr(cp)):\n            raise ValueError(\"Unknown character in unicodedata\")\n    return v\n\n\ndef _is_script(cp: str, script: str) -> bool:\n    return intranges_contain(ord(cp), idnadata.scripts[script])\n\n\ndef _punycode(s: str) -> bytes:\n    return s.encode(\"punycode\")\n\n\ndef _unot(s: int) -> str:\n    return \"U+{:04X}\".format(s)\n\n\ndef valid_label_length(label: Union[bytes, str]) -> bool:\n    if len(label) > 63:\n        return False\n    return True\n\n\ndef valid_string_length(label: Union[bytes, str], trailing_dot: bool) -> bool:\n    if len(label) > (254 if trailing_dot else 253):\n        return False\n    return True\n\n\ndef check_bidi(label: str, check_ltr: bool = False) -> bool:\n    # Bidi rules should only be applied if string contains RTL characters\n    bidi_label = False\n    for idx, cp in enumerate(label, 1):\n        direction = unicodedata.bidirectional(cp)\n        if direction == \"\":\n            # String likely comes from a newer version of Unicode\n            raise IDNABidiError(\"Unknown directionality in label {} at position {}\".format(repr(label), idx))\n        if direction in [\"R\", \"AL\", \"AN\"]:\n            bidi_label = True\n    if not bidi_label and not check_ltr:\n        return True\n\n    # Bidi rule 1\n    direction = unicodedata.bidirectional(label[0])\n    if direction in [\"R\", \"AL\"]:\n        rtl = True\n    elif direction == \"L\":\n        rtl = False\n    else:\n        raise IDNABidiError(\"First codepoint in label {} must be directionality L, R or AL\".format(repr(label)))\n\n    valid_ending = False\n    number_type: Optional[str] = None\n    for idx, cp in enumerate(label, 1):\n        direction = unicodedata.bidirectional(cp)\n\n        if rtl:\n            # Bidi rule 2\n            if direction not in [\n                \"R\",\n                \"AL\",\n                \"AN\",\n                \"EN\",\n                \"ES\",\n                \"CS\",\n                \"ET\",\n                \"ON\",\n                \"BN\",\n                \"NSM\",\n            ]:\n                raise IDNABidiError(\"Invalid direction for codepoint at position {} in a right-to-left label\".format(idx))\n            # Bidi rule 3\n            if direction in [\"R\", \"AL\", \"EN\", \"AN\"]:\n                valid_ending = True\n            elif direction != \"NSM\":\n                valid_ending = False\n            # Bidi rule 4\n            if direction in [\"AN\", \"EN\"]:\n                if not number_type:\n                    number_type = direction\n                else:\n                    if number_type != direction:\n                        raise IDNABidiError(\"Can not mix numeral types in a right-to-left label\")\n        else:\n            # Bidi rule 5\n            if direction not in [\"L\", \"EN\", \"ES\", \"CS\", \"ET\", \"ON\", \"BN\", \"NSM\"]:\n                raise IDNABidiError(\"Invalid direction for codepoint at position {} in a left-to-right label\".format(idx))\n            # Bidi rule 6\n            if direction in [\"L\", \"EN\"]:\n                valid_ending = True\n            elif direction != \"NSM\":\n                valid_ending = False\n\n    if not valid_ending:\n        raise IDNABidiError(\"Label ends with illegal codepoint directionality\")\n\n    return True\n\n\ndef check_initial_combiner(label: str) -> bool:\n    if unicodedata.category(label[0])[0] == \"M\":\n        raise IDNAError(\"Label begins with an illegal combining character\")\n    return True\n\n\ndef check_hyphen_ok(label: str) -> bool:\n    if label[2:4] == \"--\":\n        raise IDNAError(\"Label has disallowed hyphens in 3rd and 4th position\")\n    if label[0] == \"-\" or label[-1] == \"-\":\n        raise IDNAError(\"Label must not start or end with a hyphen\")\n    return True\n\n\ndef check_nfc(label: str) -> None:\n    if unicodedata.normalize(\"NFC\", label) != label:\n        raise IDNAError(\"Label must be in Normalization Form C\")\n\n\ndef valid_contextj(label: str, pos: int) -> bool:\n    cp_value = ord(label[pos])\n\n    if cp_value == 0x200C:\n        if pos > 0:\n            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n                return True\n\n        ok = False\n        for i in range(pos - 1, -1, -1):\n            joining_type = idnadata.joining_types.get(ord(label[i]))\n            if joining_type == ord(\"T\"):\n                continue\n            elif joining_type in [ord(\"L\"), ord(\"D\")]:\n                ok = True\n                break\n            else:\n                break\n\n        if not ok:\n            return False\n\n        ok = False\n        for i in range(pos + 1, len(label)):\n            joining_type = idnadata.joining_types.get(ord(label[i]))\n            if joining_type == ord(\"T\"):\n                continue\n            elif joining_type in [ord(\"R\"), ord(\"D\")]:\n                ok = True\n                break\n            else:\n                break\n        return ok\n\n    if cp_value == 0x200D:\n        if pos > 0:\n            if _combining_class(ord(label[pos - 1])) == _virama_combining_class:\n                return True\n        return False\n\n    else:\n        return False\n\n\ndef valid_contexto(label: str, pos: int, exception: bool = False) -> bool:\n    cp_value = ord(label[pos])\n\n    if cp_value == 0x00B7:\n        if 0 < pos < len(label) - 1:\n            if ord(label[pos - 1]) == 0x006C and ord(label[pos + 1]) == 0x006C:\n                return True\n        return False\n\n    elif cp_value == 0x0375:\n        if pos < len(label) - 1 and len(label) > 1:\n            return _is_script(label[pos + 1], \"Greek\")\n        return False\n\n    elif cp_value == 0x05F3 or cp_value == 0x05F4:\n        if pos > 0:\n            return _is_script(label[pos - 1], \"Hebrew\")\n        return False\n\n    elif cp_value == 0x30FB:\n        for cp in label:\n            if cp == \"\\u30fb\":\n                continue\n            if _is_script(cp, \"Hiragana\") or _is_script(cp, \"Katakana\") or _is_script(cp, \"Han\"):\n                return True\n        return False\n\n    elif 0x660 <= cp_value <= 0x669:\n        for cp in label:\n            if 0x6F0 <= ord(cp) <= 0x06F9:\n                return False\n        return True\n\n    elif 0x6F0 <= cp_value <= 0x6F9:\n        for cp in label:\n            if 0x660 <= ord(cp) <= 0x0669:\n                return False\n        return True\n\n    return False\n\n\ndef check_label(label: Union[str, bytes, bytearray]) -> None:\n    if isinstance(label, (bytes, bytearray)):\n        label = label.decode(\"utf-8\")\n    if len(label) == 0:\n        raise IDNAError(\"Empty Label\")\n\n    check_nfc(label)\n    check_hyphen_ok(label)\n    check_initial_combiner(label)\n\n    for pos, cp in enumerate(label):\n        cp_value = ord(cp)\n        if intranges_contain(cp_value, idnadata.codepoint_classes[\"PVALID\"]):\n            continue\n        elif intranges_contain(cp_value, idnadata.codepoint_classes[\"CONTEXTJ\"]):\n            try:\n                if not valid_contextj(label, pos):\n                    raise InvalidCodepointContext(\n                        \"Joiner {} not allowed at position {} in {}\".format(_unot(cp_value), pos + 1, repr(label))\n                    )\n            except ValueError:\n                raise IDNAError(\n                    \"Unknown codepoint adjacent to joiner {} at position {} in {}\".format(\n                        _unot(cp_value), pos + 1, repr(label)\n                    )\n                )\n        elif intranges_contain(cp_value, idnadata.codepoint_classes[\"CONTEXTO\"]):\n            if not valid_contexto(label, pos):\n                raise InvalidCodepointContext(\n                    \"Codepoint {} not allowed at position {} in {}\".format(_unot(cp_value), pos + 1, repr(label))\n                )\n        else:\n            raise InvalidCodepoint(\n                \"Codepoint {} at position {} of {} not allowed\".format(_unot(cp_value), pos + 1, repr(label))\n            )\n\n    check_bidi(label)\n\n\ndef alabel(label: str) -> bytes:\n    try:\n        label_bytes = label.encode(\"ascii\")\n        ulabel(label_bytes)\n        if not valid_label_length(label_bytes):\n            raise IDNAError(\"Label too long\")\n        return label_bytes\n    except UnicodeEncodeError:\n        pass\n\n    check_label(label)\n    label_bytes = _alabel_prefix + _punycode(label)\n\n    if not valid_label_length(label_bytes):\n        raise IDNAError(\"Label too long\")\n\n    return label_bytes\n\n\ndef ulabel(label: Union[str, bytes, bytearray]) -> str:\n    if not isinstance(label, (bytes, bytearray)):\n        try:\n            label_bytes = label.encode(\"ascii\")\n        except UnicodeEncodeError:\n            check_label(label)\n            return label\n    else:\n        label_bytes = bytes",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/core.py",
        "start": 1,
        "end": 311,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 311,
          "column": 6,
          "position": 2544
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/core.py",
        "start": 1,
        "end": 311,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 311,
          "column": 6,
          "position": 2544
        }
      }
    },
    {
      "format": "python",
      "lines": 125,
      "fragment": "label_bytes = label_bytes.lower()\n    if label_bytes.startswith(_alabel_prefix):\n        label_bytes = label_bytes[len(_alabel_prefix) :]\n        if not label_bytes:\n            raise IDNAError(\"Malformed A-label, no Punycode eligible content found\")\n        if label_bytes.decode(\"ascii\")[-1] == \"-\":\n            raise IDNAError(\"A-label must not end with a hyphen\")\n    else:\n        check_label(label_bytes)\n        return label_bytes.decode(\"ascii\")\n\n    try:\n        label = label_bytes.decode(\"punycode\")\n    except UnicodeError:\n        raise IDNAError(\"Invalid A-label\")\n    check_label(label)\n    return label\n\n\ndef uts46_remap(domain: str, std3_rules: bool = True, transitional: bool = False) -> str:\n    \"\"\"Re-map the characters in the string according to UTS46 processing.\"\"\"\n    from .uts46data import uts46data\n\n    output = \"\"\n\n    for pos, char in enumerate(domain):\n        code_point = ord(char)\n        try:\n            uts46row = uts46data[code_point if code_point < 256 else bisect.bisect_left(uts46data, (code_point, \"Z\")) - 1]\n            status = uts46row[1]\n            replacement: Optional[str] = None\n            if len(uts46row) == 3:\n                replacement = uts46row[2]\n            if (\n                status == \"V\"\n                or (status == \"D\" and not transitional)\n                or (status == \"3\" and not std3_rules and replacement is None)\n            ):\n                output += char\n            elif replacement is not None and (\n                status == \"M\" or (status == \"3\" and not std3_rules) or (status == \"D\" and transitional)\n            ):\n                output += replacement\n            elif status != \"I\":\n                raise IndexError()\n        except IndexError:\n            raise InvalidCodepoint(\n                \"Codepoint {} not allowed at position {} in {}\".format(_unot(code_point), pos + 1, repr(domain))\n            )\n\n    return unicodedata.normalize(\"NFC\", output)\n\n\ndef encode(\n    s: Union[str, bytes, bytearray],\n    strict: bool = False,\n    uts46: bool = False,\n    std3_rules: bool = False,\n    transitional: bool = False,\n) -> bytes:\n    if not isinstance(s, str):\n        try:\n            s = str(s, \"ascii\")\n        except UnicodeDecodeError:\n            raise IDNAError(\"should pass a unicode string to the function rather than a byte string.\")\n    if uts46:\n        s = uts46_remap(s, std3_rules, transitional)\n    trailing_dot = False\n    result = []\n    if strict:\n        labels = s.split(\".\")\n    else:\n        labels = _unicode_dots_re.split(s)\n    if not labels or labels == [\"\"]:\n        raise IDNAError(\"Empty domain\")\n    if labels[-1] == \"\":\n        del labels[-1]\n        trailing_dot = True\n    for label in labels:\n        s = alabel(label)\n        if s:\n            result.append(s)\n        else:\n            raise IDNAError(\"Empty label\")\n    if trailing_dot:\n        result.append(b\"\")\n    s = b\".\".join(result)\n    if not valid_string_length(s, trailing_dot):\n        raise IDNAError(\"Domain too long\")\n    return s\n\n\ndef decode(\n    s: Union[str, bytes, bytearray],\n    strict: bool = False,\n    uts46: bool = False,\n    std3_rules: bool = False,\n) -> str:\n    try:\n        if not isinstance(s, str):\n            s = str(s, \"ascii\")\n    except UnicodeDecodeError:\n        raise IDNAError(\"Invalid ASCII in A-label\")\n    if uts46:\n        s = uts46_remap(s, std3_rules, False)\n    trailing_dot = False\n    result = []\n    if not strict:\n        labels = _unicode_dots_re.split(s)\n    else:\n        labels = s.split(\".\")\n    if not labels or labels == [\"\"]:\n        raise IDNAError(\"Empty domain\")\n    if not labels[-1]:\n        del labels[-1]\n        trailing_dot = True\n    for label in labels:\n        s = ulabel(label)\n        if s:\n            result.append(s)\n        else:\n            raise IDNAError(\"Empty label\")\n    if trailing_dot:\n        result.append(\"\")\n    return \".\".join(result)",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/core.py",
        "start": 313,
        "end": 437,
        "startLoc": {
          "line": 313,
          "column": 5,
          "position": 2551
        },
        "endLoc": {
          "line": 437,
          "column": 2,
          "position": 3717
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/core.py",
        "start": 313,
        "end": 437,
        "startLoc": {
          "line": 313,
          "column": 5,
          "position": 2548
        },
        "endLoc": {
          "line": 437,
          "column": 2,
          "position": 3714
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "from typing import Any, Union\n\nfrom .core import decode, encode\n\n\ndef ToASCII(label: str) -> bytes:\n    return encode(label)\n\n\ndef ToUnicode(label: Union[bytes, bytearray]) -> str:\n    return decode(label)\n\n\ndef nameprep(s: Any) -> None:\n    raise NotImplementedError(\"IDNA 2008 does not utilise nameprep protocol\")",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/compat.py",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 106
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/compat.py",
        "start": 1,
        "end": 15,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 15,
          "column": 2,
          "position": 106
        }
      }
    },
    {
      "format": "python",
      "lines": 114,
      "fragment": "import codecs\nimport re\nfrom typing import Any, Optional, Tuple\n\nfrom .core import IDNAError, alabel, decode, encode, ulabel\n\n_unicode_dots_re = re.compile(\"[\\u002e\\u3002\\uff0e\\uff61]\")\n\n\nclass Codec(codecs.Codec):\n    def encode(self, data: str, errors: str = \"strict\") -> Tuple[bytes, int]:\n        if errors != \"strict\":\n            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))\n\n        if not data:\n            return b\"\", 0\n\n        return encode(data), len(data)\n\n    def decode(self, data: bytes, errors: str = \"strict\") -> Tuple[str, int]:\n        if errors != \"strict\":\n            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))\n\n        if not data:\n            return \"\", 0\n\n        return decode(data), len(data)\n\n\nclass IncrementalEncoder(codecs.BufferedIncrementalEncoder):\n    def _buffer_encode(self, data: str, errors: str, final: bool) -> Tuple[bytes, int]:\n        if errors != \"strict\":\n            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))\n\n        if not data:\n            return b\"\", 0\n\n        labels = _unicode_dots_re.split(data)\n        trailing_dot = b\"\"\n        if labels:\n            if not labels[-1]:\n                trailing_dot = b\".\"\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = b\".\"\n\n        result = []\n        size = 0\n        for label in labels:\n            result.append(alabel(label))\n            if size:\n                size += 1\n            size += len(label)\n\n        # Join with U+002E\n        result_bytes = b\".\".join(result) + trailing_dot\n        size += len(trailing_dot)\n        return result_bytes, size\n\n\nclass IncrementalDecoder(codecs.BufferedIncrementalDecoder):\n    def _buffer_decode(self, data: Any, errors: str, final: bool) -> Tuple[str, int]:\n        if errors != \"strict\":\n            raise IDNAError('Unsupported error handling \"{}\"'.format(errors))\n\n        if not data:\n            return (\"\", 0)\n\n        if not isinstance(data, str):\n            data = str(data, \"ascii\")\n\n        labels = _unicode_dots_re.split(data)\n        trailing_dot = \"\"\n        if labels:\n            if not labels[-1]:\n                trailing_dot = \".\"\n                del labels[-1]\n            elif not final:\n                # Keep potentially unfinished label until the next call\n                del labels[-1]\n                if labels:\n                    trailing_dot = \".\"\n\n        result = []\n        size = 0\n        for label in labels:\n            result.append(ulabel(label))\n            if size:\n                size += 1\n            size += len(label)\n\n        result_str = \".\".join(result) + trailing_dot\n        size += len(trailing_dot)\n        return (result_str, size)\n\n\nclass StreamWriter(Codec, codecs.StreamWriter):\n    pass\n\n\nclass StreamReader(Codec, codecs.StreamReader):\n    pass\n\n\ndef search_function(name: str) -> Optional[codecs.CodecInfo]:\n    if name != \"idna2008\":\n        return None\n    return codecs.CodecInfo(\n        name=name,\n        encode=Codec().encode,\n        decode=Codec().decode,  # type: ignore",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/codec.py",
        "start": 1,
        "end": 114,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 114,
          "column": 15,
          "position": 944
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/codec.py",
        "start": 1,
        "end": 115,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 115,
          "column": 19,
          "position": 945
        }
      }
    },
    {
      "format": "python",
      "lines": 45,
      "fragment": "from .core import (\n    IDNABidiError,\n    IDNAError,\n    InvalidCodepoint,\n    InvalidCodepointContext,\n    alabel,\n    check_bidi,\n    check_hyphen_ok,\n    check_initial_combiner,\n    check_label,\n    check_nfc,\n    decode,\n    encode,\n    ulabel,\n    uts46_remap,\n    valid_contextj,\n    valid_contexto,\n    valid_label_length,\n    valid_string_length,\n)\nfrom .intranges import intranges_contain\nfrom .package_data import __version__\n\n__all__ = [\n    \"__version__\",\n    \"IDNABidiError\",\n    \"IDNAError\",\n    \"InvalidCodepoint\",\n    \"InvalidCodepointContext\",\n    \"alabel\",\n    \"check_bidi\",\n    \"check_hyphen_ok\",\n    \"check_initial_combiner\",\n    \"check_label\",\n    \"check_nfc\",\n    \"decode\",\n    \"encode\",\n    \"intranges_contain\",\n    \"ulabel\",\n    \"uts46_remap\",\n    \"valid_contextj\",\n    \"valid_contexto\",\n    \"valid_label_length\",\n    \"valid_string_length\",\n]",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/idna/__init__.py",
        "start": 1,
        "end": 45,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 188
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/idna/__init__.py",
        "start": 1,
        "end": 45,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 45,
          "column": 2,
          "position": 188
        }
      }
    },
    {
      "format": "python",
      "lines": 8,
      "fragment": "] = None,\n        token: Optional[str] = None,\n        branch: Optional[str] = None,\n        create_pr: Optional[bool] = None,\n        allow_patterns: Optional[Union[List[str], str]] = None,\n        ignore_patterns: Optional[Union[List[str], str]] = None,\n        delete_patterns: Optional[Union[List[str], str]] = None,\n        model_card_kwargs",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/hub_mixin.py",
        "start": 641,
        "end": 648,
        "startLoc": {
          "line": 641,
          "column": 5,
          "position": 4840
        },
        "endLoc": {
          "line": 648,
          "column": 18,
          "position": 4959
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/keras_mixin.py",
        "start": 302,
        "end": 309,
        "startLoc": {
          "line": 302,
          "column": 4,
          "position": 1591
        },
        "endLoc": {
          "line": 309,
          "column": 8,
          "position": 1710
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "default: Union[Any, _MISSING_TYPE] = MISSING,\n        default_factory: Union[Callable[[], Any], _MISSING_TYPE] = MISSING,\n        init: bool = True,\n        repr: bool = True,\n        hash: Optional[bool] = None,\n        compare: bool = True,\n        metadata: Optional[Dict] = None,\n        **kwargs: Any,\n    ):",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/dataclasses.py",
        "start": 294,
        "end": 302,
        "startLoc": {
          "line": 294,
          "column": 9,
          "position": 1672
        },
        "endLoc": {
          "line": 302,
          "column": 2,
          "position": 1783
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/dataclasses.py",
        "start": 243,
        "end": 251,
        "startLoc": {
          "line": 243,
          "column": 5,
          "position": 1415
        },
        "endLoc": {
          "line": 251,
          "column": 2,
          "position": 1526
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "Pull Request.\n\n    Subclass of [`DiscussionEvent`].\n\n    Attributes:\n        id (`str`):\n            The ID of the event. An hexadecimal string.\n        type (`str`):\n            The type of the event.\n        created_at (`datetime`):\n            A [`datetime`](https://docs.python.org/3/library/datetime.html?highlight=datetime#datetime.datetime)\n            object holding the creation timestamp for the event.\n        author (`str`):\n            The username of the Discussion / Pull Request author.\n            Can be `\"deleted\"` if the user has been deleted since.\n        old_title",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/community.py",
        "start": 299,
        "end": 314,
        "startLoc": {
          "line": 299,
          "column": 2,
          "position": 932
        },
        "endLoc": {
          "line": 314,
          "column": 10,
          "position": 1112
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/community.py",
        "start": 272,
        "end": 287,
        "startLoc": {
          "line": 272,
          "column": 2,
          "position": 680
        },
        "endLoc": {
          "line": 287,
          "column": 8,
          "position": 860
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "/ f\"{sanitized_filename}.metadata\"\n    lock_path = metadata_path.with_suffix(\".lock\")\n\n    # Some Windows versions do not allow for paths longer than 255 characters.\n    # In this case, we must specify it as an extended path by using the \"\\\\?\\\" prefix\n    if os.name == \"nt\":\n        if not str(local_dir).startswith(\"\\\\\\\\?\\\\\") and len(os.path.abspath(lock_path)) > 255:\n            file_path = Path(\"\\\\\\\\?\\\\\" + os.path.abspath(file_path))\n            lock_path = Path(\"\\\\\\\\?\\\\\" + os.path.abspath(lock_path))\n            metadata_path = Path(\"\\\\\\\\?\\\\\" + os.path.abspath(metadata_path))\n\n    file_path.parent.mkdir(parents=True, exist_ok=True)\n    metadata_path.parent.mkdir(parents=True, exist_ok=True)\n    return LocalUploadFilePaths",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/_local_folder.py",
        "start": 258,
        "end": 271,
        "startLoc": {
          "line": 258,
          "column": 2,
          "position": 1322
        },
        "endLoc": {
          "line": 271,
          "column": 21,
          "position": 1493
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/huggingface_hub/_local_folder.py",
        "start": 218,
        "end": 231,
        "startLoc": {
          "line": 218,
          "column": 2,
          "position": 1009
        },
        "endLoc": {
          "line": 231,
          "column": 23,
          "position": 1180
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "= \"\".join(\n    [\n        chr(i)\n        for i in range(0x20, 0x7F)\n        if i\n        not in (0x20, 0x22, 0x23, 0x3C, 0x3E)\n        + (0x3F, 0x60, 0x7B, 0x7D)\n        + (0x2F, 0x3A, 0x3B, 0x3D, 0x40, 0x5B, 0x5C, 0x5D, 0x5E, 0x7C)\n    ]\n)\n# Note... The terminology 'userinfo' percent-encode set in the WHATWG document",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_urlparse.py",
        "start": 76,
        "end": 86,
        "startLoc": {
          "line": 76,
          "column": 2,
          "position": 411
        },
        "endLoc": {
          "line": 86,
          "column": 79,
          "position": 523
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_urlparse.py",
        "start": 66,
        "end": 76,
        "startLoc": {
          "line": 66,
          "column": 2,
          "position": 297
        },
        "endLoc": {
          "line": 76,
          "column": 14,
          "position": 409
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": "FileTypes = Union[\n    # file (or bytes)\n    FileContent,\n    # (filename, file (or bytes))\n    Tuple[Optional[str], FileContent],\n    # (filename, file (or bytes), content_type)\n    Tuple[Optional[str], FileContent, Optional[str]],\n    # (filename, file (or bytes), content_type, headers)\n    Tuple[Optional[str], FileContent, Optional[str], Mapping[str, str]],\n]\nRequestFiles = Union[Mapping[str, FileTypes], Sequence[Tuple[str, FileTypes]]]\n\nRequestExtensions",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_types.py",
        "start": 75,
        "end": 87,
        "startLoc": {
          "line": 75,
          "column": 1,
          "position": 588
        },
        "endLoc": {
          "line": 87,
          "column": 18,
          "position": 701
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/openai/_types.py",
        "start": 60,
        "end": 72,
        "startLoc": {
          "line": 60,
          "column": 1,
          "position": 399
        },
        "endLoc": {
          "line": 72,
          "column": 61,
          "position": 512
        }
      }
    },
    {
      "format": "python",
      "lines": 24,
      "fragment": "]:\n        if self._chunk_size is None:\n            return [content] if content else []\n\n        self._buffer.write(content)\n        if self._buffer.tell() >= self._chunk_size:\n            value = self._buffer.getvalue()\n            chunks = [\n                value[i : i + self._chunk_size]\n                for i in range(0, len(value), self._chunk_size)\n            ]\n            if len(chunks[-1]) == self._chunk_size:\n                self._buffer.seek(0)\n                self._buffer.truncate()\n                return chunks\n            else:\n                self._buffer.seek(0)\n                self._buffer.write(chunks[-1])\n                self._buffer.truncate()\n                return chunks[:-1]\n        else:\n            return []\n\n    def flush(self) -> list[str",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_decoders.py",
        "start": 276,
        "end": 299,
        "startLoc": {
          "line": 276,
          "column": 4,
          "position": 1939
        },
        "endLoc": {
          "line": 299,
          "column": 4,
          "position": 2175
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_decoders.py",
        "start": 237,
        "end": 260,
        "startLoc": {
          "line": 237,
          "column": 6,
          "position": 1569
        },
        "endLoc": {
          "line": 260,
          "column": 6,
          "position": 1805
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": "(\n    method: str,\n    url: URL | str,\n    *,\n    params: QueryParamTypes | None = None,\n    content: RequestContent | None = None,\n    data: RequestData | None = None,\n    files: RequestFiles | None = None,\n    json: typing.Any | None = None,\n    headers: HeaderTypes | None = None,\n    cookies: CookieTypes | None = None,\n    auth: AuthTypes | None = None,\n    proxy: ProxyTypes | None = None,\n    timeout: TimeoutTypes = DEFAULT_TIMEOUT_CONFIG,\n    follow_redirects: bool = False,\n    verify: ssl.SSLContext | str | bool = True,\n    trust_env: bool = True,\n) -> typing",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_api.py",
        "start": 124,
        "end": 141,
        "startLoc": {
          "line": 124,
          "column": 7,
          "position": 519
        },
        "endLoc": {
          "line": 141,
          "column": 7,
          "position": 739
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpx/_api.py",
        "start": 39,
        "end": 56,
        "startLoc": {
          "line": 39,
          "column": 8,
          "position": 171
        },
        "endLoc": {
          "line": 56,
          "column": 9,
          "position": 391
        }
      }
    },
    {
      "format": "python",
      "lines": 9,
      "fragment": "self.headers: list[tuple[bytes, bytes]] = enforce_headers(\n            headers, name=\"headers\"\n        )\n        self.stream: typing.Iterable[bytes] | typing.AsyncIterable[bytes] = (\n            enforce_stream(content, name=\"content\")\n        )\n        self.extensions = {} if extensions is None else extensions\n\n        self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_models.py",
        "start": 392,
        "end": 400,
        "startLoc": {
          "line": 392,
          "column": 9,
          "position": 2453
        },
        "endLoc": {
          "line": 400,
          "column": 5,
          "position": 2549
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/httpcore/_models.py",
        "start": 346,
        "end": 354,
        "startLoc": {
          "line": 346,
          "column": 9,
          "position": 2152
        },
        "endLoc": {
          "line": 354,
          "column": 3,
          "position": 2248
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ",\n        _parsed: bool = False,\n    ) -> None:\n        super().__init__()\n        if isinstance(headers, Headers):\n            object.__setattr__(self, \"headers\", headers)\n        else:\n            object.__setattr__(\n                self, \"headers\", normalize_and_validate(headers, _parsed=_parsed)\n            )\n        if not _parsed:\n            object.__setattr__(self, \"reason\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/h11/_events.py",
        "start": 143,
        "end": 154,
        "startLoc": {
          "line": 143,
          "column": 3,
          "position": 832
        },
        "endLoc": {
          "line": 154,
          "column": 9,
          "position": 935
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/h11/_events.py",
        "start": 88,
        "end": 99,
        "startLoc": {
          "line": 88,
          "column": 6,
          "position": 340
        },
        "endLoc": {
          "line": 99,
          "column": 9,
          "position": 443
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\n    \"__version__\",\n    \"__version_tuple__\",\n    \"version\",\n    \"version_tuple\",\n    \"__commit_id__\",\n    \"commit_id\",\n]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n    COMMIT_ID = Union[str, None]\nelse:\n    VERSION_TUPLE = object\n    COMMIT_ID = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\ncommit_id: COMMIT_ID\n__commit_id__: COMMIT_ID\n\n__version__ = version = '2025.9.0'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/fsspec/_version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 11,
          "position": 159
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\n    \"__version__\",\n    \"__version_tuple__\",\n    \"version\",\n    \"version_tuple\",\n    \"__commit_id__\",\n    \"commit_id\",\n]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n    COMMIT_ID = Union[str, None]\nelse:\n    VERSION_TUPLE = object\n    COMMIT_ID = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\ncommit_id: COMMIT_ID\n__commit_id__: COMMIT_ID\n\n__version__ = version = '3.20.0'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/filelock/version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 9,
          "position": 159
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 11,
      "fragment": "lock_file: str | os.PathLike[str],\n        timeout: float = -1,\n        mode: int = 0o644,\n        thread_local: bool = False,  # noqa: FBT001, FBT002\n        *,\n        blocking: bool = True,\n        is_singleton: bool = False,\n        loop: asyncio.AbstractEventLoop | None = None,\n        run_in_executor: bool = True,\n        executor: futures.Executor | None = None,\n    ) -> None",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/filelock/asyncio.py",
        "start": 108,
        "end": 118,
        "startLoc": {
          "line": 108,
          "column": 9,
          "position": 739
        },
        "endLoc": {
          "line": 118,
          "column": 5,
          "position": 867
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/filelock/asyncio.py",
        "start": 75,
        "end": 85,
        "startLoc": {
          "line": 75,
          "column": 9,
          "position": 471
        },
        "endLoc": {
          "line": 85,
          "column": 18,
          "position": 599
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ")\n                if self.is_locked:\n                    _LOGGER.debug(\"Lock %s acquired on %s\", lock_id, lock_filename)\n                    break\n                if blocking is False:\n                    _LOGGER.debug(\"Failed to immediately acquire lock %s on %s\", lock_id, lock_filename)\n                    raise Timeout(lock_filename)  # noqa: TRY301\n                if 0 <= timeout < time.perf_counter() - start_time:\n                    _LOGGER.debug(\"Timeout on acquiring lock %s on %s\", lock_id, lock_filename)\n                    raise Timeout(lock_filename)  # noqa: TRY301\n                msg = \"Lock %s not acquired on %s, waiting %s seconds ...\"\n                _LOGGER.debug(msg, lock_id, lock_filename, poll_interval)\n                time",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/filelock/_api.py",
        "start": 332,
        "end": 344,
        "startLoc": {
          "line": 332,
          "column": 2,
          "position": 1860
        },
        "endLoc": {
          "line": 344,
          "column": 5,
          "position": 1992
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/filelock/asyncio.py",
        "start": 232,
        "end": 244,
        "startLoc": {
          "line": 232,
          "column": 9,
          "position": 1362
        },
        "endLoc": {
          "line": 244,
          "column": 6,
          "position": 1494
        }
      }
    },
    {
      "format": "python",
      "lines": 54,
      "fragment": "from .distro import (\n    NORMALIZED_DISTRO_ID,\n    NORMALIZED_LSB_ID,\n    NORMALIZED_OS_ID,\n    LinuxDistribution,\n    __version__,\n    build_number,\n    codename,\n    distro_release_attr,\n    distro_release_info,\n    id,\n    info,\n    like,\n    linux_distribution,\n    lsb_release_attr,\n    lsb_release_info,\n    major_version,\n    minor_version,\n    name,\n    os_release_attr,\n    os_release_info,\n    uname_attr,\n    uname_info,\n    version,\n    version_parts,\n)\n\n__all__ = [\n    \"NORMALIZED_DISTRO_ID\",\n    \"NORMALIZED_LSB_ID\",\n    \"NORMALIZED_OS_ID\",\n    \"LinuxDistribution\",\n    \"build_number\",\n    \"codename\",\n    \"distro_release_attr\",\n    \"distro_release_info\",\n    \"id\",\n    \"info\",\n    \"like\",\n    \"linux_distribution\",\n    \"lsb_release_attr\",\n    \"lsb_release_info\",\n    \"major_version\",\n    \"minor_version\",\n    \"name\",\n    \"os_release_attr\",\n    \"os_release_info\",\n    \"uname_attr\",\n    \"uname_info\",\n    \"version\",\n    \"version_parts\",\n]\n\n__version__ = __version__",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/distro/__init__.py",
        "start": 1,
        "end": 54,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 54,
          "column": 12,
          "position": 213
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/distro/__init__.py",
        "start": 1,
        "end": 54,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 54,
          "column": 12,
          "position": 213
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ",\n    fill_char: str = \"#\",\n    empty_char: str = \"-\",\n    bar_template: str = \"%(label)s  [%(bar)s]  %(info)s\",\n    info_sep: str = \"  \",\n    width: int = 36,\n    file: t.TextIO | None = None,\n    color: bool | None = None,\n    update_min_steps: int = 1,\n) -> ProgressBar[V",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/click/termui.py",
        "start": 316,
        "end": 325,
        "startLoc": {
          "line": 316,
          "column": 5,
          "position": 2081
        },
        "endLoc": {
          "line": 325,
          "column": 2,
          "position": 2188
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/click/termui.py",
        "start": 295,
        "end": 304,
        "startLoc": {
          "line": 295,
          "column": 6,
          "position": 1826
        },
        "endLoc": {
          "line": 304,
          "column": 4,
          "position": 1933
        }
      }
    },
    {
      "format": "python",
      "lines": 136,
      "fragment": "def progressbar(\n    iterable: cabc.Iterable[V] | None = None,\n    length: int | None = None,\n    label: str | None = None,\n    hidden: bool = False,\n    show_eta: bool = True,\n    show_percent: bool | None = None,\n    show_pos: bool = False,\n    item_show_func: t.Callable[[V | None], str | None] | None = None,\n    fill_char: str = \"#\",\n    empty_char: str = \"-\",\n    bar_template: str = \"%(label)s  [%(bar)s]  %(info)s\",\n    info_sep: str = \"  \",\n    width: int = 36,\n    file: t.TextIO | None = None,\n    color: bool | None = None,\n    update_min_steps: int = 1,\n) -> ProgressBar[V]:\n    \"\"\"This function creates an iterable context manager that can be used\n    to iterate over something while showing a progress bar.  It will\n    either iterate over the `iterable` or `length` items (that are counted\n    up).  While iteration happens, this function will print a rendered\n    progress bar to the given `file` (defaults to stdout) and will attempt\n    to calculate remaining time and more.  By default, this progress bar\n    will not be rendered if the file is not a terminal.\n\n    The context manager creates the progress bar.  When the context\n    manager is entered the progress bar is already created.  With every\n    iteration over the progress bar, the iterable passed to the bar is\n    advanced and the bar is updated.  When the context manager exits,\n    a newline is printed and the progress bar is finalized on screen.\n\n    Note: The progress bar is currently designed for use cases where the\n    total progress can be expected to take at least several seconds.\n    Because of this, the ProgressBar class object won't display\n    progress that is considered too fast, and progress where the time\n    between steps is less than a second.\n\n    No printing must happen or the progress bar will be unintentionally\n    destroyed.\n\n    Example usage::\n\n        with progressbar(items) as bar:\n            for item in bar:\n                do_something_with(item)\n\n    Alternatively, if no iterable is specified, one can manually update the\n    progress bar through the `update()` method instead of directly\n    iterating over the progress bar.  The update method accepts the number\n    of steps to increment the bar with::\n\n        with progressbar(length=chunks.total_bytes) as bar:\n            for chunk in chunks:\n                process_chunk(chunk)\n                bar.update(chunks.bytes)\n\n    The ``update()`` method also takes an optional value specifying the\n    ``current_item`` at the new position. This is useful when used\n    together with ``item_show_func`` to customize the output for each\n    manual step::\n\n        with click.progressbar(\n            length=total_size,\n            label='Unzipping archive',\n            item_show_func=lambda a: a.filename\n        ) as bar:\n            for archive in zip_file:\n                archive.extract()\n                bar.update(archive.size, archive)\n\n    :param iterable: an iterable to iterate over.  If not provided the length\n                     is required.\n    :param length: the number of items to iterate over.  By default the\n                   progressbar will attempt to ask the iterator about its\n                   length, which might or might not work.  If an iterable is\n                   also provided this parameter can be used to override the\n                   length.  If an iterable is not provided the progress bar\n                   will iterate over a range of that length.\n    :param label: the label to show next to the progress bar.\n    :param hidden: hide the progressbar. Defaults to ``False``. When no tty is\n        detected, it will only print the progressbar label. Setting this to\n        ``False`` also disables that.\n    :param show_eta: enables or disables the estimated time display.  This is\n                     automatically disabled if the length cannot be\n                     determined.\n    :param show_percent: enables or disables the percentage display.  The\n                         default is `True` if the iterable has a length or\n                         `False` if not.\n    :param show_pos: enables or disables the absolute position display.  The\n                     default is `False`.\n    :param item_show_func: A function called with the current item which\n        can return a string to show next to the progress bar. If the\n        function returns ``None`` nothing is shown. The current item can\n        be ``None``, such as when entering and exiting the bar.\n    :param fill_char: the character to use to show the filled part of the\n                      progress bar.\n    :param empty_char: the character to use to show the non-filled part of\n                       the progress bar.\n    :param bar_template: the format string to use as template for the bar.\n                         The parameters in it are ``label`` for the label,\n                         ``bar`` for the progress bar and ``info`` for the\n                         info section.\n    :param info_sep: the separator between multiple info items (eta etc.)\n    :param width: the width of the progress bar in characters, 0 means full\n                  terminal width\n    :param file: The file to write to. If this is not a terminal then\n        only the label is printed.\n    :param color: controls if the terminal supports ANSI colors or not.  The\n                  default is autodetection.  This is only needed if ANSI\n                  codes are included anywhere in the progress bar output\n                  which is not the case by default.\n    :param update_min_steps: Render only when this many updates have\n        completed. This allows tuning for very fast iterators.\n\n    .. versionadded:: 8.2\n        The ``hidden`` argument.\n\n    .. versionchanged:: 8.0\n        Output is shown even if execution time is less than 0.5 seconds.\n\n    .. versionchanged:: 8.0\n        ``item_show_func`` shows the current item, not the previous one.\n\n    .. versionchanged:: 8.0\n        Labels are echoed if the output is not a TTY. Reverts a change\n        in 7.0 that removed all output.\n\n    .. versionadded:: 8.0\n       The ``update_min_steps`` parameter.\n\n    .. versionadded:: 4.0\n        The ``color`` parameter and ``update`` method.\n\n    .. versionadded:: 2.0\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/click/termui.py",
        "start": 328,
        "end": 463,
        "startLoc": {
          "line": 328,
          "column": 1,
          "position": 2198
        },
        "endLoc": {
          "line": 463,
          "column": 8,
          "position": 2444
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/click/termui.py",
        "start": 308,
        "end": 325,
        "startLoc": {
          "line": 308,
          "column": 1,
          "position": 1947
        },
        "endLoc": {
          "line": 325,
          "column": 2,
          "position": 2192
        }
      }
    },
    {
      "format": "python",
      "lines": 14,
      "fragment": "steps: int = 5,\n    chunk_size: int = 512,\n    threshold: float = 0.20,\n    cp_isolation: list[str] | None = None,\n    cp_exclusion: list[str] | None = None,\n    preemptive_behaviour: bool = True,\n    explain: bool = False,\n    language_threshold: float = 0.1,\n    enable_fallback: bool = True,\n) -> CharsetMatches:\n    \"\"\"\n    Same thing than the function from_bytes but with one extra step. Opening and reading given file path in binary mode.\n    Can raise IOError.\n    \"\"\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/charset_normalizer/api.py",
        "start": 577,
        "end": 590,
        "startLoc": {
          "line": 577,
          "column": 5,
          "position": 3552
        },
        "endLoc": {
          "line": 590,
          "column": 8,
          "position": 3673
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/charset_normalizer/api.py",
        "start": 547,
        "end": 560,
        "startLoc": {
          "line": 547,
          "column": 5,
          "position": 3351
        },
        "endLoc": {
          "line": 560,
          "column": 8,
          "position": 3472
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": ",  # type: ignore[type-arg]\n    steps: int = 5,\n    chunk_size: int = 512,\n    threshold: float = 0.20,\n    cp_isolation: list[str] | None = None,\n    cp_exclusion: list[str] | None = None,\n    preemptive_behaviour: bool = True,\n    explain: bool = False,\n    language_threshold: float = 0.1,\n    enable_fallback: bool = False",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/charset_normalizer/api.py",
        "start": 607,
        "end": 616,
        "startLoc": {
          "line": 607,
          "column": 6,
          "position": 3764
        },
        "endLoc": {
          "line": 616,
          "column": 6,
          "position": 3878
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/charset_normalizer/api.py",
        "start": 576,
        "end": 555,
        "startLoc": {
          "line": 576,
          "column": 9,
          "position": 3547
        },
        "endLoc": {
          "line": 555,
          "column": 5,
          "position": 3460
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": "\"\"\"\ncertifi.py\n~~~~~~~~~~\n\nThis module returns the installation location of cacert.pem or its contents.\n\"\"\"\nimport sys\nimport atexit\n\ndef exit_cacert_ctx() -> None:\n    _CACERT_CTX.__exit__(None, None, None)  # type: ignore[union-attr]\n\n\nif sys.version_info >= (3, 11):\n\n    from importlib.resources import as_file, files\n\n    _CACERT_CTX = None\n    _CACERT_PATH = None\n\n    def where() -> str:\n        # This is slightly terrible, but we want to delay extracting the file\n        # in cases where we're inside of a zipimport situation until someone\n        # actually calls where(), but we don't want to re-extract the file\n        # on every call of where(), so we'll do it once then store it in a\n        # global variable.\n        global _CACERT_CTX\n        global _CACERT_PATH\n        if _CACERT_PATH is None:\n            # This is slightly janky, the importlib.resources API wants you to\n            # manage the cleanup of this file, so it doesn't actually return a\n            # path, it returns a context manager that will give you the path\n            # when you enter it and will do any cleanup when you leave it. In\n            # the common case of not needing a temporary file, it will just\n            # return the file system location and the __exit__() is a no-op.\n            #\n            # We also have to hold onto the actual context manager, because\n            # it will do the cleanup whenever it gets garbage collected, so\n            # we will also store that at the global level as well.\n            _CACERT_CTX = as_file(files(\"certifi\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/certifi/core.py",
        "start": 1,
        "end": 40,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 40,
          "column": 10,
          "position": 175
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/certifi/core.py",
        "start": 1,
        "end": 40,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 40,
          "column": 22,
          "position": 175
        }
      }
    },
    {
      "format": "python",
      "lines": 30,
      "fragment": ").joinpath(\"cacert.pem\").read_text(encoding=\"ascii\")\n\nelse:\n\n    from importlib.resources import path as get_path, read_text\n\n    _CACERT_CTX = None\n    _CACERT_PATH = None\n\n    def where() -> str:\n        # This is slightly terrible, but we want to delay extracting the\n        # file in cases where we're inside of a zipimport situation until\n        # someone actually calls where(), but we don't want to re-extract\n        # the file on every call of where(), so we'll do it once then store\n        # it in a global variable.\n        global _CACERT_CTX\n        global _CACERT_PATH\n        if _CACERT_PATH is None:\n            # This is slightly janky, the importlib.resources API wants you\n            # to manage the cleanup of this file, so it doesn't actually\n            # return a path, it returns a context manager that will give\n            # you the path when you enter it and will do any cleanup when\n            # you leave it. In the common case of not needing a temporary\n            # file, it will just return the file system location and the\n            # __exit__() is a no-op.\n            #\n            # We also have to hold onto the actual context manager, because\n            # it will do the cleanup whenever it gets garbage collected, so\n            # we will also store that at the global level as well.\n            _CACERT_CTX = get_path(\"certifi\"",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/certifi/core.py",
        "start": 47,
        "end": 76,
        "startLoc": {
          "line": 47,
          "column": 10,
          "position": 232
        },
        "endLoc": {
          "line": 76,
          "column": 10,
          "position": 373
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/certifi/core.py",
        "start": 47,
        "end": 76,
        "startLoc": {
          "line": 47,
          "column": 22,
          "position": 232
        },
        "endLoc": {
          "line": 76,
          "column": 22,
          "position": 373
        }
      }
    },
    {
      "format": "python",
      "lines": 18,
      "fragment": ": {\n        Feature.F_STRINGS,\n        Feature.DEBUG_F_STRINGS,\n        Feature.NUMERIC_UNDERSCORES,\n        Feature.TRAILING_COMMA_IN_CALL,\n        Feature.TRAILING_COMMA_IN_DEF,\n        Feature.ASYNC_KEYWORDS,\n        Feature.FUTURE_ANNOTATIONS,\n        Feature.ASSIGNMENT_EXPRESSIONS,\n        Feature.RELAXED_DECORATORS,\n        Feature.POS_ONLY_ARGUMENTS,\n        Feature.UNPACKING_ON_FLOW,\n        Feature.ANN_ASSIGN_EXTENDED_RHS,\n        Feature.PARENTHESIZED_CONTEXT_MANAGERS,\n        Feature.PATTERN_MATCHING,\n        Feature.EXCEPT_STAR,\n        Feature.VARIADIC_GENERICS,\n        Feature",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 150,
        "end": 167,
        "startLoc": {
          "line": 150,
          "column": 6,
          "position": 916
        },
        "endLoc": {
          "line": 167,
          "column": 8,
          "position": 1017
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 132,
        "end": 149,
        "startLoc": {
          "line": 132,
          "column": 6,
          "position": 808
        },
        "endLoc": {
          "line": 149,
          "column": 2,
          "position": 909
        }
      }
    },
    {
      "format": "python",
      "lines": 20,
      "fragment": ": {\n        Feature.F_STRINGS,\n        Feature.DEBUG_F_STRINGS,\n        Feature.NUMERIC_UNDERSCORES,\n        Feature.TRAILING_COMMA_IN_CALL,\n        Feature.TRAILING_COMMA_IN_DEF,\n        Feature.ASYNC_KEYWORDS,\n        Feature.FUTURE_ANNOTATIONS,\n        Feature.ASSIGNMENT_EXPRESSIONS,\n        Feature.RELAXED_DECORATORS,\n        Feature.POS_ONLY_ARGUMENTS,\n        Feature.UNPACKING_ON_FLOW,\n        Feature.ANN_ASSIGN_EXTENDED_RHS,\n        Feature.PARENTHESIZED_CONTEXT_MANAGERS,\n        Feature.PATTERN_MATCHING,\n        Feature.EXCEPT_STAR,\n        Feature.VARIADIC_GENERICS,\n        Feature.TYPE_PARAMS,\n        Feature.FSTRING_PARSING,\n        Feature",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 170,
        "end": 189,
        "startLoc": {
          "line": 170,
          "column": 6,
          "position": 1036
        },
        "endLoc": {
          "line": 189,
          "column": 8,
          "position": 1149
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 132,
        "end": 169,
        "startLoc": {
          "line": 132,
          "column": 6,
          "position": 808
        },
        "endLoc": {
          "line": 169,
          "column": 2,
          "position": 1029
        }
      }
    },
    {
      "format": "python",
      "lines": 21,
      "fragment": ": {\n        Feature.F_STRINGS,\n        Feature.DEBUG_F_STRINGS,\n        Feature.NUMERIC_UNDERSCORES,\n        Feature.TRAILING_COMMA_IN_CALL,\n        Feature.TRAILING_COMMA_IN_DEF,\n        Feature.ASYNC_KEYWORDS,\n        Feature.FUTURE_ANNOTATIONS,\n        Feature.ASSIGNMENT_EXPRESSIONS,\n        Feature.RELAXED_DECORATORS,\n        Feature.POS_ONLY_ARGUMENTS,\n        Feature.UNPACKING_ON_FLOW,\n        Feature.ANN_ASSIGN_EXTENDED_RHS,\n        Feature.PARENTHESIZED_CONTEXT_MANAGERS,\n        Feature.PATTERN_MATCHING,\n        Feature.EXCEPT_STAR,\n        Feature.VARIADIC_GENERICS,\n        Feature.TYPE_PARAMS,\n        Feature.FSTRING_PARSING,\n        Feature.TYPE_PARAM_DEFAULTS,\n        Feature",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 191,
        "end": 211,
        "startLoc": {
          "line": 191,
          "column": 6,
          "position": 1162
        },
        "endLoc": {
          "line": 211,
          "column": 8,
          "position": 1281
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/black/mode.py",
        "start": 132,
        "end": 190,
        "startLoc": {
          "line": 132,
          "column": 6,
          "position": 808
        },
        "endLoc": {
          "line": 190,
          "column": 2,
          "position": 1155
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", 0),\n    (1809, 1809, 0),\n    (1840, 1866, 0),\n    (1958, 1968, 0),\n    (2027, 2035, 0),\n    (2045, 2045, 0),\n    (2070, 2073, 0),\n    (2075, 2083, 0),\n    (2085, 2087, 0),\n    (2089, 2093, 0),\n    (2137, 2139, 0),\n    (2200",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 23,
        "end": 34,
        "startLoc": {
          "line": 23,
          "column": 5,
          "position": 239
        },
        "endLoc": {
          "line": 34,
          "column": 5,
          "position": 367
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 24,
        "end": 35,
        "startLoc": {
          "line": 24,
          "column": 5,
          "position": 257
        },
        "endLoc": {
          "line": 35,
          "column": 5,
          "position": 385
        }
      }
    },
    {
      "format": "python",
      "lines": 12,
      "fragment": ", 0),\n    (3633, 3633, 0),\n    (3636, 3642, 0),\n    (3655, 3662, 0),\n    (3761, 3761, 0),\n    (3764, 3772, 0),\n    (3784, 3790, 0),\n    (3864, 3865, 0),\n    (3893, 3893, 0),\n    (3895, 3895, 0),\n    (3897, 3897, 0),\n    (3953",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 96,
        "end": 107,
        "startLoc": {
          "line": 96,
          "column": 5,
          "position": 1115
        },
        "endLoc": {
          "line": 107,
          "column": 5,
          "position": 1243
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 104,
        "end": 115,
        "startLoc": {
          "line": 104,
          "column": 5,
          "position": 1217
        },
        "endLoc": {
          "line": 115,
          "column": 5,
          "position": 1345
        }
      }
    },
    {
      "format": "python",
      "lines": 43,
      "fragment": ", 0),\n    (8400, 8432, 0),\n    (8986, 8987, 2),\n    (9001, 9002, 2),\n    (9193, 9196, 2),\n    (9200, 9200, 2),\n    (9203, 9203, 2),\n    (9725, 9726, 2),\n    (9748, 9749, 2),\n    (9800, 9811, 2),\n    (9855, 9855, 2),\n    (9875, 9875, 2),\n    (9889, 9889, 2),\n    (9898, 9899, 2),\n    (9917, 9918, 2),\n    (9924, 9925, 2),\n    (9934, 9934, 2),\n    (9940, 9940, 2),\n    (9962, 9962, 2),\n    (9970, 9971, 2),\n    (9973, 9973, 2),\n    (9978, 9978, 2),\n    (9981, 9981, 2),\n    (9989, 9989, 2),\n    (9994, 9995, 2),\n    (10024, 10024, 2),\n    (10060, 10060, 2),\n    (10062, 10062, 2),\n    (10067, 10069, 2),\n    (10071, 10071, 2),\n    (10133, 10135, 2),\n    (10160, 10160, 2),\n    (10175, 10175, 2),\n    (11035, 11036, 2),\n    (11088, 11088, 2),\n    (11093, 11093, 2),\n    (11503, 11505, 0),\n    (11647, 11647, 0),\n    (11744, 11775, 0),\n    (11904, 11929, 2),\n    (11931, 12019, 2),\n    (12032, 12245, 2),\n    (12272, 12283",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 178,
        "end": 220,
        "startLoc": {
          "line": 178,
          "column": 5,
          "position": 2099
        },
        "endLoc": {
          "line": 220,
          "column": 6,
          "position": 2602
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 165,
        "end": 207,
        "startLoc": {
          "line": 165,
          "column": 5,
          "position": 1949
        },
        "endLoc": {
          "line": 207,
          "column": 6,
          "position": 2452
        }
      }
    },
    {
      "format": "python",
      "lines": 13,
      "fragment": ", 12830, 2),\n    (12832, 12871, 2),\n    (12880, 19903, 2),\n    (19968, 42124, 2),\n    (42128, 42182, 2),\n    (42607, 42610, 0),\n    (42612, 42621, 0),\n    (42654, 42655, 0),\n    (42736, 42737, 0),\n    (43010, 43010, 0),\n    (43014, 43014, 0),\n    (43019, 43019, 0),\n    (43045",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 230,
        "end": 242,
        "startLoc": {
          "line": 230,
          "column": 6,
          "position": 2720
        },
        "endLoc": {
          "line": 242,
          "column": 6,
          "position": 2863
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 216,
        "end": 228,
        "startLoc": {
          "line": 216,
          "column": 6,
          "position": 2558
        },
        "endLoc": {
          "line": 228,
          "column": 6,
          "position": 2701
        }
      }
    },
    {
      "format": "python",
      "lines": 10,
      "fragment": "),\n    (63744, 64255, 2),\n    (64286, 64286, 0),\n    (65024, 65039, 0),\n    (65040, 65049, 2),\n    (65056, 65071, 0),\n    (65072, 65106, 2),\n    (65108, 65126, 2),\n    (65128, 65131, 2),\n    (65281",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 271,
        "end": 280,
        "startLoc": {
          "line": 271,
          "column": 2,
          "position": 3218
        },
        "endLoc": {
          "line": 280,
          "column": 6,
          "position": 3319
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 254,
        "end": 263,
        "startLoc": {
          "line": 254,
          "column": 2,
          "position": 3020
        },
        "endLoc": {
          "line": 263,
          "column": 6,
          "position": 3121
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "),\n    (66045, 66045, 0),\n    (66272, 66272, 0),\n    (66422, 66426, 0),\n    (68097, 68099, 0),\n    (68101, 68102, 0),\n    (68108, 68111, 0),\n    (68152, 68154, 0),\n    (68159, 68159, 0),\n    (68325, 68326, 0),\n    (68900, 68903, 0),\n    (69291, 69292, 0),\n    (69373, 69375, 0),\n    (69446, 69456, 0),\n    (69506, 69509, 0),\n    (69633",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 281,
        "end": 296,
        "startLoc": {
          "line": 281,
          "column": 2,
          "position": 3338
        },
        "endLoc": {
          "line": 296,
          "column": 6,
          "position": 3511
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 266,
        "end": 281,
        "startLoc": {
          "line": 266,
          "column": 2,
          "position": 3164
        },
        "endLoc": {
          "line": 281,
          "column": 6,
          "position": 3337
        }
      }
    },
    {
      "format": "python",
      "lines": 15,
      "fragment": "),\n    (94208, 100343, 2),\n    (100352, 101589, 2),\n    (101632, 101640, 2),\n    (110576, 110579, 2),\n    (110581, 110587, 2),\n    (110589, 110590, 2),\n    (110592, 110882, 2),\n    (110898, 110898, 2),\n    (110928, 110930, 2),\n    (110933, 110933, 2),\n    (110948, 110951, 2),\n    (110960, 111355, 2),\n    (113821, 113822, 0),\n    (118528",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 390,
        "end": 404,
        "startLoc": {
          "line": 390,
          "column": 2,
          "position": 4646
        },
        "endLoc": {
          "line": 404,
          "column": 7,
          "position": 4807
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 361,
        "end": 375,
        "startLoc": {
          "line": 361,
          "column": 2,
          "position": 4304
        },
        "endLoc": {
          "line": 375,
          "column": 7,
          "position": 4465
        }
      }
    },
    {
      "format": "python",
      "lines": 40,
      "fragment": ", 119170, 0),\n    (119173, 119179, 0),\n    (119210, 119213, 0),\n    (119362, 119364, 0),\n    (121344, 121398, 0),\n    (121403, 121452, 0),\n    (121461, 121461, 0),\n    (121476, 121476, 0),\n    (121499, 121503, 0),\n    (121505, 121519, 0),\n    (122880, 122886, 0),\n    (122888, 122904, 0),\n    (122907, 122913, 0),\n    (122915, 122916, 0),\n    (122918, 122922, 0),\n    (123023, 123023, 0),\n    (123184, 123190, 0),\n    (123566, 123566, 0),\n    (123628, 123631, 0),\n    (124140, 124143, 0),\n    (125136, 125142, 0),\n    (125252, 125258, 0),\n    (126980, 126980, 2),\n    (127183, 127183, 2),\n    (127374, 127374, 2),\n    (127377, 127386, 2),\n    (127488, 127490, 2),\n    (127504, 127547, 2),\n    (127552, 127560, 2),\n    (127568, 127569, 2),\n    (127584, 127589, 2),\n    (127744, 127776, 2),\n    (127789, 127797, 2),\n    (127799, 127868, 2),\n    (127870, 127891, 2),\n    (127904, 127946, 2),\n    (127951, 127955, 2),\n    (127968, 127984, 2),\n    (127988, 127988, 2),\n    (127992, 128062",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 407,
        "end": 446,
        "startLoc": {
          "line": 407,
          "column": 7,
          "position": 4844
        },
        "endLoc": {
          "line": 446,
          "column": 7,
          "position": 5314
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 379,
        "end": 418,
        "startLoc": {
          "line": 379,
          "column": 7,
          "position": 4514
        },
        "endLoc": {
          "line": 418,
          "column": 7,
          "position": 4984
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": ", 128062, 2),\n    (128064, 128064, 2),\n    (128066, 128252, 2),\n    (128255, 128317, 2),\n    (128331, 128334, 2),\n    (128336, 128359, 2),\n    (128378, 128378, 2),\n    (128405, 128406, 2),\n    (128420, 128420, 2),\n    (128507, 128591, 2),\n    (128640, 128709, 2),\n    (128716, 128716, 2),\n    (128720, 128722, 2),\n    (128725, 128727, 2),\n    (128732, 128735, 2),\n    (128747, 128748, 2),\n    (128756, 128764, 2),\n    (128992, 129003, 2),\n    (129008, 129008, 2),\n    (129292, 129338, 2),\n    (129340, 129349, 2),\n    (129351, 129535, 2),\n    (129648, 129660, 2),\n    (129664, 129672, 2),\n    (129680, 129725, 2),\n    (129727, 129733, 2),\n    (129742, 129755, 2),\n    (129760, 129768, 2),\n    (129776, 129784, 2),\n    (131072, 196605, 2),\n    (196608, 262141, 2),\n    (917760",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/black/_width_table.py",
        "start": 446,
        "end": 477,
        "startLoc": {
          "line": 446,
          "column": 7,
          "position": 5312
        },
        "endLoc": {
          "line": 477,
          "column": 7,
          "position": 5683
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/rich/_cell_widths.py",
        "start": 420,
        "end": 451,
        "startLoc": {
          "line": 420,
          "column": 7,
          "position": 5006
        },
        "endLoc": {
          "line": 451,
          "column": 7,
          "position": 5377
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "report_wid = getattr(report, \"worker_id\", None)\n            report_ii = getattr(report, \"item_index\", None)\n            close_report = next(\n                (\n                    rep\n                    for rep in self.open_reports\n                    if (\n                        rep.nodeid == report.nodeid\n                        and getattr(rep, \"item_index\", None) == report_ii\n                        and getattr(rep, \"worker_id\", None) == report_wid\n                    )\n                ),\n                None,\n            )\n            if close_report:\n                self",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/junitxml.py",
        "start": 599,
        "end": 614,
        "startLoc": {
          "line": 599,
          "column": 13,
          "position": 4755
        },
        "endLoc": {
          "line": 614,
          "column": 5,
          "position": 4884
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/junitxml.py",
        "start": 562,
        "end": 577,
        "startLoc": {
          "line": 562,
          "column": 17,
          "position": 4451
        },
        "endLoc": {
          "line": 577,
          "column": 58,
          "position": 4580
        }
      }
    },
    {
      "format": "python",
      "lines": 31,
      "fragment": "# file generated by setuptools-scm\n# don't change, don't track in version control\n\n__all__ = [\n    \"__version__\",\n    \"__version_tuple__\",\n    \"version\",\n    \"version_tuple\",\n    \"__commit_id__\",\n    \"commit_id\",\n]\n\nTYPE_CHECKING = False\nif TYPE_CHECKING:\n    from typing import Tuple\n    from typing import Union\n\n    VERSION_TUPLE = Tuple[Union[int, str], ...]\n    COMMIT_ID = Union[str, None]\nelse:\n    VERSION_TUPLE = object\n    COMMIT_ID = object\n\nversion: str\n__version__: str\n__version_tuple__: VERSION_TUPLE\nversion_tuple: VERSION_TUPLE\ncommit_id: COMMIT_ID\n__commit_id__: COMMIT_ID\n\n__version__ = version = '8.4.2'",
      "tokens": 0,
      "firstFile": {
        "name": ".venv/lib/python3.14/site-packages/_pytest/_version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/pip/_vendor/platformdirs/version.py",
        "start": 1,
        "end": 31,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 31,
          "column": 8,
          "position": 159
        }
      }
    },
    {
      "format": "python",
      "lines": 113,
      "fragment": "from __future__ import annotations\n\nimport time\nfrom typing import Dict, Iterable, Optional, cast\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\n# Weight-file extensions we count toward model size\n_WEIGHT_EXTS: Iterable[str] = (\".safetensors\", \".bin\", \".onnx\", \".tflite\", \".h5\", \".pt\")\n\n\ndef _clamp01(x: float) -> float:\n    return 0.0 if x < 0.0 else 1.0 if x > 1.0 else x\n\n\ndef _sum_weight_megabytes(repo_id: str, revision: Optional[str]) -> float:\n    \"\"\"\n    Use Hugging Face *metadata* (no big file downloads) to sum sizes of weight files.\n    Returns total size in MB (base-10: 1 MB = 1e6 bytes). Falls back to 0 on any error.\n    \"\"\"\n    try:\n        info = model_info(\n            repo_id, revision=revision\n        )  # files_metadata=True in hf_client\n        # Newer huggingface_hub exposes per-file metadata under `siblings` or `siblings_with_metadata`\n        files = (\n            getattr(info, \"siblings\", None)\n            or getattr(info, \"siblings_with_metadata\", None)\n            or []\n        )\n\n        total_bytes = 0\n        for f in files:\n            # Compatible access for both dict-like and object-like entries\n            fname = (\n                getattr(f, \"rfilename\", None)\n                or getattr(f, \"path\", None)\n                or getattr(f, \"filename\", None)\n            )\n            fsize = getattr(f, \"size\", None)\n            if isinstance(fname, str) and isinstance(fsize, int):\n                if any(fname.lower().endswith(ext) for ext in _WEIGHT_EXTS):\n                    total_bytes += fsize\n\n        return total_bytes / 1_000_000.0  # MB (decimal)\n    except Exception:\n        # Be fail-safe: if metadata fetch fails, treat as 0 MB so we don't crash the whole run\n        return 0.0\n\n\ndef _device_capacities_mb() -> Dict[str, float]:\n    \"\"\"\n    Rough capacity budget (in MB) per device class. These are tunable heuristics.\n    The score is computed as: max(0, 1 - (model_mb / capacity_mb)).\n    \"\"\"\n    return {\n        \"raspberry_pi\": 500.0,  # smaller budget → large models score near 0\n        \"jetson_nano\": 1500.0,\n        \"desktop_pc\": 8000.0,\n        \"aws_server\": 16000.0,\n    }\n\n\ndef _scores_from_size(total_mb: float) -> Dict[str, float]:\n    caps = _device_capacities_mb()\n    scores: Dict[str, float] = {}\n    for device, cap in caps.items():\n        # Linear decay with clamp into [0, 1], rounded to 2 decimal places\n        scores[device] = round(_clamp01(1.0 - (total_mb / cap)), 2) if cap > 0 else 0.0\n    return scores\n\n\ndef compute(model_url: str) -> MetricResult:\n    \"\"\"\n    Compute 'size_score' as a per-device compatibility dict using HF metadata only.\n    Returns:\n      {\n        \"value\": { \"raspberry_pi\": float, \"jetson_nano\": float, \"desktop_pc\": float, \"aws_server\": float },\n        \"latency_ms\": int\n      }\n    \"\"\"\n    t0 = time.perf_counter()\n    try:\n        repo_id, revision = to_repo_id(model_url)\n        total_mb = _sum_weight_megabytes(repo_id, revision)\n        scores = _scores_from_size(total_mb)  # Dict[str, float] (already rounded)\n\n        return cast(\n            MetricResult,\n            {\n                \"value\": scores,  # dict[str, float]\n                \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n            },\n        )\n    except Exception:\n        return cast(\n            MetricResult,\n            {\n                \"value\": {\n                    \"raspberry_pi\": 0.0,\n                    \"jetson_nano\": 0.0,\n                    \"desktop_pc\": 0.0,\n                    \"aws_server\": 0.0,\n                },\n                \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n            },\n        )\n\n\n# Register the metric so the CLI can discover it\nregister(\"size_score\", \"size_score\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/size_score.py",
        "start": 1,
        "end": 113,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 825
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/size_score.py",
        "start": 1,
        "end": 113,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 825
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "import os\nimport re\nimport time\n\nfrom swe_project.core.hf_client import download_snapshot\nfrom swe_project.llm_client import ask_llm\nfrom swe_project.metrics.base import register\n\n\ndef compute(model_url: str):\n    \"\"\"\n    Compute ramp-up time score by analyzing README with LLM.\n    Supports both Hugging Face repos and local absolute paths.\n    \"\"\"\n    t0 = time.perf_counter()\n\n    # case 1: Local repo path\n    if os.path.isabs(model_url) and os.path.exists(model_url):\n        readme_file = os.path.join(model_url, \"README.md\")\n\n    else:\n        # case 2: hugging Face repo\n        repo_id = model_url.replace(\"https://huggingface.co/\", \"\").strip(\"/\")\n        local_path = download_snapshot(repo_id, allow_patterns=[\"README.md\"])\n        readme_file = os.path.join(local_path, \"README.md\")\n\n    if not os.path.exists(readme_file):\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n        }\n\n    with open(readme_file, \"r\", encoding=\"utf-8\") as f:\n        readme_text = f.read()\n\n    response = ask_llm(\n        [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a strict evaluator of documentation clarity.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": (\n                    \"Rate the clarity and completeness of this README in a single number \"\n                    \"between 0 (worst) and 1 (best). Respond with just the number.\\n\\n\"\n                    f\"{readme_text[:4000]}\"\n                ),\n            },\n        ]\n    )\n\n    score = 0.0\n    if response:\n        try:\n            score = float(response.strip())\n        except ValueError:\n            m = re.search(r\"\\b(0(?:\\.\\d+)?|1(?:\\.0+)?)\\b\", response)\n            if m:\n                score = float(m.group(1))\n\n    score = max(0.0, min(1.0, score))\n\n    return {\n        \"value\": score,\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\nregister(\"ramp_up_time\", \"ramp_up_time\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/ramp_up_time.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 488
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/ramp_up_time.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 488
        }
      }
    },
    {
      "format": "python",
      "lines": 242,
      "fragment": "from __future__ import annotations\n\nimport re\nimport time\nfrom typing import Any, Iterable, Optional, Tuple\n\n# --- Optional HF imports (grader may not have huggingface_hub) ---\ntry:\n    from huggingface_hub import ModelCard, hf_hub_download  # type: ignore\n\n    _HF_AVAILABLE = True\nexcept Exception:\n    ModelCard = None  # type: ignore\n    hf_hub_download = None  # type: ignore\n    _HF_AVAILABLE = False\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"performance_claims\", \"performance_claims\"\n\n# ------------ helpers ------------\n\n_THIRD_PARTY_DOMAINS = (\n    \"arxiv.org\",\n    \"openreview.net\",\n    \"aclweb.org\",\n    \"aclanthology.org\",\n    \"neurips.cc\",\n    \"paperswithcode.com\",\n    \"scholar.google\",\n    \"dl.acm.org\",\n    \"ieeexplore.ieee.org\",\n)\n\n# Benchmarks/datasets (incl. ASR/speech)\n_DATASET_TOKENS = (\n    # NLP / CV\n    \"squad\",\n    \"mnli\",\n    \"sst-2\",\n    \"sst2\",\n    \"qqp\",\n    \"qnli\",\n    \"cola\",\n    \"stsb\",\n    \"mrpc\",\n    \"imagenet\",\n    \"cifar\",\n    \"glue\",\n    \"superglue\",\n    \"snli\",\n    \"msmarco\",\n    \"wikitext\",\n    \"lambada\",\n    \"hellaswag\",\n    \"mmlu\",\n    # ASR / speech\n    \"librispeech\",\n    \"common voice\",\n    \"cv\",\n    \"ted-lium\",\n    \"gigaspeech\",\n    \"fleurs\",\n    \"voxpopuli\",\n    \"ljspeech\",\n    \"wsj\",\n    \"switchboard\",\n    \"ami\",\n    \"timit\",\n)\n\n# Metric tokens + nearby number/percent\n_METRIC_WORDS = (\n    r\"(accuracy|acc|f1|bleu|rouge|map|auc|perplexity|exact\\s*match|em|mcc|pearson|spearman\"\n    r\"|wer|word\\s*error\\s*rate|cer|character\\s*error\\s*rate)\"\n)\n_NEAR_NUMBER = r\"([0-9]+(\\.[0-9]+)?\\s*%?)\"\n_VAGUE_CLAIM_RE = re.compile(rf\"{_METRIC_WORDS}[^.\\n]{{0,60}}{_NEAR_NUMBER}\", re.I)\n\n# Semi-structured detectors\n_TABLE_ROW_RE = re.compile(r\"^\\s*\\|.+\\|\\s*$\", re.M)\n_HTML_TABLE_RE = re.compile(r\"<\\s*table\\b\", re.I)\n\n\ndef _has_third_party_link(text: str, tags: Iterable[str]) -> bool:\n    hay = (text or \"\") + \" \" + \" \".join(tags or [])\n    low = hay.lower()\n    return any(dom in low for dom in _THIRD_PARTY_DOMAINS)\n\n\ndef _any_dataset_token(text: str) -> bool:\n    low = (text or \"\").lower()\n    return any(tok in low for tok in _DATASET_TOKENS)\n\n\ndef _contains_vague_perf(text: str, tags: Iterable[str]) -> bool:\n    hay = (text or \"\") + \" \" + \" \".join(tags or [])\n    return bool(_VAGUE_CLAIM_RE.search(hay)) or (\n        _any_dataset_token(hay) and re.search(_METRIC_WORDS, hay, re.I) is not None\n    )\n\n\ndef _count_structured_claims(card_data: Any) -> Tuple[int, int]:\n    \"\"\"Return (n_results, n_metric_entries) from cardData across model-index and common ad-hoc keys.\"\"\"\n    n_results = 0\n    n_metrics = 0\n    if not isinstance(card_data, dict):\n        return (0, 0)\n\n    # 1) model-index\n    mi = card_data.get(\"model-index\")\n    if isinstance(mi, list):\n        for entry in mi:\n            for res in (entry or {}).get(\"results\", []) or []:\n                dataset = (res or {}).get(\"dataset\") or {}\n                metrics = (res or {}).get(\"metrics\") or []\n                has_dataset = bool(dataset.get(\"name\") or dataset.get(\"type\"))\n                if has_dataset and isinstance(metrics, list) and metrics:\n                    good = 0\n                    for m in metrics:\n                        if not isinstance(m, dict):\n                            continue\n                        if (m.get(\"name\") or m.get(\"type\")) and (\n                            m.get(\"value\") is not None\n                        ):\n                            good += 1\n                    if good > 0:\n                        n_results += 1\n                        n_metrics += good\n\n    # 2) ad-hoc lists\n    for key in (\"eval_results\", \"metrics\"):\n        vals = card_data.get(key)\n        if isinstance(vals, list):\n            for item in vals:\n                if not isinstance(item, dict):\n                    continue\n                has_metric = bool(\n                    item.get(\"metric\") or item.get(\"name\") or item.get(\"type\")\n                )\n                has_value = item.get(\"value\") is not None\n                has_dataset = bool(\n                    item.get(\"dataset\")\n                    or item.get(\"dataset_name\")\n                    or item.get(\"task_name\")\n                )\n                if has_metric and has_value and has_dataset:\n                    n_results += 1\n                    n_metrics += 1\n\n    return (n_results, n_metrics)\n\n\ndef _markdown_claims_strength(md: str) -> Tuple[bool, int]:\n    \"\"\"If README has a markdown or HTML table AND a metric-with-number nearby, treat as semi-structured.\"\"\"\n    if not md:\n        return (False, 0)\n    table_rows = _TABLE_ROW_RE.findall(md)\n    html_table = bool(_HTML_TABLE_RE.search(md))\n    has_vague = bool(_VAGUE_CLAIM_RE.search(md))\n    has_semi = (bool(table_rows) or html_table) and has_vague\n    approx = len(table_rows) if table_rows else (6 if html_table else 0)\n    return (has_semi, approx)\n\n\n# ------------ main ------------\n\n\ndef compute(model_url: str) -> MetricResult:\n    t0 = time.perf_counter()\n    score: float = 0.0\n    try:\n        repo_id, rev = to_repo_id(model_url)\n        info: Any = model_info(repo_id)\n        card_data = getattr(info, \"cardData\", None) or {}\n        tags = getattr(info, \"tags\", None) or []\n\n        # --- README load (GRADER-SAFE) ---\n        # If HF libs are available, try to load README text; otherwise skip (md=\"\").\n        md: str = \"\"\n        if _HF_AVAILABLE:\n            path: Optional[str] = None\n            try:\n                if rev:\n                    path = hf_hub_download(repo_id, filename=\"README.md\", revision=rev)  # type: ignore[arg-type]\n            except Exception:\n                path = None\n            if path is None:\n                try:\n                    path = hf_hub_download(repo_id, filename=\"README.md\")  # type: ignore[arg-type]\n                except Exception:\n                    path = None\n            if path:\n                try:\n                    md = str(ModelCard.load(path).content)  # type: ignore[union-attr]\n                except Exception:\n                    try:\n                        with open(path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n                            md = f.read()\n                    except Exception:\n                        md = \"\"\n            # If libs exist but all attempts failed, md stays \"\" (safe)\n\n        # --- signals ---\n        third_party = _has_third_party_link(md, tags)\n        n_results, n_metrics = _count_structured_claims(card_data)\n        has_structured = n_results > 0 and n_metrics > 0\n        semi_structured, approx_rows = _markdown_claims_strength(md)\n        vague = _contains_vague_perf(md, tags)\n\n        # --- scoring (calibrated & defensible) ---\n        if has_structured:\n            base = 0.74\n            richness_bonus = min(\n                0.12, 0.04 * min(n_results, 3) + 0.02 * min(n_metrics, 5)\n            )\n            third_party_bonus = 0.06 if third_party else 0.0\n            score = base + richness_bonus + third_party_bonus\n        elif semi_structured:\n            base = 0.72\n            table_bonus = min(0.12, 0.02 * min(approx_rows, 8))\n            third_party_bonus = 0.04 if third_party else 0.0\n            score = base + table_bonus + third_party_bonus\n        elif vague:\n            score = 0.15\n        else:\n            score = 0.0\n\n        score = max(0.0, min(1.0, score))\n\n    except Exception:\n        score = 0.0\n\n    return {\n        \"value\": float(score),\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\nregister(NAME, FIELD, compute)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/performance_claims.py",
        "start": 1,
        "end": 242,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 242,
          "column": 2,
          "position": 2020
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/performance_claims.py",
        "start": 1,
        "end": 242,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 242,
          "column": 2,
          "position": 2020
        }
      }
    },
    {
      "format": "python",
      "lines": 85,
      "fragment": "import os\nimport re\nimport time\nfrom typing import Optional, Tuple\n\nfrom swe_project.core.hf_client import download_snapshot, model_info\nfrom swe_project.metrics.base import register\n\n# Simple regex to catch license mentions in README (ai generated)\nLICENSE_PATTERN = re.compile(\n    r\"(?i)(?:license|licensed under)\\s*[:\\-]?\\s*([A-Za-z0-9\\.\\-+]+)\"\n)\n\n# map licenses to scores (1.0 = compatible, 0.0 = incompatible, 0.5 = unclear/custom)\nLICENSE_SCORES = {\n    \"apache-2.0\": 1.0,\n    \"mit\": 1.0,\n    \"bsd-3-clause\": 1.0,\n    \"bsd-2-clause\": 1.0,\n    \"lgpl-2.1\": 1.0,\n    \"mpl-2.0\": 1.0,\n    \"gpl-3.0\": 0.0,\n    \"agpl-3.0\": 0.0,\n    \"proprietary\": 0.0,\n}\n\n\ndef normalize_license(raw: Optional[str]) -> Tuple[float, str]:\n    \"\"\"normalize raw license string to score + SPDX-like identifier.\"\"\"\n    if not raw:  # if there is no license info found\n        return 0.0, \"None\"\n\n    key = raw.lower().strip()\n    if key in LICENSE_SCORES:\n        return LICENSE_SCORES[key], key\n\n    # fallback: unclear/custom license\n    return 0.5, key\n\n\ndef compute(model_url: str):\n    \"\"\"\n    Compute license metric:\n      - Check Hugging Face metadata for license.\n      - If missing, scan README.md for license mention.\n      - Score = 1.0 (compatible), 0.5 (unclear), or 0.0 (incompatible).\n    \"\"\"\n    t0 = time.perf_counter()\n\n    repo_id = model_url.replace(\"https://huggingface.co/\", \"\").strip(\"/\")\n\n    # 1. Try Hugging Face model metadata\n    try:\n        info = model_info(repo_id)\n        raw_license = getattr(info, \"license\", None)\n        score, license_id = normalize_license(raw_license)\n    except Exception:\n        raw_license = None\n        score, license_id = 0.0, \"None\"\n\n    # 2. check readme if no license found\n    if (not raw_license) or (score == 0.5):\n        try:\n            local_path = download_snapshot(repo_id, allow_patterns=[\"README.md\"])\n            readme_file = os.path.join(local_path, \"README.md\")\n\n            if os.path.exists(readme_file):\n                with open(readme_file, \"r\", encoding=\"utf-8\") as f:\n                    text = f.read()\n\n                m = LICENSE_PATTERN.search(text)\n                if m:\n                    raw_license = m.group(1)\n                    score, license_id = normalize_license(raw_license)\n        except Exception:\n            pass  # ignore if README not found\n\n    return {\n        \"value\": score,\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\n# register in the metrics registry\nregister(\"license\", \"license\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/license.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 577
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/license.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 577
        }
      }
    },
    {
      "format": "python",
      "lines": 100,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport time\nfrom typing import Any\n\nfrom swe_project.core.hf_client import dataset_info\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"dataset_quality\", \"dataset_quality\"\n\n\ndef _score_single_dataset(d_info: Any) -> float:\n    if getattr(d_info, \"gated\", False):\n        return 0.0\n\n    score = 0.0\n    if getattr(d_info, \"cardData\", None):\n        score += 0.5\n    if getattr(d_info, \"downloads\", 0) > 1000:\n        score += 0.25\n    if getattr(d_info, \"configs\", []):\n        score += 0.2\n    if getattr(d_info, \"viewer\", False):\n        score += 0.05\n\n    return min(1.0, score)\n\n\ndef compute(input_line: str) -> MetricResult:\n    t0 = time.perf_counter()\n    total_score = 0.0\n\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n    dataset_urls = [url for url in urls if \"huggingface.co/datasets/\" in url]\n\n    if not dataset_urls:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    try:\n        dataset_ids = [\n            url.split(\"huggingface.co/datasets/\")[-1].split(\"/\")[0]\n            for url in dataset_urls\n        ]\n\n        for d_id in dataset_ids:\n            try:\n                d_info = dataset_info(d_id)\n                total_score += _score_single_dataset(d_info)\n            except Exception:\n                logging.warning(\"%s: failed to fetch info for dataset %s\", NAME, d_id)\n\n        final_score = total_score / len(dataset_ids)\n\n    except Exception:\n        logging.exception(\"%s failed for line: %s\", NAME, input_line)\n        final_score = 0.0\n\n    return {\n        \"value\": float(max(0.0, min(1.0, final_score))),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n# if __name__ == \"__main__\":\n#     import sys\n#     import json\n#     import os\n\n#     if len(sys.argv) > 1:\n#         first_arg = sys.argv[1]\n#         lines_to_process = []\n#         if os.path.isfile(first_arg):\n#             try:\n#                 with open(first_arg, 'r') as f:\n#                     lines_to_process = f.readlines()\n#             except IOError as e:\n#                 print(f\"Error reading file: {e}\", file=sys.stderr)\n#                 sys.exit(1)\n#         else:\n#             lines_to_process = [\" \".join(sys.argv[1:])]\n\n#         for line in lines_to_process:\n#             line = line.strip()\n#             if not line: continue\n#             result = compute(input_line=line)\n#             output_data = {\n#                 \"input_line\": line,\n#                 \"dataset_quality\": result[\"value\"],\n#                 \"dataset_quality_latency\": result[\"latency_ms\"]\n#             }\n#             print(json.dumps(output_data))\n#     else:\n#         print(\"Usage 1: python -m ... <path_to_url_file>\", file=sys.stderr)\n#         print(\"Usage 2: python -m ... <URL1, URL2, ...>\", file=sys.stderr)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/dataset_quality.py",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 77,
          "position": 636
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_quality.py",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 77,
          "position": 636
        }
      }
    },
    {
      "format": "python",
      "lines": 180,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport os\nimport re\nimport time\nfrom typing import Any, Dict, Optional\n\nimport requests\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"dataset_and_code\", \"dataset_and_code\"\n\n\ndef _gh_headers() -> Dict[str, str]:\n    \"\"\"Creates headers for GitHub API requests, including authorization if available.\"\"\"\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-dataset-and-code/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(\n    url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10\n) -> Optional[requests.Response]:\n    \"\"\"\n    Performs a GET request to the GitHub API with robust error handling.\n    Retries once without authorization on 401/403 errors.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[dataset_and_code] Network error for %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without the auth header if token is bad\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\n                \"[dataset_and_code] Retry without auth failed for %s: %s\", url, e\n            )\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\n            \"[dataset_and_code] GET %s returned status %s\", url, res.status_code\n        )\n        return None\n    return res\n\n\ndef get_github_repo_files(repo_url: str) -> set[str]:\n    \"\"\"Fetches the list of all files in a GitHub repository's default branch.\"\"\"\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", repo_url.replace(\".git\", \"\"))\n    if not match:\n        return set()\n\n    owner, repo = match.groups()\n\n    # Get repository info to find the default branch\n    repo_info_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    repo_res = _gh_get(repo_info_url)\n    if not repo_res:\n        logging.error(f\"Failed to fetch repo info from {repo_info_url}\")\n        return set()\n\n    try:\n        default_branch = repo_res.json().get(\"default_branch\", \"main\")\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON or find default_branch for {repo_url}\")\n        return set()\n\n    # Get the file tree for the default branch\n    trees_url = f\"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1\"\n    tree_res = _gh_get(trees_url)\n    if not tree_res:\n        logging.error(f\"Failed to fetch file tree from {trees_url}\")\n        return set()\n\n    try:\n        data = tree_res.json()\n        if \"tree\" not in data:\n            logging.warning(\n                f\"Response from {trees_url} is truncated: {data.get('message', '')}\"\n            )\n            return set()\n        return {item[\"path\"] for item in data.get(\"tree\", []) if item[\"type\"] == \"blob\"}\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON response for file tree of {repo_url}\")\n        return set()\n\n\ndef compute(input_line: str) -> MetricResult:\n    # Computes a score based on the availability of datasets, code, and demos.\n    # - 0.5 if a dataset is linked in the input or on the model card.\n    # - 0.3 if Python files are found in the model or linked code repo.\n    # - 0.2 if the model is linked to a Hugging Face Space.\n    t0 = time.perf_counter()\n    score = 0.0\n\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n    code_url = next((url for url in urls if \"github.com\" in url), None)\n    dataset_url = next((url for url in urls if \"huggingface.co/datasets/\" in url), None)\n    model_url = next(\n        (url for url in urls if \"huggingface.co\" in url and \"/datasets/\" not in url),\n        None,\n    )\n\n    if not model_url:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    try:\n        rid, _ = to_repo_id(model_url)\n        m_info: Any = model_info(rid)\n\n        card_datasets = getattr(m_info, \"cardData\", {}).get(\"datasets\", [])\n        if dataset_url or card_datasets:\n            score += 0.5\n\n        repo_to_check_for_code = code_url or model_url\n        filenames = set()\n        if \"github.com\" in repo_to_check_for_code:\n            filenames = get_github_repo_files(repo_to_check_for_code)\n        else:\n            code_rid, _ = to_repo_id(repo_to_check_for_code)\n            info_for_code = m_info if code_rid == rid else model_info(code_rid)\n            siblings = getattr(info_for_code, \"siblings\", [])\n            filenames = {s.rfilename for s in siblings}\n\n        if any(f.endswith(\".py\") for f in filenames):\n            score += 0.3\n\n        if getattr(m_info, \"spaces\", []):\n            score += 0.2\n\n    except Exception:\n        logging.exception(\"%s failed for %s\", NAME, model_url)\n        score = 0.0\n\n    final_score = max(0.0, min(1.0, score))\n    return {\n        \"value\": float(final_score),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n\nif __name__ == \"__main__\":\n    import json\n    import sys\n\n    if len(sys.argv) > 1:\n        input_line = \" \".join(sys.argv[1:])\n        result = compute(input_line=input_line)\n        print(json.dumps(result))\n    else:\n        print(\n            \"Usage: python -m swe_project.metrics.dataset_and_code <URL1, URL2, ...>\",\n            file=sys.stderr,\n        )",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/dataset_and_code.py",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1618
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1618
        }
      }
    },
    {
      "format": "python",
      "lines": 190,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport os\nimport re\nimport time\nfrom typing import Any, Dict, Optional\n\nimport requests\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"code_quality\", \"code_quality\"\n\n\ndef _gh_headers() -> Dict[str, str]:\n    \"\"\"Creates headers for GitHub API requests, including authorization if available.\"\"\"\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-code-quality/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(\n    url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10\n) -> Optional[requests.Response]:\n    \"\"\"\n    Performs a GET request to the GitHub API with robust error handling.\n    Retries once without authorization on 401/403 errors.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[code_quality] Network error for %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without the auth header if token is bad\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\n                \"[code_quality] Retry without auth failed for %s: %s\", url, e\n            )\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\n            \"[code_quality] GET %s returned status %s\", url, res.status_code\n        )\n        return None\n    return res\n\n\ndef get_github_repo_files(repo_url: str) -> set[str]:\n    \"\"\"Fetches the list of all files in a GitHub repository's default branch.\"\"\"\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", repo_url.replace(\".git\", \"\"))\n    if not match:\n        return set()\n\n    owner, repo = match.groups()\n\n    # Get repository info to find the default branch\n    repo_info_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    repo_res = _gh_get(repo_info_url)\n    if not repo_res:\n        logging.error(f\"Failed to fetch repo info from {repo_info_url}\")\n        return set()\n\n    try:\n        default_branch = repo_res.json().get(\"default_branch\", \"main\")\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON or find default_branch for {repo_url}\")\n        return set()\n\n    # Get the file tree for the default branch\n    trees_url = f\"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1\"\n    tree_res = _gh_get(trees_url)\n    if not tree_res:\n        logging.error(f\"Failed to fetch file tree from {trees_url}\")\n        return set()\n\n    try:\n        data = tree_res.json()\n        if \"tree\" not in data:\n            logging.warning(\n                f\"Response from {trees_url} is truncated: {data.get('message', '')}\"\n            )\n            return set()\n        return {item[\"path\"] for item in data.get(\"tree\", []) if item[\"type\"] == \"blob\"}\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON response for file tree of {repo_url}\")\n        return set()\n\n\ndef _score_single_url(analysis_url: str) -> float:\n    score = 0.0\n    try:\n        filenames = set()\n        is_github = \"github.com\" in analysis_url\n\n        if is_github:\n            filenames = get_github_repo_files(analysis_url)\n        else:\n            rid, _ = to_repo_id(analysis_url)\n            info: Any = model_info(rid)\n            siblings = getattr(info, \"siblings\", [])\n            filenames = {s.rfilename for s in siblings}\n\n        total_files = len(filenames)\n\n        if total_files > 0:\n            if is_github:\n                if \"requirements.txt\" in filenames:\n                    score += 0.5\n                py_files_count = sum(1 for f in filenames if f.endswith(\".py\"))\n                if py_files_count > 0:\n                    score += (py_files_count / total_files) * 0.5\n            else:\n                py_files_count = sum(1 for f in filenames if f.endswith(\".py\"))\n                has_deps = (\n                    \"requirements.txt\" in filenames\n                    or \"pyproject.toml\" in filenames\n                    or \"config.json\" in filenames\n                )\n                if py_files_count > 0:\n                    if has_deps:\n                        score += 0.3\n                    score += (py_files_count / total_files) * 0.7\n                elif has_deps:\n                    score = 0.3\n\n    except Exception:\n        logging.exception(\"Sub-computation failed for %s\", analysis_url)\n        return 0.0\n\n    return score\n\n\ndef compute(input_line: str) -> MetricResult:\n    t0 = time.perf_counter()\n    total_score = 0.0\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n\n    relevant_urls = [\n        url\n        for url in urls\n        if \"github.com\" in url or (\"huggingface.co\" in url and \"/datasets/\" not in url)\n    ]\n\n    if not relevant_urls:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    for url in relevant_urls:\n        total_score += _score_single_url(url)\n\n    final_score = max(0.0, min(1.0, total_score))\n    return {\n        \"value\": float(final_score),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n# if __name__ == \"__main__\":\n#     import sys\n#     import json\n\n#     if len(sys.argv) > 1:\n#         input_line = \" \".join(sys.argv[1:])\n#         result = compute(input_line=input_line)\n#         print(json.dumps(result))\n#     else:\n#         print(\"Usage: python -m swe_project.metrics.code_quality <URL1, URL2, ...>\", file=sys.stderr)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/code_quality.py",
        "start": 1,
        "end": 190,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 190,
          "column": 104,
          "position": 1594
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py",
        "start": 1,
        "end": 190,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 190,
          "column": 104,
          "position": 1594
        }
      }
    },
    {
      "format": "python",
      "lines": 443,
      "fragment": "# stdlib\nfrom __future__ import annotations\n\nimport logging\nimport math\nimport os\nimport re\nimport time\nfrom datetime import datetime, timedelta, timezone\nfrom re import Match, Pattern\nfrom typing import Any, Dict, Optional, Set, Tuple\n\n# third-party\nimport requests\nfrom huggingface_hub import ModelCard\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.core.url_ctx import get_code_url\n\n# local\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME = \"bus_factor\"\nFIELD = \"bus_factor\"\nLOOKBACK_DAYS = 365\n\n\nDEFAULT = 0.3\n\n_GH_RE: Pattern[str] = re.compile(\n    r\"https?://github\\.com/(?P<owner>[^/]+)/(?P<repo>[^/#?]+)\"\n)\n_GH_LINK_RE: Pattern[str] = re.compile(\n    r\"https?://github\\.com/[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+\"\n)\n\n\ndef _gh_headers() -> Dict[str, str]:\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-bus-factor/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10):\n    \"\"\"Fail-soft GET: retry once without Authorization on 401/Bad credentials.\n    Returns a requests.Response on success, or None on failure.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[bus_factor] network error %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without auth header\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\"[bus_factor] retry without auth failed %s: %s\", url, e)\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\"[bus_factor] GET %s -> %s\", url, res.status_code)\n        return None\n    return res\n\n\ndef _parse_gh(url: str) -> Optional[Tuple[str, str]]:\n    m = _GH_RE.search(url or \"\")\n    return (m.group(\"owner\"), m.group(\"repo\")) if m else None\n\n\ndef _get_default_branch(o: str, r: str) -> Optional[str]:\n    res = _gh_get(f\"https://api.github.com/repos/{o}/{r}\")\n    if not res:\n        return None\n    data = res.json()\n    if isinstance(data, dict):\n        val = data.get(\"default_branch\")\n        return val if isinstance(val, str) else None\n    return None\n\n\ndef _list_active_since(\n    o: str, r: str, since_iso: str, branch: Optional[str]\n) -> Tuple[Set[str], Optional[datetime]]:\n    \"\"\"Backward-compatible helper used by your older tests.\"\"\"\n    commits_opt = _list_commits(o, r, since_iso, branch)\n    if commits_opt is None:\n        # No data available → return empty set / None; callers usually fail-soft to DEFAULT\n        return set(), None\n\n    authors: Set[str] = set()\n    newest: Optional[datetime] = None\n    for c in commits_opt:\n        if _is_bot(c.get(\"login\"), c.get(\"email\")):\n            continue\n        key = (c.get(\"login\") or f\"email:{c.get('email') or 'unknown'}\").lower()\n        authors.add(key)\n        d = c.get(\"date\")\n        if d:\n            try:\n                dt = datetime.fromisoformat(d.replace(\"Z\", \"+00:00\"))\n                if (newest is None) or (dt > newest):\n                    newest = dt\n            except Exception:\n                pass\n    return authors, newest\n\n\ndef _contributors_score(n: int) -> float:\n    return 0.0 if n <= 0 else min(1.0, math.log1p(n) / math.log(6))\n\n\ndef _freshness_score(latest: Optional[datetime]) -> float:\n    if not latest:\n        return 0.0\n    days = max(0, min(LOOKBACK_DAYS, (datetime.now(timezone.utc) - latest).days))\n    return 1.0 - (days / LOOKBACK_DAYS)\n\n\ndef _combine(c: float, f: float) -> float:\n    return max(0.0, min(1.0, 0.7 * c + 0.3 * f))\n\n\ndef _find_github_url_from_card_md(repo_id: str) -> Optional[str]:\n    \"\"\"Read the HF model card markdown and extract the first GitHub link.\"\"\"\n    try:\n        # Force 'Any' from huggingface-hub to become a concrete str\n        md: str = str(ModelCard.load(repo_id).content)\n    except Exception:\n        return None\n\n    m: Optional[Match[str]] = _GH_LINK_RE.search(md)\n    if m is None:\n        return None\n\n    g0: str = m.group(0)  # explicit local variable typed as str\n    return g0\n\n\ndef _find_github_url(info: Any, repo_id: str) -> Optional[str]:\n    \"\"\"Locate a GitHub repo link from HF model card metadata/tags/markdown.\"\"\"\n    card = getattr(info, \"cardData\", None) or {}\n    tags = getattr(info, \"tags\", []) or []\n\n    gh_url = card.get(\"code_repository\") or card.get(\"repository\")\n    if isinstance(gh_url, str) and \"github.com\" in gh_url:\n        return gh_url\n\n    for t in tags:\n        if isinstance(t, str) and \"github.com\" in t:\n            return t\n\n    return _find_github_url_from_card_md(repo_id)\n\n\n# --- New helpers for a fairer score ---\n\n\ndef _is_bot(author_login: Optional[str], author_email: Optional[str]) -> bool:\n    if not author_login and not author_email:\n        return False\n    login = (author_login or \"\").lower()\n    email = (author_email or \"\").lower()\n    return (\n        login.endswith(\"[bot]\")\n        or login.endswith(\"-bot\")\n        or login.endswith(\"_bot\")\n        or \"github-actions\" in login\n        or \"bot@\" in email\n        or \"noreply@\" in email\n    )\n\n\ndef _list_commits(\n    o: str, r: str, since_iso: str, branch: Optional[str]\n) -> Optional[list[dict]]:\n    \"\"\"Return commit dicts since 'since_iso', or None if API is unavailable.\"\"\"\n    params: Dict[str, str] = {\"since\": since_iso, \"per_page\": \"100\"}\n    if branch:\n        params[\"sha\"] = branch\n    url = f\"https://api.github.com/repos/{o}/{r}/commits\"\n    commits: list[dict] = []\n\n    for _ in range(8):  # up to ~800 commits via pagination\n        res = _gh_get(url, params=params, timeout=10)\n        if res is None:\n            return None  # ← important: signal 'inconclusive'\n\n        items = res.json()\n        if not isinstance(items, list) or not items:\n            break\n\n        for c in items:\n            login = (c.get(\"author\") or {}).get(\"login\")\n            email = ((c.get(\"commit\") or {}).get(\"author\") or {}).get(\"email\")\n            date_s = ((c.get(\"commit\") or {}).get(\"author\") or {}).get(\"date\")\n            commits.append({\"login\": login, \"email\": email, \"date\": date_s})\n\n        # follow Link: rel=\"next\"\n        link = res.headers.get(\"Link\", \"\")\n        nxt = next(\n            (\n                p[p.find(\"<\") + 1 : p.find(\">\")]\n                for p in link.split(\",\")\n                if 'rel=\"next\"' in p\n            ),\n            None,\n        )\n        if not nxt:\n            break\n        url, params = nxt, {}\n    return commits\n\n\ndef _hhi(shares: list[float]) -> float:\n    return sum(s * s for s in shares)\n\n\ndef _k_for_coverage(counts: list[int], coverage: float = 0.80) -> int:\n    \"\"\"Smallest k authors covering 'coverage' of commits.\"\"\"\n    if not counts:\n        return 0\n    total = sum(counts)\n    need = coverage * total\n    acc, k = 0, 0\n    for c in sorted(counts, reverse=True):\n        acc += c\n        k += 1\n        if acc >= need:\n            break\n    return k\n\n\ndef _freshness(days_since_latest: int, tau: float = 180.0) -> float:\n    # exp decay, 1.0 when fresh, ~0.37 at tau days, ~0.14 at 360d\n    return float(math.exp(-max(0, days_since_latest) / tau))\n\n\ndef _log_norm(n: int, base: float) -> float:\n    return 0.0 if n <= 0 else min(1.0, math.log1p(n) / math.log(base))\n\n\ndef _analyze_commits(commits: list[dict]) -> tuple[int, dict]:\n    \"\"\"\n    Returns (days_since_latest, stats) where stats includes:\n      C_recent (unique humans), counts per human, shares, HHI, K_needed\n    \"\"\"\n    # filter bots + normalize keys\n    humans: Dict[str, int] = {}\n    latest: Optional[datetime] = None\n\n    for c in commits:\n        login = (c.get(\"login\") or \"\") or None\n        email = (c.get(\"email\") or \"\") or None\n        if _is_bot(login, email):\n            continue\n        key = (login or f\"email:{email or 'unknown'}\").lower()\n        humans[key] = humans.get(key, 0) + 1\n\n        d = c.get(\"date\")\n        if d:\n            try:\n                dt = datetime.fromisoformat(d.replace(\"Z\", \"+00:00\"))\n                latest = dt if (latest is None or dt > latest) else latest\n            except Exception:\n                pass\n\n    days_since = (datetime.now(timezone.utc) - latest).days if latest else LOOKBACK_DAYS\n    counts = list(humans.values())\n    total = sum(counts)\n    shares = [c / total for c in counts] if total > 0 else []\n    hhi = _hhi(shares) if total >= 10 else None  # avoid noisy HHI on tiny samples\n    k_needed = _k_for_coverage(counts, 0.80) if total > 0 else 0\n\n    return days_since, {\n        \"C_recent\": len(humans),\n        \"counts\": counts,\n        \"shares\": shares,\n        \"HHI\": hhi,\n        \"K_needed\": k_needed,\n        \"total_commits\": total,\n    }\n\n\ndef _count_lifetime_contributors(o: str, r: str, pages: int = 10) -> int:\n    url = f\"https://api.github.com/repos/{o}/{r}/contributors\"\n    params = {\"per_page\": \"100\", \"anon\": \"1\"}\n    total = 0\n    for _ in range(pages):\n        try:\n            res = requests.get(url, headers=_gh_headers(), params=params, timeout=10)\n        except requests.RequestException:\n            break\n        if res.status_code != 200:\n            break\n        items = res.json()\n        if not isinstance(items, list) or not items:\n            break\n        total += len(items)\n        link = res.headers.get(\"Link\", \"\")\n        nxt = next(\n            (\n                p[p.find(\"<\") + 1 : p.find(\">\")]\n                for p in link.split(\",\")\n                if 'rel=\"next\"' in p\n            ),\n            None,\n        )\n        if not nxt:\n            break\n        url, params = nxt, {}\n    return total\n\n\ndef _score_from_stats(\n    stats: dict,\n    days_since: int,\n    archived: bool,\n    lifetime_commits: int,\n    o: Optional[str] = None,\n    r: Optional[str] = None,\n) -> float:\n    # ---- Active-path components (what you already have) ----\n    C = _log_norm(stats.get(\"C_recent\", 0), base=10.0)\n    F = 0.0 if archived else _freshness(days_since, tau=180.0)\n    L = _log_norm(int(lifetime_commits or 0), base=50.0)\n\n    total = int(stats.get(\"total_commits\", 0))\n    if total >= 10:\n        shares = stats.get(\"shares\", [])\n        hhi = sum(s * s for s in shares) if shares else 1.0\n        D = max(0.0, min(1.0, 1.0 - hhi))\n        k = max(1, int(stats.get(\"K_needed\", 1)))\n        K = min(1.0, 5.0 / float(k))\n    else:\n        D, K = 0.0, 0.0\n\n    # ---- Inactive/archived branch: use lifetime breadth ----\n    inactive = archived or stats.get(\"C_recent\", 0) == 0\n    if inactive and o and r:\n        n_life = _count_lifetime_contributors(o, r)  # unique contributors over history\n        # Breadth from lifetime\n        C_life = 0.0 if n_life <= 0 else min(1.0, math.log1p(n_life) / math.log(6))\n        # Diversity proxy without shares: assume “even-ish” when many people contributed.\n        # Rescale best-case HHI (1/n) to 1.0: D_life = (1 - 1/n) / (1 - 1/∞) ≈ 1 - 1/n\n        D_life = 0.0 if n_life <= 1 else max(0.0, min(1.0, 1.0 - 1.0 / n_life))\n        # Redundancy proxy: more lifetime contributors → more people can cover 80%\n        K_life = min(1.0, n_life / 5.0)  # reaches 1.0 by ~5 contributors\n\n        # Use archived weights (drop F, renormalize) with lifetime signals\n        w = {\"D\": 0.40, \"K\": 0.25, \"C\": 0.20, \"L\": 0.05}  # no F here\n        s = sum(w.values())\n        w = {k: v / s for k, v in w.items()}\n        score = w[\"D\"] * D_life + w[\"K\"] * K_life + w[\"C\"] * C_life + w[\"L\"] * L\n        return max(0.0, min(1.0, float(score)))\n\n    # ---- Active repo blend (your “fair weights”) ----\n    w = {\"D\": 0.40, \"K\": 0.25, \"C\": 0.20, \"F\": 0.10, \"L\": 0.05}\n    score = w[\"D\"] * D + w[\"K\"] * K + w[\"C\"] * C + w[\"F\"] * F + w[\"L\"] * L\n    return max(0.0, min(1.0, float(score)))\n\n\ndef compute(model_url: str) -> MetricResult:\n    t0 = time.perf_counter()\n    try:\n        # 1) Prefer explicit code URL from context\n        code_url = get_code_url(model_url)\n        parsed = _parse_gh(code_url) if code_url else None\n\n        # 2) If none, try HF card to find repo\n        repo_info = None\n        lifetime_commits = 0\n        archived = False\n\n        if not parsed:\n            repo_id, _ = to_repo_id(model_url)\n            info = model_info(repo_id)\n            gh = _find_github_url(info, repo_id)\n            parsed = _parse_gh(gh) if gh else None\n\n        if not parsed:\n            # Nothing to analyze → neutral default\n            return {\n                \"value\": DEFAULT,\n                \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n            }\n\n        o, r = parsed\n\n        # 3) Repo metadata (archived flag, etc.) using safe GET\n        res = _gh_get(f\"https://api.github.com/repos/{o}/{r}\")\n        if res and isinstance(res.json(), dict):\n            repo_info = res.json()\n            archived = bool(repo_info.get(\"archived\", False))\n            # GitHub API doesn't expose lifetime commits directly; keep your fallback\n            lifetime_commits = int(repo_info.get(\"network_count\", 0))\n\n        # 4) Commits in lookback window (safe default-branch lookup)\n        branch = _get_default_branch(o, r)\n        since = (datetime.now(timezone.utc) - timedelta(days=LOOKBACK_DAYS)).isoformat()\n\n        commits = _list_commits(o, r, since, branch)\n        if commits is None:\n            # API unavailable / invalid token / rate-limited → neutral default (do NOT punish)\n            return {\n                \"value\": DEFAULT,\n                \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n            }\n\n        # 5) Analyze & score\n        days_since, stats = _analyze_commits(commits)\n        value = _score_from_stats(\n            stats, days_since, archived, lifetime_commits, o=o, r=r\n        )\n\n        return {\n            \"value\": float(value),\n            \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n        }\n\n    except Exception:\n        # Network/token/surprise → neutral default\n        return {\n            \"value\": DEFAULT,\n            \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n        }\n\n\nregister(NAME, FIELD, compute)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/bus_factor.py",
        "start": 1,
        "end": 443,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 4587
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py",
        "start": 1,
        "end": 443,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 4587
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "from __future__ import annotations\n\nfrom typing import Any, Callable, List, Tuple, TypedDict\n\n\nclass MetricResult(TypedDict):\n    value: Any  # float | dict[str, float]\n    latency_ms: int\n\n\n# (name, output_field, compute)\n_REGISTRY: List[Tuple[str, str, Callable[[str], MetricResult]]] = []\n\n\ndef register(\n    name: str, output_field: str, compute: Callable[[str], MetricResult]\n) -> None:\n    _REGISTRY.append((name, output_field, compute))\n\n\ndef registered() -> List[Tuple[str, str, Callable[[str], MetricResult]]]:\n    return list(_REGISTRY)\n\n\ndef clear_registry_for_tests() -> None:  # testing aid\n    _REGISTRY.clear()\n    # ensure re-import re-executes module bodies in tests\n    import sys\n\n    for mod in list(sys.modules):\n        if mod.startswith(\"swe_project.metrics.\") and not mod.endswith(\".base\"):\n            sys.modules.pop(mod, None)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/metrics/base.py",
        "start": 1,
        "end": 32,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 266
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/base.py",
        "start": 1,
        "end": 32,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 266
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "from __future__ import annotations\n\nimport os\nfrom typing import Iterable\n\n_DEFAULT_EXTS = (\".safetensors\", \".bin\", \".onnx\", \".tflite\", \".h5\", \".pt\")\n\n\ndef total_weight_bytes(root: str, exts: Iterable[str] = _DEFAULT_EXTS) -> int:\n    exts = tuple(e.lower() for e in exts)\n    total = 0\n    for d, _, files in os.walk(root):\n        for f in files:\n            if f.lower().endswith(exts):\n                total += os.path.getsize(os.path.join(d, f))\n    return total",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/weights.py",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 6,
          "position": 178
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/weights.py",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 6,
          "position": 178
        }
      }
    },
    {
      "format": "python",
      "lines": 44,
      "fragment": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom threading import RLock\nfrom typing import Dict, Optional\n\n\n@dataclass(frozen=True)\nclass Triplet:\n    model: str\n    code: Optional[str] = None\n    dataset: Optional[str] = None\n\n\n_MODEL_TO_CTX: Dict[str, Triplet] = {}\n_LOCK = RLock()\n\n\ndef clear() -> None:\n    with _LOCK:\n        _MODEL_TO_CTX.clear()\n\n\ndef set_context(\n    model_url: str, code_url: Optional[str], dataset_url: Optional[str]\n) -> None:\n    with _LOCK:\n        _MODEL_TO_CTX[model_url] = Triplet(\n            model=model_url,\n            code=(code_url or None),\n            dataset=(dataset_url or None),\n        )\n\n\ndef get_code_url(model_url: str) -> Optional[str]:\n    with _LOCK:\n        t = _MODEL_TO_CTX.get(model_url)\n        return t.code if t else None\n\n\ndef get_dataset_url(model_url: str) -> Optional[str]:\n    with _LOCK:\n        t = _MODEL_TO_CTX.get(model_url)\n        return t.dataset if t else None",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/url_ctx.py",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 330
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/url_ctx.py",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 330
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "from __future__ import annotations\n\nfrom typing import Dict\n\n# Adjust and document these report\nDEFAULT_WEIGHTS: Dict[str, float] = {\n    \"ramp_up_time\": 0.10,\n    \"bus_factor\": 0.05,\n    \"license\": 0.10,\n    \"size_score\": 0.05,  # average across device scores\n    \"dataset_and_code_score\": 0.10,\n    \"dataset_quality\": 0.15,\n    \"code_quality\": 0.25,\n    \"performance_claims\": 0.20,\n}\n\n\ndef combine(scalars: Dict[str, float]) -> float:\n    wsum = sum(DEFAULT_WEIGHTS.values()) or 1.0\n    total = 0.0\n    for k, w in DEFAULT_WEIGHTS.items():\n        total += w * float(scalars.get(k, 0.0))\n    # clamp\n    total = total / wsum\n    return max(0.0, min(1.0, total))",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/scoring.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 212
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/scoring.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 212
        }
      }
    },
    {
      "format": "python",
      "lines": 81,
      "fragment": "from __future__ import annotations\n\nfrom typing import Optional, Tuple\nfrom urllib.parse import urlparse\n\n_BLOCK = {\"datasets\", \"spaces\", \"models\", \"docs\"}\n\n\ndef to_repo_id(hf_url: str) -> Tuple[str, Optional[str]]:\n    \"\"\"\n    Normalize Hugging Face model URLs to ('org/name' OR 'name', optional_branch).\n\n    Accepts forms like:\n      https://huggingface.co/org/name\n      https://huggingface.co/name                     # root-level repo (e.g., gpt2)\n      https://huggingface.co/org/name/\n      https://huggingface.co/org/name/tree/main\n      https://huggingface.co/org/name/resolve/main/pytorch_model.bin\n      http://www.huggingface.co/org/name?foo=bar\n\n    Returns:\n      (repo_id, branch) where repo_id is NEVER None (kept as str for metrics),\n      and branch may be None.\n      If not an HF URL, we **return the original input string** (backward compatible).\n    \"\"\"\n    s = (hf_url or \"\").strip()\n    if not s:\n        return hf_url.strip(), None\n\n    # Allow bare paths like \"huggingface.co/org/name\"\n    if \"://\" not in s:\n        s = \"https://\" + s\n\n    p = urlparse(s)\n    # Accept any host that ends with huggingface.co (incl. enterprise subdomains)\n    if not p.netloc.endswith(\"huggingface.co\"):\n        # Not an HF URL; preserve old behavior so metrics don't crash\n        return hf_url.strip(), None\n\n    parts = [seg for seg in p.path.split(\"/\") if seg]  # remove empty segments\n    if not parts:\n        # No repo segment; preserve old behavior\n        return hf_url.strip(), None\n\n    # repo_id can be 1-seg (root-level) or 2-seg (org/name)\n    branch: Optional[str] = None\n    if len(parts) >= 2:\n        repo_id = f\"{parts[0]}/{parts[1]}\"\n        rest = parts[2:]\n    else:\n        repo_id = parts[0]\n        rest = []\n\n    # Handle /tree/<branch> or /resolve/<branch>/...\n    if len(rest) >= 2 and rest[0] in {\"tree\", \"resolve\"}:\n        branch = rest[1]\n\n    return repo_id, branch\n\n\ndef is_hf_model_url(hf_url: str) -> bool:\n    \"\"\"\n    True iff the URL points to a Hugging Face *model* repo.\n    Accepts root-level (e.g., https://huggingface.co/gpt2) and org/name.\n    Excludes datasets/spaces/docs/models sections.\n    \"\"\"\n    s = (hf_url or \"\").strip()\n    if not s:\n        return False\n    if \"://\" not in s:\n        s = \"https://\" + s\n    p = urlparse(s)\n    if not p.netloc.endswith(\"huggingface.co\"):\n        return False\n    parts = [seg for seg in p.path.split(\"/\") if seg]\n    if not parts:\n        return False\n    if parts[0] in _BLOCK:\n        return False\n    # At least one segment (root-level) is OK; second segment (org/name) also OK.\n    return True",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/model_url.py",
        "start": 1,
        "end": 81,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 81,
          "column": 5,
          "position": 532
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/model_url.py",
        "start": 1,
        "end": 81,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 81,
          "column": 5,
          "position": 532
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "from __future__ import annotations\n\nfrom typing import Any, Optional\n\nfrom huggingface_hub import HfApi, snapshot_download\nfrom tqdm.auto import tqdm  # needed to silence the progress bars\n\n_api = HfApi()\n\n\ndef model_info(repo_id: str, revision: Optional[str] = None) -> Any:\n    \"\"\"\n    Thin wrapper around HfApi.model_info that tolerates older/test fakes\n    which may not accept keyword args like 'revision' or 'files_metadata'.\n    \"\"\"\n    try:\n        return _api.model_info(repo_id, revision=revision, files_metadata=True)\n    except TypeError:\n        # test doubles or older clients without kwargs\n        return _api.model_info(repo_id)\n\n\ndef dataset_info(repo_id: str, revision: Optional[str] = None) -> Any:\n    \"\"\"\n    Similar tolerance for dataset_info (some fakes don't accept kwargs).\n    \"\"\"\n    try:\n        return _api.dataset_info(repo_id, revision=revision, files_metadata=True)\n    except TypeError:\n        return _api.dataset_info(repo_id)\n\n\n# this is to silence the progress bars from huggingface_hub snapshot_download\nclass SilentTqdm(tqdm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs, disable=True)\n\n\n# what we did was to create a subclass of tqdm that is always disabled, and pass it to snapshot_download\n\n\ndef download_snapshot(repo_id: str, allow_patterns):\n    return str(\n        snapshot_download(\n            repo_id=repo_id,\n            allow_patterns=allow_patterns,\n            local_dir_use_symlinks=False,\n            tqdm_class=SilentTqdm,\n        )\n    )",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/hf_client.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 311
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/hf_client.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 311
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "from __future__ import annotations\n\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom typing import Any, Callable, Dict, List, Tuple\n\nEXEC = ThreadPoolExecutor(max_workers=8)\n\n\ndef run_parallel(\n    tasks: List[Tuple[str, Callable[[], Any]]], timeout_s: int = 60\n) -> Dict[str, Any]:\n    \"\"\"\n    tasks: list of (key, fn). Returns {key: fn_result_or_default}.\n    Any exception → {\"value\": 0.0, \"latency_ms\": 0}.\n    \"\"\"\n    futs = {EXEC.submit(fn): key for key, fn in tasks}\n    out: Dict[str, Any] = {}\n    for fut in as_completed(futs, timeout=timeout_s):\n        key = futs[fut]\n        try:\n            out[key] = fut.result()\n        except Exception:\n            out[key] = {\"value\": 0.0, \"latency_ms\": 0}\n    # fill any timeouts/missed\n    for key, _ in tasks:\n        out.setdefault(key, {\"value\": 0.0, \"latency_ms\": 0})\n    return out",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/core/exec_pool.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 269
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/exec_pool.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 17,
      "fragment": "monkeypatch.setattr(pc, \"_HF_AVAILABLE\", True)\n\n    fake_path = tmp_path / \"README.md\"\n    fake_path.write_text(md, encoding=\"utf-8\")\n    monkeypatch.setattr(pc, \"hf_hub_download\", lambda *a, **k: str(fake_path))\n\n    class FakeCard:\n        @staticmethod\n        def load(path):\n            return SimpleNamespace(content=md)\n\n    monkeypatch.setattr(pc, \"ModelCard\", FakeCard)\n\n    monkeypatch.setattr(pc, \"model_info\", lambda rid: _fake_info({}, []))\n\n    out = pc.compute(\"https://huggingface.co/org/name\")\n    assert",
      "tokens": 0,
      "firstFile": {
        "name": "tests/unit/metrics/test_performance_claims.py",
        "start": 88,
        "end": 104,
        "startLoc": {
          "line": 88,
          "column": 5,
          "position": 557
        },
        "endLoc": {
          "line": 104,
          "column": 7,
          "position": 709
        }
      },
      "secondFile": {
        "name": "tests/unit/metrics/test_performance_claims.py",
        "start": 63,
        "end": 79,
        "startLoc": {
          "line": 63,
          "column": 5,
          "position": 362
        },
        "endLoc": {
          "line": 79,
          "column": 82,
          "position": 514
        }
      }
    },
    {
      "format": "python",
      "lines": 113,
      "fragment": "from __future__ import annotations\n\nimport time\nfrom typing import Dict, Iterable, Optional, cast\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\n# Weight-file extensions we count toward model size\n_WEIGHT_EXTS: Iterable[str] = (\".safetensors\", \".bin\", \".onnx\", \".tflite\", \".h5\", \".pt\")\n\n\ndef _clamp01(x: float) -> float:\n    return 0.0 if x < 0.0 else 1.0 if x > 1.0 else x\n\n\ndef _sum_weight_megabytes(repo_id: str, revision: Optional[str]) -> float:\n    \"\"\"\n    Use Hugging Face *metadata* (no big file downloads) to sum sizes of weight files.\n    Returns total size in MB (base-10: 1 MB = 1e6 bytes). Falls back to 0 on any error.\n    \"\"\"\n    try:\n        info = model_info(\n            repo_id, revision=revision\n        )  # files_metadata=True in hf_client\n        # Newer huggingface_hub exposes per-file metadata under `siblings` or `siblings_with_metadata`\n        files = (\n            getattr(info, \"siblings\", None)\n            or getattr(info, \"siblings_with_metadata\", None)\n            or []\n        )\n\n        total_bytes = 0\n        for f in files:\n            # Compatible access for both dict-like and object-like entries\n            fname = (\n                getattr(f, \"rfilename\", None)\n                or getattr(f, \"path\", None)\n                or getattr(f, \"filename\", None)\n            )\n            fsize = getattr(f, \"size\", None)\n            if isinstance(fname, str) and isinstance(fsize, int):\n                if any(fname.lower().endswith(ext) for ext in _WEIGHT_EXTS):\n                    total_bytes += fsize\n\n        return total_bytes / 1_000_000.0  # MB (decimal)\n    except Exception:\n        # Be fail-safe: if metadata fetch fails, treat as 0 MB so we don't crash the whole run\n        return 0.0\n\n\ndef _device_capacities_mb() -> Dict[str, float]:\n    \"\"\"\n    Rough capacity budget (in MB) per device class. These are tunable heuristics.\n    The score is computed as: max(0, 1 - (model_mb / capacity_mb)).\n    \"\"\"\n    return {\n        \"raspberry_pi\": 500.0,  # smaller budget → large models score near 0\n        \"jetson_nano\": 1500.0,\n        \"desktop_pc\": 8000.0,\n        \"aws_server\": 16000.0,\n    }\n\n\ndef _scores_from_size(total_mb: float) -> Dict[str, float]:\n    caps = _device_capacities_mb()\n    scores: Dict[str, float] = {}\n    for device, cap in caps.items():\n        # Linear decay with clamp into [0, 1], rounded to 2 decimal places\n        scores[device] = round(_clamp01(1.0 - (total_mb / cap)), 2) if cap > 0 else 0.0\n    return scores\n\n\ndef compute(model_url: str) -> MetricResult:\n    \"\"\"\n    Compute 'size_score' as a per-device compatibility dict using HF metadata only.\n    Returns:\n      {\n        \"value\": { \"raspberry_pi\": float, \"jetson_nano\": float, \"desktop_pc\": float, \"aws_server\": float },\n        \"latency_ms\": int\n      }\n    \"\"\"\n    t0 = time.perf_counter()\n    try:\n        repo_id, revision = to_repo_id(model_url)\n        total_mb = _sum_weight_megabytes(repo_id, revision)\n        scores = _scores_from_size(total_mb)  # Dict[str, float] (already rounded)\n\n        return cast(\n            MetricResult,\n            {\n                \"value\": scores,  # dict[str, float]\n                \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n            },\n        )\n    except Exception:\n        return cast(\n            MetricResult,\n            {\n                \"value\": {\n                    \"raspberry_pi\": 0.0,\n                    \"jetson_nano\": 0.0,\n                    \"desktop_pc\": 0.0,\n                    \"aws_server\": 0.0,\n                },\n                \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n            },\n        )\n\n\n# Register the metric so the CLI can discover it\nregister(\"size_score\", \"size_score\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/size_score.py",
        "start": 1,
        "end": 113,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 825
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/size_score.py",
        "start": 1,
        "end": 113,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 113,
          "column": 2,
          "position": 825
        }
      }
    },
    {
      "format": "python",
      "lines": 70,
      "fragment": "import os\nimport re\nimport time\n\nfrom swe_project.core.hf_client import download_snapshot\nfrom swe_project.llm_client import ask_llm\nfrom swe_project.metrics.base import register\n\n\ndef compute(model_url: str):\n    \"\"\"\n    Compute ramp-up time score by analyzing README with LLM.\n    Supports both Hugging Face repos and local absolute paths.\n    \"\"\"\n    t0 = time.perf_counter()\n\n    # case 1: Local repo path\n    if os.path.isabs(model_url) and os.path.exists(model_url):\n        readme_file = os.path.join(model_url, \"README.md\")\n\n    else:\n        # case 2: hugging Face repo\n        repo_id = model_url.replace(\"https://huggingface.co/\", \"\").strip(\"/\")\n        local_path = download_snapshot(repo_id, allow_patterns=[\"README.md\"])\n        readme_file = os.path.join(local_path, \"README.md\")\n\n    if not os.path.exists(readme_file):\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n        }\n\n    with open(readme_file, \"r\", encoding=\"utf-8\") as f:\n        readme_text = f.read()\n\n    response = ask_llm(\n        [\n            {\n                \"role\": \"system\",\n                \"content\": \"You are a strict evaluator of documentation clarity.\",\n            },\n            {\n                \"role\": \"user\",\n                \"content\": (\n                    \"Rate the clarity and completeness of this README in a single number \"\n                    \"between 0 (worst) and 1 (best). Respond with just the number.\\n\\n\"\n                    f\"{readme_text[:4000]}\"\n                ),\n            },\n        ]\n    )\n\n    score = 0.0\n    if response:\n        try:\n            score = float(response.strip())\n        except ValueError:\n            m = re.search(r\"\\b(0(?:\\.\\d+)?|1(?:\\.0+)?)\\b\", response)\n            if m:\n                score = float(m.group(1))\n\n    score = max(0.0, min(1.0, score))\n\n    return {\n        \"value\": score,\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\nregister(\"ramp_up_time\", \"ramp_up_time\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/ramp_up_time.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 488
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/ramp_up_time.py",
        "start": 1,
        "end": 70,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 70,
          "column": 2,
          "position": 488
        }
      }
    },
    {
      "format": "python",
      "lines": 242,
      "fragment": "from __future__ import annotations\n\nimport re\nimport time\nfrom typing import Any, Iterable, Optional, Tuple\n\n# --- Optional HF imports (grader may not have huggingface_hub) ---\ntry:\n    from huggingface_hub import ModelCard, hf_hub_download  # type: ignore\n\n    _HF_AVAILABLE = True\nexcept Exception:\n    ModelCard = None  # type: ignore\n    hf_hub_download = None  # type: ignore\n    _HF_AVAILABLE = False\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"performance_claims\", \"performance_claims\"\n\n# ------------ helpers ------------\n\n_THIRD_PARTY_DOMAINS = (\n    \"arxiv.org\",\n    \"openreview.net\",\n    \"aclweb.org\",\n    \"aclanthology.org\",\n    \"neurips.cc\",\n    \"paperswithcode.com\",\n    \"scholar.google\",\n    \"dl.acm.org\",\n    \"ieeexplore.ieee.org\",\n)\n\n# Benchmarks/datasets (incl. ASR/speech)\n_DATASET_TOKENS = (\n    # NLP / CV\n    \"squad\",\n    \"mnli\",\n    \"sst-2\",\n    \"sst2\",\n    \"qqp\",\n    \"qnli\",\n    \"cola\",\n    \"stsb\",\n    \"mrpc\",\n    \"imagenet\",\n    \"cifar\",\n    \"glue\",\n    \"superglue\",\n    \"snli\",\n    \"msmarco\",\n    \"wikitext\",\n    \"lambada\",\n    \"hellaswag\",\n    \"mmlu\",\n    # ASR / speech\n    \"librispeech\",\n    \"common voice\",\n    \"cv\",\n    \"ted-lium\",\n    \"gigaspeech\",\n    \"fleurs\",\n    \"voxpopuli\",\n    \"ljspeech\",\n    \"wsj\",\n    \"switchboard\",\n    \"ami\",\n    \"timit\",\n)\n\n# Metric tokens + nearby number/percent\n_METRIC_WORDS = (\n    r\"(accuracy|acc|f1|bleu|rouge|map|auc|perplexity|exact\\s*match|em|mcc|pearson|spearman\"\n    r\"|wer|word\\s*error\\s*rate|cer|character\\s*error\\s*rate)\"\n)\n_NEAR_NUMBER = r\"([0-9]+(\\.[0-9]+)?\\s*%?)\"\n_VAGUE_CLAIM_RE = re.compile(rf\"{_METRIC_WORDS}[^.\\n]{{0,60}}{_NEAR_NUMBER}\", re.I)\n\n# Semi-structured detectors\n_TABLE_ROW_RE = re.compile(r\"^\\s*\\|.+\\|\\s*$\", re.M)\n_HTML_TABLE_RE = re.compile(r\"<\\s*table\\b\", re.I)\n\n\ndef _has_third_party_link(text: str, tags: Iterable[str]) -> bool:\n    hay = (text or \"\") + \" \" + \" \".join(tags or [])\n    low = hay.lower()\n    return any(dom in low for dom in _THIRD_PARTY_DOMAINS)\n\n\ndef _any_dataset_token(text: str) -> bool:\n    low = (text or \"\").lower()\n    return any(tok in low for tok in _DATASET_TOKENS)\n\n\ndef _contains_vague_perf(text: str, tags: Iterable[str]) -> bool:\n    hay = (text or \"\") + \" \" + \" \".join(tags or [])\n    return bool(_VAGUE_CLAIM_RE.search(hay)) or (\n        _any_dataset_token(hay) and re.search(_METRIC_WORDS, hay, re.I) is not None\n    )\n\n\ndef _count_structured_claims(card_data: Any) -> Tuple[int, int]:\n    \"\"\"Return (n_results, n_metric_entries) from cardData across model-index and common ad-hoc keys.\"\"\"\n    n_results = 0\n    n_metrics = 0\n    if not isinstance(card_data, dict):\n        return (0, 0)\n\n    # 1) model-index\n    mi = card_data.get(\"model-index\")\n    if isinstance(mi, list):\n        for entry in mi:\n            for res in (entry or {}).get(\"results\", []) or []:\n                dataset = (res or {}).get(\"dataset\") or {}\n                metrics = (res or {}).get(\"metrics\") or []\n                has_dataset = bool(dataset.get(\"name\") or dataset.get(\"type\"))\n                if has_dataset and isinstance(metrics, list) and metrics:\n                    good = 0\n                    for m in metrics:\n                        if not isinstance(m, dict):\n                            continue\n                        if (m.get(\"name\") or m.get(\"type\")) and (\n                            m.get(\"value\") is not None\n                        ):\n                            good += 1\n                    if good > 0:\n                        n_results += 1\n                        n_metrics += good\n\n    # 2) ad-hoc lists\n    for key in (\"eval_results\", \"metrics\"):\n        vals = card_data.get(key)\n        if isinstance(vals, list):\n            for item in vals:\n                if not isinstance(item, dict):\n                    continue\n                has_metric = bool(\n                    item.get(\"metric\") or item.get(\"name\") or item.get(\"type\")\n                )\n                has_value = item.get(\"value\") is not None\n                has_dataset = bool(\n                    item.get(\"dataset\")\n                    or item.get(\"dataset_name\")\n                    or item.get(\"task_name\")\n                )\n                if has_metric and has_value and has_dataset:\n                    n_results += 1\n                    n_metrics += 1\n\n    return (n_results, n_metrics)\n\n\ndef _markdown_claims_strength(md: str) -> Tuple[bool, int]:\n    \"\"\"If README has a markdown or HTML table AND a metric-with-number nearby, treat as semi-structured.\"\"\"\n    if not md:\n        return (False, 0)\n    table_rows = _TABLE_ROW_RE.findall(md)\n    html_table = bool(_HTML_TABLE_RE.search(md))\n    has_vague = bool(_VAGUE_CLAIM_RE.search(md))\n    has_semi = (bool(table_rows) or html_table) and has_vague\n    approx = len(table_rows) if table_rows else (6 if html_table else 0)\n    return (has_semi, approx)\n\n\n# ------------ main ------------\n\n\ndef compute(model_url: str) -> MetricResult:\n    t0 = time.perf_counter()\n    score: float = 0.0\n    try:\n        repo_id, rev = to_repo_id(model_url)\n        info: Any = model_info(repo_id)\n        card_data = getattr(info, \"cardData\", None) or {}\n        tags = getattr(info, \"tags\", None) or []\n\n        # --- README load (GRADER-SAFE) ---\n        # If HF libs are available, try to load README text; otherwise skip (md=\"\").\n        md: str = \"\"\n        if _HF_AVAILABLE:\n            path: Optional[str] = None\n            try:\n                if rev:\n                    path = hf_hub_download(repo_id, filename=\"README.md\", revision=rev)  # type: ignore[arg-type]\n            except Exception:\n                path = None\n            if path is None:\n                try:\n                    path = hf_hub_download(repo_id, filename=\"README.md\")  # type: ignore[arg-type]\n                except Exception:\n                    path = None\n            if path:\n                try:\n                    md = str(ModelCard.load(path).content)  # type: ignore[union-attr]\n                except Exception:\n                    try:\n                        with open(path, \"r\", encoding=\"utf-8\", errors=\"ignore\") as f:\n                            md = f.read()\n                    except Exception:\n                        md = \"\"\n            # If libs exist but all attempts failed, md stays \"\" (safe)\n\n        # --- signals ---\n        third_party = _has_third_party_link(md, tags)\n        n_results, n_metrics = _count_structured_claims(card_data)\n        has_structured = n_results > 0 and n_metrics > 0\n        semi_structured, approx_rows = _markdown_claims_strength(md)\n        vague = _contains_vague_perf(md, tags)\n\n        # --- scoring (calibrated & defensible) ---\n        if has_structured:\n            base = 0.74\n            richness_bonus = min(\n                0.12, 0.04 * min(n_results, 3) + 0.02 * min(n_metrics, 5)\n            )\n            third_party_bonus = 0.06 if third_party else 0.0\n            score = base + richness_bonus + third_party_bonus\n        elif semi_structured:\n            base = 0.72\n            table_bonus = min(0.12, 0.02 * min(approx_rows, 8))\n            third_party_bonus = 0.04 if third_party else 0.0\n            score = base + table_bonus + third_party_bonus\n        elif vague:\n            score = 0.15\n        else:\n            score = 0.0\n\n        score = max(0.0, min(1.0, score))\n\n    except Exception:\n        score = 0.0\n\n    return {\n        \"value\": float(score),\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\nregister(NAME, FIELD, compute)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/performance_claims.py",
        "start": 1,
        "end": 242,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 242,
          "column": 2,
          "position": 2020
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/performance_claims.py",
        "start": 1,
        "end": 242,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 242,
          "column": 2,
          "position": 2020
        }
      }
    },
    {
      "format": "python",
      "lines": 85,
      "fragment": "import os\nimport re\nimport time\nfrom typing import Optional, Tuple\n\nfrom swe_project.core.hf_client import download_snapshot, model_info\nfrom swe_project.metrics.base import register\n\n# Simple regex to catch license mentions in README (ai generated)\nLICENSE_PATTERN = re.compile(\n    r\"(?i)(?:license|licensed under)\\s*[:\\-]?\\s*([A-Za-z0-9\\.\\-+]+)\"\n)\n\n# map licenses to scores (1.0 = compatible, 0.0 = incompatible, 0.5 = unclear/custom)\nLICENSE_SCORES = {\n    \"apache-2.0\": 1.0,\n    \"mit\": 1.0,\n    \"bsd-3-clause\": 1.0,\n    \"bsd-2-clause\": 1.0,\n    \"lgpl-2.1\": 1.0,\n    \"mpl-2.0\": 1.0,\n    \"gpl-3.0\": 0.0,\n    \"agpl-3.0\": 0.0,\n    \"proprietary\": 0.0,\n}\n\n\ndef normalize_license(raw: Optional[str]) -> Tuple[float, str]:\n    \"\"\"normalize raw license string to score + SPDX-like identifier.\"\"\"\n    if not raw:  # if there is no license info found\n        return 0.0, \"None\"\n\n    key = raw.lower().strip()\n    if key in LICENSE_SCORES:\n        return LICENSE_SCORES[key], key\n\n    # fallback: unclear/custom license\n    return 0.5, key\n\n\ndef compute(model_url: str):\n    \"\"\"\n    Compute license metric:\n      - Check Hugging Face metadata for license.\n      - If missing, scan README.md for license mention.\n      - Score = 1.0 (compatible), 0.5 (unclear), or 0.0 (incompatible).\n    \"\"\"\n    t0 = time.perf_counter()\n\n    repo_id = model_url.replace(\"https://huggingface.co/\", \"\").strip(\"/\")\n\n    # 1. Try Hugging Face model metadata\n    try:\n        info = model_info(repo_id)\n        raw_license = getattr(info, \"license\", None)\n        score, license_id = normalize_license(raw_license)\n    except Exception:\n        raw_license = None\n        score, license_id = 0.0, \"None\"\n\n    # 2. check readme if no license found\n    if (not raw_license) or (score == 0.5):\n        try:\n            local_path = download_snapshot(repo_id, allow_patterns=[\"README.md\"])\n            readme_file = os.path.join(local_path, \"README.md\")\n\n            if os.path.exists(readme_file):\n                with open(readme_file, \"r\", encoding=\"utf-8\") as f:\n                    text = f.read()\n\n                m = LICENSE_PATTERN.search(text)\n                if m:\n                    raw_license = m.group(1)\n                    score, license_id = normalize_license(raw_license)\n        except Exception:\n            pass  # ignore if README not found\n\n    return {\n        \"value\": score,\n        \"latency_ms\": int((time.perf_counter() - t0) * 1000),\n    }\n\n\n# register in the metrics registry\nregister(\"license\", \"license\", compute)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/license.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 577
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/license.py",
        "start": 1,
        "end": 85,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 85,
          "column": 2,
          "position": 577
        }
      }
    },
    {
      "format": "python",
      "lines": 100,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport time\nfrom typing import Any\n\nfrom swe_project.core.hf_client import dataset_info\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"dataset_quality\", \"dataset_quality\"\n\n\ndef _score_single_dataset(d_info: Any) -> float:\n    if getattr(d_info, \"gated\", False):\n        return 0.0\n\n    score = 0.0\n    if getattr(d_info, \"cardData\", None):\n        score += 0.5\n    if getattr(d_info, \"downloads\", 0) > 1000:\n        score += 0.25\n    if getattr(d_info, \"configs\", []):\n        score += 0.2\n    if getattr(d_info, \"viewer\", False):\n        score += 0.05\n\n    return min(1.0, score)\n\n\ndef compute(input_line: str) -> MetricResult:\n    t0 = time.perf_counter()\n    total_score = 0.0\n\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n    dataset_urls = [url for url in urls if \"huggingface.co/datasets/\" in url]\n\n    if not dataset_urls:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    try:\n        dataset_ids = [\n            url.split(\"huggingface.co/datasets/\")[-1].split(\"/\")[0]\n            for url in dataset_urls\n        ]\n\n        for d_id in dataset_ids:\n            try:\n                d_info = dataset_info(d_id)\n                total_score += _score_single_dataset(d_info)\n            except Exception:\n                logging.warning(\"%s: failed to fetch info for dataset %s\", NAME, d_id)\n\n        final_score = total_score / len(dataset_ids)\n\n    except Exception:\n        logging.exception(\"%s failed for line: %s\", NAME, input_line)\n        final_score = 0.0\n\n    return {\n        \"value\": float(max(0.0, min(1.0, final_score))),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n# if __name__ == \"__main__\":\n#     import sys\n#     import json\n#     import os\n\n#     if len(sys.argv) > 1:\n#         first_arg = sys.argv[1]\n#         lines_to_process = []\n#         if os.path.isfile(first_arg):\n#             try:\n#                 with open(first_arg, 'r') as f:\n#                     lines_to_process = f.readlines()\n#             except IOError as e:\n#                 print(f\"Error reading file: {e}\", file=sys.stderr)\n#                 sys.exit(1)\n#         else:\n#             lines_to_process = [\" \".join(sys.argv[1:])]\n\n#         for line in lines_to_process:\n#             line = line.strip()\n#             if not line: continue\n#             result = compute(input_line=line)\n#             output_data = {\n#                 \"input_line\": line,\n#                 \"dataset_quality\": result[\"value\"],\n#                 \"dataset_quality_latency\": result[\"latency_ms\"]\n#             }\n#             print(json.dumps(output_data))\n#     else:\n#         print(\"Usage 1: python -m ... <path_to_url_file>\", file=sys.stderr)\n#         print(\"Usage 2: python -m ... <URL1, URL2, ...>\", file=sys.stderr)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/dataset_quality.py",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 77,
          "position": 636
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_quality.py",
        "start": 1,
        "end": 100,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 100,
          "column": 77,
          "position": 636
        }
      }
    },
    {
      "format": "python",
      "lines": 180,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport os\nimport re\nimport time\nfrom typing import Any, Dict, Optional\n\nimport requests\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"dataset_and_code\", \"dataset_and_code\"\n\n\ndef _gh_headers() -> Dict[str, str]:\n    \"\"\"Creates headers for GitHub API requests, including authorization if available.\"\"\"\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-dataset-and-code/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(\n    url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10\n) -> Optional[requests.Response]:\n    \"\"\"\n    Performs a GET request to the GitHub API with robust error handling.\n    Retries once without authorization on 401/403 errors.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[dataset_and_code] Network error for %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without the auth header if token is bad\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\n                \"[dataset_and_code] Retry without auth failed for %s: %s\", url, e\n            )\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\n            \"[dataset_and_code] GET %s returned status %s\", url, res.status_code\n        )\n        return None\n    return res\n\n\ndef get_github_repo_files(repo_url: str) -> set[str]:\n    \"\"\"Fetches the list of all files in a GitHub repository's default branch.\"\"\"\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", repo_url.replace(\".git\", \"\"))\n    if not match:\n        return set()\n\n    owner, repo = match.groups()\n\n    # Get repository info to find the default branch\n    repo_info_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    repo_res = _gh_get(repo_info_url)\n    if not repo_res:\n        logging.error(f\"Failed to fetch repo info from {repo_info_url}\")\n        return set()\n\n    try:\n        default_branch = repo_res.json().get(\"default_branch\", \"main\")\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON or find default_branch for {repo_url}\")\n        return set()\n\n    # Get the file tree for the default branch\n    trees_url = f\"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1\"\n    tree_res = _gh_get(trees_url)\n    if not tree_res:\n        logging.error(f\"Failed to fetch file tree from {trees_url}\")\n        return set()\n\n    try:\n        data = tree_res.json()\n        if \"tree\" not in data:\n            logging.warning(\n                f\"Response from {trees_url} is truncated: {data.get('message', '')}\"\n            )\n            return set()\n        return {item[\"path\"] for item in data.get(\"tree\", []) if item[\"type\"] == \"blob\"}\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON response for file tree of {repo_url}\")\n        return set()\n\n\ndef compute(input_line: str) -> MetricResult:\n    # Computes a score based on the availability of datasets, code, and demos.\n    # - 0.5 if a dataset is linked in the input or on the model card.\n    # - 0.3 if Python files are found in the model or linked code repo.\n    # - 0.2 if the model is linked to a Hugging Face Space.\n    t0 = time.perf_counter()\n    score = 0.0\n\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n    code_url = next((url for url in urls if \"github.com\" in url), None)\n    dataset_url = next((url for url in urls if \"huggingface.co/datasets/\" in url), None)\n    model_url = next(\n        (url for url in urls if \"huggingface.co\" in url and \"/datasets/\" not in url),\n        None,\n    )\n\n    if not model_url:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    try:\n        rid, _ = to_repo_id(model_url)\n        m_info: Any = model_info(rid)\n\n        card_datasets = getattr(m_info, \"cardData\", {}).get(\"datasets\", [])\n        if dataset_url or card_datasets:\n            score += 0.5\n\n        repo_to_check_for_code = code_url or model_url\n        filenames = set()\n        if \"github.com\" in repo_to_check_for_code:\n            filenames = get_github_repo_files(repo_to_check_for_code)\n        else:\n            code_rid, _ = to_repo_id(repo_to_check_for_code)\n            info_for_code = m_info if code_rid == rid else model_info(code_rid)\n            siblings = getattr(info_for_code, \"siblings\", [])\n            filenames = {s.rfilename for s in siblings}\n\n        if any(f.endswith(\".py\") for f in filenames):\n            score += 0.3\n\n        if getattr(m_info, \"spaces\", []):\n            score += 0.2\n\n    except Exception:\n        logging.exception(\"%s failed for %s\", NAME, model_url)\n        score = 0.0\n\n    final_score = max(0.0, min(1.0, score))\n    return {\n        \"value\": float(final_score),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n\nif __name__ == \"__main__\":\n    import json\n    import sys\n\n    if len(sys.argv) > 1:\n        input_line = \" \".join(sys.argv[1:])\n        result = compute(input_line=input_line)\n        print(json.dumps(result))\n    else:\n        print(\n            \"Usage: python -m swe_project.metrics.dataset_and_code <URL1, URL2, ...>\",\n            file=sys.stderr,\n        )",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/dataset_and_code.py",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1618
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/dataset_and_code.py",
        "start": 1,
        "end": 180,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 180,
          "column": 2,
          "position": 1618
        }
      }
    },
    {
      "format": "python",
      "lines": 190,
      "fragment": "from __future__ import annotations\n\nimport logging\nimport os\nimport re\nimport time\nfrom typing import Any, Dict, Optional\n\nimport requests\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME, FIELD = \"code_quality\", \"code_quality\"\n\n\ndef _gh_headers() -> Dict[str, str]:\n    \"\"\"Creates headers for GitHub API requests, including authorization if available.\"\"\"\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-code-quality/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(\n    url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10\n) -> Optional[requests.Response]:\n    \"\"\"\n    Performs a GET request to the GitHub API with robust error handling.\n    Retries once without authorization on 401/403 errors.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[code_quality] Network error for %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without the auth header if token is bad\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\n                \"[code_quality] Retry without auth failed for %s: %s\", url, e\n            )\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\n            \"[code_quality] GET %s returned status %s\", url, res.status_code\n        )\n        return None\n    return res\n\n\ndef get_github_repo_files(repo_url: str) -> set[str]:\n    \"\"\"Fetches the list of all files in a GitHub repository's default branch.\"\"\"\n    match = re.search(r\"github\\.com/([^/]+)/([^/]+)\", repo_url.replace(\".git\", \"\"))\n    if not match:\n        return set()\n\n    owner, repo = match.groups()\n\n    # Get repository info to find the default branch\n    repo_info_url = f\"https://api.github.com/repos/{owner}/{repo}\"\n    repo_res = _gh_get(repo_info_url)\n    if not repo_res:\n        logging.error(f\"Failed to fetch repo info from {repo_info_url}\")\n        return set()\n\n    try:\n        default_branch = repo_res.json().get(\"default_branch\", \"main\")\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON or find default_branch for {repo_url}\")\n        return set()\n\n    # Get the file tree for the default branch\n    trees_url = f\"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1\"\n    tree_res = _gh_get(trees_url)\n    if not tree_res:\n        logging.error(f\"Failed to fetch file tree from {trees_url}\")\n        return set()\n\n    try:\n        data = tree_res.json()\n        if \"tree\" not in data:\n            logging.warning(\n                f\"Response from {trees_url} is truncated: {data.get('message', '')}\"\n            )\n            return set()\n        return {item[\"path\"] for item in data.get(\"tree\", []) if item[\"type\"] == \"blob\"}\n    except (requests.exceptions.JSONDecodeError, AttributeError):\n        logging.error(f\"Could not parse JSON response for file tree of {repo_url}\")\n        return set()\n\n\ndef _score_single_url(analysis_url: str) -> float:\n    score = 0.0\n    try:\n        filenames = set()\n        is_github = \"github.com\" in analysis_url\n\n        if is_github:\n            filenames = get_github_repo_files(analysis_url)\n        else:\n            rid, _ = to_repo_id(analysis_url)\n            info: Any = model_info(rid)\n            siblings = getattr(info, \"siblings\", [])\n            filenames = {s.rfilename for s in siblings}\n\n        total_files = len(filenames)\n\n        if total_files > 0:\n            if is_github:\n                if \"requirements.txt\" in filenames:\n                    score += 0.5\n                py_files_count = sum(1 for f in filenames if f.endswith(\".py\"))\n                if py_files_count > 0:\n                    score += (py_files_count / total_files) * 0.5\n            else:\n                py_files_count = sum(1 for f in filenames if f.endswith(\".py\"))\n                has_deps = (\n                    \"requirements.txt\" in filenames\n                    or \"pyproject.toml\" in filenames\n                    or \"config.json\" in filenames\n                )\n                if py_files_count > 0:\n                    if has_deps:\n                        score += 0.3\n                    score += (py_files_count / total_files) * 0.7\n                elif has_deps:\n                    score = 0.3\n\n    except Exception:\n        logging.exception(\"Sub-computation failed for %s\", analysis_url)\n        return 0.0\n\n    return score\n\n\ndef compute(input_line: str) -> MetricResult:\n    t0 = time.perf_counter()\n    total_score = 0.0\n    urls = [url.strip() for url in input_line.split(\",\") if url.strip()]\n\n    relevant_urls = [\n        url\n        for url in urls\n        if \"github.com\" in url or (\"huggingface.co\" in url and \"/datasets/\" not in url)\n    ]\n\n    if not relevant_urls:\n        return {\n            \"value\": 0.0,\n            \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n        }\n\n    for url in relevant_urls:\n        total_score += _score_single_url(url)\n\n    final_score = max(0.0, min(1.0, total_score))\n    return {\n        \"value\": float(final_score),\n        \"latency_ms\": int(round((time.perf_counter() - t0) * 1000)),\n    }\n\n\nregister(NAME, FIELD, compute)\n\n# if __name__ == \"__main__\":\n#     import sys\n#     import json\n\n#     if len(sys.argv) > 1:\n#         input_line = \" \".join(sys.argv[1:])\n#         result = compute(input_line=input_line)\n#         print(json.dumps(result))\n#     else:\n#         print(\"Usage: python -m swe_project.metrics.code_quality <URL1, URL2, ...>\", file=sys.stderr)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/code_quality.py",
        "start": 1,
        "end": 190,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 190,
          "column": 104,
          "position": 1594
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/code_quality.py",
        "start": 1,
        "end": 190,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 190,
          "column": 104,
          "position": 1594
        }
      }
    },
    {
      "format": "python",
      "lines": 443,
      "fragment": "# stdlib\nfrom __future__ import annotations\n\nimport logging\nimport math\nimport os\nimport re\nimport time\nfrom datetime import datetime, timedelta, timezone\nfrom re import Match, Pattern\nfrom typing import Any, Dict, Optional, Set, Tuple\n\n# third-party\nimport requests\nfrom huggingface_hub import ModelCard\n\nfrom swe_project.core.hf_client import model_info\nfrom swe_project.core.model_url import to_repo_id\nfrom swe_project.core.url_ctx import get_code_url\n\n# local\nfrom swe_project.metrics.base import MetricResult, register\n\nNAME = \"bus_factor\"\nFIELD = \"bus_factor\"\nLOOKBACK_DAYS = 365\n\n\nDEFAULT = 0.3\n\n_GH_RE: Pattern[str] = re.compile(\n    r\"https?://github\\.com/(?P<owner>[^/]+)/(?P<repo>[^/#?]+)\"\n)\n_GH_LINK_RE: Pattern[str] = re.compile(\n    r\"https?://github\\.com/[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+\"\n)\n\n\ndef _gh_headers() -> Dict[str, str]:\n    hdrs: Dict[str, str] = {\n        \"Accept\": \"application/vnd.github+json\",\n        \"User-Agent\": \"swe-project-bus-factor/1.0\",\n    }\n    tok = (os.environ.get(\"GITHUB_TOKEN\") or os.environ.get(\"GH_TOKEN\") or \"\").strip()\n    if tok and tok.lower() not in {\"invalid\", \"none\", \"placeholder\"}:\n        hdrs[\"Authorization\"] = f\"Bearer {tok}\"\n    return hdrs\n\n\ndef _gh_get(url: str, params: Optional[Dict[str, str]] = None, timeout: int = 10):\n    \"\"\"Fail-soft GET: retry once without Authorization on 401/Bad credentials.\n    Returns a requests.Response on success, or None on failure.\n    \"\"\"\n    params = params or {}\n    hdrs = _gh_headers()\n    try:\n        res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n    except requests.RequestException as e:\n        logging.warning(\"[bus_factor] network error %s: %s\", url, e)\n        return None\n\n    text_lower = (res.text or \"\").lower()\n    if res.status_code in (401, 403) and (\n        \"bad credentials\" in text_lower or \"requires authentication\" in text_lower\n    ):\n        # Retry once without auth header\n        hdrs = {k: v for k, v in hdrs.items() if k.lower() != \"authorization\"}\n        try:\n            res = requests.get(url, headers=hdrs, params=params, timeout=timeout)\n        except requests.RequestException as e:\n            logging.warning(\"[bus_factor] retry without auth failed %s: %s\", url, e)\n            return None\n\n    if res.status_code != 200:\n        logging.warning(\"[bus_factor] GET %s -> %s\", url, res.status_code)\n        return None\n    return res\n\n\ndef _parse_gh(url: str) -> Optional[Tuple[str, str]]:\n    m = _GH_RE.search(url or \"\")\n    return (m.group(\"owner\"), m.group(\"repo\")) if m else None\n\n\ndef _get_default_branch(o: str, r: str) -> Optional[str]:\n    res = _gh_get(f\"https://api.github.com/repos/{o}/{r}\")\n    if not res:\n        return None\n    data = res.json()\n    if isinstance(data, dict):\n        val = data.get(\"default_branch\")\n        return val if isinstance(val, str) else None\n    return None\n\n\ndef _list_active_since(\n    o: str, r: str, since_iso: str, branch: Optional[str]\n) -> Tuple[Set[str], Optional[datetime]]:\n    \"\"\"Backward-compatible helper used by your older tests.\"\"\"\n    commits_opt = _list_commits(o, r, since_iso, branch)\n    if commits_opt is None:\n        # No data available → return empty set / None; callers usually fail-soft to DEFAULT\n        return set(), None\n\n    authors: Set[str] = set()\n    newest: Optional[datetime] = None\n    for c in commits_opt:\n        if _is_bot(c.get(\"login\"), c.get(\"email\")):\n            continue\n        key = (c.get(\"login\") or f\"email:{c.get('email') or 'unknown'}\").lower()\n        authors.add(key)\n        d = c.get(\"date\")\n        if d:\n            try:\n                dt = datetime.fromisoformat(d.replace(\"Z\", \"+00:00\"))\n                if (newest is None) or (dt > newest):\n                    newest = dt\n            except Exception:\n                pass\n    return authors, newest\n\n\ndef _contributors_score(n: int) -> float:\n    return 0.0 if n <= 0 else min(1.0, math.log1p(n) / math.log(6))\n\n\ndef _freshness_score(latest: Optional[datetime]) -> float:\n    if not latest:\n        return 0.0\n    days = max(0, min(LOOKBACK_DAYS, (datetime.now(timezone.utc) - latest).days))\n    return 1.0 - (days / LOOKBACK_DAYS)\n\n\ndef _combine(c: float, f: float) -> float:\n    return max(0.0, min(1.0, 0.7 * c + 0.3 * f))\n\n\ndef _find_github_url_from_card_md(repo_id: str) -> Optional[str]:\n    \"\"\"Read the HF model card markdown and extract the first GitHub link.\"\"\"\n    try:\n        # Force 'Any' from huggingface-hub to become a concrete str\n        md: str = str(ModelCard.load(repo_id).content)\n    except Exception:\n        return None\n\n    m: Optional[Match[str]] = _GH_LINK_RE.search(md)\n    if m is None:\n        return None\n\n    g0: str = m.group(0)  # explicit local variable typed as str\n    return g0\n\n\ndef _find_github_url(info: Any, repo_id: str) -> Optional[str]:\n    \"\"\"Locate a GitHub repo link from HF model card metadata/tags/markdown.\"\"\"\n    card = getattr(info, \"cardData\", None) or {}\n    tags = getattr(info, \"tags\", []) or []\n\n    gh_url = card.get(\"code_repository\") or card.get(\"repository\")\n    if isinstance(gh_url, str) and \"github.com\" in gh_url:\n        return gh_url\n\n    for t in tags:\n        if isinstance(t, str) and \"github.com\" in t:\n            return t\n\n    return _find_github_url_from_card_md(repo_id)\n\n\n# --- New helpers for a fairer score ---\n\n\ndef _is_bot(author_login: Optional[str], author_email: Optional[str]) -> bool:\n    if not author_login and not author_email:\n        return False\n    login = (author_login or \"\").lower()\n    email = (author_email or \"\").lower()\n    return (\n        login.endswith(\"[bot]\")\n        or login.endswith(\"-bot\")\n        or login.endswith(\"_bot\")\n        or \"github-actions\" in login\n        or \"bot@\" in email\n        or \"noreply@\" in email\n    )\n\n\ndef _list_commits(\n    o: str, r: str, since_iso: str, branch: Optional[str]\n) -> Optional[list[dict]]:\n    \"\"\"Return commit dicts since 'since_iso', or None if API is unavailable.\"\"\"\n    params: Dict[str, str] = {\"since\": since_iso, \"per_page\": \"100\"}\n    if branch:\n        params[\"sha\"] = branch\n    url = f\"https://api.github.com/repos/{o}/{r}/commits\"\n    commits: list[dict] = []\n\n    for _ in range(8):  # up to ~800 commits via pagination\n        res = _gh_get(url, params=params, timeout=10)\n        if res is None:\n            return None  # ← important: signal 'inconclusive'\n\n        items = res.json()\n        if not isinstance(items, list) or not items:\n            break\n\n        for c in items:\n            login = (c.get(\"author\") or {}).get(\"login\")\n            email = ((c.get(\"commit\") or {}).get(\"author\") or {}).get(\"email\")\n            date_s = ((c.get(\"commit\") or {}).get(\"author\") or {}).get(\"date\")\n            commits.append({\"login\": login, \"email\": email, \"date\": date_s})\n\n        # follow Link: rel=\"next\"\n        link = res.headers.get(\"Link\", \"\")\n        nxt = next(\n            (\n                p[p.find(\"<\") + 1 : p.find(\">\")]\n                for p in link.split(\",\")\n                if 'rel=\"next\"' in p\n            ),\n            None,\n        )\n        if not nxt:\n            break\n        url, params = nxt, {}\n    return commits\n\n\ndef _hhi(shares: list[float]) -> float:\n    return sum(s * s for s in shares)\n\n\ndef _k_for_coverage(counts: list[int], coverage: float = 0.80) -> int:\n    \"\"\"Smallest k authors covering 'coverage' of commits.\"\"\"\n    if not counts:\n        return 0\n    total = sum(counts)\n    need = coverage * total\n    acc, k = 0, 0\n    for c in sorted(counts, reverse=True):\n        acc += c\n        k += 1\n        if acc >= need:\n            break\n    return k\n\n\ndef _freshness(days_since_latest: int, tau: float = 180.0) -> float:\n    # exp decay, 1.0 when fresh, ~0.37 at tau days, ~0.14 at 360d\n    return float(math.exp(-max(0, days_since_latest) / tau))\n\n\ndef _log_norm(n: int, base: float) -> float:\n    return 0.0 if n <= 0 else min(1.0, math.log1p(n) / math.log(base))\n\n\ndef _analyze_commits(commits: list[dict]) -> tuple[int, dict]:\n    \"\"\"\n    Returns (days_since_latest, stats) where stats includes:\n      C_recent (unique humans), counts per human, shares, HHI, K_needed\n    \"\"\"\n    # filter bots + normalize keys\n    humans: Dict[str, int] = {}\n    latest: Optional[datetime] = None\n\n    for c in commits:\n        login = (c.get(\"login\") or \"\") or None\n        email = (c.get(\"email\") or \"\") or None\n        if _is_bot(login, email):\n            continue\n        key = (login or f\"email:{email or 'unknown'}\").lower()\n        humans[key] = humans.get(key, 0) + 1\n\n        d = c.get(\"date\")\n        if d:\n            try:\n                dt = datetime.fromisoformat(d.replace(\"Z\", \"+00:00\"))\n                latest = dt if (latest is None or dt > latest) else latest\n            except Exception:\n                pass\n\n    days_since = (datetime.now(timezone.utc) - latest).days if latest else LOOKBACK_DAYS\n    counts = list(humans.values())\n    total = sum(counts)\n    shares = [c / total for c in counts] if total > 0 else []\n    hhi = _hhi(shares) if total >= 10 else None  # avoid noisy HHI on tiny samples\n    k_needed = _k_for_coverage(counts, 0.80) if total > 0 else 0\n\n    return days_since, {\n        \"C_recent\": len(humans),\n        \"counts\": counts,\n        \"shares\": shares,\n        \"HHI\": hhi,\n        \"K_needed\": k_needed,\n        \"total_commits\": total,\n    }\n\n\ndef _count_lifetime_contributors(o: str, r: str, pages: int = 10) -> int:\n    url = f\"https://api.github.com/repos/{o}/{r}/contributors\"\n    params = {\"per_page\": \"100\", \"anon\": \"1\"}\n    total = 0\n    for _ in range(pages):\n        try:\n            res = requests.get(url, headers=_gh_headers(), params=params, timeout=10)\n        except requests.RequestException:\n            break\n        if res.status_code != 200:\n            break\n        items = res.json()\n        if not isinstance(items, list) or not items:\n            break\n        total += len(items)\n        link = res.headers.get(\"Link\", \"\")\n        nxt = next(\n            (\n                p[p.find(\"<\") + 1 : p.find(\">\")]\n                for p in link.split(\",\")\n                if 'rel=\"next\"' in p\n            ),\n            None,\n        )\n        if not nxt:\n            break\n        url, params = nxt, {}\n    return total\n\n\ndef _score_from_stats(\n    stats: dict,\n    days_since: int,\n    archived: bool,\n    lifetime_commits: int,\n    o: Optional[str] = None,\n    r: Optional[str] = None,\n) -> float:\n    # ---- Active-path components (what you already have) ----\n    C = _log_norm(stats.get(\"C_recent\", 0), base=10.0)\n    F = 0.0 if archived else _freshness(days_since, tau=180.0)\n    L = _log_norm(int(lifetime_commits or 0), base=50.0)\n\n    total = int(stats.get(\"total_commits\", 0))\n    if total >= 10:\n        shares = stats.get(\"shares\", [])\n        hhi = sum(s * s for s in shares) if shares else 1.0\n        D = max(0.0, min(1.0, 1.0 - hhi))\n        k = max(1, int(stats.get(\"K_needed\", 1)))\n        K = min(1.0, 5.0 / float(k))\n    else:\n        D, K = 0.0, 0.0\n\n    # ---- Inactive/archived branch: use lifetime breadth ----\n    inactive = archived or stats.get(\"C_recent\", 0) == 0\n    if inactive and o and r:\n        n_life = _count_lifetime_contributors(o, r)  # unique contributors over history\n        # Breadth from lifetime\n        C_life = 0.0 if n_life <= 0 else min(1.0, math.log1p(n_life) / math.log(6))\n        # Diversity proxy without shares: assume “even-ish” when many people contributed.\n        # Rescale best-case HHI (1/n) to 1.0: D_life = (1 - 1/n) / (1 - 1/∞) ≈ 1 - 1/n\n        D_life = 0.0 if n_life <= 1 else max(0.0, min(1.0, 1.0 - 1.0 / n_life))\n        # Redundancy proxy: more lifetime contributors → more people can cover 80%\n        K_life = min(1.0, n_life / 5.0)  # reaches 1.0 by ~5 contributors\n\n        # Use archived weights (drop F, renormalize) with lifetime signals\n        w = {\"D\": 0.40, \"K\": 0.25, \"C\": 0.20, \"L\": 0.05}  # no F here\n        s = sum(w.values())\n        w = {k: v / s for k, v in w.items()}\n        score = w[\"D\"] * D_life + w[\"K\"] * K_life + w[\"C\"] * C_life + w[\"L\"] * L\n        return max(0.0, min(1.0, float(score)))\n\n    # ---- Active repo blend (your “fair weights”) ----\n    w = {\"D\": 0.40, \"K\": 0.25, \"C\": 0.20, \"F\": 0.10, \"L\": 0.05}\n    score = w[\"D\"] * D + w[\"K\"] * K + w[\"C\"] * C + w[\"F\"] * F + w[\"L\"] * L\n    return max(0.0, min(1.0, float(score)))\n\n\ndef compute(model_url: str) -> MetricResult:\n    t0 = time.perf_counter()\n    try:\n        # 1) Prefer explicit code URL from context\n        code_url = get_code_url(model_url)\n        parsed = _parse_gh(code_url) if code_url else None\n\n        # 2) If none, try HF card to find repo\n        repo_info = None\n        lifetime_commits = 0\n        archived = False\n\n        if not parsed:\n            repo_id, _ = to_repo_id(model_url)\n            info = model_info(repo_id)\n            gh = _find_github_url(info, repo_id)\n            parsed = _parse_gh(gh) if gh else None\n\n        if not parsed:\n            # Nothing to analyze → neutral default\n            return {\n                \"value\": DEFAULT,\n                \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n            }\n\n        o, r = parsed\n\n        # 3) Repo metadata (archived flag, etc.) using safe GET\n        res = _gh_get(f\"https://api.github.com/repos/{o}/{r}\")\n        if res and isinstance(res.json(), dict):\n            repo_info = res.json()\n            archived = bool(repo_info.get(\"archived\", False))\n            # GitHub API doesn't expose lifetime commits directly; keep your fallback\n            lifetime_commits = int(repo_info.get(\"network_count\", 0))\n\n        # 4) Commits in lookback window (safe default-branch lookup)\n        branch = _get_default_branch(o, r)\n        since = (datetime.now(timezone.utc) - timedelta(days=LOOKBACK_DAYS)).isoformat()\n\n        commits = _list_commits(o, r, since, branch)\n        if commits is None:\n            # API unavailable / invalid token / rate-limited → neutral default (do NOT punish)\n            return {\n                \"value\": DEFAULT,\n                \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n            }\n\n        # 5) Analyze & score\n        days_since, stats = _analyze_commits(commits)\n        value = _score_from_stats(\n            stats, days_since, archived, lifetime_commits, o=o, r=r\n        )\n\n        return {\n            \"value\": float(value),\n            \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n        }\n\n    except Exception:\n        # Network/token/surprise → neutral default\n        return {\n            \"value\": DEFAULT,\n            \"latency_ms\": max(1, int((time.perf_counter() - t0) * 1000)),\n        }\n\n\nregister(NAME, FIELD, compute)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/bus_factor.py",
        "start": 1,
        "end": 443,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 4587
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/bus_factor.py",
        "start": 1,
        "end": 443,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 443,
          "column": 2,
          "position": 4587
        }
      }
    },
    {
      "format": "python",
      "lines": 32,
      "fragment": "from __future__ import annotations\n\nfrom typing import Any, Callable, List, Tuple, TypedDict\n\n\nclass MetricResult(TypedDict):\n    value: Any  # float | dict[str, float]\n    latency_ms: int\n\n\n# (name, output_field, compute)\n_REGISTRY: List[Tuple[str, str, Callable[[str], MetricResult]]] = []\n\n\ndef register(\n    name: str, output_field: str, compute: Callable[[str], MetricResult]\n) -> None:\n    _REGISTRY.append((name, output_field, compute))\n\n\ndef registered() -> List[Tuple[str, str, Callable[[str], MetricResult]]]:\n    return list(_REGISTRY)\n\n\ndef clear_registry_for_tests() -> None:  # testing aid\n    _REGISTRY.clear()\n    # ensure re-import re-executes module bodies in tests\n    import sys\n\n    for mod in list(sys.modules):\n        if mod.startswith(\"swe_project.metrics.\") and not mod.endswith(\".base\"):\n            sys.modules.pop(mod, None)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/metrics/base.py",
        "start": 1,
        "end": 32,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 266
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/metrics/base.py",
        "start": 1,
        "end": 32,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 32,
          "column": 2,
          "position": 266
        }
      }
    },
    {
      "format": "python",
      "lines": 16,
      "fragment": "from __future__ import annotations\n\nimport os\nfrom typing import Iterable\n\n_DEFAULT_EXTS = (\".safetensors\", \".bin\", \".onnx\", \".tflite\", \".h5\", \".pt\")\n\n\ndef total_weight_bytes(root: str, exts: Iterable[str] = _DEFAULT_EXTS) -> int:\n    exts = tuple(e.lower() for e in exts)\n    total = 0\n    for d, _, files in os.walk(root):\n        for f in files:\n            if f.lower().endswith(exts):\n                total += os.path.getsize(os.path.join(d, f))\n    return total",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/weights.py",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 6,
          "position": 178
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/weights.py",
        "start": 1,
        "end": 16,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 16,
          "column": 6,
          "position": 178
        }
      }
    },
    {
      "format": "python",
      "lines": 44,
      "fragment": "from __future__ import annotations\n\nfrom dataclasses import dataclass\nfrom threading import RLock\nfrom typing import Dict, Optional\n\n\n@dataclass(frozen=True)\nclass Triplet:\n    model: str\n    code: Optional[str] = None\n    dataset: Optional[str] = None\n\n\n_MODEL_TO_CTX: Dict[str, Triplet] = {}\n_LOCK = RLock()\n\n\ndef clear() -> None:\n    with _LOCK:\n        _MODEL_TO_CTX.clear()\n\n\ndef set_context(\n    model_url: str, code_url: Optional[str], dataset_url: Optional[str]\n) -> None:\n    with _LOCK:\n        _MODEL_TO_CTX[model_url] = Triplet(\n            model=model_url,\n            code=(code_url or None),\n            dataset=(dataset_url or None),\n        )\n\n\ndef get_code_url(model_url: str) -> Optional[str]:\n    with _LOCK:\n        t = _MODEL_TO_CTX.get(model_url)\n        return t.code if t else None\n\n\ndef get_dataset_url(model_url: str) -> Optional[str]:\n    with _LOCK:\n        t = _MODEL_TO_CTX.get(model_url)\n        return t.dataset if t else None",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/url_ctx.py",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 330
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/url_ctx.py",
        "start": 1,
        "end": 44,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 44,
          "column": 5,
          "position": 330
        }
      }
    },
    {
      "format": "python",
      "lines": 25,
      "fragment": "from __future__ import annotations\n\nfrom typing import Dict\n\n# Adjust and document these report\nDEFAULT_WEIGHTS: Dict[str, float] = {\n    \"ramp_up_time\": 0.10,\n    \"bus_factor\": 0.05,\n    \"license\": 0.10,\n    \"size_score\": 0.05,  # average across device scores\n    \"dataset_and_code_score\": 0.10,\n    \"dataset_quality\": 0.15,\n    \"code_quality\": 0.25,\n    \"performance_claims\": 0.20,\n}\n\n\ndef combine(scalars: Dict[str, float]) -> float:\n    wsum = sum(DEFAULT_WEIGHTS.values()) or 1.0\n    total = 0.0\n    for k, w in DEFAULT_WEIGHTS.items():\n        total += w * float(scalars.get(k, 0.0))\n    # clamp\n    total = total / wsum\n    return max(0.0, min(1.0, total))",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/scoring.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 212
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/scoring.py",
        "start": 1,
        "end": 25,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 25,
          "column": 2,
          "position": 212
        }
      }
    },
    {
      "format": "python",
      "lines": 81,
      "fragment": "from __future__ import annotations\n\nfrom typing import Optional, Tuple\nfrom urllib.parse import urlparse\n\n_BLOCK = {\"datasets\", \"spaces\", \"models\", \"docs\"}\n\n\ndef to_repo_id(hf_url: str) -> Tuple[str, Optional[str]]:\n    \"\"\"\n    Normalize Hugging Face model URLs to ('org/name' OR 'name', optional_branch).\n\n    Accepts forms like:\n      https://huggingface.co/org/name\n      https://huggingface.co/name                     # root-level repo (e.g., gpt2)\n      https://huggingface.co/org/name/\n      https://huggingface.co/org/name/tree/main\n      https://huggingface.co/org/name/resolve/main/pytorch_model.bin\n      http://www.huggingface.co/org/name?foo=bar\n\n    Returns:\n      (repo_id, branch) where repo_id is NEVER None (kept as str for metrics),\n      and branch may be None.\n      If not an HF URL, we **return the original input string** (backward compatible).\n    \"\"\"\n    s = (hf_url or \"\").strip()\n    if not s:\n        return hf_url.strip(), None\n\n    # Allow bare paths like \"huggingface.co/org/name\"\n    if \"://\" not in s:\n        s = \"https://\" + s\n\n    p = urlparse(s)\n    # Accept any host that ends with huggingface.co (incl. enterprise subdomains)\n    if not p.netloc.endswith(\"huggingface.co\"):\n        # Not an HF URL; preserve old behavior so metrics don't crash\n        return hf_url.strip(), None\n\n    parts = [seg for seg in p.path.split(\"/\") if seg]  # remove empty segments\n    if not parts:\n        # No repo segment; preserve old behavior\n        return hf_url.strip(), None\n\n    # repo_id can be 1-seg (root-level) or 2-seg (org/name)\n    branch: Optional[str] = None\n    if len(parts) >= 2:\n        repo_id = f\"{parts[0]}/{parts[1]}\"\n        rest = parts[2:]\n    else:\n        repo_id = parts[0]\n        rest = []\n\n    # Handle /tree/<branch> or /resolve/<branch>/...\n    if len(rest) >= 2 and rest[0] in {\"tree\", \"resolve\"}:\n        branch = rest[1]\n\n    return repo_id, branch\n\n\ndef is_hf_model_url(hf_url: str) -> bool:\n    \"\"\"\n    True iff the URL points to a Hugging Face *model* repo.\n    Accepts root-level (e.g., https://huggingface.co/gpt2) and org/name.\n    Excludes datasets/spaces/docs/models sections.\n    \"\"\"\n    s = (hf_url or \"\").strip()\n    if not s:\n        return False\n    if \"://\" not in s:\n        s = \"https://\" + s\n    p = urlparse(s)\n    if not p.netloc.endswith(\"huggingface.co\"):\n        return False\n    parts = [seg for seg in p.path.split(\"/\") if seg]\n    if not parts:\n        return False\n    if parts[0] in _BLOCK:\n        return False\n    # At least one segment (root-level) is OK; second segment (org/name) also OK.\n    return True",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/model_url.py",
        "start": 1,
        "end": 81,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 81,
          "column": 5,
          "position": 532
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/model_url.py",
        "start": 1,
        "end": 81,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 81,
          "column": 5,
          "position": 532
        }
      }
    },
    {
      "format": "python",
      "lines": 50,
      "fragment": "from __future__ import annotations\n\nfrom typing import Any, Optional\n\nfrom huggingface_hub import HfApi, snapshot_download\nfrom tqdm.auto import tqdm  # needed to silence the progress bars\n\n_api = HfApi()\n\n\ndef model_info(repo_id: str, revision: Optional[str] = None) -> Any:\n    \"\"\"\n    Thin wrapper around HfApi.model_info that tolerates older/test fakes\n    which may not accept keyword args like 'revision' or 'files_metadata'.\n    \"\"\"\n    try:\n        return _api.model_info(repo_id, revision=revision, files_metadata=True)\n    except TypeError:\n        # test doubles or older clients without kwargs\n        return _api.model_info(repo_id)\n\n\ndef dataset_info(repo_id: str, revision: Optional[str] = None) -> Any:\n    \"\"\"\n    Similar tolerance for dataset_info (some fakes don't accept kwargs).\n    \"\"\"\n    try:\n        return _api.dataset_info(repo_id, revision=revision, files_metadata=True)\n    except TypeError:\n        return _api.dataset_info(repo_id)\n\n\n# this is to silence the progress bars from huggingface_hub snapshot_download\nclass SilentTqdm(tqdm):\n    def __init__(self, *args, **kwargs):\n        super().__init__(*args, **kwargs, disable=True)\n\n\n# what we did was to create a subclass of tqdm that is always disabled, and pass it to snapshot_download\n\n\ndef download_snapshot(repo_id: str, allow_patterns):\n    return str(\n        snapshot_download(\n            repo_id=repo_id,\n            allow_patterns=allow_patterns,\n            local_dir_use_symlinks=False,\n            tqdm_class=SilentTqdm,\n        )\n    )",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/hf_client.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 311
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/hf_client.py",
        "start": 1,
        "end": 50,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 50,
          "column": 2,
          "position": 311
        }
      }
    },
    {
      "format": "python",
      "lines": 27,
      "fragment": "from __future__ import annotations\n\nfrom concurrent.futures import ThreadPoolExecutor, as_completed\nfrom typing import Any, Callable, Dict, List, Tuple\n\nEXEC = ThreadPoolExecutor(max_workers=8)\n\n\ndef run_parallel(\n    tasks: List[Tuple[str, Callable[[], Any]]], timeout_s: int = 60\n) -> Dict[str, Any]:\n    \"\"\"\n    tasks: list of (key, fn). Returns {key: fn_result_or_default}.\n    Any exception → {\"value\": 0.0, \"latency_ms\": 0}.\n    \"\"\"\n    futs = {EXEC.submit(fn): key for key, fn in tasks}\n    out: Dict[str, Any] = {}\n    for fut in as_completed(futs, timeout=timeout_s):\n        key = futs[fut]\n        try:\n            out[key] = fut.result()\n        except Exception:\n            out[key] = {\"value\": 0.0, \"latency_ms\": 0}\n    # fill any timeouts/missed\n    for key, _ in tasks:\n        out.setdefault(key, {\"value\": 0.0, \"latency_ms\": 0})\n    return out",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/core/exec_pool.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 269
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/core/exec_pool.py",
        "start": 1,
        "end": 27,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 27,
          "column": 4,
          "position": 269
        }
      }
    },
    {
      "format": "python",
      "lines": 33,
      "fragment": "import logging\nimport os\nimport sys\n\n\ndef setup_logging() -> None:\n    # read env vars\n    log_file = os.getenv(\"LOG_FILE\", \"default.log\")\n    log_level_str = os.getenv(\"LOG_LEVEL\", \"0\").strip()\n\n    # each level mapped to the logging it does\n    level_map = {\n        \"0\": logging.CRITICAL + 1,  # silence\n        \"1\": logging.INFO,\n        \"2\": logging.DEBUG,\n    }\n    log_level = level_map.get(log_level_str, logging.CRITICAL + 1)\n\n    # check if the directory exists\n    log_dir = os.path.dirname(log_file) or \".\"\n    if not os.path.exists(log_dir):\n        # terminate with exit code 1 if directory doesn't exist\n        print(f\"Invalid LOG_FILE path: {log_file}\", file=sys.stderr)\n        sys.exit(1)\n\n    # if directory exists, set up logging normally\n    logging.basicConfig(\n        filename=log_file,\n        level=log_level,\n        format=\"%(asctime)s - [%(levelname)s] - %(message)s\",\n    )\n\n    logging.info(\"Logging initialized with level %s\", log_level_str)",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/logger.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 234
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/logger.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 234
        }
      }
    },
    {
      "format": "python",
      "lines": 57,
      "fragment": "import os\nfrom typing import Dict, List\n\nimport requests\nfrom dotenv import load_dotenv\n\n# Load .env file\nload_dotenv()\n\nAPI_KEY = os.getenv(\"GEN_AI_STUDIO_API_KEY\")\nif not API_KEY:\n    raise RuntimeError(\"Missing GEN_AI_STUDIO_API_KEY in .env\")\n\n# base URL for purdue api\nBASE_URL = \"https://genai.rcac.purdue.edu/api/chat/completions\"\n\n# default model in case env not set\nMODEL = os.getenv(\"LLM_MODEL\", \"llama3.1:latest\")\n\n\ndef ask_llm(\n    messages: List[Dict[str, str]],\n    model: str = MODEL,\n    temperature: float = 0.0,\n) -> str:\n    \"\"\"\n    General-purpose wrapper for Purdue GenAI Studio using raw requests.\n    Sends a list of messages [{role: \"user\"/\"system\", content: \"...\"}]\n    and returns the model's text output as a string.\n    \"\"\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    payload = {\n        \"model\": model,\n        \"messages\": messages,\n        \"temperature\": temperature,\n    }\n\n    try:\n        response = requests.post(BASE_URL, headers=headers, json=payload, timeout=60)\n        response.raise_for_status()\n        data = response.json()\n\n        # parse response\n        content = data[\"choices\"][0][\"message\"][\"content\"]\n        return str(content.strip()) if content else \"\"\n\n    except requests.exceptions.RequestException as e:\n        print(f\"[LLM ERROR] Request failed: {e}\")\n        return \"\"\n    except (KeyError, IndexError) as e:\n        print(f\"[LLM ERROR] Unexpected response format: {e}\")\n        return \"\"",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/llm_client.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 3,
          "position": 347
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/llm_client.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 3,
          "position": 347
        }
      }
    },
    {
      "format": "python",
      "lines": 320,
      "fragment": "\"\"\"\nswe_project.cli\n\nPhase 1 CLI with three commands:\n  install  -> pip install -r requirements.txt (adds --user if not in a venv)\n  score    -> read a CSV file where each row is: code_url, dataset_url, model_url\n              - code_url and dataset_url may be blank\n              - exactly ONE NDJSON line is emitted per valid model_url row\n              - code/dataset are stored in a URL context for metrics to use\n  test     -> run pytest (under coverage if available) and print:\n              \"X/Y test cases passed. Z% line coverage achieved.\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport csv\nimport json\nimport logging\nimport re\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import List, Tuple\n\n# Ensure metric modules auto-register via package import side-effects.\nfrom swe_project import metrics  # noqa: F401\nfrom swe_project.core.exec_pool import run_parallel\nfrom swe_project.core.model_url import is_hf_model_url, to_repo_id\nfrom swe_project.core.scoring import combine\nfrom swe_project.core.url_ctx import clear as clear_url_ctx\nfrom swe_project.core.url_ctx import set_context\nfrom swe_project.logger import setup_logging\nfrom swe_project.metrics.base import registered\n\n\ndef _load_metrics() -> None:\n    \"\"\"\n    Import metric modules for their registration side-effects.\n    Called only by `cmd_score` so `install`/`test` don't require optional deps yet.\n    \"\"\"\n    # Import inside function to avoid ImportError before `install` runs.\n    from swe_project.metrics import bus_factor  # noqa: F401\n    from swe_project.metrics import code_quality  # noqa: F401\n    from swe_project.metrics import dataset_and_code  # noqa: F401\n    from swe_project.metrics import dataset_quality  # noqa: F401\n    from swe_project.metrics import license  # noqa: F401\n    from swe_project.metrics import performance_claims  # noqa: F401\n    from swe_project.metrics import ramp_up_time  # noqa: F401\n    from swe_project.metrics import size_score  # noqa: F401\n\n\n# ---------- helpers ----------\n\n\ndef _run(cmd: List[str]) -> Tuple[int, str, str]:\n    \"\"\"Run a subprocess and capture output.\"\"\"\n    p = subprocess.run(cmd, text=True, capture_output=True)\n    return p.returncode, p.stdout, p.stderr\n\n\ndef _pytest_counts(text: str) -> Tuple[int, int]:\n    \"\"\"Parse pytest summary to (passed, total). Prefer 'collected N items'.\"\"\"\n    m = re.search(r\"collected\\s+(\\d+)\\s+items?\", text)\n    total_hint = int(m.group(1)) if m else 0\n\n    def sum_matches(pattern: str) -> int:\n        s = 0\n        for mm in re.finditer(rf\"(\\d+)\\s+{pattern}\\b\", text):\n            s += int(mm.group(1))\n        return s\n\n    passed = sum_matches(\"passed\")\n    failed = sum_matches(\"failed\")\n    errors = sum_matches(\"error|errors\")\n    skipped = sum_matches(\"skipped\")\n    xfailed = sum_matches(\"xfailed\")\n    xpassed = sum_matches(\"xpassed\")\n\n    total = passed + failed + errors + skipped + xfailed + xpassed\n    if total_hint:\n        total = total_hint\n    return passed, total\n\n\ndef _coverage_percent(text: str) -> int:\n    \"\"\"Grab the TOTAL % from 'coverage report' output.\"\"\"\n    for line in text.splitlines():\n        if line.strip().startswith(\"TOTAL\"):\n            m = re.search(r\"(\\d+)%\\s*$\", line)\n            if m:\n                return int(m.group(1))\n    m2 = re.search(r\"TOTAL.*?(\\d+)%\", text, flags=re.S | re.M)\n    return int(m2.group(1)) if m2 else 0\n\n\ndef _in_venv() -> bool:\n    \"\"\"Detect if Python is running inside a virtual environment.\"\"\"\n    return getattr(sys, \"base_prefix\", sys.prefix) != sys.prefix\n\n\ndef _iter_models_from_csv(path: str):\n    \"\"\"\n    Read CSV rows of the form: code_url, dataset_url, model_url\n    - code_url or dataset_url may be blank\n    - model_url must be either:\n        - a valid Hugging Face model URL, OR\n        - an absolute path to a local repo\n    For each valid row:\n      - store (code,dataset) context for that model\n      - yield the model URL\n    \"\"\"\n    with open(path, \"r\", encoding=\"utf-8\", newline=\"\") as f:\n        reader = csv.reader(f)\n        for row in reader:\n            if not row:\n                continue\n            if row[0].strip().startswith(\"#\"):\n                continue\n\n            cells = [c.strip() for c in row]\n            while len(cells) < 3:\n                cells.insert(0, \"\")\n\n            code_url, dataset_url, model_url = cells[-3], cells[-2], cells[-1]\n\n            if not model_url:\n                continue\n\n            if not is_hf_model_url(model_url):\n                continue\n\n            set_context(model_url, code_url or None, dataset_url or None)\n            yield model_url\n\n\n# ---------- commands ----------\n\n\ndef cmd_install() -> int:\n    logging.info(\"Installing dependencies from requirements.txt ...\")\n\n    args = [sys.executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"]\n    if not _in_venv():\n        args.insert(4, \"--user\")  # only use --user outside venv\n    code, out, err = _run(args)\n    if code == 0:\n        logging.info(\"Dependencies installed.\")\n        return 0\n    print((err or out) or \"Installation failed.\", file=sys.stderr)\n    logging.error(\"Installation failed: %s\", (err or out))\n    return 1\n\n\ndef cmd_score(url_file: str) -> int:\n    \"\"\"\n    Read CSV triplets from `url_file` and emit ONE NDJSON line per MODEL.\n    The metrics can read code/dataset URLs from the shared context.\n    \"\"\"\n    _load_metrics()\n    try:\n        Path(url_file).resolve(strict=True)\n    except OSError as e:\n        logging.error(\"failed to access URL FILE: %s\", e)\n        print(f\"Failed to access URL file '{url_file}': {e}\", file=sys.stderr)\n        print(json.dumps({\"event\": \"error\", \"error\": str(e), \"url_file\": url_file}))\n        return 1\n\n    # fresh context per invocation\n    clear_url_ctx()\n    logging.info(\"Scoring URLs from %s ...\", url_file)\n\n    for u in _iter_models_from_csv(url_file):\n        # Build tasks from registry (each compute(model_url) -> {\"value\",\"latency_ms\"})\n        tasks = []\n        for _, field, compute in registered():\n\n            def _task(func=compute, model=u):\n                def run():\n                    # metrics that need code/dataset will fetch from url_ctx internally\n                    return func(model)\n\n                return run\n\n            tasks.append((field, _task()))\n\n        # Run metrics in parallel\n        t0 = time.perf_counter()\n        results = run_parallel(tasks, timeout_s=90)\n        net_latency_ms = int((time.perf_counter() - t0) * 1000)\n\n        # helpers for safe extraction\n        def _val(name: str) -> float:\n            return float(results.get(name, {}).get(\"value\", 0.0))\n\n        def _lat(name: str) -> int:\n            return int(results.get(name, {}).get(\"latency_ms\", 0))\n\n        # size_score is a dict; ensure all four device keys\n        size_map = results.get(\"size_score\", {}).get(\"value\", {}) or {}\n        for k in (\"raspberry_pi\", \"jetson_nano\", \"desktop_pc\", \"aws_server\"):\n            size_map.setdefault(k, 0.0)\n        size_lat = _lat(\"size_score\")\n\n        # gather scalar metrics for net score; use mean of size_map for its scalar\n        scalars = {\n            \"ramp_up_time\": _val(\"ramp_up_time\"),\n            \"bus_factor\": _val(\"bus_factor\"),\n            \"license\": _val(\"license\"),\n            \"dataset_and_code_score\": _val(\"dataset_and_code_score\"),\n            \"dataset_quality\": _val(\"dataset_quality\"),\n            \"code_quality\": _val(\"code_quality\"),\n            \"performance_claims\": _val(\"performance_claims\"),\n            \"size_score\": (sum(size_map.values()) / 4.0),\n        }\n        net = float(combine(scalars))\n\n        repo_id, _ = to_repo_id(u)  # e.g. \"google-bert/bert-base-uncased\"\n        model_name = re.split(r\"[\\\\/]\", repo_id.rstrip(\"/\\\\\"))[-1]\n\n        payload = {\n            \"name\": model_name,\n            \"category\": \"MODEL\",\n            \"net_score\": round(net, 3),\n            \"net_score_latency\": net_latency_ms,\n            \"ramp_up_time\": scalars[\"ramp_up_time\"],\n            \"ramp_up_time_latency\": _lat(\"ramp_up_time\"),\n            \"bus_factor\": scalars[\"bus_factor\"],\n            \"bus_factor_latency\": _lat(\"bus_factor\"),\n            \"performance_claims\": scalars[\"performance_claims\"],\n            \"performance_claims_latency\": _lat(\"performance_claims\"),\n            \"license\": scalars[\"license\"],\n            \"license_latency\": _lat(\"license\"),\n            \"size_score\": size_map,\n            \"size_score_latency\": size_lat,\n            \"dataset_and_code_score\": scalars[\"dataset_and_code_score\"],\n            \"dataset_and_code_score_latency\": _lat(\"dataset_and_code_score\"),\n            \"dataset_quality\": scalars[\"dataset_quality\"],\n            \"dataset_quality_latency\": _lat(\"dataset_quality\"),\n            \"code_quality\": scalars[\"code_quality\"],\n            \"code_quality_latency\": _lat(\"code_quality\"),\n        }\n        print(json.dumps(payload))\n\n    return 0\n\n\ndef cmd_test() -> int:\n    \"\"\"\n    Run pytest (with coverage if available) and print exactly:\n      'X/Y test cases passed. Z% line coverage achieved.'\n    Always exit 0 so the grader can parse the line.\n    \"\"\"\n    # Silence logging during this command (avoids extra stdout lines)\n    root_logger = logging.getLogger()\n    prev_level = root_logger.level\n    root_logger.setLevel(logging.ERROR)\n\n    try:\n        # Try with coverage first\n        cov_ok = True\n        code, out, err = _run(\n            [sys.executable, \"-m\", \"coverage\", \"run\", \"-m\", \"pytest\", \"tests\"]\n        )\n        if code != 0 and \"No module named coverage\" in (out + err):\n            cov_ok = False\n            code, out, err = _run([sys.executable, \"-m\", \"pytest\", \"tests\"])\n\n        combined = (out or \"\") + \"\\n\" + (err or \"\")\n        passed, total = _pytest_counts(combined)\n\n        percent = 0\n        if cov_ok:\n            _, rep_out, rep_err = _run([sys.executable, \"-m\", \"coverage\", \"report\"])\n            percent = _coverage_percent((rep_out or \"\") + \"\\n\" + (rep_err or \"\"))\n\n        # Print the ONLY line the grader expects to stdout\n        print(f\"{passed}/{total} test cases passed. {percent}% line coverage achieved.\")\n\n        # IMPORTANT: always succeed for the grader\n        return 0\n    finally:\n        root_logger.setLevel(prev_level)\n\n\n# ---------- entrypoint ----------\n\n\ndef main(argv: list[str] | None = None) -> int:\n    setup_logging()\n    logging.info(\"CLI started successfully\")\n    parser = argparse.ArgumentParser(prog=\"run\", description=\"SWE-Project CLI\")\n    sub = parser.add_subparsers(dest=\"cmd\", required=True)\n\n    sub.add_parser(\"install\")\n\n    p_score = sub.add_parser(\"score\")\n    p_score.add_argument(\n        \"url_file\", help=\"CSV file with rows: code_url, dataset_url, model_url\"\n    )\n\n    sub.add_parser(\"test\")\n\n    args = parser.parse_args(argv)\n\n    if args.cmd == \"install\":\n        return cmd_install()\n    if args.cmd == \"score\":\n        return cmd_score(args.url_file)\n    if args.cmd == \"test\":\n        return cmd_test()\n\n    parser.print_help()\n    return 2\n\n\nif __name__ == \"__main__\":\n    # Allows: python -m swe_project.cli ...\n    raise SystemExit(main())",
      "tokens": 0,
      "firstFile": {
        "name": "build/lib/swe_project/cli.py",
        "start": 1,
        "end": 320,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 320,
          "column": 2,
          "position": 2548
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/cli.py",
        "start": 1,
        "end": 320,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 320,
          "column": 2,
          "position": 2548
        }
      }
    },
    {
      "format": "python",
      "lines": 33,
      "fragment": "import logging\nimport os\nimport sys\n\n\ndef setup_logging() -> None:\n    # read env vars\n    log_file = os.getenv(\"LOG_FILE\", \"default.log\")\n    log_level_str = os.getenv(\"LOG_LEVEL\", \"0\").strip()\n\n    # each level mapped to the logging it does\n    level_map = {\n        \"0\": logging.CRITICAL + 1,  # silence\n        \"1\": logging.INFO,\n        \"2\": logging.DEBUG,\n    }\n    log_level = level_map.get(log_level_str, logging.CRITICAL + 1)\n\n    # check if the directory exists\n    log_dir = os.path.dirname(log_file) or \".\"\n    if not os.path.exists(log_dir):\n        # terminate with exit code 1 if directory doesn't exist\n        print(f\"Invalid LOG_FILE path: {log_file}\", file=sys.stderr)\n        sys.exit(1)\n\n    # if directory exists, set up logging normally\n    logging.basicConfig(\n        filename=log_file,\n        level=log_level,\n        format=\"%(asctime)s - [%(levelname)s] - %(message)s\",\n    )\n\n    logging.info(\"Logging initialized with level %s\", log_level_str)",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/logger.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 234
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/logger.py",
        "start": 1,
        "end": 33,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 33,
          "column": 2,
          "position": 234
        }
      }
    },
    {
      "format": "python",
      "lines": 57,
      "fragment": "import os\nfrom typing import Dict, List\n\nimport requests\nfrom dotenv import load_dotenv\n\n# Load .env file\nload_dotenv()\n\nAPI_KEY = os.getenv(\"GEN_AI_STUDIO_API_KEY\")\nif not API_KEY:\n    raise RuntimeError(\"Missing GEN_AI_STUDIO_API_KEY in .env\")\n\n# base URL for purdue api\nBASE_URL = \"https://genai.rcac.purdue.edu/api/chat/completions\"\n\n# default model in case env not set\nMODEL = os.getenv(\"LLM_MODEL\", \"llama3.1:latest\")\n\n\ndef ask_llm(\n    messages: List[Dict[str, str]],\n    model: str = MODEL,\n    temperature: float = 0.0,\n) -> str:\n    \"\"\"\n    General-purpose wrapper for Purdue GenAI Studio using raw requests.\n    Sends a list of messages [{role: \"user\"/\"system\", content: \"...\"}]\n    and returns the model's text output as a string.\n    \"\"\"\n\n    headers = {\n        \"Authorization\": f\"Bearer {API_KEY}\",\n        \"Content-Type\": \"application/json\",\n    }\n\n    payload = {\n        \"model\": model,\n        \"messages\": messages,\n        \"temperature\": temperature,\n    }\n\n    try:\n        response = requests.post(BASE_URL, headers=headers, json=payload, timeout=60)\n        response.raise_for_status()\n        data = response.json()\n\n        # parse response\n        content = data[\"choices\"][0][\"message\"][\"content\"]\n        return str(content.strip()) if content else \"\"\n\n    except requests.exceptions.RequestException as e:\n        print(f\"[LLM ERROR] Request failed: {e}\")\n        return \"\"\n    except (KeyError, IndexError) as e:\n        print(f\"[LLM ERROR] Unexpected response format: {e}\")\n        return \"\"",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/llm_client.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 3,
          "position": 347
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/llm_client.py",
        "start": 1,
        "end": 57,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 57,
          "column": 3,
          "position": 347
        }
      }
    },
    {
      "format": "python",
      "lines": 320,
      "fragment": "\"\"\"\nswe_project.cli\n\nPhase 1 CLI with three commands:\n  install  -> pip install -r requirements.txt (adds --user if not in a venv)\n  score    -> read a CSV file where each row is: code_url, dataset_url, model_url\n              - code_url and dataset_url may be blank\n              - exactly ONE NDJSON line is emitted per valid model_url row\n              - code/dataset are stored in a URL context for metrics to use\n  test     -> run pytest (under coverage if available) and print:\n              \"X/Y test cases passed. Z% line coverage achieved.\"\n\"\"\"\n\nfrom __future__ import annotations\n\nimport argparse\nimport csv\nimport json\nimport logging\nimport re\nimport subprocess\nimport sys\nimport time\nfrom pathlib import Path\nfrom typing import List, Tuple\n\n# Ensure metric modules auto-register via package import side-effects.\nfrom swe_project import metrics  # noqa: F401\nfrom swe_project.core.exec_pool import run_parallel\nfrom swe_project.core.model_url import is_hf_model_url, to_repo_id\nfrom swe_project.core.scoring import combine\nfrom swe_project.core.url_ctx import clear as clear_url_ctx\nfrom swe_project.core.url_ctx import set_context\nfrom swe_project.logger import setup_logging\nfrom swe_project.metrics.base import registered\n\n\ndef _load_metrics() -> None:\n    \"\"\"\n    Import metric modules for their registration side-effects.\n    Called only by `cmd_score` so `install`/`test` don't require optional deps yet.\n    \"\"\"\n    # Import inside function to avoid ImportError before `install` runs.\n    from swe_project.metrics import bus_factor  # noqa: F401\n    from swe_project.metrics import code_quality  # noqa: F401\n    from swe_project.metrics import dataset_and_code  # noqa: F401\n    from swe_project.metrics import dataset_quality  # noqa: F401\n    from swe_project.metrics import license  # noqa: F401\n    from swe_project.metrics import performance_claims  # noqa: F401\n    from swe_project.metrics import ramp_up_time  # noqa: F401\n    from swe_project.metrics import size_score  # noqa: F401\n\n\n# ---------- helpers ----------\n\n\ndef _run(cmd: List[str]) -> Tuple[int, str, str]:\n    \"\"\"Run a subprocess and capture output.\"\"\"\n    p = subprocess.run(cmd, text=True, capture_output=True)\n    return p.returncode, p.stdout, p.stderr\n\n\ndef _pytest_counts(text: str) -> Tuple[int, int]:\n    \"\"\"Parse pytest summary to (passed, total). Prefer 'collected N items'.\"\"\"\n    m = re.search(r\"collected\\s+(\\d+)\\s+items?\", text)\n    total_hint = int(m.group(1)) if m else 0\n\n    def sum_matches(pattern: str) -> int:\n        s = 0\n        for mm in re.finditer(rf\"(\\d+)\\s+{pattern}\\b\", text):\n            s += int(mm.group(1))\n        return s\n\n    passed = sum_matches(\"passed\")\n    failed = sum_matches(\"failed\")\n    errors = sum_matches(\"error|errors\")\n    skipped = sum_matches(\"skipped\")\n    xfailed = sum_matches(\"xfailed\")\n    xpassed = sum_matches(\"xpassed\")\n\n    total = passed + failed + errors + skipped + xfailed + xpassed\n    if total_hint:\n        total = total_hint\n    return passed, total\n\n\ndef _coverage_percent(text: str) -> int:\n    \"\"\"Grab the TOTAL % from 'coverage report' output.\"\"\"\n    for line in text.splitlines():\n        if line.strip().startswith(\"TOTAL\"):\n            m = re.search(r\"(\\d+)%\\s*$\", line)\n            if m:\n                return int(m.group(1))\n    m2 = re.search(r\"TOTAL.*?(\\d+)%\", text, flags=re.S | re.M)\n    return int(m2.group(1)) if m2 else 0\n\n\ndef _in_venv() -> bool:\n    \"\"\"Detect if Python is running inside a virtual environment.\"\"\"\n    return getattr(sys, \"base_prefix\", sys.prefix) != sys.prefix\n\n\ndef _iter_models_from_csv(path: str):\n    \"\"\"\n    Read CSV rows of the form: code_url, dataset_url, model_url\n    - code_url or dataset_url may be blank\n    - model_url must be either:\n        - a valid Hugging Face model URL, OR\n        - an absolute path to a local repo\n    For each valid row:\n      - store (code,dataset) context for that model\n      - yield the model URL\n    \"\"\"\n    with open(path, \"r\", encoding=\"utf-8\", newline=\"\") as f:\n        reader = csv.reader(f)\n        for row in reader:\n            if not row:\n                continue\n            if row[0].strip().startswith(\"#\"):\n                continue\n\n            cells = [c.strip() for c in row]\n            while len(cells) < 3:\n                cells.insert(0, \"\")\n\n            code_url, dataset_url, model_url = cells[-3], cells[-2], cells[-1]\n\n            if not model_url:\n                continue\n\n            if not is_hf_model_url(model_url):\n                continue\n\n            set_context(model_url, code_url or None, dataset_url or None)\n            yield model_url\n\n\n# ---------- commands ----------\n\n\ndef cmd_install() -> int:\n    logging.info(\"Installing dependencies from requirements.txt ...\")\n\n    args = [sys.executable, \"-m\", \"pip\", \"install\", \"-r\", \"requirements.txt\"]\n    if not _in_venv():\n        args.insert(4, \"--user\")  # only use --user outside venv\n    code, out, err = _run(args)\n    if code == 0:\n        logging.info(\"Dependencies installed.\")\n        return 0\n    print((err or out) or \"Installation failed.\", file=sys.stderr)\n    logging.error(\"Installation failed: %s\", (err or out))\n    return 1\n\n\ndef cmd_score(url_file: str) -> int:\n    \"\"\"\n    Read CSV triplets from `url_file` and emit ONE NDJSON line per MODEL.\n    The metrics can read code/dataset URLs from the shared context.\n    \"\"\"\n    _load_metrics()\n    try:\n        Path(url_file).resolve(strict=True)\n    except OSError as e:\n        logging.error(\"failed to access URL FILE: %s\", e)\n        print(f\"Failed to access URL file '{url_file}': {e}\", file=sys.stderr)\n        print(json.dumps({\"event\": \"error\", \"error\": str(e), \"url_file\": url_file}))\n        return 1\n\n    # fresh context per invocation\n    clear_url_ctx()\n    logging.info(\"Scoring URLs from %s ...\", url_file)\n\n    for u in _iter_models_from_csv(url_file):\n        # Build tasks from registry (each compute(model_url) -> {\"value\",\"latency_ms\"})\n        tasks = []\n        for _, field, compute in registered():\n\n            def _task(func=compute, model=u):\n                def run():\n                    # metrics that need code/dataset will fetch from url_ctx internally\n                    return func(model)\n\n                return run\n\n            tasks.append((field, _task()))\n\n        # Run metrics in parallel\n        t0 = time.perf_counter()\n        results = run_parallel(tasks, timeout_s=90)\n        net_latency_ms = int((time.perf_counter() - t0) * 1000)\n\n        # helpers for safe extraction\n        def _val(name: str) -> float:\n            return float(results.get(name, {}).get(\"value\", 0.0))\n\n        def _lat(name: str) -> int:\n            return int(results.get(name, {}).get(\"latency_ms\", 0))\n\n        # size_score is a dict; ensure all four device keys\n        size_map = results.get(\"size_score\", {}).get(\"value\", {}) or {}\n        for k in (\"raspberry_pi\", \"jetson_nano\", \"desktop_pc\", \"aws_server\"):\n            size_map.setdefault(k, 0.0)\n        size_lat = _lat(\"size_score\")\n\n        # gather scalar metrics for net score; use mean of size_map for its scalar\n        scalars = {\n            \"ramp_up_time\": _val(\"ramp_up_time\"),\n            \"bus_factor\": _val(\"bus_factor\"),\n            \"license\": _val(\"license\"),\n            \"dataset_and_code_score\": _val(\"dataset_and_code_score\"),\n            \"dataset_quality\": _val(\"dataset_quality\"),\n            \"code_quality\": _val(\"code_quality\"),\n            \"performance_claims\": _val(\"performance_claims\"),\n            \"size_score\": (sum(size_map.values()) / 4.0),\n        }\n        net = float(combine(scalars))\n\n        repo_id, _ = to_repo_id(u)  # e.g. \"google-bert/bert-base-uncased\"\n        model_name = re.split(r\"[\\\\/]\", repo_id.rstrip(\"/\\\\\"))[-1]\n\n        payload = {\n            \"name\": model_name,\n            \"category\": \"MODEL\",\n            \"net_score\": round(net, 3),\n            \"net_score_latency\": net_latency_ms,\n            \"ramp_up_time\": scalars[\"ramp_up_time\"],\n            \"ramp_up_time_latency\": _lat(\"ramp_up_time\"),\n            \"bus_factor\": scalars[\"bus_factor\"],\n            \"bus_factor_latency\": _lat(\"bus_factor\"),\n            \"performance_claims\": scalars[\"performance_claims\"],\n            \"performance_claims_latency\": _lat(\"performance_claims\"),\n            \"license\": scalars[\"license\"],\n            \"license_latency\": _lat(\"license\"),\n            \"size_score\": size_map,\n            \"size_score_latency\": size_lat,\n            \"dataset_and_code_score\": scalars[\"dataset_and_code_score\"],\n            \"dataset_and_code_score_latency\": _lat(\"dataset_and_code_score\"),\n            \"dataset_quality\": scalars[\"dataset_quality\"],\n            \"dataset_quality_latency\": _lat(\"dataset_quality\"),\n            \"code_quality\": scalars[\"code_quality\"],\n            \"code_quality_latency\": _lat(\"code_quality\"),\n        }\n        print(json.dumps(payload))\n\n    return 0\n\n\ndef cmd_test() -> int:\n    \"\"\"\n    Run pytest (with coverage if available) and print exactly:\n      'X/Y test cases passed. Z% line coverage achieved.'\n    Always exit 0 so the grader can parse the line.\n    \"\"\"\n    # Silence logging during this command (avoids extra stdout lines)\n    root_logger = logging.getLogger()\n    prev_level = root_logger.level\n    root_logger.setLevel(logging.ERROR)\n\n    try:\n        # Try with coverage first\n        cov_ok = True\n        code, out, err = _run(\n            [sys.executable, \"-m\", \"coverage\", \"run\", \"-m\", \"pytest\", \"tests\"]\n        )\n        if code != 0 and \"No module named coverage\" in (out + err):\n            cov_ok = False\n            code, out, err = _run([sys.executable, \"-m\", \"pytest\", \"tests\"])\n\n        combined = (out or \"\") + \"\\n\" + (err or \"\")\n        passed, total = _pytest_counts(combined)\n\n        percent = 0\n        if cov_ok:\n            _, rep_out, rep_err = _run([sys.executable, \"-m\", \"coverage\", \"report\"])\n            percent = _coverage_percent((rep_out or \"\") + \"\\n\" + (rep_err or \"\"))\n\n        # Print the ONLY line the grader expects to stdout\n        print(f\"{passed}/{total} test cases passed. {percent}% line coverage achieved.\")\n\n        # IMPORTANT: always succeed for the grader\n        return 0\n    finally:\n        root_logger.setLevel(prev_level)\n\n\n# ---------- entrypoint ----------\n\n\ndef main(argv: list[str] | None = None) -> int:\n    setup_logging()\n    logging.info(\"CLI started successfully\")\n    parser = argparse.ArgumentParser(prog=\"run\", description=\"SWE-Project CLI\")\n    sub = parser.add_subparsers(dest=\"cmd\", required=True)\n\n    sub.add_parser(\"install\")\n\n    p_score = sub.add_parser(\"score\")\n    p_score.add_argument(\n        \"url_file\", help=\"CSV file with rows: code_url, dataset_url, model_url\"\n    )\n\n    sub.add_parser(\"test\")\n\n    args = parser.parse_args(argv)\n\n    if args.cmd == \"install\":\n        return cmd_install()\n    if args.cmd == \"score\":\n        return cmd_score(args.url_file)\n    if args.cmd == \"test\":\n        return cmd_test()\n\n    parser.print_help()\n    return 2\n\n\nif __name__ == \"__main__\":\n    # Allows: python -m swe_project.cli ...\n    raise SystemExit(main())",
      "tokens": 0,
      "firstFile": {
        "name": "src/swe_project/cli.py",
        "start": 1,
        "end": 320,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 320,
          "column": 2,
          "position": 2548
        }
      },
      "secondFile": {
        "name": ".venv/lib/python3.14/site-packages/swe_project/cli.py",
        "start": 1,
        "end": 320,
        "startLoc": {
          "line": 1,
          "column": 1,
          "position": 0
        },
        "endLoc": {
          "line": 320,
          "column": 2,
          "position": 2548
        }
      }
    }
  ],
  "filename": "/Users/luis/.nvm/versions/node/v22.21.0/lib/node_modules/jscpd/node_modules/@jscpd/html-reporter/dist/templates/main.pug"
}